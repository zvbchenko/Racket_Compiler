raco test: (submod "a7_end.rkt" grading)
Testing End-to-end...
expose-basic-blocks: (module (define L.main.2777 () (begin (nop) (set! rsi 8) (set! rdi 32) (nop) (jump L.fact_loop.2761))) (define L.not.2776 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.2775 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.2774 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.2773 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.2772 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.2771 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.2770 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.2769 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.2768 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.2767 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.2766 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.2765 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.2764 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.2763 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.2762 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fact_loop.2761 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! rbp (+ rbp 32)) (return-point L.rp.2778 (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.2778) (jump L.eq?.2762))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.2779 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.2779) (jump L.-.2765))) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (return-point L.rp.2780 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.2780) (jump L.*.2763))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.2761))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.2778) (jump L.eq?.2762))
process-rp: (jump L.eq?.2762)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.2779 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.2779) (jump L.-.2765))) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (return-point L.rp.2780 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.2780) (jump L.*.2763))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.2761)))
create-return-point-blocktwo: (return-point L.rp.2778 (begin ((if (neq? r15 6) (jump L.tmp.3113) (jump L.tmp.3115)) (set! r15 rax) (set! rbp (- rbp 32)))))
parse-rp-tail (begin ((set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.3113) (jump L.tmp.3115))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.3113) (jump L.tmp.3115))
parse-rp-tail (jump L.tmp.3113)
parse-rp-tail (jump L.tmp.3115)
flatten (module (define L.main.3133 () (begin (nop) (set! rsi 8) (set! rdi 32) (nop) (jump L.fact_loop.3117))) (define L.fact_loop.3117 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.3134) (jump L.eq?.3118))) (define L.rp.3134 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.3311) (jump L.nest_f.3312)))) (define L.rp.3135 () (begin (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.3136) (jump L.*.3119))) (define L.rp.3136 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.3117))) (define L.nest_t.3311 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.3312 () (begin (set! rbp (+ rbp 32)) (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.3135) (jump L.-.3121))) (define L.eq?.3118 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.3309) (jump L.nest_f.3310)))) (define L.nest_t.3309 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3310 () (begin (set! rax 6) (jump r15))) (define L.*.3119 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3307) (jump L.nest_f.3308)))) (define L.nest_t.3291 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3292 () (begin (set! rax 318) (jump r15))) (define L.nest_t.3293 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3294 () (begin (set! rax 318) (jump r15))) (define L.nest_t.3295 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3291) (jump L.nest_f.3292)))) (define L.nest_f.3296 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3293) (jump L.nest_f.3294)))) (define L.nest_t.3297 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3295) (jump L.nest_f.3296)))) (define L.nest_f.3298 () (begin (set! rax 62) (jump r15))) (define L.nest_t.3299 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3300 () (begin (set! rax 318) (jump r15))) (define L.nest_t.3301 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3302 () (begin (set! rax 318) (jump r15))) (define L.nest_t.3303 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3299) (jump L.nest_f.3300)))) (define L.nest_f.3304 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3301) (jump L.nest_f.3302)))) (define L.nest_t.3305 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3303) (jump L.nest_f.3304)))) (define L.nest_f.3306 () (begin (set! rax 62) (jump r15))) (define L.nest_t.3307 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3297) (jump L.nest_f.3298)))) (define L.nest_f.3308 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3305) (jump L.nest_f.3306)))) (define L.+.3120 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3289) (jump L.nest_f.3290)))) (define L.nest_t.3273 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3274 () (begin (set! rax 830) (jump r15))) (define L.nest_t.3275 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3276 () (begin (set! rax 830) (jump r15))) (define L.nest_t.3277 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3273) (jump L.nest_f.3274)))) (define L.nest_f.3278 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3275) (jump L.nest_f.3276)))) (define L.nest_t.3279 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3277) (jump L.nest_f.3278)))) (define L.nest_f.3280 () (begin (set! rax 574) (jump r15))) (define L.nest_t.3281 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3282 () (begin (set! rax 830) (jump r15))) (define L.nest_t.3283 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3284 () (begin (set! rax 830) (jump r15))) (define L.nest_t.3285 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3281) (jump L.nest_f.3282)))) (define L.nest_f.3286 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3283) (jump L.nest_f.3284)))) (define L.nest_t.3287 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3285) (jump L.nest_f.3286)))) (define L.nest_f.3288 () (begin (set! rax 574) (jump r15))) (define L.nest_t.3289 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3279) (jump L.nest_f.3280)))) (define L.nest_f.3290 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3287) (jump L.nest_f.3288)))) (define L.-.3121 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3271) (jump L.nest_f.3272)))) (define L.nest_t.3255 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3256 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.3257 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3258 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.3259 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3255) (jump L.nest_f.3256)))) (define L.nest_f.3260 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3257) (jump L.nest_f.3258)))) (define L.nest_t.3261 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3259) (jump L.nest_f.3260)))) (define L.nest_f.3262 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.3263 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3264 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.3265 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.3266 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.3267 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3263) (jump L.nest_f.3264)))) (define L.nest_f.3268 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3265) (jump L.nest_f.3266)))) (define L.nest_t.3269 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3267) (jump L.nest_f.3268)))) (define L.nest_f.3270 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.3271 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3261) (jump L.nest_f.3262)))) (define L.nest_f.3272 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3269) (jump L.nest_f.3270)))) (define L.<.3122 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3253) (jump L.nest_f.3254)))) (define L.nest_t.3229 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3230 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3231 () (if (< r14 r13) (jump L.nest_t.3229) (jump L.nest_f.3230))) (define L.nest_f.3232 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.3233 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3234 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3235 () (if (< r14 r13) (jump L.nest_t.3233) (jump L.nest_f.3234))) (define L.nest_f.3236 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.3237 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3231) (jump L.nest_f.3232)))) (define L.nest_f.3238 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3235) (jump L.nest_f.3236)))) (define L.nest_t.3239 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3237) (jump L.nest_f.3238)))) (define L.nest_f.3240 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.3241 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3242 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3243 () (if (< r14 r13) (jump L.nest_t.3241) (jump L.nest_f.3242))) (define L.nest_f.3244 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.3245 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3246 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3247 () (if (< r14 r13) (jump L.nest_t.3245) (jump L.nest_f.3246))) (define L.nest_f.3248 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.3249 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3243) (jump L.nest_f.3244)))) (define L.nest_f.3250 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3247) (jump L.nest_f.3248)))) (define L.nest_t.3251 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3249) (jump L.nest_f.3250)))) (define L.nest_f.3252 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.3253 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3239) (jump L.nest_f.3240)))) (define L.nest_f.3254 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3251) (jump L.nest_f.3252)))) (define L.<=.3123 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3227) (jump L.nest_f.3228)))) (define L.nest_t.3203 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3204 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3205 () (if (<= r14 r13) (jump L.nest_t.3203) (jump L.nest_f.3204))) (define L.nest_f.3206 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.3207 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3208 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3209 () (if (<= r14 r13) (jump L.nest_t.3207) (jump L.nest_f.3208))) (define L.nest_f.3210 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.3211 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3205) (jump L.nest_f.3206)))) (define L.nest_f.3212 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3209) (jump L.nest_f.3210)))) (define L.nest_t.3213 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3211) (jump L.nest_f.3212)))) (define L.nest_f.3214 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.3215 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3216 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3217 () (if (<= r14 r13) (jump L.nest_t.3215) (jump L.nest_f.3216))) (define L.nest_f.3218 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.3219 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3220 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3221 () (if (<= r14 r13) (jump L.nest_t.3219) (jump L.nest_f.3220))) (define L.nest_f.3222 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.3223 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3217) (jump L.nest_f.3218)))) (define L.nest_f.3224 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3221) (jump L.nest_f.3222)))) (define L.nest_t.3225 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3223) (jump L.nest_f.3224)))) (define L.nest_f.3226 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.3227 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3213) (jump L.nest_f.3214)))) (define L.nest_f.3228 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3225) (jump L.nest_f.3226)))) (define L.>.3124 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3201) (jump L.nest_f.3202)))) (define L.nest_t.3177 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3178 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3179 () (if (> r14 r13) (jump L.nest_t.3177) (jump L.nest_f.3178))) (define L.nest_f.3180 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.3181 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3182 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3183 () (if (> r14 r13) (jump L.nest_t.3181) (jump L.nest_f.3182))) (define L.nest_f.3184 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.3185 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3179) (jump L.nest_f.3180)))) (define L.nest_f.3186 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3183) (jump L.nest_f.3184)))) (define L.nest_t.3187 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3185) (jump L.nest_f.3186)))) (define L.nest_f.3188 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.3189 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3190 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3191 () (if (> r14 r13) (jump L.nest_t.3189) (jump L.nest_f.3190))) (define L.nest_f.3192 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.3193 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3194 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3195 () (if (> r14 r13) (jump L.nest_t.3193) (jump L.nest_f.3194))) (define L.nest_f.3196 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.3197 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3191) (jump L.nest_f.3192)))) (define L.nest_f.3198 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3195) (jump L.nest_f.3196)))) (define L.nest_t.3199 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3197) (jump L.nest_f.3198)))) (define L.nest_f.3200 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.3201 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3187) (jump L.nest_f.3188)))) (define L.nest_f.3202 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3199) (jump L.nest_f.3200)))) (define L.>=.3125 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3175) (jump L.nest_f.3176)))) (define L.nest_t.3151 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3152 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3153 () (if (>= r14 r13) (jump L.nest_t.3151) (jump L.nest_f.3152))) (define L.nest_f.3154 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.3155 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3156 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3157 () (if (>= r14 r13) (jump L.nest_t.3155) (jump L.nest_f.3156))) (define L.nest_f.3158 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.3159 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3153) (jump L.nest_f.3154)))) (define L.nest_f.3160 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3157) (jump L.nest_f.3158)))) (define L.nest_t.3161 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3159) (jump L.nest_f.3160)))) (define L.nest_f.3162 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.3163 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3164 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3165 () (if (>= r14 r13) (jump L.nest_t.3163) (jump L.nest_f.3164))) (define L.nest_f.3166 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.3167 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3168 () (begin (set! rax 6) (jump r15))) (define L.nest_t.3169 () (if (>= r14 r13) (jump L.nest_t.3167) (jump L.nest_f.3168))) (define L.nest_f.3170 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.3171 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3165) (jump L.nest_f.3166)))) (define L.nest_f.3172 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3169) (jump L.nest_f.3170)))) (define L.nest_t.3173 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.3171) (jump L.nest_f.3172)))) (define L.nest_f.3174 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.3175 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.3161) (jump L.nest_f.3162)))) (define L.nest_f.3176 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.3173) (jump L.nest_f.3174)))) (define L.fixnum?.3126 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.3149) (jump L.nest_f.3150)))) (define L.nest_t.3149 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3150 () (begin (set! rax 6) (jump r15))) (define L.boolean?.3127 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.3147) (jump L.nest_f.3148)))) (define L.nest_t.3147 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3148 () (begin (set! rax 6) (jump r15))) (define L.empty?.3128 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.3145) (jump L.nest_f.3146)))) (define L.nest_t.3145 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3146 () (begin (set! rax 6) (jump r15))) (define L.void?.3129 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.3143) (jump L.nest_f.3144)))) (define L.nest_t.3143 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3144 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.3130 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.3141) (jump L.nest_f.3142)))) (define L.nest_t.3141 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3142 () (begin (set! rax 6) (jump r15))) (define L.error?.3131 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.3139) (jump L.nest_f.3140)))) (define L.nest_t.3139 () (begin (set! rax 14) (jump r15))) (define L.nest_f.3140 () (begin (set! rax 6) (jump r15))) (define L.not.3132 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.3137) (jump L.nest_f.3138)))) (define L.nest_t.3137 () (begin (set! rax 6) (jump r15))) (define L.nest_f.3138 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15857998451585799845194.s:66: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:157: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:157: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:244: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:244: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:331: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:331: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:442: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:442: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:553: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:553: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:664: error: symbol `L.' redefined
/var/tmp/rkt15857998451585799845194.s:664: error: parser: instruction expected
/var/tmp/rkt15857998451585799845194.s:823: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.3525:
  mov rsi, 8
  mov rdi, 32
  jmp L.fact_loop.3509
L.fact_loop.3509:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 16], rdi
  mov QWORD [rbp + 8], rsi
  add rbp, 32
  mov rsi, 0
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.3526
  jmp L.eq?.3510
L.rp.3526:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.3703
  jmp L.nest_f.3704
L.rp.3527:
  sub rbp, 32
  mov QWORD [rbp + 24], rax
  add rbp, 32
  mov rsi, QWORD [rbp + -16]
  mov rdi, QWORD [rbp + -24]
  mov r15, L.rp.3528
  jmp L.*.3511
L.rp.3528:
  sub rbp, 32
  mov r15, rax
  mov rsi, r15
  mov rdi, QWORD [rbp + 24]
  mov r15, QWORD [rbp + 0]
  jmp L.fact_loop.3509
L.nest_t.3703:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.3704:
  add rbp, 32
  mov rsi, 8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.3527
  jmp L.-.3513
L.eq?.3510:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.3701
  jmp L.nest_f.3702
L.nest_t.3701:
  mov rax, 14
  jmp r15
L.nest_f.3702:
  mov rax, 6
  jmp r15
L.*.3511:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3699
  jmp L.nest_f.3700
L.nest_t.3683:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3684:
  mov rax, 318
  jmp r15
L.nest_t.3685:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3686:
  mov rax, 318
  jmp r15
L.nest_t.3687:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3683
  jmp L.nest_f.3684
L.nest_f.3688:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3685
  jmp L.nest_f.3686
L.nest_t.3689:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3687
  jmp L.nest_f.3688
L.nest_f.3690:
  mov rax, 62
  jmp r15
L.nest_t.3691:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3692:
  mov rax, 318
  jmp r15
L.nest_t.3693:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3694:
  mov rax, 318
  jmp r15
L.nest_t.3695:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3691
  jmp L.nest_f.3692
L.nest_f.3696:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3693
  jmp L.nest_f.3694
L.nest_t.3697:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3695
  jmp L.nest_f.3696
L.nest_f.3698:
  mov rax, 62
  jmp r15
L.nest_t.3699:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3689
  jmp L.nest_f.3690
L.nest_f.3700:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3697
  jmp L.nest_f.3698
L.+.3512:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3681
  jmp L.nest_f.3682
L.nest_t.3665:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3666:
  mov rax, 830
  jmp r15
L.nest_t.3667:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3668:
  mov rax, 830
  jmp r15
L.nest_t.3669:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3665
  jmp L.nest_f.3666
L.nest_f.3670:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3667
  jmp L.nest_f.3668
L.nest_t.3671:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3669
  jmp L.nest_f.3670
L.nest_f.3672:
  mov rax, 574
  jmp r15
L.nest_t.3673:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3674:
  mov rax, 830
  jmp r15
L.nest_t.3675:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3676:
  mov rax, 830
  jmp r15
L.nest_t.3677:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3673
  jmp L.nest_f.3674
L.nest_f.3678:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3675
  jmp L.nest_f.3676
L.nest_t.3679:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3677
  jmp L.nest_f.3678
L.nest_f.3680:
  mov rax, 574
  jmp r15
L.nest_t.3681:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3671
  jmp L.nest_f.3672
L.nest_f.3682:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3679
  jmp L.nest_f.3680
L.-.3513:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3663
  jmp L.nest_f.3664
L.nest_t.3647:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3648:
  mov rax, 1342
  jmp r15
L.nest_t.3649:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3650:
  mov rax, 1342
  jmp r15
L.nest_t.3651:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3647
  jmp L.nest_f.3648
L.nest_f.3652:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3649
  jmp L.nest_f.3650
L.nest_t.3653:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3651
  jmp L.nest_f.3652
L.nest_f.3654:
  mov rax, 1086
  jmp r15
L.nest_t.3655:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3656:
  mov rax, 1342
  jmp r15
L.nest_t.3657:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.3658:
  mov rax, 1342
  jmp r15
L.nest_t.3659:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3655
  jmp L.nest_f.3656
L.nest_f.3660:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3657
  jmp L.nest_f.3658
L.nest_t.3661:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3659
  jmp L.nest_f.3660
L.nest_f.3662:
  mov rax, 1086
  jmp r15
L.nest_t.3663:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3653
  jmp L.nest_f.3654
L.nest_f.3664:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3661
  jmp L.nest_f.3662
L.<.3514:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3645
  jmp L.nest_f.3646
L.nest_t.3621:
  mov rax, 14
  jmp r15
L.nest_f.3622:
  mov rax, 6
  jmp r15
L.nest_t.3623:
  cmp r14, r13
  jl L.nest_t.3621
  jmp L.nest_f.3622
L.nest_f.3624:
  mov rax, 1854
  jmp r15
L.nest_t.3625:
  mov rax, 14
  jmp r15
L.nest_f.3626:
  mov rax, 6
  jmp r15
L.nest_t.3627:
  cmp r14, r13
  jl L.nest_t.3625
  jmp L.nest_f.3626
L.nest_f.3628:
  mov rax, 1854
  jmp r15
L.nest_t.3629:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3623
  jmp L.nest_f.3624
L.nest_f.3630:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3627
  jmp L.nest_f.3628
L.nest_t.3631:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3629
  jmp L.nest_f.3630
L.nest_f.3632:
  mov rax, 1598
  jmp r15
L.nest_t.3633:
  mov rax, 14
  jmp r15
L.nest_f.3634:
  mov rax, 6
  jmp r15
L.nest_t.3635:
  cmp r14, r13
  jl L.nest_t.3633
  jmp L.nest_f.3634
L.nest_f.3636:
  mov rax, 1854
  jmp r15
L.nest_t.3637:
  mov rax, 14
  jmp r15
L.nest_f.3638:
  mov rax, 6
  jmp r15
L.nest_t.3639:
  cmp r14, r13
  jl L.nest_t.3637
  jmp L.nest_f.3638
L.nest_f.3640:
  mov rax, 1854
  jmp r15
L.nest_t.3641:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3635
  jmp L.nest_f.3636
L.nest_f.3642:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3639
  jmp L.nest_f.3640
L.nest_t.3643:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3641
  jmp L.nest_f.3642
L.nest_f.3644:
  mov rax, 1598
  jmp r15
L.nest_t.3645:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3631
  jmp L.nest_f.3632
L.nest_f.3646:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3643
  jmp L.nest_f.3644
L.<=.3515:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3619
  jmp L.nest_f.3620
L.nest_t.3595:
  mov rax, 14
  jmp r15
L.nest_f.3596:
  mov rax, 6
  jmp r15
L.nest_t.3597:
  cmp r14, r13
  jle L.nest_t.3595
  jmp L.nest_f.3596
L.nest_f.3598:
  mov rax, 2366
  jmp r15
L.nest_t.3599:
  mov rax, 14
  jmp r15
L.nest_f.3600:
  mov rax, 6
  jmp r15
L.nest_t.3601:
  cmp r14, r13
  jle L.nest_t.3599
  jmp L.nest_f.3600
L.nest_f.3602:
  mov rax, 2366
  jmp r15
L.nest_t.3603:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3597
  jmp L.nest_f.3598
L.nest_f.3604:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3601
  jmp L.nest_f.3602
L.nest_t.3605:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3603
  jmp L.nest_f.3604
L.nest_f.3606:
  mov rax, 2110
  jmp r15
L.nest_t.3607:
  mov rax, 14
  jmp r15
L.nest_f.3608:
  mov rax, 6
  jmp r15
L.nest_t.3609:
  cmp r14, r13
  jle L.nest_t.3607
  jmp L.nest_f.3608
L.nest_f.3610:
  mov rax, 2366
  jmp r15
L.nest_t.3611:
  mov rax, 14
  jmp r15
L.nest_f.3612:
  mov rax, 6
  jmp r15
L.nest_t.3613:
  cmp r14, r13
  jle L.nest_t.3611
  jmp L.nest_f.3612
L.nest_f.3614:
  mov rax, 2366
  jmp r15
L.nest_t.3615:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3609
  jmp L.nest_f.3610
L.nest_f.3616:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3613
  jmp L.nest_f.3614
L.nest_t.3617:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3615
  jmp L.nest_f.3616
L.nest_f.3618:
  mov rax, 2110
  jmp r15
L.nest_t.3619:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3605
  jmp L.nest_f.3606
L.nest_f.3620:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3617
  jmp L.nest_f.3618
L.>.3516:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3593
  jmp L.nest_f.3594
L.nest_t.3569:
  mov rax, 14
  jmp r15
L.nest_f.3570:
  mov rax, 6
  jmp r15
L.nest_t.3571:
  cmp r14, r13
  jg L.nest_t.3569
  jmp L.nest_f.3570
L.nest_f.3572:
  mov rax, 2878
  jmp r15
L.nest_t.3573:
  mov rax, 14
  jmp r15
L.nest_f.3574:
  mov rax, 6
  jmp r15
L.nest_t.3575:
  cmp r14, r13
  jg L.nest_t.3573
  jmp L.nest_f.3574
L.nest_f.3576:
  mov rax, 2878
  jmp r15
L.nest_t.3577:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3571
  jmp L.nest_f.3572
L.nest_f.3578:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3575
  jmp L.nest_f.3576
L.nest_t.3579:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3577
  jmp L.nest_f.3578
L.nest_f.3580:
  mov rax, 2622
  jmp r15
L.nest_t.3581:
  mov rax, 14
  jmp r15
L.nest_f.3582:
  mov rax, 6
  jmp r15
L.nest_t.3583:
  cmp r14, r13
  jg L.nest_t.3581
  jmp L.nest_f.3582
L.nest_f.3584:
  mov rax, 2878
  jmp r15
L.nest_t.3585:
  mov rax, 14
  jmp r15
L.nest_f.3586:
  mov rax, 6
  jmp r15
L.nest_t.3587:
  cmp r14, r13
  jg L.nest_t.3585
  jmp L.nest_f.3586
L.nest_f.3588:
  mov rax, 2878
  jmp r15
L.nest_t.3589:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3583
  jmp L.nest_f.3584
L.nest_f.3590:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3587
  jmp L.nest_f.3588
L.nest_t.3591:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3589
  jmp L.nest_f.3590
L.nest_f.3592:
  mov rax, 2622
  jmp r15
L.nest_t.3593:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3579
  jmp L.nest_f.3580
L.nest_f.3594:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3591
  jmp L.nest_f.3592
L.>=.3517:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3567
  jmp L.nest_f.3568
L.nest_t.3543:
  mov rax, 14
  jmp r15
L.nest_f.3544:
  mov rax, 6
  jmp r15
L.nest_t.3545:
  cmp r14, r13
  jge L.nest_t.3543
  jmp L.nest_f.3544
L.nest_f.3546:
  mov rax, 3390
  jmp r15
L.nest_t.3547:
  mov rax, 14
  jmp r15
L.nest_f.3548:
  mov rax, 6
  jmp r15
L.nest_t.3549:
  cmp r14, r13
  jge L.nest_t.3547
  jmp L.nest_f.3548
L.nest_f.3550:
  mov rax, 3390
  jmp r15
L.nest_t.3551:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3545
  jmp L.nest_f.3546
L.nest_f.3552:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3549
  jmp L.nest_f.3550
L.nest_t.3553:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3551
  jmp L.nest_f.3552
L.nest_f.3554:
  mov rax, 3134
  jmp r15
L.nest_t.3555:
  mov rax, 14
  jmp r15
L.nest_f.3556:
  mov rax, 6
  jmp r15
L.nest_t.3557:
  cmp r14, r13
  jge L.nest_t.3555
  jmp L.nest_f.3556
L.nest_f.3558:
  mov rax, 3390
  jmp r15
L.nest_t.3559:
  mov rax, 14
  jmp r15
L.nest_f.3560:
  mov rax, 6
  jmp r15
L.nest_t.3561:
  cmp r14, r13
  jge L.nest_t.3559
  jmp L.nest_f.3560
L.nest_f.3562:
  mov rax, 3390
  jmp r15
L.nest_t.3563:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3557
  jmp L.nest_f.3558
L.nest_f.3564:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3561
  jmp L.nest_f.3562
L.nest_t.3565:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.3563
  jmp L.nest_f.3564
L.nest_f.3566:
  mov rax, 3134
  jmp r15
L.nest_t.3567:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.3553
  jmp L.nest_f.3554
L.nest_f.3568:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.3565
  jmp L.nest_f.3566
L.fixnum?.3518:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.3541
  jmp L.nest_f.3542
L.nest_t.3541:
  mov rax, 14
  jmp r15
L.nest_f.3542:
  mov rax, 6
  jmp r15
L.boolean?.3519:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.3539
  jmp L.nest_f.3540
L.nest_t.3539:
  mov rax, 14
  jmp r15
L.nest_f.3540:
  mov rax, 6
  jmp r15
L.empty?.3520:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.3537
  jmp L.nest_f.3538
L.nest_t.3537:
  mov rax, 14
  jmp r15
L.nest_f.3538:
  mov rax, 6
  jmp r15
L.void?.3521:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.3535
  jmp L.nest_f.3536
L.nest_t.3535:
  mov rax, 14
  jmp r15
L.nest_f.3536:
  mov rax, 6
  jmp r15
L.ascii-char?.3522:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.3533
  jmp L.nest_f.3534
L.nest_t.3533:
  mov rax, 14
  jmp r15
L.nest_f.3534:
  mov rax, 6
  jmp r15
L.error?.3523:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.3531
  jmp L.nest_f.3532
L.nest_t.3531:
  mov rax, 14
  jmp r15
L.nest_f.3532:
  mov rax, 6
  jmp r15
L.not.3524:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.3529
  jmp L.nest_f.3530
L.nest_t.3529:
  mov rax, 6
  jmp r15
L.nest_f.3530:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:165:2
actual:
  '(24
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    24
    24
    "Failed on pass select-instructions\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    24
    "Failed on pass undead-analysis\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    24
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    24
    24
    24
    24
    24
    24
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.2782 #<continuation-mark-set> L.tmp.2782 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    24
    24
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    24
    24)
expected:   24
--------------------

expose-basic-blocks: (module (define L.main.6873 () (begin (nop) (set! rsi 8) (set! rdi 48) (nop) (jump L.fact_loop.6857))) (define L.not.6872 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.6871 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.6870 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.6869 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.6868 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.6867 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.6866 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.6865 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.6864 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.6863 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.6862 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.6861 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.6860 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.6859 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.6858 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fact_loop.6857 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! rbp (+ rbp 32)) (return-point L.rp.6874 (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.6874) (jump L.eq?.6858))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.6875 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.6875) (jump L.-.6861))) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (return-point L.rp.6876 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.6876) (jump L.*.6859))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.6857))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.6874) (jump L.eq?.6858))
process-rp: (jump L.eq?.6858)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.6875 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.6875) (jump L.-.6861))) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (return-point L.rp.6876 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.6876) (jump L.*.6859))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.6857)))
create-return-point-blocktwo: (return-point L.rp.6874 (begin ((if (neq? r15 6) (jump L.tmp.7209) (jump L.tmp.7211)) (set! r15 rax) (set! rbp (- rbp 32)))))
parse-rp-tail (begin ((set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.7209) (jump L.tmp.7211))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.7209) (jump L.tmp.7211))
parse-rp-tail (jump L.tmp.7209)
parse-rp-tail (jump L.tmp.7211)
flatten (module (define L.main.7229 () (begin (nop) (set! rsi 8) (set! rdi 48) (nop) (jump L.fact_loop.7213))) (define L.fact_loop.7213 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.7230) (jump L.eq?.7214))) (define L.rp.7230 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.7407) (jump L.nest_f.7408)))) (define L.rp.7231 () (begin (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (set! rsi (rbp + -16)) (set! rdi (rbp + -24)) (set! r15 L.rp.7232) (jump L.*.7215))) (define L.rp.7232 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 24)) (set! r15 (rbp + 0)) (jump L.fact_loop.7213))) (define L.nest_t.7407 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.7408 () (begin (set! rbp (+ rbp 32)) (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.7231) (jump L.-.7217))) (define L.eq?.7214 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.7405) (jump L.nest_f.7406)))) (define L.nest_t.7405 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7406 () (begin (set! rax 6) (jump r15))) (define L.*.7215 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7403) (jump L.nest_f.7404)))) (define L.nest_t.7387 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7388 () (begin (set! rax 318) (jump r15))) (define L.nest_t.7389 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7390 () (begin (set! rax 318) (jump r15))) (define L.nest_t.7391 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7387) (jump L.nest_f.7388)))) (define L.nest_f.7392 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7389) (jump L.nest_f.7390)))) (define L.nest_t.7393 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7391) (jump L.nest_f.7392)))) (define L.nest_f.7394 () (begin (set! rax 62) (jump r15))) (define L.nest_t.7395 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7396 () (begin (set! rax 318) (jump r15))) (define L.nest_t.7397 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7398 () (begin (set! rax 318) (jump r15))) (define L.nest_t.7399 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7395) (jump L.nest_f.7396)))) (define L.nest_f.7400 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7397) (jump L.nest_f.7398)))) (define L.nest_t.7401 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7399) (jump L.nest_f.7400)))) (define L.nest_f.7402 () (begin (set! rax 62) (jump r15))) (define L.nest_t.7403 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7393) (jump L.nest_f.7394)))) (define L.nest_f.7404 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7401) (jump L.nest_f.7402)))) (define L.+.7216 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7385) (jump L.nest_f.7386)))) (define L.nest_t.7369 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7370 () (begin (set! rax 830) (jump r15))) (define L.nest_t.7371 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7372 () (begin (set! rax 830) (jump r15))) (define L.nest_t.7373 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7369) (jump L.nest_f.7370)))) (define L.nest_f.7374 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7371) (jump L.nest_f.7372)))) (define L.nest_t.7375 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7373) (jump L.nest_f.7374)))) (define L.nest_f.7376 () (begin (set! rax 574) (jump r15))) (define L.nest_t.7377 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7378 () (begin (set! rax 830) (jump r15))) (define L.nest_t.7379 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7380 () (begin (set! rax 830) (jump r15))) (define L.nest_t.7381 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7377) (jump L.nest_f.7378)))) (define L.nest_f.7382 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7379) (jump L.nest_f.7380)))) (define L.nest_t.7383 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7381) (jump L.nest_f.7382)))) (define L.nest_f.7384 () (begin (set! rax 574) (jump r15))) (define L.nest_t.7385 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7375) (jump L.nest_f.7376)))) (define L.nest_f.7386 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7383) (jump L.nest_f.7384)))) (define L.-.7217 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7367) (jump L.nest_f.7368)))) (define L.nest_t.7351 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7352 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.7353 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7354 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.7355 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7351) (jump L.nest_f.7352)))) (define L.nest_f.7356 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7353) (jump L.nest_f.7354)))) (define L.nest_t.7357 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7355) (jump L.nest_f.7356)))) (define L.nest_f.7358 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.7359 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7360 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.7361 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.7362 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.7363 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7359) (jump L.nest_f.7360)))) (define L.nest_f.7364 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7361) (jump L.nest_f.7362)))) (define L.nest_t.7365 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7363) (jump L.nest_f.7364)))) (define L.nest_f.7366 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.7367 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7357) (jump L.nest_f.7358)))) (define L.nest_f.7368 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7365) (jump L.nest_f.7366)))) (define L.<.7218 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7349) (jump L.nest_f.7350)))) (define L.nest_t.7325 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7326 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7327 () (if (< r14 r13) (jump L.nest_t.7325) (jump L.nest_f.7326))) (define L.nest_f.7328 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.7329 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7330 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7331 () (if (< r14 r13) (jump L.nest_t.7329) (jump L.nest_f.7330))) (define L.nest_f.7332 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.7333 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7327) (jump L.nest_f.7328)))) (define L.nest_f.7334 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7331) (jump L.nest_f.7332)))) (define L.nest_t.7335 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7333) (jump L.nest_f.7334)))) (define L.nest_f.7336 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.7337 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7338 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7339 () (if (< r14 r13) (jump L.nest_t.7337) (jump L.nest_f.7338))) (define L.nest_f.7340 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.7341 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7342 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7343 () (if (< r14 r13) (jump L.nest_t.7341) (jump L.nest_f.7342))) (define L.nest_f.7344 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.7345 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7339) (jump L.nest_f.7340)))) (define L.nest_f.7346 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7343) (jump L.nest_f.7344)))) (define L.nest_t.7347 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7345) (jump L.nest_f.7346)))) (define L.nest_f.7348 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.7349 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7335) (jump L.nest_f.7336)))) (define L.nest_f.7350 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7347) (jump L.nest_f.7348)))) (define L.<=.7219 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7323) (jump L.nest_f.7324)))) (define L.nest_t.7299 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7300 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7301 () (if (<= r14 r13) (jump L.nest_t.7299) (jump L.nest_f.7300))) (define L.nest_f.7302 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.7303 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7304 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7305 () (if (<= r14 r13) (jump L.nest_t.7303) (jump L.nest_f.7304))) (define L.nest_f.7306 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.7307 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7301) (jump L.nest_f.7302)))) (define L.nest_f.7308 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7305) (jump L.nest_f.7306)))) (define L.nest_t.7309 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7307) (jump L.nest_f.7308)))) (define L.nest_f.7310 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.7311 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7312 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7313 () (if (<= r14 r13) (jump L.nest_t.7311) (jump L.nest_f.7312))) (define L.nest_f.7314 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.7315 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7316 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7317 () (if (<= r14 r13) (jump L.nest_t.7315) (jump L.nest_f.7316))) (define L.nest_f.7318 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.7319 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7313) (jump L.nest_f.7314)))) (define L.nest_f.7320 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7317) (jump L.nest_f.7318)))) (define L.nest_t.7321 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7319) (jump L.nest_f.7320)))) (define L.nest_f.7322 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.7323 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7309) (jump L.nest_f.7310)))) (define L.nest_f.7324 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7321) (jump L.nest_f.7322)))) (define L.>.7220 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7297) (jump L.nest_f.7298)))) (define L.nest_t.7273 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7274 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7275 () (if (> r14 r13) (jump L.nest_t.7273) (jump L.nest_f.7274))) (define L.nest_f.7276 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.7277 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7278 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7279 () (if (> r14 r13) (jump L.nest_t.7277) (jump L.nest_f.7278))) (define L.nest_f.7280 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.7281 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7275) (jump L.nest_f.7276)))) (define L.nest_f.7282 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7279) (jump L.nest_f.7280)))) (define L.nest_t.7283 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7281) (jump L.nest_f.7282)))) (define L.nest_f.7284 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.7285 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7286 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7287 () (if (> r14 r13) (jump L.nest_t.7285) (jump L.nest_f.7286))) (define L.nest_f.7288 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.7289 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7290 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7291 () (if (> r14 r13) (jump L.nest_t.7289) (jump L.nest_f.7290))) (define L.nest_f.7292 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.7293 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7287) (jump L.nest_f.7288)))) (define L.nest_f.7294 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7291) (jump L.nest_f.7292)))) (define L.nest_t.7295 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7293) (jump L.nest_f.7294)))) (define L.nest_f.7296 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.7297 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7283) (jump L.nest_f.7284)))) (define L.nest_f.7298 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7295) (jump L.nest_f.7296)))) (define L.>=.7221 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7271) (jump L.nest_f.7272)))) (define L.nest_t.7247 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7248 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7249 () (if (>= r14 r13) (jump L.nest_t.7247) (jump L.nest_f.7248))) (define L.nest_f.7250 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.7251 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7252 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7253 () (if (>= r14 r13) (jump L.nest_t.7251) (jump L.nest_f.7252))) (define L.nest_f.7254 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.7255 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7249) (jump L.nest_f.7250)))) (define L.nest_f.7256 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7253) (jump L.nest_f.7254)))) (define L.nest_t.7257 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7255) (jump L.nest_f.7256)))) (define L.nest_f.7258 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.7259 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7260 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7261 () (if (>= r14 r13) (jump L.nest_t.7259) (jump L.nest_f.7260))) (define L.nest_f.7262 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.7263 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7264 () (begin (set! rax 6) (jump r15))) (define L.nest_t.7265 () (if (>= r14 r13) (jump L.nest_t.7263) (jump L.nest_f.7264))) (define L.nest_f.7266 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.7267 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7261) (jump L.nest_f.7262)))) (define L.nest_f.7268 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7265) (jump L.nest_f.7266)))) (define L.nest_t.7269 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.7267) (jump L.nest_f.7268)))) (define L.nest_f.7270 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.7271 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.7257) (jump L.nest_f.7258)))) (define L.nest_f.7272 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.7269) (jump L.nest_f.7270)))) (define L.fixnum?.7222 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.7245) (jump L.nest_f.7246)))) (define L.nest_t.7245 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7246 () (begin (set! rax 6) (jump r15))) (define L.boolean?.7223 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.7243) (jump L.nest_f.7244)))) (define L.nest_t.7243 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7244 () (begin (set! rax 6) (jump r15))) (define L.empty?.7224 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.7241) (jump L.nest_f.7242)))) (define L.nest_t.7241 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7242 () (begin (set! rax 6) (jump r15))) (define L.void?.7225 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.7239) (jump L.nest_f.7240)))) (define L.nest_t.7239 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7240 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.7226 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.7237) (jump L.nest_f.7238)))) (define L.nest_t.7237 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7238 () (begin (set! rax 6) (jump r15))) (define L.error?.7227 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.7235) (jump L.nest_f.7236)))) (define L.nest_t.7235 () (begin (set! rax 14) (jump r15))) (define L.nest_f.7236 () (begin (set! rax 6) (jump r15))) (define L.not.7228 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.7233) (jump L.nest_f.7234)))) (define L.nest_t.7233 () (begin (set! rax 6) (jump r15))) (define L.nest_f.7234 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15857999071585799907393.s:66: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:157: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:157: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:244: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:244: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:331: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:331: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:442: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:442: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:553: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:553: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:664: error: symbol `L.' redefined
/var/tmp/rkt15857999071585799907393.s:664: error: parser: instruction expected
/var/tmp/rkt15857999071585799907393.s:823: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.7621:
  mov rsi, 8
  mov rdi, 48
  jmp L.fact_loop.7605
L.fact_loop.7605:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 16], rdi
  mov QWORD [rbp + 8], rsi
  add rbp, 32
  mov rsi, 0
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.7622
  jmp L.eq?.7606
L.rp.7622:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.7799
  jmp L.nest_f.7800
L.rp.7623:
  sub rbp, 32
  mov QWORD [rbp + 24], rax
  add rbp, 32
  mov rsi, QWORD [rbp + -16]
  mov rdi, QWORD [rbp + -24]
  mov r15, L.rp.7624
  jmp L.*.7607
L.rp.7624:
  sub rbp, 32
  mov r15, rax
  mov rsi, r15
  mov rdi, QWORD [rbp + 24]
  mov r15, QWORD [rbp + 0]
  jmp L.fact_loop.7605
L.nest_t.7799:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.7800:
  add rbp, 32
  mov rsi, 8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.7623
  jmp L.-.7609
L.eq?.7606:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.7797
  jmp L.nest_f.7798
L.nest_t.7797:
  mov rax, 14
  jmp r15
L.nest_f.7798:
  mov rax, 6
  jmp r15
L.*.7607:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7795
  jmp L.nest_f.7796
L.nest_t.7779:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7780:
  mov rax, 318
  jmp r15
L.nest_t.7781:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7782:
  mov rax, 318
  jmp r15
L.nest_t.7783:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7779
  jmp L.nest_f.7780
L.nest_f.7784:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7781
  jmp L.nest_f.7782
L.nest_t.7785:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7783
  jmp L.nest_f.7784
L.nest_f.7786:
  mov rax, 62
  jmp r15
L.nest_t.7787:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7788:
  mov rax, 318
  jmp r15
L.nest_t.7789:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7790:
  mov rax, 318
  jmp r15
L.nest_t.7791:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7787
  jmp L.nest_f.7788
L.nest_f.7792:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7789
  jmp L.nest_f.7790
L.nest_t.7793:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7791
  jmp L.nest_f.7792
L.nest_f.7794:
  mov rax, 62
  jmp r15
L.nest_t.7795:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7785
  jmp L.nest_f.7786
L.nest_f.7796:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7793
  jmp L.nest_f.7794
L.+.7608:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7777
  jmp L.nest_f.7778
L.nest_t.7761:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7762:
  mov rax, 830
  jmp r15
L.nest_t.7763:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7764:
  mov rax, 830
  jmp r15
L.nest_t.7765:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7761
  jmp L.nest_f.7762
L.nest_f.7766:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7763
  jmp L.nest_f.7764
L.nest_t.7767:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7765
  jmp L.nest_f.7766
L.nest_f.7768:
  mov rax, 574
  jmp r15
L.nest_t.7769:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7770:
  mov rax, 830
  jmp r15
L.nest_t.7771:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7772:
  mov rax, 830
  jmp r15
L.nest_t.7773:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7769
  jmp L.nest_f.7770
L.nest_f.7774:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7771
  jmp L.nest_f.7772
L.nest_t.7775:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7773
  jmp L.nest_f.7774
L.nest_f.7776:
  mov rax, 574
  jmp r15
L.nest_t.7777:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7767
  jmp L.nest_f.7768
L.nest_f.7778:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7775
  jmp L.nest_f.7776
L.-.7609:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7759
  jmp L.nest_f.7760
L.nest_t.7743:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7744:
  mov rax, 1342
  jmp r15
L.nest_t.7745:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7746:
  mov rax, 1342
  jmp r15
L.nest_t.7747:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7743
  jmp L.nest_f.7744
L.nest_f.7748:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7745
  jmp L.nest_f.7746
L.nest_t.7749:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7747
  jmp L.nest_f.7748
L.nest_f.7750:
  mov rax, 1086
  jmp r15
L.nest_t.7751:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7752:
  mov rax, 1342
  jmp r15
L.nest_t.7753:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.7754:
  mov rax, 1342
  jmp r15
L.nest_t.7755:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7751
  jmp L.nest_f.7752
L.nest_f.7756:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7753
  jmp L.nest_f.7754
L.nest_t.7757:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7755
  jmp L.nest_f.7756
L.nest_f.7758:
  mov rax, 1086
  jmp r15
L.nest_t.7759:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7749
  jmp L.nest_f.7750
L.nest_f.7760:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7757
  jmp L.nest_f.7758
L.<.7610:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7741
  jmp L.nest_f.7742
L.nest_t.7717:
  mov rax, 14
  jmp r15
L.nest_f.7718:
  mov rax, 6
  jmp r15
L.nest_t.7719:
  cmp r14, r13
  jl L.nest_t.7717
  jmp L.nest_f.7718
L.nest_f.7720:
  mov rax, 1854
  jmp r15
L.nest_t.7721:
  mov rax, 14
  jmp r15
L.nest_f.7722:
  mov rax, 6
  jmp r15
L.nest_t.7723:
  cmp r14, r13
  jl L.nest_t.7721
  jmp L.nest_f.7722
L.nest_f.7724:
  mov rax, 1854
  jmp r15
L.nest_t.7725:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7719
  jmp L.nest_f.7720
L.nest_f.7726:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7723
  jmp L.nest_f.7724
L.nest_t.7727:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7725
  jmp L.nest_f.7726
L.nest_f.7728:
  mov rax, 1598
  jmp r15
L.nest_t.7729:
  mov rax, 14
  jmp r15
L.nest_f.7730:
  mov rax, 6
  jmp r15
L.nest_t.7731:
  cmp r14, r13
  jl L.nest_t.7729
  jmp L.nest_f.7730
L.nest_f.7732:
  mov rax, 1854
  jmp r15
L.nest_t.7733:
  mov rax, 14
  jmp r15
L.nest_f.7734:
  mov rax, 6
  jmp r15
L.nest_t.7735:
  cmp r14, r13
  jl L.nest_t.7733
  jmp L.nest_f.7734
L.nest_f.7736:
  mov rax, 1854
  jmp r15
L.nest_t.7737:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7731
  jmp L.nest_f.7732
L.nest_f.7738:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7735
  jmp L.nest_f.7736
L.nest_t.7739:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7737
  jmp L.nest_f.7738
L.nest_f.7740:
  mov rax, 1598
  jmp r15
L.nest_t.7741:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7727
  jmp L.nest_f.7728
L.nest_f.7742:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7739
  jmp L.nest_f.7740
L.<=.7611:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7715
  jmp L.nest_f.7716
L.nest_t.7691:
  mov rax, 14
  jmp r15
L.nest_f.7692:
  mov rax, 6
  jmp r15
L.nest_t.7693:
  cmp r14, r13
  jle L.nest_t.7691
  jmp L.nest_f.7692
L.nest_f.7694:
  mov rax, 2366
  jmp r15
L.nest_t.7695:
  mov rax, 14
  jmp r15
L.nest_f.7696:
  mov rax, 6
  jmp r15
L.nest_t.7697:
  cmp r14, r13
  jle L.nest_t.7695
  jmp L.nest_f.7696
L.nest_f.7698:
  mov rax, 2366
  jmp r15
L.nest_t.7699:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7693
  jmp L.nest_f.7694
L.nest_f.7700:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7697
  jmp L.nest_f.7698
L.nest_t.7701:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7699
  jmp L.nest_f.7700
L.nest_f.7702:
  mov rax, 2110
  jmp r15
L.nest_t.7703:
  mov rax, 14
  jmp r15
L.nest_f.7704:
  mov rax, 6
  jmp r15
L.nest_t.7705:
  cmp r14, r13
  jle L.nest_t.7703
  jmp L.nest_f.7704
L.nest_f.7706:
  mov rax, 2366
  jmp r15
L.nest_t.7707:
  mov rax, 14
  jmp r15
L.nest_f.7708:
  mov rax, 6
  jmp r15
L.nest_t.7709:
  cmp r14, r13
  jle L.nest_t.7707
  jmp L.nest_f.7708
L.nest_f.7710:
  mov rax, 2366
  jmp r15
L.nest_t.7711:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7705
  jmp L.nest_f.7706
L.nest_f.7712:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7709
  jmp L.nest_f.7710
L.nest_t.7713:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7711
  jmp L.nest_f.7712
L.nest_f.7714:
  mov rax, 2110
  jmp r15
L.nest_t.7715:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7701
  jmp L.nest_f.7702
L.nest_f.7716:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7713
  jmp L.nest_f.7714
L.>.7612:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7689
  jmp L.nest_f.7690
L.nest_t.7665:
  mov rax, 14
  jmp r15
L.nest_f.7666:
  mov rax, 6
  jmp r15
L.nest_t.7667:
  cmp r14, r13
  jg L.nest_t.7665
  jmp L.nest_f.7666
L.nest_f.7668:
  mov rax, 2878
  jmp r15
L.nest_t.7669:
  mov rax, 14
  jmp r15
L.nest_f.7670:
  mov rax, 6
  jmp r15
L.nest_t.7671:
  cmp r14, r13
  jg L.nest_t.7669
  jmp L.nest_f.7670
L.nest_f.7672:
  mov rax, 2878
  jmp r15
L.nest_t.7673:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7667
  jmp L.nest_f.7668
L.nest_f.7674:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7671
  jmp L.nest_f.7672
L.nest_t.7675:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7673
  jmp L.nest_f.7674
L.nest_f.7676:
  mov rax, 2622
  jmp r15
L.nest_t.7677:
  mov rax, 14
  jmp r15
L.nest_f.7678:
  mov rax, 6
  jmp r15
L.nest_t.7679:
  cmp r14, r13
  jg L.nest_t.7677
  jmp L.nest_f.7678
L.nest_f.7680:
  mov rax, 2878
  jmp r15
L.nest_t.7681:
  mov rax, 14
  jmp r15
L.nest_f.7682:
  mov rax, 6
  jmp r15
L.nest_t.7683:
  cmp r14, r13
  jg L.nest_t.7681
  jmp L.nest_f.7682
L.nest_f.7684:
  mov rax, 2878
  jmp r15
L.nest_t.7685:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7679
  jmp L.nest_f.7680
L.nest_f.7686:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7683
  jmp L.nest_f.7684
L.nest_t.7687:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7685
  jmp L.nest_f.7686
L.nest_f.7688:
  mov rax, 2622
  jmp r15
L.nest_t.7689:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7675
  jmp L.nest_f.7676
L.nest_f.7690:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7687
  jmp L.nest_f.7688
L.>=.7613:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7663
  jmp L.nest_f.7664
L.nest_t.7639:
  mov rax, 14
  jmp r15
L.nest_f.7640:
  mov rax, 6
  jmp r15
L.nest_t.7641:
  cmp r14, r13
  jge L.nest_t.7639
  jmp L.nest_f.7640
L.nest_f.7642:
  mov rax, 3390
  jmp r15
L.nest_t.7643:
  mov rax, 14
  jmp r15
L.nest_f.7644:
  mov rax, 6
  jmp r15
L.nest_t.7645:
  cmp r14, r13
  jge L.nest_t.7643
  jmp L.nest_f.7644
L.nest_f.7646:
  mov rax, 3390
  jmp r15
L.nest_t.7647:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7641
  jmp L.nest_f.7642
L.nest_f.7648:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7645
  jmp L.nest_f.7646
L.nest_t.7649:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7647
  jmp L.nest_f.7648
L.nest_f.7650:
  mov rax, 3134
  jmp r15
L.nest_t.7651:
  mov rax, 14
  jmp r15
L.nest_f.7652:
  mov rax, 6
  jmp r15
L.nest_t.7653:
  cmp r14, r13
  jge L.nest_t.7651
  jmp L.nest_f.7652
L.nest_f.7654:
  mov rax, 3390
  jmp r15
L.nest_t.7655:
  mov rax, 14
  jmp r15
L.nest_f.7656:
  mov rax, 6
  jmp r15
L.nest_t.7657:
  cmp r14, r13
  jge L.nest_t.7655
  jmp L.nest_f.7656
L.nest_f.7658:
  mov rax, 3390
  jmp r15
L.nest_t.7659:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7653
  jmp L.nest_f.7654
L.nest_f.7660:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7657
  jmp L.nest_f.7658
L.nest_t.7661:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.7659
  jmp L.nest_f.7660
L.nest_f.7662:
  mov rax, 3134
  jmp r15
L.nest_t.7663:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.7649
  jmp L.nest_f.7650
L.nest_f.7664:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.7661
  jmp L.nest_f.7662
L.fixnum?.7614:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.7637
  jmp L.nest_f.7638
L.nest_t.7637:
  mov rax, 14
  jmp r15
L.nest_f.7638:
  mov rax, 6
  jmp r15
L.boolean?.7615:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.7635
  jmp L.nest_f.7636
L.nest_t.7635:
  mov rax, 14
  jmp r15
L.nest_f.7636:
  mov rax, 6
  jmp r15
L.empty?.7616:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.7633
  jmp L.nest_f.7634
L.nest_t.7633:
  mov rax, 14
  jmp r15
L.nest_f.7634:
  mov rax, 6
  jmp r15
L.void?.7617:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.7631
  jmp L.nest_f.7632
L.nest_t.7631:
  mov rax, 14
  jmp r15
L.nest_f.7632:
  mov rax, 6
  jmp r15
L.ascii-char?.7618:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.7629
  jmp L.nest_f.7630
L.nest_t.7629:
  mov rax, 14
  jmp r15
L.nest_f.7630:
  mov rax, 6
  jmp r15
L.error?.7619:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.7627
  jmp L.nest_f.7628
L.nest_t.7627:
  mov rax, 14
  jmp r15
L.nest_f.7628:
  mov rax, 6
  jmp r15
L.not.7620:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.7625
  jmp L.nest_f.7626
L.nest_t.7625:
  mov rax, 6
  jmp r15
L.nest_f.7626:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:170:2
actual:
  '(720
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    720
    720
    "Failed on pass select-instructions\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    720
    "Failed on pass undead-analysis\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    720
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    720
    720
    720
    720
    720
    720
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.6878 #<continuation-mark-set> L.tmp.6878 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    720
    720
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    720
    720)
expected:   720
--------------------

expose-basic-blocks: (module (define L.main.10969 () (begin (nop) (set! rdi 32) (nop) (jump L.fact.10953))) (define L.not.10968 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.10967 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.10966 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.10965 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.10964 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.10963 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.10962 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.10961 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.10960 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.10959 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.10958 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.10957 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.10956 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.10955 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.10954 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fact.10953 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (return-point L.rp.10970 (begin (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.10970) (jump L.eq?.10954))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 8) (jump (rbp + 0))) (begin (set! rbp (+ rbp 16)) (return-point L.rp.10971 (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.10971) (jump L.-.10957))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (return-point L.rp.10972 (begin (set! rdi r15) (set! r15 L.rp.10972) (jump L.fact.10953))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.10955))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.10970) (jump L.eq?.10954))
process-rp: (jump L.eq?.10954)
updating tai with: (set! rbp (- rbp 16))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax 8) (jump (rbp + 0))) (begin (set! rbp (+ rbp 16)) (return-point L.rp.10971 (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.10971) (jump L.-.10957))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (return-point L.rp.10972 (begin (set! rdi r15) (set! r15 L.rp.10972) (jump L.fact.10953))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.10955)))
create-return-point-blocktwo: (return-point L.rp.10970 (begin ((if (neq? r15 6) (jump L.tmp.11305) (jump L.tmp.11307)) (set! r15 rax) (set! rbp (- rbp 16)))))
parse-rp-tail (begin ((set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.11305) (jump L.tmp.11307))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.11305) (jump L.tmp.11307))
parse-rp-tail (jump L.tmp.11305)
parse-rp-tail (jump L.tmp.11307)
flatten (module (define L.main.11325 () (begin (nop) (set! rdi 32) (nop) (jump L.fact.11309))) (define L.fact.11309 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.11326) (jump L.eq?.11310))) (define L.rp.11326 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.11503) (jump L.nest_f.11504)))) (define L.rp.11327 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (set! rdi r15) (set! r15 L.rp.11328) (jump L.fact.11309))) (define L.rp.11328 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.11311))) (define L.nest_t.11503 () (begin (set! rax 8) (jump (rbp + 0)))) (define L.nest_f.11504 () (begin (set! rbp (+ rbp 16)) (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.11327) (jump L.-.11313))) (define L.eq?.11310 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.11501) (jump L.nest_f.11502)))) (define L.nest_t.11501 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11502 () (begin (set! rax 6) (jump r15))) (define L.*.11311 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11499) (jump L.nest_f.11500)))) (define L.nest_t.11483 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11484 () (begin (set! rax 318) (jump r15))) (define L.nest_t.11485 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11486 () (begin (set! rax 318) (jump r15))) (define L.nest_t.11487 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11483) (jump L.nest_f.11484)))) (define L.nest_f.11488 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11485) (jump L.nest_f.11486)))) (define L.nest_t.11489 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11487) (jump L.nest_f.11488)))) (define L.nest_f.11490 () (begin (set! rax 62) (jump r15))) (define L.nest_t.11491 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11492 () (begin (set! rax 318) (jump r15))) (define L.nest_t.11493 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11494 () (begin (set! rax 318) (jump r15))) (define L.nest_t.11495 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11491) (jump L.nest_f.11492)))) (define L.nest_f.11496 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11493) (jump L.nest_f.11494)))) (define L.nest_t.11497 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11495) (jump L.nest_f.11496)))) (define L.nest_f.11498 () (begin (set! rax 62) (jump r15))) (define L.nest_t.11499 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11489) (jump L.nest_f.11490)))) (define L.nest_f.11500 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11497) (jump L.nest_f.11498)))) (define L.+.11312 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11481) (jump L.nest_f.11482)))) (define L.nest_t.11465 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11466 () (begin (set! rax 830) (jump r15))) (define L.nest_t.11467 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11468 () (begin (set! rax 830) (jump r15))) (define L.nest_t.11469 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11465) (jump L.nest_f.11466)))) (define L.nest_f.11470 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11467) (jump L.nest_f.11468)))) (define L.nest_t.11471 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11469) (jump L.nest_f.11470)))) (define L.nest_f.11472 () (begin (set! rax 574) (jump r15))) (define L.nest_t.11473 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11474 () (begin (set! rax 830) (jump r15))) (define L.nest_t.11475 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11476 () (begin (set! rax 830) (jump r15))) (define L.nest_t.11477 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11473) (jump L.nest_f.11474)))) (define L.nest_f.11478 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11475) (jump L.nest_f.11476)))) (define L.nest_t.11479 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11477) (jump L.nest_f.11478)))) (define L.nest_f.11480 () (begin (set! rax 574) (jump r15))) (define L.nest_t.11481 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11471) (jump L.nest_f.11472)))) (define L.nest_f.11482 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11479) (jump L.nest_f.11480)))) (define L.-.11313 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11463) (jump L.nest_f.11464)))) (define L.nest_t.11447 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11448 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.11449 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11450 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.11451 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11447) (jump L.nest_f.11448)))) (define L.nest_f.11452 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11449) (jump L.nest_f.11450)))) (define L.nest_t.11453 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11451) (jump L.nest_f.11452)))) (define L.nest_f.11454 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.11455 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11456 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.11457 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.11458 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.11459 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11455) (jump L.nest_f.11456)))) (define L.nest_f.11460 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11457) (jump L.nest_f.11458)))) (define L.nest_t.11461 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11459) (jump L.nest_f.11460)))) (define L.nest_f.11462 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.11463 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11453) (jump L.nest_f.11454)))) (define L.nest_f.11464 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11461) (jump L.nest_f.11462)))) (define L.<.11314 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11445) (jump L.nest_f.11446)))) (define L.nest_t.11421 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11422 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11423 () (if (< r14 r13) (jump L.nest_t.11421) (jump L.nest_f.11422))) (define L.nest_f.11424 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.11425 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11426 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11427 () (if (< r14 r13) (jump L.nest_t.11425) (jump L.nest_f.11426))) (define L.nest_f.11428 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.11429 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11423) (jump L.nest_f.11424)))) (define L.nest_f.11430 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11427) (jump L.nest_f.11428)))) (define L.nest_t.11431 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11429) (jump L.nest_f.11430)))) (define L.nest_f.11432 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.11433 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11434 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11435 () (if (< r14 r13) (jump L.nest_t.11433) (jump L.nest_f.11434))) (define L.nest_f.11436 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.11437 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11438 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11439 () (if (< r14 r13) (jump L.nest_t.11437) (jump L.nest_f.11438))) (define L.nest_f.11440 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.11441 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11435) (jump L.nest_f.11436)))) (define L.nest_f.11442 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11439) (jump L.nest_f.11440)))) (define L.nest_t.11443 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11441) (jump L.nest_f.11442)))) (define L.nest_f.11444 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.11445 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11431) (jump L.nest_f.11432)))) (define L.nest_f.11446 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11443) (jump L.nest_f.11444)))) (define L.<=.11315 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11419) (jump L.nest_f.11420)))) (define L.nest_t.11395 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11396 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11397 () (if (<= r14 r13) (jump L.nest_t.11395) (jump L.nest_f.11396))) (define L.nest_f.11398 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.11399 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11400 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11401 () (if (<= r14 r13) (jump L.nest_t.11399) (jump L.nest_f.11400))) (define L.nest_f.11402 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.11403 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11397) (jump L.nest_f.11398)))) (define L.nest_f.11404 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11401) (jump L.nest_f.11402)))) (define L.nest_t.11405 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11403) (jump L.nest_f.11404)))) (define L.nest_f.11406 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.11407 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11408 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11409 () (if (<= r14 r13) (jump L.nest_t.11407) (jump L.nest_f.11408))) (define L.nest_f.11410 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.11411 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11412 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11413 () (if (<= r14 r13) (jump L.nest_t.11411) (jump L.nest_f.11412))) (define L.nest_f.11414 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.11415 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11409) (jump L.nest_f.11410)))) (define L.nest_f.11416 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11413) (jump L.nest_f.11414)))) (define L.nest_t.11417 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11415) (jump L.nest_f.11416)))) (define L.nest_f.11418 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.11419 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11405) (jump L.nest_f.11406)))) (define L.nest_f.11420 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11417) (jump L.nest_f.11418)))) (define L.>.11316 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11393) (jump L.nest_f.11394)))) (define L.nest_t.11369 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11370 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11371 () (if (> r14 r13) (jump L.nest_t.11369) (jump L.nest_f.11370))) (define L.nest_f.11372 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.11373 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11374 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11375 () (if (> r14 r13) (jump L.nest_t.11373) (jump L.nest_f.11374))) (define L.nest_f.11376 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.11377 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11371) (jump L.nest_f.11372)))) (define L.nest_f.11378 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11375) (jump L.nest_f.11376)))) (define L.nest_t.11379 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11377) (jump L.nest_f.11378)))) (define L.nest_f.11380 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.11381 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11382 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11383 () (if (> r14 r13) (jump L.nest_t.11381) (jump L.nest_f.11382))) (define L.nest_f.11384 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.11385 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11386 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11387 () (if (> r14 r13) (jump L.nest_t.11385) (jump L.nest_f.11386))) (define L.nest_f.11388 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.11389 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11383) (jump L.nest_f.11384)))) (define L.nest_f.11390 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11387) (jump L.nest_f.11388)))) (define L.nest_t.11391 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11389) (jump L.nest_f.11390)))) (define L.nest_f.11392 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.11393 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11379) (jump L.nest_f.11380)))) (define L.nest_f.11394 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11391) (jump L.nest_f.11392)))) (define L.>=.11317 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11367) (jump L.nest_f.11368)))) (define L.nest_t.11343 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11344 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11345 () (if (>= r14 r13) (jump L.nest_t.11343) (jump L.nest_f.11344))) (define L.nest_f.11346 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.11347 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11348 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11349 () (if (>= r14 r13) (jump L.nest_t.11347) (jump L.nest_f.11348))) (define L.nest_f.11350 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.11351 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11345) (jump L.nest_f.11346)))) (define L.nest_f.11352 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11349) (jump L.nest_f.11350)))) (define L.nest_t.11353 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11351) (jump L.nest_f.11352)))) (define L.nest_f.11354 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.11355 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11356 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11357 () (if (>= r14 r13) (jump L.nest_t.11355) (jump L.nest_f.11356))) (define L.nest_f.11358 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.11359 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11360 () (begin (set! rax 6) (jump r15))) (define L.nest_t.11361 () (if (>= r14 r13) (jump L.nest_t.11359) (jump L.nest_f.11360))) (define L.nest_f.11362 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.11363 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11357) (jump L.nest_f.11358)))) (define L.nest_f.11364 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11361) (jump L.nest_f.11362)))) (define L.nest_t.11365 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.11363) (jump L.nest_f.11364)))) (define L.nest_f.11366 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.11367 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.11353) (jump L.nest_f.11354)))) (define L.nest_f.11368 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.11365) (jump L.nest_f.11366)))) (define L.fixnum?.11318 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.11341) (jump L.nest_f.11342)))) (define L.nest_t.11341 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11342 () (begin (set! rax 6) (jump r15))) (define L.boolean?.11319 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.11339) (jump L.nest_f.11340)))) (define L.nest_t.11339 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11340 () (begin (set! rax 6) (jump r15))) (define L.empty?.11320 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.11337) (jump L.nest_f.11338)))) (define L.nest_t.11337 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11338 () (begin (set! rax 6) (jump r15))) (define L.void?.11321 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.11335) (jump L.nest_f.11336)))) (define L.nest_t.11335 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11336 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.11322 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.11333) (jump L.nest_f.11334)))) (define L.nest_t.11333 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11334 () (begin (set! rax 6) (jump r15))) (define L.error?.11323 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.11331) (jump L.nest_f.11332)))) (define L.nest_t.11331 () (begin (set! rax 14) (jump r15))) (define L.nest_f.11332 () (begin (set! rax 6) (jump r15))) (define L.not.11324 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.11329) (jump L.nest_f.11330)))) (define L.nest_t.11329 () (begin (set! rax 6) (jump r15))) (define L.nest_f.11330 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15857999301585799930940.s:63: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:154: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:154: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:241: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:241: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:328: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:328: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:439: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:439: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:550: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:550: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:661: error: symbol `L.' redefined
/var/tmp/rkt15857999301585799930940.s:661: error: parser: instruction expected
/var/tmp/rkt15857999301585799930940.s:820: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.11717:
  mov rdi, 32
  jmp L.fact.11701
L.fact.11701:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 16
  mov rsi, 0
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.11718
  jmp L.eq?.11702
L.rp.11718:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.11895
  jmp L.nest_f.11896
L.rp.11719:
  sub rbp, 16
  mov r15, rax
  add rbp, 16
  mov rdi, r15
  mov r15, L.rp.11720
  jmp L.fact.11701
L.rp.11720:
  sub rbp, 16
  mov r15, rax
  mov rsi, r15
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.*.11703
L.nest_t.11895:
  mov rax, 8
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.11896:
  add rbp, 16
  mov rsi, 8
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.11719
  jmp L.-.11705
L.eq?.11702:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.11893
  jmp L.nest_f.11894
L.nest_t.11893:
  mov rax, 14
  jmp r15
L.nest_f.11894:
  mov rax, 6
  jmp r15
L.*.11703:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11891
  jmp L.nest_f.11892
L.nest_t.11875:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11876:
  mov rax, 318
  jmp r15
L.nest_t.11877:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11878:
  mov rax, 318
  jmp r15
L.nest_t.11879:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11875
  jmp L.nest_f.11876
L.nest_f.11880:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11877
  jmp L.nest_f.11878
L.nest_t.11881:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11879
  jmp L.nest_f.11880
L.nest_f.11882:
  mov rax, 62
  jmp r15
L.nest_t.11883:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11884:
  mov rax, 318
  jmp r15
L.nest_t.11885:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11886:
  mov rax, 318
  jmp r15
L.nest_t.11887:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11883
  jmp L.nest_f.11884
L.nest_f.11888:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11885
  jmp L.nest_f.11886
L.nest_t.11889:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11887
  jmp L.nest_f.11888
L.nest_f.11890:
  mov rax, 62
  jmp r15
L.nest_t.11891:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11881
  jmp L.nest_f.11882
L.nest_f.11892:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11889
  jmp L.nest_f.11890
L.+.11704:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11873
  jmp L.nest_f.11874
L.nest_t.11857:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11858:
  mov rax, 830
  jmp r15
L.nest_t.11859:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11860:
  mov rax, 830
  jmp r15
L.nest_t.11861:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11857
  jmp L.nest_f.11858
L.nest_f.11862:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11859
  jmp L.nest_f.11860
L.nest_t.11863:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11861
  jmp L.nest_f.11862
L.nest_f.11864:
  mov rax, 574
  jmp r15
L.nest_t.11865:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11866:
  mov rax, 830
  jmp r15
L.nest_t.11867:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11868:
  mov rax, 830
  jmp r15
L.nest_t.11869:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11865
  jmp L.nest_f.11866
L.nest_f.11870:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11867
  jmp L.nest_f.11868
L.nest_t.11871:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11869
  jmp L.nest_f.11870
L.nest_f.11872:
  mov rax, 574
  jmp r15
L.nest_t.11873:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11863
  jmp L.nest_f.11864
L.nest_f.11874:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11871
  jmp L.nest_f.11872
L.-.11705:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11855
  jmp L.nest_f.11856
L.nest_t.11839:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11840:
  mov rax, 1342
  jmp r15
L.nest_t.11841:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11842:
  mov rax, 1342
  jmp r15
L.nest_t.11843:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11839
  jmp L.nest_f.11840
L.nest_f.11844:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11841
  jmp L.nest_f.11842
L.nest_t.11845:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11843
  jmp L.nest_f.11844
L.nest_f.11846:
  mov rax, 1086
  jmp r15
L.nest_t.11847:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11848:
  mov rax, 1342
  jmp r15
L.nest_t.11849:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.11850:
  mov rax, 1342
  jmp r15
L.nest_t.11851:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11847
  jmp L.nest_f.11848
L.nest_f.11852:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11849
  jmp L.nest_f.11850
L.nest_t.11853:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11851
  jmp L.nest_f.11852
L.nest_f.11854:
  mov rax, 1086
  jmp r15
L.nest_t.11855:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11845
  jmp L.nest_f.11846
L.nest_f.11856:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11853
  jmp L.nest_f.11854
L.<.11706:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11837
  jmp L.nest_f.11838
L.nest_t.11813:
  mov rax, 14
  jmp r15
L.nest_f.11814:
  mov rax, 6
  jmp r15
L.nest_t.11815:
  cmp r14, r13
  jl L.nest_t.11813
  jmp L.nest_f.11814
L.nest_f.11816:
  mov rax, 1854
  jmp r15
L.nest_t.11817:
  mov rax, 14
  jmp r15
L.nest_f.11818:
  mov rax, 6
  jmp r15
L.nest_t.11819:
  cmp r14, r13
  jl L.nest_t.11817
  jmp L.nest_f.11818
L.nest_f.11820:
  mov rax, 1854
  jmp r15
L.nest_t.11821:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11815
  jmp L.nest_f.11816
L.nest_f.11822:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11819
  jmp L.nest_f.11820
L.nest_t.11823:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11821
  jmp L.nest_f.11822
L.nest_f.11824:
  mov rax, 1598
  jmp r15
L.nest_t.11825:
  mov rax, 14
  jmp r15
L.nest_f.11826:
  mov rax, 6
  jmp r15
L.nest_t.11827:
  cmp r14, r13
  jl L.nest_t.11825
  jmp L.nest_f.11826
L.nest_f.11828:
  mov rax, 1854
  jmp r15
L.nest_t.11829:
  mov rax, 14
  jmp r15
L.nest_f.11830:
  mov rax, 6
  jmp r15
L.nest_t.11831:
  cmp r14, r13
  jl L.nest_t.11829
  jmp L.nest_f.11830
L.nest_f.11832:
  mov rax, 1854
  jmp r15
L.nest_t.11833:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11827
  jmp L.nest_f.11828
L.nest_f.11834:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11831
  jmp L.nest_f.11832
L.nest_t.11835:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11833
  jmp L.nest_f.11834
L.nest_f.11836:
  mov rax, 1598
  jmp r15
L.nest_t.11837:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11823
  jmp L.nest_f.11824
L.nest_f.11838:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11835
  jmp L.nest_f.11836
L.<=.11707:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11811
  jmp L.nest_f.11812
L.nest_t.11787:
  mov rax, 14
  jmp r15
L.nest_f.11788:
  mov rax, 6
  jmp r15
L.nest_t.11789:
  cmp r14, r13
  jle L.nest_t.11787
  jmp L.nest_f.11788
L.nest_f.11790:
  mov rax, 2366
  jmp r15
L.nest_t.11791:
  mov rax, 14
  jmp r15
L.nest_f.11792:
  mov rax, 6
  jmp r15
L.nest_t.11793:
  cmp r14, r13
  jle L.nest_t.11791
  jmp L.nest_f.11792
L.nest_f.11794:
  mov rax, 2366
  jmp r15
L.nest_t.11795:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11789
  jmp L.nest_f.11790
L.nest_f.11796:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11793
  jmp L.nest_f.11794
L.nest_t.11797:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11795
  jmp L.nest_f.11796
L.nest_f.11798:
  mov rax, 2110
  jmp r15
L.nest_t.11799:
  mov rax, 14
  jmp r15
L.nest_f.11800:
  mov rax, 6
  jmp r15
L.nest_t.11801:
  cmp r14, r13
  jle L.nest_t.11799
  jmp L.nest_f.11800
L.nest_f.11802:
  mov rax, 2366
  jmp r15
L.nest_t.11803:
  mov rax, 14
  jmp r15
L.nest_f.11804:
  mov rax, 6
  jmp r15
L.nest_t.11805:
  cmp r14, r13
  jle L.nest_t.11803
  jmp L.nest_f.11804
L.nest_f.11806:
  mov rax, 2366
  jmp r15
L.nest_t.11807:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11801
  jmp L.nest_f.11802
L.nest_f.11808:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11805
  jmp L.nest_f.11806
L.nest_t.11809:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11807
  jmp L.nest_f.11808
L.nest_f.11810:
  mov rax, 2110
  jmp r15
L.nest_t.11811:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11797
  jmp L.nest_f.11798
L.nest_f.11812:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11809
  jmp L.nest_f.11810
L.>.11708:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11785
  jmp L.nest_f.11786
L.nest_t.11761:
  mov rax, 14
  jmp r15
L.nest_f.11762:
  mov rax, 6
  jmp r15
L.nest_t.11763:
  cmp r14, r13
  jg L.nest_t.11761
  jmp L.nest_f.11762
L.nest_f.11764:
  mov rax, 2878
  jmp r15
L.nest_t.11765:
  mov rax, 14
  jmp r15
L.nest_f.11766:
  mov rax, 6
  jmp r15
L.nest_t.11767:
  cmp r14, r13
  jg L.nest_t.11765
  jmp L.nest_f.11766
L.nest_f.11768:
  mov rax, 2878
  jmp r15
L.nest_t.11769:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11763
  jmp L.nest_f.11764
L.nest_f.11770:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11767
  jmp L.nest_f.11768
L.nest_t.11771:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11769
  jmp L.nest_f.11770
L.nest_f.11772:
  mov rax, 2622
  jmp r15
L.nest_t.11773:
  mov rax, 14
  jmp r15
L.nest_f.11774:
  mov rax, 6
  jmp r15
L.nest_t.11775:
  cmp r14, r13
  jg L.nest_t.11773
  jmp L.nest_f.11774
L.nest_f.11776:
  mov rax, 2878
  jmp r15
L.nest_t.11777:
  mov rax, 14
  jmp r15
L.nest_f.11778:
  mov rax, 6
  jmp r15
L.nest_t.11779:
  cmp r14, r13
  jg L.nest_t.11777
  jmp L.nest_f.11778
L.nest_f.11780:
  mov rax, 2878
  jmp r15
L.nest_t.11781:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11775
  jmp L.nest_f.11776
L.nest_f.11782:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11779
  jmp L.nest_f.11780
L.nest_t.11783:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11781
  jmp L.nest_f.11782
L.nest_f.11784:
  mov rax, 2622
  jmp r15
L.nest_t.11785:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11771
  jmp L.nest_f.11772
L.nest_f.11786:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11783
  jmp L.nest_f.11784
L.>=.11709:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11759
  jmp L.nest_f.11760
L.nest_t.11735:
  mov rax, 14
  jmp r15
L.nest_f.11736:
  mov rax, 6
  jmp r15
L.nest_t.11737:
  cmp r14, r13
  jge L.nest_t.11735
  jmp L.nest_f.11736
L.nest_f.11738:
  mov rax, 3390
  jmp r15
L.nest_t.11739:
  mov rax, 14
  jmp r15
L.nest_f.11740:
  mov rax, 6
  jmp r15
L.nest_t.11741:
  cmp r14, r13
  jge L.nest_t.11739
  jmp L.nest_f.11740
L.nest_f.11742:
  mov rax, 3390
  jmp r15
L.nest_t.11743:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11737
  jmp L.nest_f.11738
L.nest_f.11744:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11741
  jmp L.nest_f.11742
L.nest_t.11745:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11743
  jmp L.nest_f.11744
L.nest_f.11746:
  mov rax, 3134
  jmp r15
L.nest_t.11747:
  mov rax, 14
  jmp r15
L.nest_f.11748:
  mov rax, 6
  jmp r15
L.nest_t.11749:
  cmp r14, r13
  jge L.nest_t.11747
  jmp L.nest_f.11748
L.nest_f.11750:
  mov rax, 3390
  jmp r15
L.nest_t.11751:
  mov rax, 14
  jmp r15
L.nest_f.11752:
  mov rax, 6
  jmp r15
L.nest_t.11753:
  cmp r14, r13
  jge L.nest_t.11751
  jmp L.nest_f.11752
L.nest_f.11754:
  mov rax, 3390
  jmp r15
L.nest_t.11755:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11749
  jmp L.nest_f.11750
L.nest_f.11756:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11753
  jmp L.nest_f.11754
L.nest_t.11757:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.11755
  jmp L.nest_f.11756
L.nest_f.11758:
  mov rax, 3134
  jmp r15
L.nest_t.11759:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.11745
  jmp L.nest_f.11746
L.nest_f.11760:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.11757
  jmp L.nest_f.11758
L.fixnum?.11710:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.11733
  jmp L.nest_f.11734
L.nest_t.11733:
  mov rax, 14
  jmp r15
L.nest_f.11734:
  mov rax, 6
  jmp r15
L.boolean?.11711:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.11731
  jmp L.nest_f.11732
L.nest_t.11731:
  mov rax, 14
  jmp r15
L.nest_f.11732:
  mov rax, 6
  jmp r15
L.empty?.11712:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.11729
  jmp L.nest_f.11730
L.nest_t.11729:
  mov rax, 14
  jmp r15
L.nest_f.11730:
  mov rax, 6
  jmp r15
L.void?.11713:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.11727
  jmp L.nest_f.11728
L.nest_t.11727:
  mov rax, 14
  jmp r15
L.nest_f.11728:
  mov rax, 6
  jmp r15
L.ascii-char?.11714:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.11725
  jmp L.nest_f.11726
L.nest_t.11725:
  mov rax, 14
  jmp r15
L.nest_f.11726:
  mov rax, 6
  jmp r15
L.error?.11715:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.11723
  jmp L.nest_f.11724
L.nest_t.11723:
  mov rax, 14
  jmp r15
L.nest_f.11724:
  mov rax, 6
  jmp r15
L.not.11716:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.11721
  jmp L.nest_f.11722
L.nest_t.11721:
  mov rax, 6
  jmp r15
L.nest_f.11722:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:175:2
actual:
  '(24
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    24
    24
    #<eof>
    24
    24
    24
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    24
    24
    24
    24
    24
    24
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.10974 #<continuation-mark-set> L.tmp.10974 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    24
    24
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    24
    24)
expected:   24
--------------------

expose-basic-blocks: (module (define L.main.15065 () (begin (nop) (set! rdi 40) (nop) (jump L.fact.15049))) (define L.not.15064 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.15063 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.15062 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.15061 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.15060 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.15059 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.15058 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.15057 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.15056 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.15055 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.15054 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.15053 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.15052 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.15051 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.15050 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fact.15049 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (return-point L.rp.15066 (begin (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.15066) (jump L.eq?.15050))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 8) (jump (rbp + 0))) (begin (set! rbp (+ rbp 16)) (return-point L.rp.15067 (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.15067) (jump L.-.15053))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (return-point L.rp.15068 (begin (set! rdi r15) (set! r15 L.rp.15068) (jump L.fact.15049))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.15051))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.15066) (jump L.eq?.15050))
process-rp: (jump L.eq?.15050)
updating tai with: (set! rbp (- rbp 16))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax 8) (jump (rbp + 0))) (begin (set! rbp (+ rbp 16)) (return-point L.rp.15067 (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.15067) (jump L.-.15053))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (return-point L.rp.15068 (begin (set! rdi r15) (set! r15 L.rp.15068) (jump L.fact.15049))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.15051)))
create-return-point-blocktwo: (return-point L.rp.15066 (begin ((if (neq? r15 6) (jump L.tmp.15401) (jump L.tmp.15403)) (set! r15 rax) (set! rbp (- rbp 16)))))
parse-rp-tail (begin ((set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.15401) (jump L.tmp.15403))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.15401) (jump L.tmp.15403))
parse-rp-tail (jump L.tmp.15401)
parse-rp-tail (jump L.tmp.15403)
flatten (module (define L.main.15421 () (begin (nop) (set! rdi 40) (nop) (jump L.fact.15405))) (define L.fact.15405 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (set! rsi 0) (set! rdi (rbp + -8)) (set! r15 L.rp.15422) (jump L.eq?.15406))) (define L.rp.15422 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.15599) (jump L.nest_f.15600)))) (define L.rp.15423 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rbp (+ rbp 16)) (set! rdi r15) (set! r15 L.rp.15424) (jump L.fact.15405))) (define L.rp.15424 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.*.15407))) (define L.nest_t.15599 () (begin (set! rax 8) (jump (rbp + 0)))) (define L.nest_f.15600 () (begin (set! rbp (+ rbp 16)) (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.15423) (jump L.-.15409))) (define L.eq?.15406 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.15597) (jump L.nest_f.15598)))) (define L.nest_t.15597 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15598 () (begin (set! rax 6) (jump r15))) (define L.*.15407 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15595) (jump L.nest_f.15596)))) (define L.nest_t.15579 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15580 () (begin (set! rax 318) (jump r15))) (define L.nest_t.15581 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15582 () (begin (set! rax 318) (jump r15))) (define L.nest_t.15583 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15579) (jump L.nest_f.15580)))) (define L.nest_f.15584 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15581) (jump L.nest_f.15582)))) (define L.nest_t.15585 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15583) (jump L.nest_f.15584)))) (define L.nest_f.15586 () (begin (set! rax 62) (jump r15))) (define L.nest_t.15587 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15588 () (begin (set! rax 318) (jump r15))) (define L.nest_t.15589 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15590 () (begin (set! rax 318) (jump r15))) (define L.nest_t.15591 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15587) (jump L.nest_f.15588)))) (define L.nest_f.15592 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15589) (jump L.nest_f.15590)))) (define L.nest_t.15593 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15591) (jump L.nest_f.15592)))) (define L.nest_f.15594 () (begin (set! rax 62) (jump r15))) (define L.nest_t.15595 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15585) (jump L.nest_f.15586)))) (define L.nest_f.15596 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15593) (jump L.nest_f.15594)))) (define L.+.15408 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15577) (jump L.nest_f.15578)))) (define L.nest_t.15561 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15562 () (begin (set! rax 830) (jump r15))) (define L.nest_t.15563 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15564 () (begin (set! rax 830) (jump r15))) (define L.nest_t.15565 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15561) (jump L.nest_f.15562)))) (define L.nest_f.15566 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15563) (jump L.nest_f.15564)))) (define L.nest_t.15567 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15565) (jump L.nest_f.15566)))) (define L.nest_f.15568 () (begin (set! rax 574) (jump r15))) (define L.nest_t.15569 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15570 () (begin (set! rax 830) (jump r15))) (define L.nest_t.15571 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15572 () (begin (set! rax 830) (jump r15))) (define L.nest_t.15573 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15569) (jump L.nest_f.15570)))) (define L.nest_f.15574 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15571) (jump L.nest_f.15572)))) (define L.nest_t.15575 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15573) (jump L.nest_f.15574)))) (define L.nest_f.15576 () (begin (set! rax 574) (jump r15))) (define L.nest_t.15577 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15567) (jump L.nest_f.15568)))) (define L.nest_f.15578 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15575) (jump L.nest_f.15576)))) (define L.-.15409 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15559) (jump L.nest_f.15560)))) (define L.nest_t.15543 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15544 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.15545 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15546 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.15547 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15543) (jump L.nest_f.15544)))) (define L.nest_f.15548 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15545) (jump L.nest_f.15546)))) (define L.nest_t.15549 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15547) (jump L.nest_f.15548)))) (define L.nest_f.15550 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.15551 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15552 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.15553 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.15554 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.15555 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15551) (jump L.nest_f.15552)))) (define L.nest_f.15556 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15553) (jump L.nest_f.15554)))) (define L.nest_t.15557 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15555) (jump L.nest_f.15556)))) (define L.nest_f.15558 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.15559 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15549) (jump L.nest_f.15550)))) (define L.nest_f.15560 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15557) (jump L.nest_f.15558)))) (define L.<.15410 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15541) (jump L.nest_f.15542)))) (define L.nest_t.15517 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15518 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15519 () (if (< r14 r13) (jump L.nest_t.15517) (jump L.nest_f.15518))) (define L.nest_f.15520 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.15521 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15522 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15523 () (if (< r14 r13) (jump L.nest_t.15521) (jump L.nest_f.15522))) (define L.nest_f.15524 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.15525 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15519) (jump L.nest_f.15520)))) (define L.nest_f.15526 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15523) (jump L.nest_f.15524)))) (define L.nest_t.15527 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15525) (jump L.nest_f.15526)))) (define L.nest_f.15528 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.15529 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15530 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15531 () (if (< r14 r13) (jump L.nest_t.15529) (jump L.nest_f.15530))) (define L.nest_f.15532 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.15533 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15534 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15535 () (if (< r14 r13) (jump L.nest_t.15533) (jump L.nest_f.15534))) (define L.nest_f.15536 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.15537 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15531) (jump L.nest_f.15532)))) (define L.nest_f.15538 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15535) (jump L.nest_f.15536)))) (define L.nest_t.15539 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15537) (jump L.nest_f.15538)))) (define L.nest_f.15540 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.15541 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15527) (jump L.nest_f.15528)))) (define L.nest_f.15542 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15539) (jump L.nest_f.15540)))) (define L.<=.15411 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15515) (jump L.nest_f.15516)))) (define L.nest_t.15491 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15492 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15493 () (if (<= r14 r13) (jump L.nest_t.15491) (jump L.nest_f.15492))) (define L.nest_f.15494 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.15495 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15496 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15497 () (if (<= r14 r13) (jump L.nest_t.15495) (jump L.nest_f.15496))) (define L.nest_f.15498 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.15499 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15493) (jump L.nest_f.15494)))) (define L.nest_f.15500 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15497) (jump L.nest_f.15498)))) (define L.nest_t.15501 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15499) (jump L.nest_f.15500)))) (define L.nest_f.15502 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.15503 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15504 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15505 () (if (<= r14 r13) (jump L.nest_t.15503) (jump L.nest_f.15504))) (define L.nest_f.15506 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.15507 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15508 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15509 () (if (<= r14 r13) (jump L.nest_t.15507) (jump L.nest_f.15508))) (define L.nest_f.15510 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.15511 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15505) (jump L.nest_f.15506)))) (define L.nest_f.15512 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15509) (jump L.nest_f.15510)))) (define L.nest_t.15513 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15511) (jump L.nest_f.15512)))) (define L.nest_f.15514 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.15515 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15501) (jump L.nest_f.15502)))) (define L.nest_f.15516 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15513) (jump L.nest_f.15514)))) (define L.>.15412 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15489) (jump L.nest_f.15490)))) (define L.nest_t.15465 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15466 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15467 () (if (> r14 r13) (jump L.nest_t.15465) (jump L.nest_f.15466))) (define L.nest_f.15468 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.15469 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15470 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15471 () (if (> r14 r13) (jump L.nest_t.15469) (jump L.nest_f.15470))) (define L.nest_f.15472 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.15473 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15467) (jump L.nest_f.15468)))) (define L.nest_f.15474 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15471) (jump L.nest_f.15472)))) (define L.nest_t.15475 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15473) (jump L.nest_f.15474)))) (define L.nest_f.15476 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.15477 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15478 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15479 () (if (> r14 r13) (jump L.nest_t.15477) (jump L.nest_f.15478))) (define L.nest_f.15480 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.15481 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15482 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15483 () (if (> r14 r13) (jump L.nest_t.15481) (jump L.nest_f.15482))) (define L.nest_f.15484 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.15485 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15479) (jump L.nest_f.15480)))) (define L.nest_f.15486 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15483) (jump L.nest_f.15484)))) (define L.nest_t.15487 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15485) (jump L.nest_f.15486)))) (define L.nest_f.15488 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.15489 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15475) (jump L.nest_f.15476)))) (define L.nest_f.15490 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15487) (jump L.nest_f.15488)))) (define L.>=.15413 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15463) (jump L.nest_f.15464)))) (define L.nest_t.15439 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15440 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15441 () (if (>= r14 r13) (jump L.nest_t.15439) (jump L.nest_f.15440))) (define L.nest_f.15442 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.15443 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15444 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15445 () (if (>= r14 r13) (jump L.nest_t.15443) (jump L.nest_f.15444))) (define L.nest_f.15446 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.15447 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15441) (jump L.nest_f.15442)))) (define L.nest_f.15448 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15445) (jump L.nest_f.15446)))) (define L.nest_t.15449 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15447) (jump L.nest_f.15448)))) (define L.nest_f.15450 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.15451 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15452 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15453 () (if (>= r14 r13) (jump L.nest_t.15451) (jump L.nest_f.15452))) (define L.nest_f.15454 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.15455 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15456 () (begin (set! rax 6) (jump r15))) (define L.nest_t.15457 () (if (>= r14 r13) (jump L.nest_t.15455) (jump L.nest_f.15456))) (define L.nest_f.15458 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.15459 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15453) (jump L.nest_f.15454)))) (define L.nest_f.15460 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15457) (jump L.nest_f.15458)))) (define L.nest_t.15461 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.15459) (jump L.nest_f.15460)))) (define L.nest_f.15462 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.15463 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.15449) (jump L.nest_f.15450)))) (define L.nest_f.15464 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.15461) (jump L.nest_f.15462)))) (define L.fixnum?.15414 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.15437) (jump L.nest_f.15438)))) (define L.nest_t.15437 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15438 () (begin (set! rax 6) (jump r15))) (define L.boolean?.15415 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.15435) (jump L.nest_f.15436)))) (define L.nest_t.15435 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15436 () (begin (set! rax 6) (jump r15))) (define L.empty?.15416 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.15433) (jump L.nest_f.15434)))) (define L.nest_t.15433 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15434 () (begin (set! rax 6) (jump r15))) (define L.void?.15417 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.15431) (jump L.nest_f.15432)))) (define L.nest_t.15431 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15432 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.15418 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.15429) (jump L.nest_f.15430)))) (define L.nest_t.15429 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15430 () (begin (set! rax 6) (jump r15))) (define L.error?.15419 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.15427) (jump L.nest_f.15428)))) (define L.nest_t.15427 () (begin (set! rax 14) (jump r15))) (define L.nest_f.15428 () (begin (set! rax 6) (jump r15))) (define L.not.15420 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.15425) (jump L.nest_f.15426)))) (define L.nest_t.15425 () (begin (set! rax 6) (jump r15))) (define L.nest_f.15426 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15857999551585799955531.s:63: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:154: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:154: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:241: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:241: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:328: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:328: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:439: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:439: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:550: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:550: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:661: error: symbol `L.' redefined
/var/tmp/rkt15857999551585799955531.s:661: error: parser: instruction expected
/var/tmp/rkt15857999551585799955531.s:820: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.15813:
  mov rdi, 40
  jmp L.fact.15797
L.fact.15797:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 16
  mov rsi, 0
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.15814
  jmp L.eq?.15798
L.rp.15814:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.15991
  jmp L.nest_f.15992
L.rp.15815:
  sub rbp, 16
  mov r15, rax
  add rbp, 16
  mov rdi, r15
  mov r15, L.rp.15816
  jmp L.fact.15797
L.rp.15816:
  sub rbp, 16
  mov r15, rax
  mov rsi, r15
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.*.15799
L.nest_t.15991:
  mov rax, 8
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.15992:
  add rbp, 16
  mov rsi, 8
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.15815
  jmp L.-.15801
L.eq?.15798:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.15989
  jmp L.nest_f.15990
L.nest_t.15989:
  mov rax, 14
  jmp r15
L.nest_f.15990:
  mov rax, 6
  jmp r15
L.*.15799:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15987
  jmp L.nest_f.15988
L.nest_t.15971:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15972:
  mov rax, 318
  jmp r15
L.nest_t.15973:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15974:
  mov rax, 318
  jmp r15
L.nest_t.15975:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15971
  jmp L.nest_f.15972
L.nest_f.15976:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15973
  jmp L.nest_f.15974
L.nest_t.15977:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15975
  jmp L.nest_f.15976
L.nest_f.15978:
  mov rax, 62
  jmp r15
L.nest_t.15979:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15980:
  mov rax, 318
  jmp r15
L.nest_t.15981:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15982:
  mov rax, 318
  jmp r15
L.nest_t.15983:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15979
  jmp L.nest_f.15980
L.nest_f.15984:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15981
  jmp L.nest_f.15982
L.nest_t.15985:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15983
  jmp L.nest_f.15984
L.nest_f.15986:
  mov rax, 62
  jmp r15
L.nest_t.15987:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15977
  jmp L.nest_f.15978
L.nest_f.15988:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15985
  jmp L.nest_f.15986
L.+.15800:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15969
  jmp L.nest_f.15970
L.nest_t.15953:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15954:
  mov rax, 830
  jmp r15
L.nest_t.15955:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15956:
  mov rax, 830
  jmp r15
L.nest_t.15957:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15953
  jmp L.nest_f.15954
L.nest_f.15958:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15955
  jmp L.nest_f.15956
L.nest_t.15959:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15957
  jmp L.nest_f.15958
L.nest_f.15960:
  mov rax, 574
  jmp r15
L.nest_t.15961:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15962:
  mov rax, 830
  jmp r15
L.nest_t.15963:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15964:
  mov rax, 830
  jmp r15
L.nest_t.15965:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15961
  jmp L.nest_f.15962
L.nest_f.15966:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15963
  jmp L.nest_f.15964
L.nest_t.15967:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15965
  jmp L.nest_f.15966
L.nest_f.15968:
  mov rax, 574
  jmp r15
L.nest_t.15969:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15959
  jmp L.nest_f.15960
L.nest_f.15970:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15967
  jmp L.nest_f.15968
L.-.15801:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15951
  jmp L.nest_f.15952
L.nest_t.15935:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15936:
  mov rax, 1342
  jmp r15
L.nest_t.15937:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15938:
  mov rax, 1342
  jmp r15
L.nest_t.15939:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15935
  jmp L.nest_f.15936
L.nest_f.15940:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15937
  jmp L.nest_f.15938
L.nest_t.15941:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15939
  jmp L.nest_f.15940
L.nest_f.15942:
  mov rax, 1086
  jmp r15
L.nest_t.15943:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15944:
  mov rax, 1342
  jmp r15
L.nest_t.15945:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.15946:
  mov rax, 1342
  jmp r15
L.nest_t.15947:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15943
  jmp L.nest_f.15944
L.nest_f.15948:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15945
  jmp L.nest_f.15946
L.nest_t.15949:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15947
  jmp L.nest_f.15948
L.nest_f.15950:
  mov rax, 1086
  jmp r15
L.nest_t.15951:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15941
  jmp L.nest_f.15942
L.nest_f.15952:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15949
  jmp L.nest_f.15950
L.<.15802:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15933
  jmp L.nest_f.15934
L.nest_t.15909:
  mov rax, 14
  jmp r15
L.nest_f.15910:
  mov rax, 6
  jmp r15
L.nest_t.15911:
  cmp r14, r13
  jl L.nest_t.15909
  jmp L.nest_f.15910
L.nest_f.15912:
  mov rax, 1854
  jmp r15
L.nest_t.15913:
  mov rax, 14
  jmp r15
L.nest_f.15914:
  mov rax, 6
  jmp r15
L.nest_t.15915:
  cmp r14, r13
  jl L.nest_t.15913
  jmp L.nest_f.15914
L.nest_f.15916:
  mov rax, 1854
  jmp r15
L.nest_t.15917:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15911
  jmp L.nest_f.15912
L.nest_f.15918:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15915
  jmp L.nest_f.15916
L.nest_t.15919:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15917
  jmp L.nest_f.15918
L.nest_f.15920:
  mov rax, 1598
  jmp r15
L.nest_t.15921:
  mov rax, 14
  jmp r15
L.nest_f.15922:
  mov rax, 6
  jmp r15
L.nest_t.15923:
  cmp r14, r13
  jl L.nest_t.15921
  jmp L.nest_f.15922
L.nest_f.15924:
  mov rax, 1854
  jmp r15
L.nest_t.15925:
  mov rax, 14
  jmp r15
L.nest_f.15926:
  mov rax, 6
  jmp r15
L.nest_t.15927:
  cmp r14, r13
  jl L.nest_t.15925
  jmp L.nest_f.15926
L.nest_f.15928:
  mov rax, 1854
  jmp r15
L.nest_t.15929:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15923
  jmp L.nest_f.15924
L.nest_f.15930:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15927
  jmp L.nest_f.15928
L.nest_t.15931:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15929
  jmp L.nest_f.15930
L.nest_f.15932:
  mov rax, 1598
  jmp r15
L.nest_t.15933:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15919
  jmp L.nest_f.15920
L.nest_f.15934:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15931
  jmp L.nest_f.15932
L.<=.15803:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15907
  jmp L.nest_f.15908
L.nest_t.15883:
  mov rax, 14
  jmp r15
L.nest_f.15884:
  mov rax, 6
  jmp r15
L.nest_t.15885:
  cmp r14, r13
  jle L.nest_t.15883
  jmp L.nest_f.15884
L.nest_f.15886:
  mov rax, 2366
  jmp r15
L.nest_t.15887:
  mov rax, 14
  jmp r15
L.nest_f.15888:
  mov rax, 6
  jmp r15
L.nest_t.15889:
  cmp r14, r13
  jle L.nest_t.15887
  jmp L.nest_f.15888
L.nest_f.15890:
  mov rax, 2366
  jmp r15
L.nest_t.15891:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15885
  jmp L.nest_f.15886
L.nest_f.15892:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15889
  jmp L.nest_f.15890
L.nest_t.15893:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15891
  jmp L.nest_f.15892
L.nest_f.15894:
  mov rax, 2110
  jmp r15
L.nest_t.15895:
  mov rax, 14
  jmp r15
L.nest_f.15896:
  mov rax, 6
  jmp r15
L.nest_t.15897:
  cmp r14, r13
  jle L.nest_t.15895
  jmp L.nest_f.15896
L.nest_f.15898:
  mov rax, 2366
  jmp r15
L.nest_t.15899:
  mov rax, 14
  jmp r15
L.nest_f.15900:
  mov rax, 6
  jmp r15
L.nest_t.15901:
  cmp r14, r13
  jle L.nest_t.15899
  jmp L.nest_f.15900
L.nest_f.15902:
  mov rax, 2366
  jmp r15
L.nest_t.15903:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15897
  jmp L.nest_f.15898
L.nest_f.15904:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15901
  jmp L.nest_f.15902
L.nest_t.15905:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15903
  jmp L.nest_f.15904
L.nest_f.15906:
  mov rax, 2110
  jmp r15
L.nest_t.15907:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15893
  jmp L.nest_f.15894
L.nest_f.15908:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15905
  jmp L.nest_f.15906
L.>.15804:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15881
  jmp L.nest_f.15882
L.nest_t.15857:
  mov rax, 14
  jmp r15
L.nest_f.15858:
  mov rax, 6
  jmp r15
L.nest_t.15859:
  cmp r14, r13
  jg L.nest_t.15857
  jmp L.nest_f.15858
L.nest_f.15860:
  mov rax, 2878
  jmp r15
L.nest_t.15861:
  mov rax, 14
  jmp r15
L.nest_f.15862:
  mov rax, 6
  jmp r15
L.nest_t.15863:
  cmp r14, r13
  jg L.nest_t.15861
  jmp L.nest_f.15862
L.nest_f.15864:
  mov rax, 2878
  jmp r15
L.nest_t.15865:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15859
  jmp L.nest_f.15860
L.nest_f.15866:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15863
  jmp L.nest_f.15864
L.nest_t.15867:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15865
  jmp L.nest_f.15866
L.nest_f.15868:
  mov rax, 2622
  jmp r15
L.nest_t.15869:
  mov rax, 14
  jmp r15
L.nest_f.15870:
  mov rax, 6
  jmp r15
L.nest_t.15871:
  cmp r14, r13
  jg L.nest_t.15869
  jmp L.nest_f.15870
L.nest_f.15872:
  mov rax, 2878
  jmp r15
L.nest_t.15873:
  mov rax, 14
  jmp r15
L.nest_f.15874:
  mov rax, 6
  jmp r15
L.nest_t.15875:
  cmp r14, r13
  jg L.nest_t.15873
  jmp L.nest_f.15874
L.nest_f.15876:
  mov rax, 2878
  jmp r15
L.nest_t.15877:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15871
  jmp L.nest_f.15872
L.nest_f.15878:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15875
  jmp L.nest_f.15876
L.nest_t.15879:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15877
  jmp L.nest_f.15878
L.nest_f.15880:
  mov rax, 2622
  jmp r15
L.nest_t.15881:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15867
  jmp L.nest_f.15868
L.nest_f.15882:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15879
  jmp L.nest_f.15880
L.>=.15805:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15855
  jmp L.nest_f.15856
L.nest_t.15831:
  mov rax, 14
  jmp r15
L.nest_f.15832:
  mov rax, 6
  jmp r15
L.nest_t.15833:
  cmp r14, r13
  jge L.nest_t.15831
  jmp L.nest_f.15832
L.nest_f.15834:
  mov rax, 3390
  jmp r15
L.nest_t.15835:
  mov rax, 14
  jmp r15
L.nest_f.15836:
  mov rax, 6
  jmp r15
L.nest_t.15837:
  cmp r14, r13
  jge L.nest_t.15835
  jmp L.nest_f.15836
L.nest_f.15838:
  mov rax, 3390
  jmp r15
L.nest_t.15839:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15833
  jmp L.nest_f.15834
L.nest_f.15840:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15837
  jmp L.nest_f.15838
L.nest_t.15841:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15839
  jmp L.nest_f.15840
L.nest_f.15842:
  mov rax, 3134
  jmp r15
L.nest_t.15843:
  mov rax, 14
  jmp r15
L.nest_f.15844:
  mov rax, 6
  jmp r15
L.nest_t.15845:
  cmp r14, r13
  jge L.nest_t.15843
  jmp L.nest_f.15844
L.nest_f.15846:
  mov rax, 3390
  jmp r15
L.nest_t.15847:
  mov rax, 14
  jmp r15
L.nest_f.15848:
  mov rax, 6
  jmp r15
L.nest_t.15849:
  cmp r14, r13
  jge L.nest_t.15847
  jmp L.nest_f.15848
L.nest_f.15850:
  mov rax, 3390
  jmp r15
L.nest_t.15851:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15845
  jmp L.nest_f.15846
L.nest_f.15852:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15849
  jmp L.nest_f.15850
L.nest_t.15853:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.15851
  jmp L.nest_f.15852
L.nest_f.15854:
  mov rax, 3134
  jmp r15
L.nest_t.15855:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.15841
  jmp L.nest_f.15842
L.nest_f.15856:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.15853
  jmp L.nest_f.15854
L.fixnum?.15806:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.15829
  jmp L.nest_f.15830
L.nest_t.15829:
  mov rax, 14
  jmp r15
L.nest_f.15830:
  mov rax, 6
  jmp r15
L.boolean?.15807:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.15827
  jmp L.nest_f.15828
L.nest_t.15827:
  mov rax, 14
  jmp r15
L.nest_f.15828:
  mov rax, 6
  jmp r15
L.empty?.15808:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.15825
  jmp L.nest_f.15826
L.nest_t.15825:
  mov rax, 14
  jmp r15
L.nest_f.15826:
  mov rax, 6
  jmp r15
L.void?.15809:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.15823
  jmp L.nest_f.15824
L.nest_t.15823:
  mov rax, 14
  jmp r15
L.nest_f.15824:
  mov rax, 6
  jmp r15
L.ascii-char?.15810:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.15821
  jmp L.nest_f.15822
L.nest_t.15821:
  mov rax, 14
  jmp r15
L.nest_f.15822:
  mov rax, 6
  jmp r15
L.error?.15811:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.15819
  jmp L.nest_f.15820
L.nest_t.15819:
  mov rax, 14
  jmp r15
L.nest_f.15820:
  mov rax, 6
  jmp r15
L.not.15812:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.15817
  jmp L.nest_f.15818
L.nest_t.15817:
  mov rax, 6
  jmp r15
L.nest_f.15818:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:180:2
actual:
  '(120
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    120
    120
    #<eof>
    120
    120
    120
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    120
    120
    120
    120
    120
    120
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.15070 #<continuation-mark-set> L.tmp.15070 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    120
    120
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    120
    120)
expected:   120
--------------------

expose-basic-blocks: (module (define L.main.19020 () (begin (nop) (set! rdx 8) (set! rsi 0) (set! rdi 32) (nop) (jump L.fib_loop.19004))) (define L.not.19019 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.19018 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.19017 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.19016 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.19015 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.19014 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.19013 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.19012 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.19011 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.19010 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.19009 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.19008 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.19007 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.19006 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.19005 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fib_loop.19004 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! (rbp + 24) rdx) (set! rbp (+ rbp 32)) (return-point L.rp.19021 (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.19021) (jump L.eq?.19005))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.19022 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.19022) (jump L.eq?.19005))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 24)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.19023 (begin (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.19023) (jump L.+.19007))) (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (return-point L.rp.19024 (begin (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.19024) (jump L.+.19007))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.19004))))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.19021) (jump L.eq?.19005))
process-rp: (jump L.eq?.19005)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.19022 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.19022) (jump L.eq?.19005))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 24)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.19023 (begin (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.19023) (jump L.+.19007))) (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (return-point L.rp.19024 (begin (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.19024) (jump L.+.19007))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.19004)))))
create-return-point-blocktwo: (return-point L.rp.19021 (begin ((if (neq? r15 6) (jump L.tmp.19357) (jump L.tmp.19359)) (set! r15 rax) (set! rbp (- rbp 32)))))
parse-rp-tail (begin ((set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.19357) (jump L.tmp.19359))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.19357) (jump L.tmp.19359))
parse-rp-tail (jump L.tmp.19357)
parse-rp-tail (jump L.tmp.19359)
flatten (module (define L.main.19381 () (begin (nop) (set! rdx 8) (set! rsi 0) (set! rdi 32) (nop) (jump L.fib_loop.19365))) (define L.fib_loop.19365 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! (rbp + 24) rdx) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.19382) (jump L.eq?.19366))) (define L.rp.19382 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.19562) (jump L.nest_f.19563)))) (define L.rp.19383 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.19560) (jump L.nest_f.19561)))) (define L.rp.19384 () (begin (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.19385) (jump L.+.19368))) (define L.rp.19385 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.19365))) (define L.nest_t.19560 () (begin (set! rax (rbp + 24)) (jump (rbp + 0)))) (define L.nest_f.19561 () (begin (set! rbp (+ rbp 32)) (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.19384) (jump L.+.19368))) (define L.nest_t.19562 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.19563 () (begin (set! rbp (+ rbp 32)) (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.19383) (jump L.eq?.19366))) (define L.eq?.19366 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.19558) (jump L.nest_f.19559)))) (define L.nest_t.19558 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19559 () (begin (set! rax 6) (jump r15))) (define L.*.19367 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19556) (jump L.nest_f.19557)))) (define L.nest_t.19540 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19541 () (begin (set! rax 318) (jump r15))) (define L.nest_t.19542 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19543 () (begin (set! rax 318) (jump r15))) (define L.nest_t.19544 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19540) (jump L.nest_f.19541)))) (define L.nest_f.19545 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19542) (jump L.nest_f.19543)))) (define L.nest_t.19546 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19544) (jump L.nest_f.19545)))) (define L.nest_f.19547 () (begin (set! rax 62) (jump r15))) (define L.nest_t.19548 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19549 () (begin (set! rax 318) (jump r15))) (define L.nest_t.19550 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19551 () (begin (set! rax 318) (jump r15))) (define L.nest_t.19552 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19548) (jump L.nest_f.19549)))) (define L.nest_f.19553 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19550) (jump L.nest_f.19551)))) (define L.nest_t.19554 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19552) (jump L.nest_f.19553)))) (define L.nest_f.19555 () (begin (set! rax 62) (jump r15))) (define L.nest_t.19556 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19546) (jump L.nest_f.19547)))) (define L.nest_f.19557 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19554) (jump L.nest_f.19555)))) (define L.+.19368 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19538) (jump L.nest_f.19539)))) (define L.nest_t.19522 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19523 () (begin (set! rax 830) (jump r15))) (define L.nest_t.19524 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19525 () (begin (set! rax 830) (jump r15))) (define L.nest_t.19526 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19522) (jump L.nest_f.19523)))) (define L.nest_f.19527 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19524) (jump L.nest_f.19525)))) (define L.nest_t.19528 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19526) (jump L.nest_f.19527)))) (define L.nest_f.19529 () (begin (set! rax 574) (jump r15))) (define L.nest_t.19530 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19531 () (begin (set! rax 830) (jump r15))) (define L.nest_t.19532 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19533 () (begin (set! rax 830) (jump r15))) (define L.nest_t.19534 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19530) (jump L.nest_f.19531)))) (define L.nest_f.19535 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19532) (jump L.nest_f.19533)))) (define L.nest_t.19536 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19534) (jump L.nest_f.19535)))) (define L.nest_f.19537 () (begin (set! rax 574) (jump r15))) (define L.nest_t.19538 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19528) (jump L.nest_f.19529)))) (define L.nest_f.19539 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19536) (jump L.nest_f.19537)))) (define L.-.19369 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19520) (jump L.nest_f.19521)))) (define L.nest_t.19504 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19505 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.19506 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19507 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.19508 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19504) (jump L.nest_f.19505)))) (define L.nest_f.19509 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19506) (jump L.nest_f.19507)))) (define L.nest_t.19510 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19508) (jump L.nest_f.19509)))) (define L.nest_f.19511 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.19512 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19513 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.19514 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.19515 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.19516 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19512) (jump L.nest_f.19513)))) (define L.nest_f.19517 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19514) (jump L.nest_f.19515)))) (define L.nest_t.19518 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19516) (jump L.nest_f.19517)))) (define L.nest_f.19519 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.19520 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19510) (jump L.nest_f.19511)))) (define L.nest_f.19521 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19518) (jump L.nest_f.19519)))) (define L.<.19370 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19502) (jump L.nest_f.19503)))) (define L.nest_t.19478 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19479 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19480 () (if (< r14 r13) (jump L.nest_t.19478) (jump L.nest_f.19479))) (define L.nest_f.19481 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.19482 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19483 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19484 () (if (< r14 r13) (jump L.nest_t.19482) (jump L.nest_f.19483))) (define L.nest_f.19485 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.19486 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19480) (jump L.nest_f.19481)))) (define L.nest_f.19487 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19484) (jump L.nest_f.19485)))) (define L.nest_t.19488 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19486) (jump L.nest_f.19487)))) (define L.nest_f.19489 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.19490 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19491 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19492 () (if (< r14 r13) (jump L.nest_t.19490) (jump L.nest_f.19491))) (define L.nest_f.19493 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.19494 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19495 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19496 () (if (< r14 r13) (jump L.nest_t.19494) (jump L.nest_f.19495))) (define L.nest_f.19497 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.19498 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19492) (jump L.nest_f.19493)))) (define L.nest_f.19499 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19496) (jump L.nest_f.19497)))) (define L.nest_t.19500 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19498) (jump L.nest_f.19499)))) (define L.nest_f.19501 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.19502 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19488) (jump L.nest_f.19489)))) (define L.nest_f.19503 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19500) (jump L.nest_f.19501)))) (define L.<=.19371 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19476) (jump L.nest_f.19477)))) (define L.nest_t.19452 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19453 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19454 () (if (<= r14 r13) (jump L.nest_t.19452) (jump L.nest_f.19453))) (define L.nest_f.19455 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.19456 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19457 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19458 () (if (<= r14 r13) (jump L.nest_t.19456) (jump L.nest_f.19457))) (define L.nest_f.19459 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.19460 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19454) (jump L.nest_f.19455)))) (define L.nest_f.19461 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19458) (jump L.nest_f.19459)))) (define L.nest_t.19462 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19460) (jump L.nest_f.19461)))) (define L.nest_f.19463 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.19464 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19465 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19466 () (if (<= r14 r13) (jump L.nest_t.19464) (jump L.nest_f.19465))) (define L.nest_f.19467 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.19468 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19469 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19470 () (if (<= r14 r13) (jump L.nest_t.19468) (jump L.nest_f.19469))) (define L.nest_f.19471 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.19472 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19466) (jump L.nest_f.19467)))) (define L.nest_f.19473 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19470) (jump L.nest_f.19471)))) (define L.nest_t.19474 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19472) (jump L.nest_f.19473)))) (define L.nest_f.19475 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.19476 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19462) (jump L.nest_f.19463)))) (define L.nest_f.19477 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19474) (jump L.nest_f.19475)))) (define L.>.19372 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19450) (jump L.nest_f.19451)))) (define L.nest_t.19426 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19427 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19428 () (if (> r14 r13) (jump L.nest_t.19426) (jump L.nest_f.19427))) (define L.nest_f.19429 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.19430 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19431 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19432 () (if (> r14 r13) (jump L.nest_t.19430) (jump L.nest_f.19431))) (define L.nest_f.19433 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.19434 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19428) (jump L.nest_f.19429)))) (define L.nest_f.19435 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19432) (jump L.nest_f.19433)))) (define L.nest_t.19436 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19434) (jump L.nest_f.19435)))) (define L.nest_f.19437 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.19438 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19439 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19440 () (if (> r14 r13) (jump L.nest_t.19438) (jump L.nest_f.19439))) (define L.nest_f.19441 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.19442 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19443 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19444 () (if (> r14 r13) (jump L.nest_t.19442) (jump L.nest_f.19443))) (define L.nest_f.19445 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.19446 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19440) (jump L.nest_f.19441)))) (define L.nest_f.19447 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19444) (jump L.nest_f.19445)))) (define L.nest_t.19448 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19446) (jump L.nest_f.19447)))) (define L.nest_f.19449 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.19450 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19436) (jump L.nest_f.19437)))) (define L.nest_f.19451 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19448) (jump L.nest_f.19449)))) (define L.>=.19373 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19424) (jump L.nest_f.19425)))) (define L.nest_t.19400 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19401 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19402 () (if (>= r14 r13) (jump L.nest_t.19400) (jump L.nest_f.19401))) (define L.nest_f.19403 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.19404 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19405 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19406 () (if (>= r14 r13) (jump L.nest_t.19404) (jump L.nest_f.19405))) (define L.nest_f.19407 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.19408 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19402) (jump L.nest_f.19403)))) (define L.nest_f.19409 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19406) (jump L.nest_f.19407)))) (define L.nest_t.19410 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19408) (jump L.nest_f.19409)))) (define L.nest_f.19411 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.19412 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19413 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19414 () (if (>= r14 r13) (jump L.nest_t.19412) (jump L.nest_f.19413))) (define L.nest_f.19415 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.19416 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19417 () (begin (set! rax 6) (jump r15))) (define L.nest_t.19418 () (if (>= r14 r13) (jump L.nest_t.19416) (jump L.nest_f.19417))) (define L.nest_f.19419 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.19420 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19414) (jump L.nest_f.19415)))) (define L.nest_f.19421 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19418) (jump L.nest_f.19419)))) (define L.nest_t.19422 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.19420) (jump L.nest_f.19421)))) (define L.nest_f.19423 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.19424 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.19410) (jump L.nest_f.19411)))) (define L.nest_f.19425 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.19422) (jump L.nest_f.19423)))) (define L.fixnum?.19374 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.19398) (jump L.nest_f.19399)))) (define L.nest_t.19398 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19399 () (begin (set! rax 6) (jump r15))) (define L.boolean?.19375 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.19396) (jump L.nest_f.19397)))) (define L.nest_t.19396 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19397 () (begin (set! rax 6) (jump r15))) (define L.empty?.19376 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.19394) (jump L.nest_f.19395)))) (define L.nest_t.19394 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19395 () (begin (set! rax 6) (jump r15))) (define L.void?.19377 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.19392) (jump L.nest_f.19393)))) (define L.nest_t.19392 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19393 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.19378 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.19390) (jump L.nest_f.19391)))) (define L.nest_t.19390 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19391 () (begin (set! rax 6) (jump r15))) (define L.error?.19379 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.19388) (jump L.nest_f.19389)))) (define L.nest_t.19388 () (begin (set! rax 14) (jump r15))) (define L.nest_f.19389 () (begin (set! rax 6) (jump r15))) (define L.not.19380 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.19386) (jump L.nest_f.19387)))) (define L.nest_t.19386 () (begin (set! rax 6) (jump r15))) (define L.nest_f.19387 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15857999991585799999017.s:85: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:176: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:176: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:263: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:263: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:350: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:350: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:461: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:461: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:572: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:572: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:683: error: symbol `L.' redefined
/var/tmp/rkt15857999991585799999017.s:683: error: parser: instruction expected
/var/tmp/rkt15857999991585799999017.s:842: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.19779:
  mov rdx, 8
  mov rsi, 0
  mov rdi, 32
  jmp L.fib_loop.19763
L.fib_loop.19763:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 16], rdi
  mov QWORD [rbp + 8], rsi
  mov QWORD [rbp + 24], rdx
  add rbp, 32
  mov rsi, 0
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.19780
  jmp L.eq?.19764
L.rp.19780:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.19960
  jmp L.nest_f.19961
L.rp.19781:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.19958
  jmp L.nest_f.19959
L.rp.19782:
  sub rbp, 32
  mov QWORD [rbp + 16], rax
  add rbp, 32
  mov rsi, QWORD [rbp + -8]
  mov rdi, QWORD [rbp + -24]
  mov r15, L.rp.19783
  jmp L.+.19766
L.rp.19783:
  sub rbp, 32
  mov r15, rax
  mov rdx, r15
  mov rsi, QWORD [rbp + 24]
  mov rdi, QWORD [rbp + 16]
  mov r15, QWORD [rbp + 0]
  jmp L.fib_loop.19763
L.nest_t.19958:
  mov rax, QWORD [rbp + 24]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.19959:
  add rbp, 32
  mov rsi, -8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.19782
  jmp L.+.19766
L.nest_t.19960:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.19961:
  add rbp, 32
  mov rsi, 8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.19781
  jmp L.eq?.19764
L.eq?.19764:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.19956
  jmp L.nest_f.19957
L.nest_t.19956:
  mov rax, 14
  jmp r15
L.nest_f.19957:
  mov rax, 6
  jmp r15
L.*.19765:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19954
  jmp L.nest_f.19955
L.nest_t.19938:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19939:
  mov rax, 318
  jmp r15
L.nest_t.19940:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19941:
  mov rax, 318
  jmp r15
L.nest_t.19942:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19938
  jmp L.nest_f.19939
L.nest_f.19943:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19940
  jmp L.nest_f.19941
L.nest_t.19944:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19942
  jmp L.nest_f.19943
L.nest_f.19945:
  mov rax, 62
  jmp r15
L.nest_t.19946:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19947:
  mov rax, 318
  jmp r15
L.nest_t.19948:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19949:
  mov rax, 318
  jmp r15
L.nest_t.19950:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19946
  jmp L.nest_f.19947
L.nest_f.19951:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19948
  jmp L.nest_f.19949
L.nest_t.19952:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19950
  jmp L.nest_f.19951
L.nest_f.19953:
  mov rax, 62
  jmp r15
L.nest_t.19954:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19944
  jmp L.nest_f.19945
L.nest_f.19955:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19952
  jmp L.nest_f.19953
L.+.19766:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19936
  jmp L.nest_f.19937
L.nest_t.19920:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19921:
  mov rax, 830
  jmp r15
L.nest_t.19922:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19923:
  mov rax, 830
  jmp r15
L.nest_t.19924:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19920
  jmp L.nest_f.19921
L.nest_f.19925:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19922
  jmp L.nest_f.19923
L.nest_t.19926:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19924
  jmp L.nest_f.19925
L.nest_f.19927:
  mov rax, 574
  jmp r15
L.nest_t.19928:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19929:
  mov rax, 830
  jmp r15
L.nest_t.19930:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19931:
  mov rax, 830
  jmp r15
L.nest_t.19932:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19928
  jmp L.nest_f.19929
L.nest_f.19933:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19930
  jmp L.nest_f.19931
L.nest_t.19934:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19932
  jmp L.nest_f.19933
L.nest_f.19935:
  mov rax, 574
  jmp r15
L.nest_t.19936:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19926
  jmp L.nest_f.19927
L.nest_f.19937:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19934
  jmp L.nest_f.19935
L.-.19767:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19918
  jmp L.nest_f.19919
L.nest_t.19902:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19903:
  mov rax, 1342
  jmp r15
L.nest_t.19904:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19905:
  mov rax, 1342
  jmp r15
L.nest_t.19906:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19902
  jmp L.nest_f.19903
L.nest_f.19907:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19904
  jmp L.nest_f.19905
L.nest_t.19908:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19906
  jmp L.nest_f.19907
L.nest_f.19909:
  mov rax, 1086
  jmp r15
L.nest_t.19910:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19911:
  mov rax, 1342
  jmp r15
L.nest_t.19912:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.19913:
  mov rax, 1342
  jmp r15
L.nest_t.19914:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19910
  jmp L.nest_f.19911
L.nest_f.19915:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19912
  jmp L.nest_f.19913
L.nest_t.19916:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19914
  jmp L.nest_f.19915
L.nest_f.19917:
  mov rax, 1086
  jmp r15
L.nest_t.19918:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19908
  jmp L.nest_f.19909
L.nest_f.19919:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19916
  jmp L.nest_f.19917
L.<.19768:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19900
  jmp L.nest_f.19901
L.nest_t.19876:
  mov rax, 14
  jmp r15
L.nest_f.19877:
  mov rax, 6
  jmp r15
L.nest_t.19878:
  cmp r14, r13
  jl L.nest_t.19876
  jmp L.nest_f.19877
L.nest_f.19879:
  mov rax, 1854
  jmp r15
L.nest_t.19880:
  mov rax, 14
  jmp r15
L.nest_f.19881:
  mov rax, 6
  jmp r15
L.nest_t.19882:
  cmp r14, r13
  jl L.nest_t.19880
  jmp L.nest_f.19881
L.nest_f.19883:
  mov rax, 1854
  jmp r15
L.nest_t.19884:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19878
  jmp L.nest_f.19879
L.nest_f.19885:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19882
  jmp L.nest_f.19883
L.nest_t.19886:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19884
  jmp L.nest_f.19885
L.nest_f.19887:
  mov rax, 1598
  jmp r15
L.nest_t.19888:
  mov rax, 14
  jmp r15
L.nest_f.19889:
  mov rax, 6
  jmp r15
L.nest_t.19890:
  cmp r14, r13
  jl L.nest_t.19888
  jmp L.nest_f.19889
L.nest_f.19891:
  mov rax, 1854
  jmp r15
L.nest_t.19892:
  mov rax, 14
  jmp r15
L.nest_f.19893:
  mov rax, 6
  jmp r15
L.nest_t.19894:
  cmp r14, r13
  jl L.nest_t.19892
  jmp L.nest_f.19893
L.nest_f.19895:
  mov rax, 1854
  jmp r15
L.nest_t.19896:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19890
  jmp L.nest_f.19891
L.nest_f.19897:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19894
  jmp L.nest_f.19895
L.nest_t.19898:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19896
  jmp L.nest_f.19897
L.nest_f.19899:
  mov rax, 1598
  jmp r15
L.nest_t.19900:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19886
  jmp L.nest_f.19887
L.nest_f.19901:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19898
  jmp L.nest_f.19899
L.<=.19769:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19874
  jmp L.nest_f.19875
L.nest_t.19850:
  mov rax, 14
  jmp r15
L.nest_f.19851:
  mov rax, 6
  jmp r15
L.nest_t.19852:
  cmp r14, r13
  jle L.nest_t.19850
  jmp L.nest_f.19851
L.nest_f.19853:
  mov rax, 2366
  jmp r15
L.nest_t.19854:
  mov rax, 14
  jmp r15
L.nest_f.19855:
  mov rax, 6
  jmp r15
L.nest_t.19856:
  cmp r14, r13
  jle L.nest_t.19854
  jmp L.nest_f.19855
L.nest_f.19857:
  mov rax, 2366
  jmp r15
L.nest_t.19858:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19852
  jmp L.nest_f.19853
L.nest_f.19859:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19856
  jmp L.nest_f.19857
L.nest_t.19860:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19858
  jmp L.nest_f.19859
L.nest_f.19861:
  mov rax, 2110
  jmp r15
L.nest_t.19862:
  mov rax, 14
  jmp r15
L.nest_f.19863:
  mov rax, 6
  jmp r15
L.nest_t.19864:
  cmp r14, r13
  jle L.nest_t.19862
  jmp L.nest_f.19863
L.nest_f.19865:
  mov rax, 2366
  jmp r15
L.nest_t.19866:
  mov rax, 14
  jmp r15
L.nest_f.19867:
  mov rax, 6
  jmp r15
L.nest_t.19868:
  cmp r14, r13
  jle L.nest_t.19866
  jmp L.nest_f.19867
L.nest_f.19869:
  mov rax, 2366
  jmp r15
L.nest_t.19870:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19864
  jmp L.nest_f.19865
L.nest_f.19871:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19868
  jmp L.nest_f.19869
L.nest_t.19872:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19870
  jmp L.nest_f.19871
L.nest_f.19873:
  mov rax, 2110
  jmp r15
L.nest_t.19874:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19860
  jmp L.nest_f.19861
L.nest_f.19875:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19872
  jmp L.nest_f.19873
L.>.19770:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19848
  jmp L.nest_f.19849
L.nest_t.19824:
  mov rax, 14
  jmp r15
L.nest_f.19825:
  mov rax, 6
  jmp r15
L.nest_t.19826:
  cmp r14, r13
  jg L.nest_t.19824
  jmp L.nest_f.19825
L.nest_f.19827:
  mov rax, 2878
  jmp r15
L.nest_t.19828:
  mov rax, 14
  jmp r15
L.nest_f.19829:
  mov rax, 6
  jmp r15
L.nest_t.19830:
  cmp r14, r13
  jg L.nest_t.19828
  jmp L.nest_f.19829
L.nest_f.19831:
  mov rax, 2878
  jmp r15
L.nest_t.19832:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19826
  jmp L.nest_f.19827
L.nest_f.19833:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19830
  jmp L.nest_f.19831
L.nest_t.19834:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19832
  jmp L.nest_f.19833
L.nest_f.19835:
  mov rax, 2622
  jmp r15
L.nest_t.19836:
  mov rax, 14
  jmp r15
L.nest_f.19837:
  mov rax, 6
  jmp r15
L.nest_t.19838:
  cmp r14, r13
  jg L.nest_t.19836
  jmp L.nest_f.19837
L.nest_f.19839:
  mov rax, 2878
  jmp r15
L.nest_t.19840:
  mov rax, 14
  jmp r15
L.nest_f.19841:
  mov rax, 6
  jmp r15
L.nest_t.19842:
  cmp r14, r13
  jg L.nest_t.19840
  jmp L.nest_f.19841
L.nest_f.19843:
  mov rax, 2878
  jmp r15
L.nest_t.19844:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19838
  jmp L.nest_f.19839
L.nest_f.19845:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19842
  jmp L.nest_f.19843
L.nest_t.19846:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19844
  jmp L.nest_f.19845
L.nest_f.19847:
  mov rax, 2622
  jmp r15
L.nest_t.19848:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19834
  jmp L.nest_f.19835
L.nest_f.19849:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19846
  jmp L.nest_f.19847
L.>=.19771:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19822
  jmp L.nest_f.19823
L.nest_t.19798:
  mov rax, 14
  jmp r15
L.nest_f.19799:
  mov rax, 6
  jmp r15
L.nest_t.19800:
  cmp r14, r13
  jge L.nest_t.19798
  jmp L.nest_f.19799
L.nest_f.19801:
  mov rax, 3390
  jmp r15
L.nest_t.19802:
  mov rax, 14
  jmp r15
L.nest_f.19803:
  mov rax, 6
  jmp r15
L.nest_t.19804:
  cmp r14, r13
  jge L.nest_t.19802
  jmp L.nest_f.19803
L.nest_f.19805:
  mov rax, 3390
  jmp r15
L.nest_t.19806:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19800
  jmp L.nest_f.19801
L.nest_f.19807:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19804
  jmp L.nest_f.19805
L.nest_t.19808:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19806
  jmp L.nest_f.19807
L.nest_f.19809:
  mov rax, 3134
  jmp r15
L.nest_t.19810:
  mov rax, 14
  jmp r15
L.nest_f.19811:
  mov rax, 6
  jmp r15
L.nest_t.19812:
  cmp r14, r13
  jge L.nest_t.19810
  jmp L.nest_f.19811
L.nest_f.19813:
  mov rax, 3390
  jmp r15
L.nest_t.19814:
  mov rax, 14
  jmp r15
L.nest_f.19815:
  mov rax, 6
  jmp r15
L.nest_t.19816:
  cmp r14, r13
  jge L.nest_t.19814
  jmp L.nest_f.19815
L.nest_f.19817:
  mov rax, 3390
  jmp r15
L.nest_t.19818:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19812
  jmp L.nest_f.19813
L.nest_f.19819:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19816
  jmp L.nest_f.19817
L.nest_t.19820:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.19818
  jmp L.nest_f.19819
L.nest_f.19821:
  mov rax, 3134
  jmp r15
L.nest_t.19822:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.19808
  jmp L.nest_f.19809
L.nest_f.19823:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.19820
  jmp L.nest_f.19821
L.fixnum?.19772:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.19796
  jmp L.nest_f.19797
L.nest_t.19796:
  mov rax, 14
  jmp r15
L.nest_f.19797:
  mov rax, 6
  jmp r15
L.boolean?.19773:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.19794
  jmp L.nest_f.19795
L.nest_t.19794:
  mov rax, 14
  jmp r15
L.nest_f.19795:
  mov rax, 6
  jmp r15
L.empty?.19774:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.19792
  jmp L.nest_f.19793
L.nest_t.19792:
  mov rax, 14
  jmp r15
L.nest_f.19793:
  mov rax, 6
  jmp r15
L.void?.19775:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.19790
  jmp L.nest_f.19791
L.nest_t.19790:
  mov rax, 14
  jmp r15
L.nest_f.19791:
  mov rax, 6
  jmp r15
L.ascii-char?.19776:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.19788
  jmp L.nest_f.19789
L.nest_t.19788:
  mov rax, 14
  jmp r15
L.nest_f.19789:
  mov rax, 6
  jmp r15
L.error?.19777:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.19786
  jmp L.nest_f.19787
L.nest_t.19786:
  mov rax, 14
  jmp r15
L.nest_f.19787:
  mov rax, 6
  jmp r15
L.not.19778:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.19784
  jmp L.nest_f.19785
L.nest_t.19784:
  mov rax, 6
  jmp r15
L.nest_f.19785:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:185:2
actual:
  '("Failed on pass uniquify\n  #(struct:exn:misc:match match: no matching clause for 'new-n #<continuation-mark-set> new-n (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    3
    3
    3
    3
    "Failed on pass undead-analysis\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    3
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    3
    3
    3
    3
    3
    3
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.19026 #<continuation-mark-set> L.tmp.19026 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    3
    3
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    3
    3)
expected:   3
--------------------

expose-basic-blocks: (module (define L.main.22995 () (begin (nop) (set! rdx 8) (set! rsi 0) (set! rdi 48) (nop) (jump L.fib_loop.22979))) (define L.not.22994 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.22993 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.22992 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.22991 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.22990 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.22989 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.22988 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.22987 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.22986 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.22985 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.22984 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.22983 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.22982 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.22981 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.22980 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fib_loop.22979 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! (rbp + 24) rdx) (set! rbp (+ rbp 32)) (return-point L.rp.22996 (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.22996) (jump L.eq?.22980))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.22997 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.22997) (jump L.eq?.22980))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 24)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.22998 (begin (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.22998) (jump L.+.22982))) (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (return-point L.rp.22999 (begin (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.22999) (jump L.+.22982))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.22979))))))))
process-rp: (begin (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.22996) (jump L.eq?.22980))
process-rp: (jump L.eq?.22980)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.22997 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.22997) (jump L.eq?.22980))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 24)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.22998 (begin (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.22998) (jump L.+.22982))) (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (return-point L.rp.22999 (begin (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.22999) (jump L.+.22982))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.22979)))))
create-return-point-blocktwo: (return-point L.rp.22996 (begin ((if (neq? r15 6) (jump L.tmp.23332) (jump L.tmp.23334)) (set! r15 rax) (set! rbp (- rbp 32)))))
parse-rp-tail (begin ((set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.23332) (jump L.tmp.23334))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.23332) (jump L.tmp.23334))
parse-rp-tail (jump L.tmp.23332)
parse-rp-tail (jump L.tmp.23334)
flatten (module (define L.main.23356 () (begin (nop) (set! rdx 8) (set! rsi 0) (set! rdi 48) (nop) (jump L.fib_loop.23340))) (define L.fib_loop.23340 () (begin (set! (rbp + 0) r15) (set! (rbp + 16) rdi) (set! (rbp + 8) rsi) (set! (rbp + 24) rdx) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi (rbp + -16)) (set! r15 L.rp.23357) (jump L.eq?.23341))) (define L.rp.23357 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.23537) (jump L.nest_f.23538)))) (define L.rp.23358 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.23535) (jump L.nest_f.23536)))) (define L.rp.23359 () (begin (set! rbp (- rbp 32)) (set! (rbp + 16) rax) (set! rbp (+ rbp 32)) (set! rsi (rbp + -8)) (set! rdi (rbp + -24)) (set! r15 L.rp.23360) (jump L.+.23343))) (define L.rp.23360 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp + 24)) (set! rdi (rbp + 16)) (set! r15 (rbp + 0)) (jump L.fib_loop.23340))) (define L.nest_t.23535 () (begin (set! rax (rbp + 24)) (jump (rbp + 0)))) (define L.nest_f.23536 () (begin (set! rbp (+ rbp 32)) (set! rsi -8) (set! rdi (rbp + -16)) (set! r15 L.rp.23359) (jump L.+.23343))) (define L.nest_t.23537 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.23538 () (begin (set! rbp (+ rbp 32)) (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.23358) (jump L.eq?.23341))) (define L.eq?.23341 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.23533) (jump L.nest_f.23534)))) (define L.nest_t.23533 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23534 () (begin (set! rax 6) (jump r15))) (define L.*.23342 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23531) (jump L.nest_f.23532)))) (define L.nest_t.23515 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23516 () (begin (set! rax 318) (jump r15))) (define L.nest_t.23517 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23518 () (begin (set! rax 318) (jump r15))) (define L.nest_t.23519 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23515) (jump L.nest_f.23516)))) (define L.nest_f.23520 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23517) (jump L.nest_f.23518)))) (define L.nest_t.23521 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23519) (jump L.nest_f.23520)))) (define L.nest_f.23522 () (begin (set! rax 62) (jump r15))) (define L.nest_t.23523 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23524 () (begin (set! rax 318) (jump r15))) (define L.nest_t.23525 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23526 () (begin (set! rax 318) (jump r15))) (define L.nest_t.23527 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23523) (jump L.nest_f.23524)))) (define L.nest_f.23528 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23525) (jump L.nest_f.23526)))) (define L.nest_t.23529 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23527) (jump L.nest_f.23528)))) (define L.nest_f.23530 () (begin (set! rax 62) (jump r15))) (define L.nest_t.23531 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23521) (jump L.nest_f.23522)))) (define L.nest_f.23532 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23529) (jump L.nest_f.23530)))) (define L.+.23343 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23513) (jump L.nest_f.23514)))) (define L.nest_t.23497 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23498 () (begin (set! rax 830) (jump r15))) (define L.nest_t.23499 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23500 () (begin (set! rax 830) (jump r15))) (define L.nest_t.23501 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23497) (jump L.nest_f.23498)))) (define L.nest_f.23502 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23499) (jump L.nest_f.23500)))) (define L.nest_t.23503 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23501) (jump L.nest_f.23502)))) (define L.nest_f.23504 () (begin (set! rax 574) (jump r15))) (define L.nest_t.23505 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23506 () (begin (set! rax 830) (jump r15))) (define L.nest_t.23507 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23508 () (begin (set! rax 830) (jump r15))) (define L.nest_t.23509 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23505) (jump L.nest_f.23506)))) (define L.nest_f.23510 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23507) (jump L.nest_f.23508)))) (define L.nest_t.23511 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23509) (jump L.nest_f.23510)))) (define L.nest_f.23512 () (begin (set! rax 574) (jump r15))) (define L.nest_t.23513 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23503) (jump L.nest_f.23504)))) (define L.nest_f.23514 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23511) (jump L.nest_f.23512)))) (define L.-.23344 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23495) (jump L.nest_f.23496)))) (define L.nest_t.23479 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23480 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.23481 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23482 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.23483 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23479) (jump L.nest_f.23480)))) (define L.nest_f.23484 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23481) (jump L.nest_f.23482)))) (define L.nest_t.23485 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23483) (jump L.nest_f.23484)))) (define L.nest_f.23486 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.23487 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23488 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.23489 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.23490 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.23491 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23487) (jump L.nest_f.23488)))) (define L.nest_f.23492 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23489) (jump L.nest_f.23490)))) (define L.nest_t.23493 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23491) (jump L.nest_f.23492)))) (define L.nest_f.23494 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.23495 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23485) (jump L.nest_f.23486)))) (define L.nest_f.23496 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23493) (jump L.nest_f.23494)))) (define L.<.23345 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23477) (jump L.nest_f.23478)))) (define L.nest_t.23453 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23454 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23455 () (if (< r14 r13) (jump L.nest_t.23453) (jump L.nest_f.23454))) (define L.nest_f.23456 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.23457 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23458 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23459 () (if (< r14 r13) (jump L.nest_t.23457) (jump L.nest_f.23458))) (define L.nest_f.23460 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.23461 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23455) (jump L.nest_f.23456)))) (define L.nest_f.23462 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23459) (jump L.nest_f.23460)))) (define L.nest_t.23463 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23461) (jump L.nest_f.23462)))) (define L.nest_f.23464 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.23465 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23466 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23467 () (if (< r14 r13) (jump L.nest_t.23465) (jump L.nest_f.23466))) (define L.nest_f.23468 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.23469 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23470 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23471 () (if (< r14 r13) (jump L.nest_t.23469) (jump L.nest_f.23470))) (define L.nest_f.23472 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.23473 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23467) (jump L.nest_f.23468)))) (define L.nest_f.23474 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23471) (jump L.nest_f.23472)))) (define L.nest_t.23475 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23473) (jump L.nest_f.23474)))) (define L.nest_f.23476 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.23477 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23463) (jump L.nest_f.23464)))) (define L.nest_f.23478 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23475) (jump L.nest_f.23476)))) (define L.<=.23346 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23451) (jump L.nest_f.23452)))) (define L.nest_t.23427 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23428 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23429 () (if (<= r14 r13) (jump L.nest_t.23427) (jump L.nest_f.23428))) (define L.nest_f.23430 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.23431 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23432 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23433 () (if (<= r14 r13) (jump L.nest_t.23431) (jump L.nest_f.23432))) (define L.nest_f.23434 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.23435 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23429) (jump L.nest_f.23430)))) (define L.nest_f.23436 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23433) (jump L.nest_f.23434)))) (define L.nest_t.23437 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23435) (jump L.nest_f.23436)))) (define L.nest_f.23438 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.23439 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23440 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23441 () (if (<= r14 r13) (jump L.nest_t.23439) (jump L.nest_f.23440))) (define L.nest_f.23442 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.23443 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23444 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23445 () (if (<= r14 r13) (jump L.nest_t.23443) (jump L.nest_f.23444))) (define L.nest_f.23446 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.23447 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23441) (jump L.nest_f.23442)))) (define L.nest_f.23448 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23445) (jump L.nest_f.23446)))) (define L.nest_t.23449 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23447) (jump L.nest_f.23448)))) (define L.nest_f.23450 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.23451 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23437) (jump L.nest_f.23438)))) (define L.nest_f.23452 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23449) (jump L.nest_f.23450)))) (define L.>.23347 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23425) (jump L.nest_f.23426)))) (define L.nest_t.23401 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23402 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23403 () (if (> r14 r13) (jump L.nest_t.23401) (jump L.nest_f.23402))) (define L.nest_f.23404 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.23405 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23406 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23407 () (if (> r14 r13) (jump L.nest_t.23405) (jump L.nest_f.23406))) (define L.nest_f.23408 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.23409 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23403) (jump L.nest_f.23404)))) (define L.nest_f.23410 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23407) (jump L.nest_f.23408)))) (define L.nest_t.23411 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23409) (jump L.nest_f.23410)))) (define L.nest_f.23412 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.23413 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23414 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23415 () (if (> r14 r13) (jump L.nest_t.23413) (jump L.nest_f.23414))) (define L.nest_f.23416 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.23417 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23418 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23419 () (if (> r14 r13) (jump L.nest_t.23417) (jump L.nest_f.23418))) (define L.nest_f.23420 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.23421 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23415) (jump L.nest_f.23416)))) (define L.nest_f.23422 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23419) (jump L.nest_f.23420)))) (define L.nest_t.23423 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23421) (jump L.nest_f.23422)))) (define L.nest_f.23424 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.23425 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23411) (jump L.nest_f.23412)))) (define L.nest_f.23426 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23423) (jump L.nest_f.23424)))) (define L.>=.23348 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23399) (jump L.nest_f.23400)))) (define L.nest_t.23375 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23376 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23377 () (if (>= r14 r13) (jump L.nest_t.23375) (jump L.nest_f.23376))) (define L.nest_f.23378 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.23379 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23380 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23381 () (if (>= r14 r13) (jump L.nest_t.23379) (jump L.nest_f.23380))) (define L.nest_f.23382 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.23383 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23377) (jump L.nest_f.23378)))) (define L.nest_f.23384 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23381) (jump L.nest_f.23382)))) (define L.nest_t.23385 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23383) (jump L.nest_f.23384)))) (define L.nest_f.23386 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.23387 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23388 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23389 () (if (>= r14 r13) (jump L.nest_t.23387) (jump L.nest_f.23388))) (define L.nest_f.23390 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.23391 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23392 () (begin (set! rax 6) (jump r15))) (define L.nest_t.23393 () (if (>= r14 r13) (jump L.nest_t.23391) (jump L.nest_f.23392))) (define L.nest_f.23394 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.23395 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23389) (jump L.nest_f.23390)))) (define L.nest_f.23396 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23393) (jump L.nest_f.23394)))) (define L.nest_t.23397 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.23395) (jump L.nest_f.23396)))) (define L.nest_f.23398 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.23399 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.23385) (jump L.nest_f.23386)))) (define L.nest_f.23400 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.23397) (jump L.nest_f.23398)))) (define L.fixnum?.23349 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.23373) (jump L.nest_f.23374)))) (define L.nest_t.23373 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23374 () (begin (set! rax 6) (jump r15))) (define L.boolean?.23350 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.23371) (jump L.nest_f.23372)))) (define L.nest_t.23371 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23372 () (begin (set! rax 6) (jump r15))) (define L.empty?.23351 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.23369) (jump L.nest_f.23370)))) (define L.nest_t.23369 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23370 () (begin (set! rax 6) (jump r15))) (define L.void?.23352 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.23367) (jump L.nest_f.23368)))) (define L.nest_t.23367 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23368 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.23353 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.23365) (jump L.nest_f.23366)))) (define L.nest_t.23365 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23366 () (begin (set! rax 6) (jump r15))) (define L.error?.23354 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.23363) (jump L.nest_f.23364)))) (define L.nest_t.23363 () (begin (set! rax 14) (jump r15))) (define L.nest_f.23364 () (begin (set! rax 6) (jump r15))) (define L.not.23355 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.23361) (jump L.nest_f.23362)))) (define L.nest_t.23361 () (begin (set! rax 6) (jump r15))) (define L.nest_f.23362 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858000421585800042169.s:85: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:176: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:176: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:263: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:263: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:350: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:350: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:461: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:461: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:572: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:572: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:683: error: symbol `L.' redefined
/var/tmp/rkt15858000421585800042169.s:683: error: parser: instruction expected
/var/tmp/rkt15858000421585800042169.s:842: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.23754:
  mov rdx, 8
  mov rsi, 0
  mov rdi, 48
  jmp L.fib_loop.23738
L.fib_loop.23738:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 16], rdi
  mov QWORD [rbp + 8], rsi
  mov QWORD [rbp + 24], rdx
  add rbp, 32
  mov rsi, 0
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.23755
  jmp L.eq?.23739
L.rp.23755:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.23935
  jmp L.nest_f.23936
L.rp.23756:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.23933
  jmp L.nest_f.23934
L.rp.23757:
  sub rbp, 32
  mov QWORD [rbp + 16], rax
  add rbp, 32
  mov rsi, QWORD [rbp + -8]
  mov rdi, QWORD [rbp + -24]
  mov r15, L.rp.23758
  jmp L.+.23741
L.rp.23758:
  sub rbp, 32
  mov r15, rax
  mov rdx, r15
  mov rsi, QWORD [rbp + 24]
  mov rdi, QWORD [rbp + 16]
  mov r15, QWORD [rbp + 0]
  jmp L.fib_loop.23738
L.nest_t.23933:
  mov rax, QWORD [rbp + 24]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.23934:
  add rbp, 32
  mov rsi, -8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.23757
  jmp L.+.23741
L.nest_t.23935:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.23936:
  add rbp, 32
  mov rsi, 8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.23756
  jmp L.eq?.23739
L.eq?.23739:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.23931
  jmp L.nest_f.23932
L.nest_t.23931:
  mov rax, 14
  jmp r15
L.nest_f.23932:
  mov rax, 6
  jmp r15
L.*.23740:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23929
  jmp L.nest_f.23930
L.nest_t.23913:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23914:
  mov rax, 318
  jmp r15
L.nest_t.23915:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23916:
  mov rax, 318
  jmp r15
L.nest_t.23917:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23913
  jmp L.nest_f.23914
L.nest_f.23918:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23915
  jmp L.nest_f.23916
L.nest_t.23919:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23917
  jmp L.nest_f.23918
L.nest_f.23920:
  mov rax, 62
  jmp r15
L.nest_t.23921:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23922:
  mov rax, 318
  jmp r15
L.nest_t.23923:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23924:
  mov rax, 318
  jmp r15
L.nest_t.23925:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23921
  jmp L.nest_f.23922
L.nest_f.23926:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23923
  jmp L.nest_f.23924
L.nest_t.23927:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23925
  jmp L.nest_f.23926
L.nest_f.23928:
  mov rax, 62
  jmp r15
L.nest_t.23929:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23919
  jmp L.nest_f.23920
L.nest_f.23930:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23927
  jmp L.nest_f.23928
L.+.23741:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23911
  jmp L.nest_f.23912
L.nest_t.23895:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23896:
  mov rax, 830
  jmp r15
L.nest_t.23897:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23898:
  mov rax, 830
  jmp r15
L.nest_t.23899:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23895
  jmp L.nest_f.23896
L.nest_f.23900:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23897
  jmp L.nest_f.23898
L.nest_t.23901:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23899
  jmp L.nest_f.23900
L.nest_f.23902:
  mov rax, 574
  jmp r15
L.nest_t.23903:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23904:
  mov rax, 830
  jmp r15
L.nest_t.23905:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23906:
  mov rax, 830
  jmp r15
L.nest_t.23907:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23903
  jmp L.nest_f.23904
L.nest_f.23908:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23905
  jmp L.nest_f.23906
L.nest_t.23909:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23907
  jmp L.nest_f.23908
L.nest_f.23910:
  mov rax, 574
  jmp r15
L.nest_t.23911:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23901
  jmp L.nest_f.23902
L.nest_f.23912:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23909
  jmp L.nest_f.23910
L.-.23742:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23893
  jmp L.nest_f.23894
L.nest_t.23877:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23878:
  mov rax, 1342
  jmp r15
L.nest_t.23879:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23880:
  mov rax, 1342
  jmp r15
L.nest_t.23881:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23877
  jmp L.nest_f.23878
L.nest_f.23882:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23879
  jmp L.nest_f.23880
L.nest_t.23883:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23881
  jmp L.nest_f.23882
L.nest_f.23884:
  mov rax, 1086
  jmp r15
L.nest_t.23885:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23886:
  mov rax, 1342
  jmp r15
L.nest_t.23887:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.23888:
  mov rax, 1342
  jmp r15
L.nest_t.23889:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23885
  jmp L.nest_f.23886
L.nest_f.23890:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23887
  jmp L.nest_f.23888
L.nest_t.23891:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23889
  jmp L.nest_f.23890
L.nest_f.23892:
  mov rax, 1086
  jmp r15
L.nest_t.23893:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23883
  jmp L.nest_f.23884
L.nest_f.23894:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23891
  jmp L.nest_f.23892
L.<.23743:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23875
  jmp L.nest_f.23876
L.nest_t.23851:
  mov rax, 14
  jmp r15
L.nest_f.23852:
  mov rax, 6
  jmp r15
L.nest_t.23853:
  cmp r14, r13
  jl L.nest_t.23851
  jmp L.nest_f.23852
L.nest_f.23854:
  mov rax, 1854
  jmp r15
L.nest_t.23855:
  mov rax, 14
  jmp r15
L.nest_f.23856:
  mov rax, 6
  jmp r15
L.nest_t.23857:
  cmp r14, r13
  jl L.nest_t.23855
  jmp L.nest_f.23856
L.nest_f.23858:
  mov rax, 1854
  jmp r15
L.nest_t.23859:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23853
  jmp L.nest_f.23854
L.nest_f.23860:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23857
  jmp L.nest_f.23858
L.nest_t.23861:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23859
  jmp L.nest_f.23860
L.nest_f.23862:
  mov rax, 1598
  jmp r15
L.nest_t.23863:
  mov rax, 14
  jmp r15
L.nest_f.23864:
  mov rax, 6
  jmp r15
L.nest_t.23865:
  cmp r14, r13
  jl L.nest_t.23863
  jmp L.nest_f.23864
L.nest_f.23866:
  mov rax, 1854
  jmp r15
L.nest_t.23867:
  mov rax, 14
  jmp r15
L.nest_f.23868:
  mov rax, 6
  jmp r15
L.nest_t.23869:
  cmp r14, r13
  jl L.nest_t.23867
  jmp L.nest_f.23868
L.nest_f.23870:
  mov rax, 1854
  jmp r15
L.nest_t.23871:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23865
  jmp L.nest_f.23866
L.nest_f.23872:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23869
  jmp L.nest_f.23870
L.nest_t.23873:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23871
  jmp L.nest_f.23872
L.nest_f.23874:
  mov rax, 1598
  jmp r15
L.nest_t.23875:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23861
  jmp L.nest_f.23862
L.nest_f.23876:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23873
  jmp L.nest_f.23874
L.<=.23744:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23849
  jmp L.nest_f.23850
L.nest_t.23825:
  mov rax, 14
  jmp r15
L.nest_f.23826:
  mov rax, 6
  jmp r15
L.nest_t.23827:
  cmp r14, r13
  jle L.nest_t.23825
  jmp L.nest_f.23826
L.nest_f.23828:
  mov rax, 2366
  jmp r15
L.nest_t.23829:
  mov rax, 14
  jmp r15
L.nest_f.23830:
  mov rax, 6
  jmp r15
L.nest_t.23831:
  cmp r14, r13
  jle L.nest_t.23829
  jmp L.nest_f.23830
L.nest_f.23832:
  mov rax, 2366
  jmp r15
L.nest_t.23833:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23827
  jmp L.nest_f.23828
L.nest_f.23834:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23831
  jmp L.nest_f.23832
L.nest_t.23835:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23833
  jmp L.nest_f.23834
L.nest_f.23836:
  mov rax, 2110
  jmp r15
L.nest_t.23837:
  mov rax, 14
  jmp r15
L.nest_f.23838:
  mov rax, 6
  jmp r15
L.nest_t.23839:
  cmp r14, r13
  jle L.nest_t.23837
  jmp L.nest_f.23838
L.nest_f.23840:
  mov rax, 2366
  jmp r15
L.nest_t.23841:
  mov rax, 14
  jmp r15
L.nest_f.23842:
  mov rax, 6
  jmp r15
L.nest_t.23843:
  cmp r14, r13
  jle L.nest_t.23841
  jmp L.nest_f.23842
L.nest_f.23844:
  mov rax, 2366
  jmp r15
L.nest_t.23845:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23839
  jmp L.nest_f.23840
L.nest_f.23846:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23843
  jmp L.nest_f.23844
L.nest_t.23847:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23845
  jmp L.nest_f.23846
L.nest_f.23848:
  mov rax, 2110
  jmp r15
L.nest_t.23849:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23835
  jmp L.nest_f.23836
L.nest_f.23850:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23847
  jmp L.nest_f.23848
L.>.23745:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23823
  jmp L.nest_f.23824
L.nest_t.23799:
  mov rax, 14
  jmp r15
L.nest_f.23800:
  mov rax, 6
  jmp r15
L.nest_t.23801:
  cmp r14, r13
  jg L.nest_t.23799
  jmp L.nest_f.23800
L.nest_f.23802:
  mov rax, 2878
  jmp r15
L.nest_t.23803:
  mov rax, 14
  jmp r15
L.nest_f.23804:
  mov rax, 6
  jmp r15
L.nest_t.23805:
  cmp r14, r13
  jg L.nest_t.23803
  jmp L.nest_f.23804
L.nest_f.23806:
  mov rax, 2878
  jmp r15
L.nest_t.23807:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23801
  jmp L.nest_f.23802
L.nest_f.23808:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23805
  jmp L.nest_f.23806
L.nest_t.23809:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23807
  jmp L.nest_f.23808
L.nest_f.23810:
  mov rax, 2622
  jmp r15
L.nest_t.23811:
  mov rax, 14
  jmp r15
L.nest_f.23812:
  mov rax, 6
  jmp r15
L.nest_t.23813:
  cmp r14, r13
  jg L.nest_t.23811
  jmp L.nest_f.23812
L.nest_f.23814:
  mov rax, 2878
  jmp r15
L.nest_t.23815:
  mov rax, 14
  jmp r15
L.nest_f.23816:
  mov rax, 6
  jmp r15
L.nest_t.23817:
  cmp r14, r13
  jg L.nest_t.23815
  jmp L.nest_f.23816
L.nest_f.23818:
  mov rax, 2878
  jmp r15
L.nest_t.23819:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23813
  jmp L.nest_f.23814
L.nest_f.23820:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23817
  jmp L.nest_f.23818
L.nest_t.23821:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23819
  jmp L.nest_f.23820
L.nest_f.23822:
  mov rax, 2622
  jmp r15
L.nest_t.23823:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23809
  jmp L.nest_f.23810
L.nest_f.23824:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23821
  jmp L.nest_f.23822
L.>=.23746:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23797
  jmp L.nest_f.23798
L.nest_t.23773:
  mov rax, 14
  jmp r15
L.nest_f.23774:
  mov rax, 6
  jmp r15
L.nest_t.23775:
  cmp r14, r13
  jge L.nest_t.23773
  jmp L.nest_f.23774
L.nest_f.23776:
  mov rax, 3390
  jmp r15
L.nest_t.23777:
  mov rax, 14
  jmp r15
L.nest_f.23778:
  mov rax, 6
  jmp r15
L.nest_t.23779:
  cmp r14, r13
  jge L.nest_t.23777
  jmp L.nest_f.23778
L.nest_f.23780:
  mov rax, 3390
  jmp r15
L.nest_t.23781:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23775
  jmp L.nest_f.23776
L.nest_f.23782:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23779
  jmp L.nest_f.23780
L.nest_t.23783:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23781
  jmp L.nest_f.23782
L.nest_f.23784:
  mov rax, 3134
  jmp r15
L.nest_t.23785:
  mov rax, 14
  jmp r15
L.nest_f.23786:
  mov rax, 6
  jmp r15
L.nest_t.23787:
  cmp r14, r13
  jge L.nest_t.23785
  jmp L.nest_f.23786
L.nest_f.23788:
  mov rax, 3390
  jmp r15
L.nest_t.23789:
  mov rax, 14
  jmp r15
L.nest_f.23790:
  mov rax, 6
  jmp r15
L.nest_t.23791:
  cmp r14, r13
  jge L.nest_t.23789
  jmp L.nest_f.23790
L.nest_f.23792:
  mov rax, 3390
  jmp r15
L.nest_t.23793:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23787
  jmp L.nest_f.23788
L.nest_f.23794:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23791
  jmp L.nest_f.23792
L.nest_t.23795:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.23793
  jmp L.nest_f.23794
L.nest_f.23796:
  mov rax, 3134
  jmp r15
L.nest_t.23797:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.23783
  jmp L.nest_f.23784
L.nest_f.23798:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.23795
  jmp L.nest_f.23796
L.fixnum?.23747:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.23771
  jmp L.nest_f.23772
L.nest_t.23771:
  mov rax, 14
  jmp r15
L.nest_f.23772:
  mov rax, 6
  jmp r15
L.boolean?.23748:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.23769
  jmp L.nest_f.23770
L.nest_t.23769:
  mov rax, 14
  jmp r15
L.nest_f.23770:
  mov rax, 6
  jmp r15
L.empty?.23749:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.23767
  jmp L.nest_f.23768
L.nest_t.23767:
  mov rax, 14
  jmp r15
L.nest_f.23768:
  mov rax, 6
  jmp r15
L.void?.23750:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.23765
  jmp L.nest_f.23766
L.nest_t.23765:
  mov rax, 14
  jmp r15
L.nest_f.23766:
  mov rax, 6
  jmp r15
L.ascii-char?.23751:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.23763
  jmp L.nest_f.23764
L.nest_t.23763:
  mov rax, 14
  jmp r15
L.nest_f.23764:
  mov rax, 6
  jmp r15
L.error?.23752:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.23761
  jmp L.nest_f.23762
L.nest_t.23761:
  mov rax, 14
  jmp r15
L.nest_f.23762:
  mov rax, 6
  jmp r15
L.not.23753:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.23759
  jmp L.nest_f.23760
L.nest_t.23759:
  mov rax, 6
  jmp r15
L.nest_f.23760:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:190:4
actual:
  '("Failed on pass uniquify\n  #(struct:exn:misc:match match: no matching clause for 'new-n #<continuation-mark-set> new-n (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'eq? #<continuation-mark-set> eq? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    8
    8
    8
    8
    "Failed on pass undead-analysis\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    8
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    8
    8
    8
    8
    8
    8
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.23001 #<continuation-mark-set> L.tmp.23001 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    8
    8
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    8
    8)
expected:   8
--------------------

expose-basic-blocks: (module (define L.main.27097 () (begin (nop) (set! rsi 16) (set! rdi 8) (nop) (jump L.swap.27081))) (define L.not.27096 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.27095 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.27094 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.27093 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.27092 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.27091 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.27090 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.27089 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.27088 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.27087 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.27086 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.27085 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.27084 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.27083 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.27082 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.swap.27081 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 24)) (return-point L.rp.27098 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27098) (jump L.<.27086))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.27099 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27099) (jump L.swap.27081))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0)))))))
process-rp: (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27098) (jump L.<.27086))
process-rp: (jump L.<.27086)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.27099 (begin (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27099) (jump L.swap.27081))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0))))
create-return-point-blocktwo: (return-point L.rp.27098 (begin ((if (neq? r15 6) (jump L.tmp.27432) (jump L.tmp.27434)) (set! r15 rax) (set! rbp (- rbp 24)))))
parse-rp-tail (begin ((set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.27432) (jump L.tmp.27434))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.27432) (jump L.tmp.27434))
parse-rp-tail (jump L.tmp.27432)
parse-rp-tail (jump L.tmp.27434)
flatten (module (define L.main.27452 () (begin (nop) (set! rsi 16) (set! rdi 8) (nop) (jump L.swap.27436))) (define L.swap.27436 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 24)) (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27453) (jump L.<.27441))) (define L.rp.27453 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.27629) (jump L.nest_f.27630)))) (define L.rp.27454 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0)))) (define L.nest_t.27629 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.27630 () (begin (set! rbp (+ rbp 24)) (set! rsi (rbp + -16)) (set! rdi (rbp + -8)) (set! r15 L.rp.27454) (jump L.swap.27436))) (define L.eq?.27437 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.27627) (jump L.nest_f.27628)))) (define L.nest_t.27627 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27628 () (begin (set! rax 6) (jump r15))) (define L.*.27438 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27625) (jump L.nest_f.27626)))) (define L.nest_t.27609 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27610 () (begin (set! rax 318) (jump r15))) (define L.nest_t.27611 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27612 () (begin (set! rax 318) (jump r15))) (define L.nest_t.27613 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27609) (jump L.nest_f.27610)))) (define L.nest_f.27614 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27611) (jump L.nest_f.27612)))) (define L.nest_t.27615 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27613) (jump L.nest_f.27614)))) (define L.nest_f.27616 () (begin (set! rax 62) (jump r15))) (define L.nest_t.27617 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27618 () (begin (set! rax 318) (jump r15))) (define L.nest_t.27619 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27620 () (begin (set! rax 318) (jump r15))) (define L.nest_t.27621 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27617) (jump L.nest_f.27618)))) (define L.nest_f.27622 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27619) (jump L.nest_f.27620)))) (define L.nest_t.27623 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27621) (jump L.nest_f.27622)))) (define L.nest_f.27624 () (begin (set! rax 62) (jump r15))) (define L.nest_t.27625 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27615) (jump L.nest_f.27616)))) (define L.nest_f.27626 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27623) (jump L.nest_f.27624)))) (define L.+.27439 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27607) (jump L.nest_f.27608)))) (define L.nest_t.27591 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27592 () (begin (set! rax 830) (jump r15))) (define L.nest_t.27593 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27594 () (begin (set! rax 830) (jump r15))) (define L.nest_t.27595 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27591) (jump L.nest_f.27592)))) (define L.nest_f.27596 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27593) (jump L.nest_f.27594)))) (define L.nest_t.27597 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27595) (jump L.nest_f.27596)))) (define L.nest_f.27598 () (begin (set! rax 574) (jump r15))) (define L.nest_t.27599 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27600 () (begin (set! rax 830) (jump r15))) (define L.nest_t.27601 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27602 () (begin (set! rax 830) (jump r15))) (define L.nest_t.27603 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27599) (jump L.nest_f.27600)))) (define L.nest_f.27604 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27601) (jump L.nest_f.27602)))) (define L.nest_t.27605 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27603) (jump L.nest_f.27604)))) (define L.nest_f.27606 () (begin (set! rax 574) (jump r15))) (define L.nest_t.27607 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27597) (jump L.nest_f.27598)))) (define L.nest_f.27608 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27605) (jump L.nest_f.27606)))) (define L.-.27440 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27589) (jump L.nest_f.27590)))) (define L.nest_t.27573 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27574 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.27575 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27576 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.27577 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27573) (jump L.nest_f.27574)))) (define L.nest_f.27578 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27575) (jump L.nest_f.27576)))) (define L.nest_t.27579 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27577) (jump L.nest_f.27578)))) (define L.nest_f.27580 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.27581 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27582 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.27583 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.27584 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.27585 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27581) (jump L.nest_f.27582)))) (define L.nest_f.27586 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27583) (jump L.nest_f.27584)))) (define L.nest_t.27587 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27585) (jump L.nest_f.27586)))) (define L.nest_f.27588 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.27589 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27579) (jump L.nest_f.27580)))) (define L.nest_f.27590 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27587) (jump L.nest_f.27588)))) (define L.<.27441 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27571) (jump L.nest_f.27572)))) (define L.nest_t.27547 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27548 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27549 () (if (< r14 r13) (jump L.nest_t.27547) (jump L.nest_f.27548))) (define L.nest_f.27550 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.27551 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27552 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27553 () (if (< r14 r13) (jump L.nest_t.27551) (jump L.nest_f.27552))) (define L.nest_f.27554 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.27555 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27549) (jump L.nest_f.27550)))) (define L.nest_f.27556 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27553) (jump L.nest_f.27554)))) (define L.nest_t.27557 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27555) (jump L.nest_f.27556)))) (define L.nest_f.27558 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.27559 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27560 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27561 () (if (< r14 r13) (jump L.nest_t.27559) (jump L.nest_f.27560))) (define L.nest_f.27562 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.27563 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27564 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27565 () (if (< r14 r13) (jump L.nest_t.27563) (jump L.nest_f.27564))) (define L.nest_f.27566 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.27567 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27561) (jump L.nest_f.27562)))) (define L.nest_f.27568 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27565) (jump L.nest_f.27566)))) (define L.nest_t.27569 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27567) (jump L.nest_f.27568)))) (define L.nest_f.27570 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.27571 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27557) (jump L.nest_f.27558)))) (define L.nest_f.27572 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27569) (jump L.nest_f.27570)))) (define L.<=.27442 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27545) (jump L.nest_f.27546)))) (define L.nest_t.27521 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27522 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27523 () (if (<= r14 r13) (jump L.nest_t.27521) (jump L.nest_f.27522))) (define L.nest_f.27524 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.27525 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27526 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27527 () (if (<= r14 r13) (jump L.nest_t.27525) (jump L.nest_f.27526))) (define L.nest_f.27528 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.27529 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27523) (jump L.nest_f.27524)))) (define L.nest_f.27530 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27527) (jump L.nest_f.27528)))) (define L.nest_t.27531 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27529) (jump L.nest_f.27530)))) (define L.nest_f.27532 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.27533 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27534 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27535 () (if (<= r14 r13) (jump L.nest_t.27533) (jump L.nest_f.27534))) (define L.nest_f.27536 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.27537 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27538 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27539 () (if (<= r14 r13) (jump L.nest_t.27537) (jump L.nest_f.27538))) (define L.nest_f.27540 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.27541 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27535) (jump L.nest_f.27536)))) (define L.nest_f.27542 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27539) (jump L.nest_f.27540)))) (define L.nest_t.27543 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27541) (jump L.nest_f.27542)))) (define L.nest_f.27544 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.27545 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27531) (jump L.nest_f.27532)))) (define L.nest_f.27546 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27543) (jump L.nest_f.27544)))) (define L.>.27443 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27519) (jump L.nest_f.27520)))) (define L.nest_t.27495 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27496 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27497 () (if (> r14 r13) (jump L.nest_t.27495) (jump L.nest_f.27496))) (define L.nest_f.27498 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.27499 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27500 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27501 () (if (> r14 r13) (jump L.nest_t.27499) (jump L.nest_f.27500))) (define L.nest_f.27502 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.27503 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27497) (jump L.nest_f.27498)))) (define L.nest_f.27504 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27501) (jump L.nest_f.27502)))) (define L.nest_t.27505 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27503) (jump L.nest_f.27504)))) (define L.nest_f.27506 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.27507 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27508 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27509 () (if (> r14 r13) (jump L.nest_t.27507) (jump L.nest_f.27508))) (define L.nest_f.27510 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.27511 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27512 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27513 () (if (> r14 r13) (jump L.nest_t.27511) (jump L.nest_f.27512))) (define L.nest_f.27514 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.27515 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27509) (jump L.nest_f.27510)))) (define L.nest_f.27516 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27513) (jump L.nest_f.27514)))) (define L.nest_t.27517 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27515) (jump L.nest_f.27516)))) (define L.nest_f.27518 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.27519 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27505) (jump L.nest_f.27506)))) (define L.nest_f.27520 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27517) (jump L.nest_f.27518)))) (define L.>=.27444 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27493) (jump L.nest_f.27494)))) (define L.nest_t.27469 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27470 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27471 () (if (>= r14 r13) (jump L.nest_t.27469) (jump L.nest_f.27470))) (define L.nest_f.27472 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.27473 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27474 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27475 () (if (>= r14 r13) (jump L.nest_t.27473) (jump L.nest_f.27474))) (define L.nest_f.27476 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.27477 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27471) (jump L.nest_f.27472)))) (define L.nest_f.27478 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27475) (jump L.nest_f.27476)))) (define L.nest_t.27479 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27477) (jump L.nest_f.27478)))) (define L.nest_f.27480 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.27481 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27482 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27483 () (if (>= r14 r13) (jump L.nest_t.27481) (jump L.nest_f.27482))) (define L.nest_f.27484 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.27485 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27486 () (begin (set! rax 6) (jump r15))) (define L.nest_t.27487 () (if (>= r14 r13) (jump L.nest_t.27485) (jump L.nest_f.27486))) (define L.nest_f.27488 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.27489 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27483) (jump L.nest_f.27484)))) (define L.nest_f.27490 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27487) (jump L.nest_f.27488)))) (define L.nest_t.27491 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.27489) (jump L.nest_f.27490)))) (define L.nest_f.27492 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.27493 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.27479) (jump L.nest_f.27480)))) (define L.nest_f.27494 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.27491) (jump L.nest_f.27492)))) (define L.fixnum?.27445 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.27467) (jump L.nest_f.27468)))) (define L.nest_t.27467 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27468 () (begin (set! rax 6) (jump r15))) (define L.boolean?.27446 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.27465) (jump L.nest_f.27466)))) (define L.nest_t.27465 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27466 () (begin (set! rax 6) (jump r15))) (define L.empty?.27447 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.27463) (jump L.nest_f.27464)))) (define L.nest_t.27463 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27464 () (begin (set! rax 6) (jump r15))) (define L.void?.27448 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.27461) (jump L.nest_f.27462)))) (define L.nest_t.27461 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27462 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.27449 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.27459) (jump L.nest_f.27460)))) (define L.nest_t.27459 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27460 () (begin (set! rax 6) (jump r15))) (define L.error?.27450 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.27457) (jump L.nest_f.27458)))) (define L.nest_t.27457 () (begin (set! rax 14) (jump r15))) (define L.nest_f.27458 () (begin (set! rax 6) (jump r15))) (define L.not.27451 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.27455) (jump L.nest_f.27456)))) (define L.nest_t.27455 () (begin (set! rax 6) (jump r15))) (define L.nest_f.27456 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858000661585800066829.s:22: error: comma, colon, decorator or end of line expected after operand
/var/tmp/rkt15858000661585800066829.s:57: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:148: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:148: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:235: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:235: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:322: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:322: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:433: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:433: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:544: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:544: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:655: error: symbol `L.' redefined
/var/tmp/rkt15858000661585800066829.s:655: error: parser: instruction expected
/var/tmp/rkt15858000661585800066829.s:814: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.27842:
  mov rsi, 16
  mov rdi, 8
  jmp L.swap.27826
L.swap.27826:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  mov QWORD [rbp + 16], rsi
  add rbp, 24
  mov rsi, QWORD [rbp + -16]
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.27843
  jmp L.<.27831
L.rp.27843:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.28019
  jmp L.nest_f.28020
L.rp.27844:
  sub rbp, 24
  mov r15, rax
  mov rax, r15
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.28019:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.28020:
  add rbp, 24
  mov rsi, QWORD [rbp + -16]
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.27844
  jmp L.swap.27826
L.eq?.27827:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.28017
  jmp L.nest_f.28018
L.nest_t.28017:
  mov rax, 14
  jmp r15
L.nest_f.28018:
  mov rax, 6
  jmp r15
L.*.27828:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.28015
  jmp L.nest_f.28016
L.nest_t.27999:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.28000:
  mov rax, 318
  jmp r15
L.nest_t.28001:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.28002:
  mov rax, 318
  jmp r15
L.nest_t.28003:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27999
  jmp L.nest_f.28000
L.nest_f.28004:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.28001
  jmp L.nest_f.28002
L.nest_t.28005:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.28003
  jmp L.nest_f.28004
L.nest_f.28006:
  mov rax, 62
  jmp r15
L.nest_t.28007:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.28008:
  mov rax, 318
  jmp r15
L.nest_t.28009:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.28010:
  mov rax, 318
  jmp r15
L.nest_t.28011:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.28007
  jmp L.nest_f.28008
L.nest_f.28012:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.28009
  jmp L.nest_f.28010
L.nest_t.28013:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.28011
  jmp L.nest_f.28012
L.nest_f.28014:
  mov rax, 62
  jmp r15
L.nest_t.28015:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.28005
  jmp L.nest_f.28006
L.nest_f.28016:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.28013
  jmp L.nest_f.28014
L.+.27829:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27997
  jmp L.nest_f.27998
L.nest_t.27981:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27982:
  mov rax, 830
  jmp r15
L.nest_t.27983:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27984:
  mov rax, 830
  jmp r15
L.nest_t.27985:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27981
  jmp L.nest_f.27982
L.nest_f.27986:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27983
  jmp L.nest_f.27984
L.nest_t.27987:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27985
  jmp L.nest_f.27986
L.nest_f.27988:
  mov rax, 574
  jmp r15
L.nest_t.27989:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27990:
  mov rax, 830
  jmp r15
L.nest_t.27991:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27992:
  mov rax, 830
  jmp r15
L.nest_t.27993:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27989
  jmp L.nest_f.27990
L.nest_f.27994:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27991
  jmp L.nest_f.27992
L.nest_t.27995:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27993
  jmp L.nest_f.27994
L.nest_f.27996:
  mov rax, 574
  jmp r15
L.nest_t.27997:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27987
  jmp L.nest_f.27988
L.nest_f.27998:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27995
  jmp L.nest_f.27996
L.-.27830:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27979
  jmp L.nest_f.27980
L.nest_t.27963:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27964:
  mov rax, 1342
  jmp r15
L.nest_t.27965:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27966:
  mov rax, 1342
  jmp r15
L.nest_t.27967:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27963
  jmp L.nest_f.27964
L.nest_f.27968:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27965
  jmp L.nest_f.27966
L.nest_t.27969:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27967
  jmp L.nest_f.27968
L.nest_f.27970:
  mov rax, 1086
  jmp r15
L.nest_t.27971:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27972:
  mov rax, 1342
  jmp r15
L.nest_t.27973:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.27974:
  mov rax, 1342
  jmp r15
L.nest_t.27975:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27971
  jmp L.nest_f.27972
L.nest_f.27976:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27973
  jmp L.nest_f.27974
L.nest_t.27977:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27975
  jmp L.nest_f.27976
L.nest_f.27978:
  mov rax, 1086
  jmp r15
L.nest_t.27979:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27969
  jmp L.nest_f.27970
L.nest_f.27980:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27977
  jmp L.nest_f.27978
L.<.27831:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27961
  jmp L.nest_f.27962
L.nest_t.27937:
  mov rax, 14
  jmp r15
L.nest_f.27938:
  mov rax, 6
  jmp r15
L.nest_t.27939:
  cmp r14, r13
  jl L.nest_t.27937
  jmp L.nest_f.27938
L.nest_f.27940:
  mov rax, 1854
  jmp r15
L.nest_t.27941:
  mov rax, 14
  jmp r15
L.nest_f.27942:
  mov rax, 6
  jmp r15
L.nest_t.27943:
  cmp r14, r13
  jl L.nest_t.27941
  jmp L.nest_f.27942
L.nest_f.27944:
  mov rax, 1854
  jmp r15
L.nest_t.27945:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27939
  jmp L.nest_f.27940
L.nest_f.27946:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27943
  jmp L.nest_f.27944
L.nest_t.27947:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27945
  jmp L.nest_f.27946
L.nest_f.27948:
  mov rax, 1598
  jmp r15
L.nest_t.27949:
  mov rax, 14
  jmp r15
L.nest_f.27950:
  mov rax, 6
  jmp r15
L.nest_t.27951:
  cmp r14, r13
  jl L.nest_t.27949
  jmp L.nest_f.27950
L.nest_f.27952:
  mov rax, 1854
  jmp r15
L.nest_t.27953:
  mov rax, 14
  jmp r15
L.nest_f.27954:
  mov rax, 6
  jmp r15
L.nest_t.27955:
  cmp r14, r13
  jl L.nest_t.27953
  jmp L.nest_f.27954
L.nest_f.27956:
  mov rax, 1854
  jmp r15
L.nest_t.27957:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27951
  jmp L.nest_f.27952
L.nest_f.27958:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27955
  jmp L.nest_f.27956
L.nest_t.27959:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27957
  jmp L.nest_f.27958
L.nest_f.27960:
  mov rax, 1598
  jmp r15
L.nest_t.27961:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27947
  jmp L.nest_f.27948
L.nest_f.27962:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27959
  jmp L.nest_f.27960
L.<=.27832:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27935
  jmp L.nest_f.27936
L.nest_t.27911:
  mov rax, 14
  jmp r15
L.nest_f.27912:
  mov rax, 6
  jmp r15
L.nest_t.27913:
  cmp r14, r13
  jle L.nest_t.27911
  jmp L.nest_f.27912
L.nest_f.27914:
  mov rax, 2366
  jmp r15
L.nest_t.27915:
  mov rax, 14
  jmp r15
L.nest_f.27916:
  mov rax, 6
  jmp r15
L.nest_t.27917:
  cmp r14, r13
  jle L.nest_t.27915
  jmp L.nest_f.27916
L.nest_f.27918:
  mov rax, 2366
  jmp r15
L.nest_t.27919:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27913
  jmp L.nest_f.27914
L.nest_f.27920:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27917
  jmp L.nest_f.27918
L.nest_t.27921:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27919
  jmp L.nest_f.27920
L.nest_f.27922:
  mov rax, 2110
  jmp r15
L.nest_t.27923:
  mov rax, 14
  jmp r15
L.nest_f.27924:
  mov rax, 6
  jmp r15
L.nest_t.27925:
  cmp r14, r13
  jle L.nest_t.27923
  jmp L.nest_f.27924
L.nest_f.27926:
  mov rax, 2366
  jmp r15
L.nest_t.27927:
  mov rax, 14
  jmp r15
L.nest_f.27928:
  mov rax, 6
  jmp r15
L.nest_t.27929:
  cmp r14, r13
  jle L.nest_t.27927
  jmp L.nest_f.27928
L.nest_f.27930:
  mov rax, 2366
  jmp r15
L.nest_t.27931:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27925
  jmp L.nest_f.27926
L.nest_f.27932:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27929
  jmp L.nest_f.27930
L.nest_t.27933:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27931
  jmp L.nest_f.27932
L.nest_f.27934:
  mov rax, 2110
  jmp r15
L.nest_t.27935:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27921
  jmp L.nest_f.27922
L.nest_f.27936:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27933
  jmp L.nest_f.27934
L.>.27833:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27909
  jmp L.nest_f.27910
L.nest_t.27885:
  mov rax, 14
  jmp r15
L.nest_f.27886:
  mov rax, 6
  jmp r15
L.nest_t.27887:
  cmp r14, r13
  jg L.nest_t.27885
  jmp L.nest_f.27886
L.nest_f.27888:
  mov rax, 2878
  jmp r15
L.nest_t.27889:
  mov rax, 14
  jmp r15
L.nest_f.27890:
  mov rax, 6
  jmp r15
L.nest_t.27891:
  cmp r14, r13
  jg L.nest_t.27889
  jmp L.nest_f.27890
L.nest_f.27892:
  mov rax, 2878
  jmp r15
L.nest_t.27893:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27887
  jmp L.nest_f.27888
L.nest_f.27894:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27891
  jmp L.nest_f.27892
L.nest_t.27895:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27893
  jmp L.nest_f.27894
L.nest_f.27896:
  mov rax, 2622
  jmp r15
L.nest_t.27897:
  mov rax, 14
  jmp r15
L.nest_f.27898:
  mov rax, 6
  jmp r15
L.nest_t.27899:
  cmp r14, r13
  jg L.nest_t.27897
  jmp L.nest_f.27898
L.nest_f.27900:
  mov rax, 2878
  jmp r15
L.nest_t.27901:
  mov rax, 14
  jmp r15
L.nest_f.27902:
  mov rax, 6
  jmp r15
L.nest_t.27903:
  cmp r14, r13
  jg L.nest_t.27901
  jmp L.nest_f.27902
L.nest_f.27904:
  mov rax, 2878
  jmp r15
L.nest_t.27905:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27899
  jmp L.nest_f.27900
L.nest_f.27906:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27903
  jmp L.nest_f.27904
L.nest_t.27907:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27905
  jmp L.nest_f.27906
L.nest_f.27908:
  mov rax, 2622
  jmp r15
L.nest_t.27909:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27895
  jmp L.nest_f.27896
L.nest_f.27910:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27907
  jmp L.nest_f.27908
L.>=.27834:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27883
  jmp L.nest_f.27884
L.nest_t.27859:
  mov rax, 14
  jmp r15
L.nest_f.27860:
  mov rax, 6
  jmp r15
L.nest_t.27861:
  cmp r14, r13
  jge L.nest_t.27859
  jmp L.nest_f.27860
L.nest_f.27862:
  mov rax, 3390
  jmp r15
L.nest_t.27863:
  mov rax, 14
  jmp r15
L.nest_f.27864:
  mov rax, 6
  jmp r15
L.nest_t.27865:
  cmp r14, r13
  jge L.nest_t.27863
  jmp L.nest_f.27864
L.nest_f.27866:
  mov rax, 3390
  jmp r15
L.nest_t.27867:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27861
  jmp L.nest_f.27862
L.nest_f.27868:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27865
  jmp L.nest_f.27866
L.nest_t.27869:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27867
  jmp L.nest_f.27868
L.nest_f.27870:
  mov rax, 3134
  jmp r15
L.nest_t.27871:
  mov rax, 14
  jmp r15
L.nest_f.27872:
  mov rax, 6
  jmp r15
L.nest_t.27873:
  cmp r14, r13
  jge L.nest_t.27871
  jmp L.nest_f.27872
L.nest_f.27874:
  mov rax, 3390
  jmp r15
L.nest_t.27875:
  mov rax, 14
  jmp r15
L.nest_f.27876:
  mov rax, 6
  jmp r15
L.nest_t.27877:
  cmp r14, r13
  jge L.nest_t.27875
  jmp L.nest_f.27876
L.nest_f.27878:
  mov rax, 3390
  jmp r15
L.nest_t.27879:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27873
  jmp L.nest_f.27874
L.nest_f.27880:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27877
  jmp L.nest_f.27878
L.nest_t.27881:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.27879
  jmp L.nest_f.27880
L.nest_f.27882:
  mov rax, 3134
  jmp r15
L.nest_t.27883:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.27869
  jmp L.nest_f.27870
L.nest_f.27884:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.27881
  jmp L.nest_f.27882
L.fixnum?.27835:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.27857
  jmp L.nest_f.27858
L.nest_t.27857:
  mov rax, 14
  jmp r15
L.nest_f.27858:
  mov rax, 6
  jmp r15
L.boolean?.27836:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.27855
  jmp L.nest_f.27856
L.nest_t.27855:
  mov rax, 14
  jmp r15
L.nest_f.27856:
  mov rax, 6
  jmp r15
L.empty?.27837:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.27853
  jmp L.nest_f.27854
L.nest_t.27853:
  mov rax, 14
  jmp r15
L.nest_f.27854:
  mov rax, 6
  jmp r15
L.void?.27838:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.27851
  jmp L.nest_f.27852
L.nest_t.27851:
  mov rax, 14
  jmp r15
L.nest_f.27852:
  mov rax, 6
  jmp r15
L.ascii-char?.27839:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.27849
  jmp L.nest_f.27850
L.nest_t.27849:
  mov rax, 14
  jmp r15
L.nest_f.27850:
  mov rax, 6
  jmp r15
L.error?.27840:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.27847
  jmp L.nest_f.27848
L.nest_t.27847:
  mov rax, 14
  jmp r15
L.nest_f.27848:
  mov rax, 6
  jmp r15
L.not.27841:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.27845
  jmp L.nest_f.27846
L.nest_t.27845:
  mov rax, 6
  jmp r15
L.nest_f.27846:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:197:2
actual:
  '(2
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for '< #<continuation-mark-set> < (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    2
    2
    1
    2
    #f
    2
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    2
    2
    2
    2
    2
    2
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.27101 #<continuation-mark-set> L.tmp.27101 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    2
    2
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    2
    2)
expected:   2
--------------------

expose-basic-blocks: (module (define L.main.31237 () (begin (nop) (set! rsi 24) (set! rdi 16) (nop) (jump L.mul.31221))) (define L.not.31236 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.31235 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.31234 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.31233 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.31232 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.31231 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.31230 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.31229 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.31228 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.31227 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.31226 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.31225 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.31224 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.31223 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.31222 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.threeParams.31218 () (begin (set! (rbp + 0) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp + 8) rdx) (set! rbp (+ rbp 16)) (return-point L.rp.31238 (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.31238) (jump L.+.31224))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.+.31224))) (define L.twoParams.31219 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! rsi r13) (set! rdi r14) (nop) (jump L.+.31224))) (define L.helper.31220 () (begin (set! (rbp + 0) r15) (set! (rbp + 24) rdi) (set! (rbp + 8) rsi) (set! (rbp + 16) rdx) (set! rbp (+ rbp 32)) (return-point L.rp.31239 (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.31239) (jump L.eq?.31222))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.31240 (begin (set! rsi 16) (set! rdi (rbp + -16)) (set! r15 L.rp.31240) (jump L.eq?.31222))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.31241 (begin (set! rsi 24) (set! rdi (rbp + -16)) (set! r15 L.rp.31241) (jump L.eq?.31222))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 8)) (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24))) (begin (set! rax 8000000000) (jump (rbp + 0)))))))))) (define L.mul.31221 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 24)) (return-point L.rp.31242 (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.31242) (jump L.eq?.31222))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rbp (+ rbp 24)) (return-point L.rp.31243 (begin (set! rsi 16) (set! rdi (rbp + -8)) (set! r15 L.rp.31243) (jump L.eq?.31222))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.twoParams.31219) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rbp (+ rbp 24)) (return-point L.rp.31244 (begin (set! rsi 24) (set! rdi (rbp + -8)) (set! r15 L.rp.31244) (jump L.eq?.31222))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.threeParams.31218) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rax 8000000) (jump (rbp + 0)))))))))))
process-rp: (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.31238) (jump L.+.31224))
process-rp: (jump L.+.31224)
updating tai with: (set! rbp (- rbp 16))
updating tai with: (set! r15 rax)
updating tai with: (set! rsi r15)
updating tai with: (set! rdi (rbp + 8))
updating tai with: (set! r15 (rbp + 0))
updating tai with: (jump L.+.31224)
process-rp: (begin (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.31239) (jump L.eq?.31222))
process-rp: (jump L.eq?.31222)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.31240 (begin (set! rsi 16) (set! rdi (rbp + -16)) (set! r15 L.rp.31240) (jump L.eq?.31222))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24))) (begin (set! rbp (+ rbp 32)) (return-point L.rp.31241 (begin (set! rsi 24) (set! rdi (rbp + -16)) (set! r15 L.rp.31241) (jump L.eq?.31222))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 8)) (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24))) (begin (set! rax 8000000000) (jump (rbp + 0))))))))
updating tai with: (set! (rbp + 0) r15)
updating tai with: (set! (rbp + 8) rdi)
updating tai with: (set! (rbp + 16) rsi)
updating tai with: (set! rbp (+ rbp 24))
process-rp: (begin (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.31242) (jump L.eq?.31222))
process-rp: (jump L.eq?.31222)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rbp (+ rbp 24)) (return-point L.rp.31243 (begin (set! rsi 16) (set! rdi (rbp + -8)) (set! r15 L.rp.31243) (jump L.eq?.31222))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.twoParams.31219) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rbp (+ rbp 24)) (return-point L.rp.31244 (begin (set! rsi 24) (set! rdi (rbp + -8)) (set! r15 L.rp.31244) (jump L.eq?.31222))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.threeParams.31218) (set! r15 (rbp + 0)) (jump L.helper.31220)) (begin (set! rax 8000000) (jump (rbp + 0))))))))
create-return-point-blocktwo: (return-point L.rp.31242 (begin ((if (neq? r15 6) (jump L.tmp.31589) (jump L.tmp.31591)) (set! r15 rax) (set! rbp (- rbp 24)) (set! rbp (+ rbp 24)) (set! (rbp + 16) rsi) (set! (rbp + 8) rdi) (set! (rbp + 0) r15) (if (neq? r15 6) (jump L.tmp.31577) (jump L.tmp.31579)) (set! r15 rax) (set! rbp (- rbp 32)) (jump L.+.31224) (set! r15 (rbp + 0)) (set! rdi (rbp + 8)) (set! rsi r15) (set! r15 rax) (set! rbp (- rbp 16)))))
parse-rp-tail (begin ((set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.+.31224) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.31577) (jump L.tmp.31579)) (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 24)) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.31589) (jump L.tmp.31591))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.31589) (jump L.tmp.31591))
parse-rp-tail (jump L.tmp.31589)
parse-rp-tail (jump L.tmp.31591)
flatten (module (define L.main.31620 () (begin (nop) (set! rsi 24) (set! rdi 16) (nop) (jump L.mul.31604))) (define L.mul.31604 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 24)) (set! rsi 8) (set! rdi (rbp + -8)) (set! r15 L.rp.31625) (jump L.eq?.31605))) (define L.rp.31625 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31812) (jump L.nest_f.31813)))) (define L.rp.31626 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31810) (jump L.nest_f.31811)))) (define L.rp.31627 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31808) (jump L.nest_f.31809)))) (define L.nest_t.31808 () (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.threeParams.31601) (set! r15 (rbp + 0)) (jump L.helper.31603))) (define L.nest_f.31809 () (begin (set! rax 8000000) (jump (rbp + 0)))) (define L.nest_t.31810 () (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi L.twoParams.31602) (set! r15 (rbp + 0)) (jump L.helper.31603))) (define L.nest_f.31811 () (begin (set! rbp (+ rbp 24)) (set! rsi 24) (set! rdi (rbp + -8)) (set! r15 L.rp.31627) (jump L.eq?.31605))) (define L.nest_t.31812 () (begin (set! rdx (rbp + 16)) (set! rsi (rbp + 8)) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.helper.31603))) (define L.nest_f.31813 () (begin (set! rbp (+ rbp 24)) (set! rsi 16) (set! rdi (rbp + -8)) (set! r15 L.rp.31626) (jump L.eq?.31605))) (define L.helper.31603 () (begin (set! (rbp + 0) r15) (set! (rbp + 24) rdi) (set! (rbp + 8) rsi) (set! (rbp + 16) rdx) (set! rbp (+ rbp 32)) (set! rsi 8) (set! rdi (rbp + -16)) (set! r15 L.rp.31622) (jump L.eq?.31605))) (define L.rp.31622 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31806) (jump L.nest_f.31807)))) (define L.rp.31623 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31804) (jump L.nest_f.31805)))) (define L.rp.31624 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.31802) (jump L.nest_f.31803)))) (define L.nest_t.31802 () (begin (set! rdx (rbp + 8)) (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24)))) (define L.nest_f.31803 () (begin (set! rax 8000000000) (jump (rbp + 0)))) (define L.nest_t.31804 () (begin (set! rsi (rbp + 8)) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump (rbp + 24)))) (define L.nest_f.31805 () (begin (set! rbp (+ rbp 32)) (set! rsi 24) (set! rdi (rbp + -16)) (set! r15 L.rp.31624) (jump L.eq?.31605))) (define L.nest_t.31806 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.31807 () (begin (set! rbp (+ rbp 32)) (set! rsi 16) (set! rdi (rbp + -16)) (set! r15 L.rp.31623) (jump L.eq?.31605))) (define L.twoParams.31602 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! rsi r13) (set! rdi r14) (nop) (jump L.+.31607))) (define L.threeParams.31601 () (begin (set! (rbp + 0) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp + 8) rdx) (set! rbp (+ rbp 16)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.31621) (jump L.+.31607))) (define L.rp.31621 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.+.31607))) (define L.eq?.31605 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.31800) (jump L.nest_f.31801)))) (define L.nest_t.31800 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31801 () (begin (set! rax 6) (jump r15))) (define L.*.31606 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31798) (jump L.nest_f.31799)))) (define L.nest_t.31782 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31783 () (begin (set! rax 318) (jump r15))) (define L.nest_t.31784 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31785 () (begin (set! rax 318) (jump r15))) (define L.nest_t.31786 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31782) (jump L.nest_f.31783)))) (define L.nest_f.31787 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31784) (jump L.nest_f.31785)))) (define L.nest_t.31788 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31786) (jump L.nest_f.31787)))) (define L.nest_f.31789 () (begin (set! rax 62) (jump r15))) (define L.nest_t.31790 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31791 () (begin (set! rax 318) (jump r15))) (define L.nest_t.31792 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31793 () (begin (set! rax 318) (jump r15))) (define L.nest_t.31794 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31790) (jump L.nest_f.31791)))) (define L.nest_f.31795 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31792) (jump L.nest_f.31793)))) (define L.nest_t.31796 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31794) (jump L.nest_f.31795)))) (define L.nest_f.31797 () (begin (set! rax 62) (jump r15))) (define L.nest_t.31798 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31788) (jump L.nest_f.31789)))) (define L.nest_f.31799 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31796) (jump L.nest_f.31797)))) (define L.+.31607 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31780) (jump L.nest_f.31781)))) (define L.nest_t.31764 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31765 () (begin (set! rax 830) (jump r15))) (define L.nest_t.31766 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31767 () (begin (set! rax 830) (jump r15))) (define L.nest_t.31768 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31764) (jump L.nest_f.31765)))) (define L.nest_f.31769 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31766) (jump L.nest_f.31767)))) (define L.nest_t.31770 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31768) (jump L.nest_f.31769)))) (define L.nest_f.31771 () (begin (set! rax 574) (jump r15))) (define L.nest_t.31772 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31773 () (begin (set! rax 830) (jump r15))) (define L.nest_t.31774 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31775 () (begin (set! rax 830) (jump r15))) (define L.nest_t.31776 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31772) (jump L.nest_f.31773)))) (define L.nest_f.31777 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31774) (jump L.nest_f.31775)))) (define L.nest_t.31778 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31776) (jump L.nest_f.31777)))) (define L.nest_f.31779 () (begin (set! rax 574) (jump r15))) (define L.nest_t.31780 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31770) (jump L.nest_f.31771)))) (define L.nest_f.31781 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31778) (jump L.nest_f.31779)))) (define L.-.31608 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31762) (jump L.nest_f.31763)))) (define L.nest_t.31746 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31747 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.31748 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31749 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.31750 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31746) (jump L.nest_f.31747)))) (define L.nest_f.31751 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31748) (jump L.nest_f.31749)))) (define L.nest_t.31752 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31750) (jump L.nest_f.31751)))) (define L.nest_f.31753 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.31754 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31755 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.31756 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.31757 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.31758 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31754) (jump L.nest_f.31755)))) (define L.nest_f.31759 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31756) (jump L.nest_f.31757)))) (define L.nest_t.31760 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31758) (jump L.nest_f.31759)))) (define L.nest_f.31761 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.31762 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31752) (jump L.nest_f.31753)))) (define L.nest_f.31763 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31760) (jump L.nest_f.31761)))) (define L.<.31609 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31744) (jump L.nest_f.31745)))) (define L.nest_t.31720 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31721 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31722 () (if (< r14 r13) (jump L.nest_t.31720) (jump L.nest_f.31721))) (define L.nest_f.31723 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.31724 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31725 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31726 () (if (< r14 r13) (jump L.nest_t.31724) (jump L.nest_f.31725))) (define L.nest_f.31727 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.31728 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31722) (jump L.nest_f.31723)))) (define L.nest_f.31729 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31726) (jump L.nest_f.31727)))) (define L.nest_t.31730 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31728) (jump L.nest_f.31729)))) (define L.nest_f.31731 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.31732 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31733 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31734 () (if (< r14 r13) (jump L.nest_t.31732) (jump L.nest_f.31733))) (define L.nest_f.31735 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.31736 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31737 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31738 () (if (< r14 r13) (jump L.nest_t.31736) (jump L.nest_f.31737))) (define L.nest_f.31739 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.31740 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31734) (jump L.nest_f.31735)))) (define L.nest_f.31741 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31738) (jump L.nest_f.31739)))) (define L.nest_t.31742 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31740) (jump L.nest_f.31741)))) (define L.nest_f.31743 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.31744 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31730) (jump L.nest_f.31731)))) (define L.nest_f.31745 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31742) (jump L.nest_f.31743)))) (define L.<=.31610 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31718) (jump L.nest_f.31719)))) (define L.nest_t.31694 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31695 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31696 () (if (<= r14 r13) (jump L.nest_t.31694) (jump L.nest_f.31695))) (define L.nest_f.31697 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.31698 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31699 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31700 () (if (<= r14 r13) (jump L.nest_t.31698) (jump L.nest_f.31699))) (define L.nest_f.31701 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.31702 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31696) (jump L.nest_f.31697)))) (define L.nest_f.31703 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31700) (jump L.nest_f.31701)))) (define L.nest_t.31704 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31702) (jump L.nest_f.31703)))) (define L.nest_f.31705 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.31706 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31707 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31708 () (if (<= r14 r13) (jump L.nest_t.31706) (jump L.nest_f.31707))) (define L.nest_f.31709 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.31710 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31711 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31712 () (if (<= r14 r13) (jump L.nest_t.31710) (jump L.nest_f.31711))) (define L.nest_f.31713 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.31714 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31708) (jump L.nest_f.31709)))) (define L.nest_f.31715 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31712) (jump L.nest_f.31713)))) (define L.nest_t.31716 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31714) (jump L.nest_f.31715)))) (define L.nest_f.31717 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.31718 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31704) (jump L.nest_f.31705)))) (define L.nest_f.31719 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31716) (jump L.nest_f.31717)))) (define L.>.31611 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31692) (jump L.nest_f.31693)))) (define L.nest_t.31668 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31669 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31670 () (if (> r14 r13) (jump L.nest_t.31668) (jump L.nest_f.31669))) (define L.nest_f.31671 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.31672 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31673 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31674 () (if (> r14 r13) (jump L.nest_t.31672) (jump L.nest_f.31673))) (define L.nest_f.31675 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.31676 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31670) (jump L.nest_f.31671)))) (define L.nest_f.31677 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31674) (jump L.nest_f.31675)))) (define L.nest_t.31678 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31676) (jump L.nest_f.31677)))) (define L.nest_f.31679 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.31680 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31681 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31682 () (if (> r14 r13) (jump L.nest_t.31680) (jump L.nest_f.31681))) (define L.nest_f.31683 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.31684 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31685 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31686 () (if (> r14 r13) (jump L.nest_t.31684) (jump L.nest_f.31685))) (define L.nest_f.31687 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.31688 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31682) (jump L.nest_f.31683)))) (define L.nest_f.31689 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31686) (jump L.nest_f.31687)))) (define L.nest_t.31690 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31688) (jump L.nest_f.31689)))) (define L.nest_f.31691 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.31692 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31678) (jump L.nest_f.31679)))) (define L.nest_f.31693 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31690) (jump L.nest_f.31691)))) (define L.>=.31612 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31666) (jump L.nest_f.31667)))) (define L.nest_t.31642 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31643 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31644 () (if (>= r14 r13) (jump L.nest_t.31642) (jump L.nest_f.31643))) (define L.nest_f.31645 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.31646 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31647 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31648 () (if (>= r14 r13) (jump L.nest_t.31646) (jump L.nest_f.31647))) (define L.nest_f.31649 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.31650 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31644) (jump L.nest_f.31645)))) (define L.nest_f.31651 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31648) (jump L.nest_f.31649)))) (define L.nest_t.31652 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31650) (jump L.nest_f.31651)))) (define L.nest_f.31653 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.31654 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31655 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31656 () (if (>= r14 r13) (jump L.nest_t.31654) (jump L.nest_f.31655))) (define L.nest_f.31657 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.31658 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31659 () (begin (set! rax 6) (jump r15))) (define L.nest_t.31660 () (if (>= r14 r13) (jump L.nest_t.31658) (jump L.nest_f.31659))) (define L.nest_f.31661 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.31662 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31656) (jump L.nest_f.31657)))) (define L.nest_f.31663 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31660) (jump L.nest_f.31661)))) (define L.nest_t.31664 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.31662) (jump L.nest_f.31663)))) (define L.nest_f.31665 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.31666 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.31652) (jump L.nest_f.31653)))) (define L.nest_f.31667 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.31664) (jump L.nest_f.31665)))) (define L.fixnum?.31613 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.31640) (jump L.nest_f.31641)))) (define L.nest_t.31640 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31641 () (begin (set! rax 6) (jump r15))) (define L.boolean?.31614 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.31638) (jump L.nest_f.31639)))) (define L.nest_t.31638 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31639 () (begin (set! rax 6) (jump r15))) (define L.empty?.31615 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.31636) (jump L.nest_f.31637)))) (define L.nest_t.31636 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31637 () (begin (set! rax 6) (jump r15))) (define L.void?.31616 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.31634) (jump L.nest_f.31635)))) (define L.nest_t.31634 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31635 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.31617 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.31632) (jump L.nest_f.31633)))) (define L.nest_t.31632 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31633 () (begin (set! rax 6) (jump r15))) (define L.error?.31618 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.31630) (jump L.nest_f.31631)))) (define L.nest_t.31630 () (begin (set! rax 14) (jump r15))) (define L.nest_f.31631 () (begin (set! rax 6) (jump r15))) (define L.not.31619 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.31628) (jump L.nest_f.31629)))) (define L.nest_t.31628 () (begin (set! rax 6) (jump r15))) (define L.nest_f.31629 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858000721585800072685.s:171: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:262: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:262: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:349: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:349: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:436: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:436: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:547: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:547: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:658: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:658: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:769: error: symbol `L.' redefined
/var/tmp/rkt15858000721585800072685.s:769: error: parser: instruction expected
/var/tmp/rkt15858000721585800072685.s:928: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.32046:
  mov rsi, 24
  mov rdi, 16
  jmp L.mul.32030
L.mul.32030:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  mov QWORD [rbp + 16], rsi
  add rbp, 24
  mov rsi, 8
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.32051
  jmp L.eq?.32031
L.rp.32051:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32238
  jmp L.nest_f.32239
L.rp.32052:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32236
  jmp L.nest_f.32237
L.rp.32053:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32234
  jmp L.nest_f.32235
L.nest_t.32234:
  mov rdx, QWORD [rbp + 16]
  mov rsi, QWORD [rbp + 8]
  mov rdi, L.threeParams.32027
  mov r15, QWORD [rbp + 0]
  jmp L.helper.32029
L.nest_f.32235:
  mov rax, 8000000
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.32236:
  mov rdx, QWORD [rbp + 16]
  mov rsi, QWORD [rbp + 8]
  mov rdi, L.twoParams.32028
  mov r15, QWORD [rbp + 0]
  jmp L.helper.32029
L.nest_f.32237:
  add rbp, 24
  mov rsi, 24
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.32053
  jmp L.eq?.32031
L.nest_t.32238:
  mov rdx, QWORD [rbp + 16]
  mov rsi, QWORD [rbp + 8]
  mov rdi, -8
  mov r15, QWORD [rbp + 0]
  jmp L.helper.32029
L.nest_f.32239:
  add rbp, 24
  mov rsi, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.32052
  jmp L.eq?.32031
L.helper.32029:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 24], rdi
  mov QWORD [rbp + 8], rsi
  mov QWORD [rbp + 16], rdx
  add rbp, 32
  mov rsi, 8
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.32048
  jmp L.eq?.32031
L.rp.32048:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32232
  jmp L.nest_f.32233
L.rp.32049:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32230
  jmp L.nest_f.32231
L.rp.32050:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.32228
  jmp L.nest_f.32229
L.nest_t.32228:
  mov rdx, QWORD [rbp + 8]
  mov rsi, QWORD [rbp + 8]
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  mov r10, QWORD [rbp + 24]
  jmp r10
L.nest_f.32229:
  mov rax, 8000000000
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.32230:
  mov rsi, QWORD [rbp + 8]
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  mov r10, QWORD [rbp + 24]
  jmp r10
L.nest_f.32231:
  add rbp, 32
  mov rsi, 24
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.32050
  jmp L.eq?.32031
L.nest_t.32232:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.32233:
  add rbp, 32
  mov rsi, 16
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.32049
  jmp L.eq?.32031
L.twoParams.32028:
  mov r14, rdi
  mov r13, rsi
  mov rsi, r13
  mov rdi, r14
  jmp L.+.32033
L.threeParams.32027:
  mov QWORD [rbp + 0], r15
  mov r15, rdi
  mov r14, rsi
  mov QWORD [rbp + 8], rdx
  add rbp, 16
  mov rsi, r14
  mov rdi, r15
  mov r15, L.rp.32047
  jmp L.+.32033
L.rp.32047:
  sub rbp, 16
  mov r15, rax
  mov rsi, r15
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.+.32033
L.eq?.32031:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.32226
  jmp L.nest_f.32227
L.nest_t.32226:
  mov rax, 14
  jmp r15
L.nest_f.32227:
  mov rax, 6
  jmp r15
L.*.32032:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32224
  jmp L.nest_f.32225
L.nest_t.32208:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32209:
  mov rax, 318
  jmp r15
L.nest_t.32210:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32211:
  mov rax, 318
  jmp r15
L.nest_t.32212:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32208
  jmp L.nest_f.32209
L.nest_f.32213:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32210
  jmp L.nest_f.32211
L.nest_t.32214:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32212
  jmp L.nest_f.32213
L.nest_f.32215:
  mov rax, 62
  jmp r15
L.nest_t.32216:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32217:
  mov rax, 318
  jmp r15
L.nest_t.32218:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32219:
  mov rax, 318
  jmp r15
L.nest_t.32220:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32216
  jmp L.nest_f.32217
L.nest_f.32221:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32218
  jmp L.nest_f.32219
L.nest_t.32222:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32220
  jmp L.nest_f.32221
L.nest_f.32223:
  mov rax, 62
  jmp r15
L.nest_t.32224:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32214
  jmp L.nest_f.32215
L.nest_f.32225:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32222
  jmp L.nest_f.32223
L.+.32033:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32206
  jmp L.nest_f.32207
L.nest_t.32190:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32191:
  mov rax, 830
  jmp r15
L.nest_t.32192:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32193:
  mov rax, 830
  jmp r15
L.nest_t.32194:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32190
  jmp L.nest_f.32191
L.nest_f.32195:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32192
  jmp L.nest_f.32193
L.nest_t.32196:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32194
  jmp L.nest_f.32195
L.nest_f.32197:
  mov rax, 574
  jmp r15
L.nest_t.32198:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32199:
  mov rax, 830
  jmp r15
L.nest_t.32200:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32201:
  mov rax, 830
  jmp r15
L.nest_t.32202:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32198
  jmp L.nest_f.32199
L.nest_f.32203:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32200
  jmp L.nest_f.32201
L.nest_t.32204:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32202
  jmp L.nest_f.32203
L.nest_f.32205:
  mov rax, 574
  jmp r15
L.nest_t.32206:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32196
  jmp L.nest_f.32197
L.nest_f.32207:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32204
  jmp L.nest_f.32205
L.-.32034:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32188
  jmp L.nest_f.32189
L.nest_t.32172:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32173:
  mov rax, 1342
  jmp r15
L.nest_t.32174:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32175:
  mov rax, 1342
  jmp r15
L.nest_t.32176:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32172
  jmp L.nest_f.32173
L.nest_f.32177:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32174
  jmp L.nest_f.32175
L.nest_t.32178:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32176
  jmp L.nest_f.32177
L.nest_f.32179:
  mov rax, 1086
  jmp r15
L.nest_t.32180:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32181:
  mov rax, 1342
  jmp r15
L.nest_t.32182:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.32183:
  mov rax, 1342
  jmp r15
L.nest_t.32184:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32180
  jmp L.nest_f.32181
L.nest_f.32185:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32182
  jmp L.nest_f.32183
L.nest_t.32186:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32184
  jmp L.nest_f.32185
L.nest_f.32187:
  mov rax, 1086
  jmp r15
L.nest_t.32188:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32178
  jmp L.nest_f.32179
L.nest_f.32189:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32186
  jmp L.nest_f.32187
L.<.32035:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32170
  jmp L.nest_f.32171
L.nest_t.32146:
  mov rax, 14
  jmp r15
L.nest_f.32147:
  mov rax, 6
  jmp r15
L.nest_t.32148:
  cmp r14, r13
  jl L.nest_t.32146
  jmp L.nest_f.32147
L.nest_f.32149:
  mov rax, 1854
  jmp r15
L.nest_t.32150:
  mov rax, 14
  jmp r15
L.nest_f.32151:
  mov rax, 6
  jmp r15
L.nest_t.32152:
  cmp r14, r13
  jl L.nest_t.32150
  jmp L.nest_f.32151
L.nest_f.32153:
  mov rax, 1854
  jmp r15
L.nest_t.32154:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32148
  jmp L.nest_f.32149
L.nest_f.32155:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32152
  jmp L.nest_f.32153
L.nest_t.32156:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32154
  jmp L.nest_f.32155
L.nest_f.32157:
  mov rax, 1598
  jmp r15
L.nest_t.32158:
  mov rax, 14
  jmp r15
L.nest_f.32159:
  mov rax, 6
  jmp r15
L.nest_t.32160:
  cmp r14, r13
  jl L.nest_t.32158
  jmp L.nest_f.32159
L.nest_f.32161:
  mov rax, 1854
  jmp r15
L.nest_t.32162:
  mov rax, 14
  jmp r15
L.nest_f.32163:
  mov rax, 6
  jmp r15
L.nest_t.32164:
  cmp r14, r13
  jl L.nest_t.32162
  jmp L.nest_f.32163
L.nest_f.32165:
  mov rax, 1854
  jmp r15
L.nest_t.32166:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32160
  jmp L.nest_f.32161
L.nest_f.32167:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32164
  jmp L.nest_f.32165
L.nest_t.32168:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32166
  jmp L.nest_f.32167
L.nest_f.32169:
  mov rax, 1598
  jmp r15
L.nest_t.32170:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32156
  jmp L.nest_f.32157
L.nest_f.32171:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32168
  jmp L.nest_f.32169
L.<=.32036:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32144
  jmp L.nest_f.32145
L.nest_t.32120:
  mov rax, 14
  jmp r15
L.nest_f.32121:
  mov rax, 6
  jmp r15
L.nest_t.32122:
  cmp r14, r13
  jle L.nest_t.32120
  jmp L.nest_f.32121
L.nest_f.32123:
  mov rax, 2366
  jmp r15
L.nest_t.32124:
  mov rax, 14
  jmp r15
L.nest_f.32125:
  mov rax, 6
  jmp r15
L.nest_t.32126:
  cmp r14, r13
  jle L.nest_t.32124
  jmp L.nest_f.32125
L.nest_f.32127:
  mov rax, 2366
  jmp r15
L.nest_t.32128:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32122
  jmp L.nest_f.32123
L.nest_f.32129:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32126
  jmp L.nest_f.32127
L.nest_t.32130:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32128
  jmp L.nest_f.32129
L.nest_f.32131:
  mov rax, 2110
  jmp r15
L.nest_t.32132:
  mov rax, 14
  jmp r15
L.nest_f.32133:
  mov rax, 6
  jmp r15
L.nest_t.32134:
  cmp r14, r13
  jle L.nest_t.32132
  jmp L.nest_f.32133
L.nest_f.32135:
  mov rax, 2366
  jmp r15
L.nest_t.32136:
  mov rax, 14
  jmp r15
L.nest_f.32137:
  mov rax, 6
  jmp r15
L.nest_t.32138:
  cmp r14, r13
  jle L.nest_t.32136
  jmp L.nest_f.32137
L.nest_f.32139:
  mov rax, 2366
  jmp r15
L.nest_t.32140:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32134
  jmp L.nest_f.32135
L.nest_f.32141:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32138
  jmp L.nest_f.32139
L.nest_t.32142:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32140
  jmp L.nest_f.32141
L.nest_f.32143:
  mov rax, 2110
  jmp r15
L.nest_t.32144:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32130
  jmp L.nest_f.32131
L.nest_f.32145:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32142
  jmp L.nest_f.32143
L.>.32037:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32118
  jmp L.nest_f.32119
L.nest_t.32094:
  mov rax, 14
  jmp r15
L.nest_f.32095:
  mov rax, 6
  jmp r15
L.nest_t.32096:
  cmp r14, r13
  jg L.nest_t.32094
  jmp L.nest_f.32095
L.nest_f.32097:
  mov rax, 2878
  jmp r15
L.nest_t.32098:
  mov rax, 14
  jmp r15
L.nest_f.32099:
  mov rax, 6
  jmp r15
L.nest_t.32100:
  cmp r14, r13
  jg L.nest_t.32098
  jmp L.nest_f.32099
L.nest_f.32101:
  mov rax, 2878
  jmp r15
L.nest_t.32102:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32096
  jmp L.nest_f.32097
L.nest_f.32103:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32100
  jmp L.nest_f.32101
L.nest_t.32104:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32102
  jmp L.nest_f.32103
L.nest_f.32105:
  mov rax, 2622
  jmp r15
L.nest_t.32106:
  mov rax, 14
  jmp r15
L.nest_f.32107:
  mov rax, 6
  jmp r15
L.nest_t.32108:
  cmp r14, r13
  jg L.nest_t.32106
  jmp L.nest_f.32107
L.nest_f.32109:
  mov rax, 2878
  jmp r15
L.nest_t.32110:
  mov rax, 14
  jmp r15
L.nest_f.32111:
  mov rax, 6
  jmp r15
L.nest_t.32112:
  cmp r14, r13
  jg L.nest_t.32110
  jmp L.nest_f.32111
L.nest_f.32113:
  mov rax, 2878
  jmp r15
L.nest_t.32114:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32108
  jmp L.nest_f.32109
L.nest_f.32115:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32112
  jmp L.nest_f.32113
L.nest_t.32116:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32114
  jmp L.nest_f.32115
L.nest_f.32117:
  mov rax, 2622
  jmp r15
L.nest_t.32118:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32104
  jmp L.nest_f.32105
L.nest_f.32119:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32116
  jmp L.nest_f.32117
L.>=.32038:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32092
  jmp L.nest_f.32093
L.nest_t.32068:
  mov rax, 14
  jmp r15
L.nest_f.32069:
  mov rax, 6
  jmp r15
L.nest_t.32070:
  cmp r14, r13
  jge L.nest_t.32068
  jmp L.nest_f.32069
L.nest_f.32071:
  mov rax, 3390
  jmp r15
L.nest_t.32072:
  mov rax, 14
  jmp r15
L.nest_f.32073:
  mov rax, 6
  jmp r15
L.nest_t.32074:
  cmp r14, r13
  jge L.nest_t.32072
  jmp L.nest_f.32073
L.nest_f.32075:
  mov rax, 3390
  jmp r15
L.nest_t.32076:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32070
  jmp L.nest_f.32071
L.nest_f.32077:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32074
  jmp L.nest_f.32075
L.nest_t.32078:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32076
  jmp L.nest_f.32077
L.nest_f.32079:
  mov rax, 3134
  jmp r15
L.nest_t.32080:
  mov rax, 14
  jmp r15
L.nest_f.32081:
  mov rax, 6
  jmp r15
L.nest_t.32082:
  cmp r14, r13
  jge L.nest_t.32080
  jmp L.nest_f.32081
L.nest_f.32083:
  mov rax, 3390
  jmp r15
L.nest_t.32084:
  mov rax, 14
  jmp r15
L.nest_f.32085:
  mov rax, 6
  jmp r15
L.nest_t.32086:
  cmp r14, r13
  jge L.nest_t.32084
  jmp L.nest_f.32085
L.nest_f.32087:
  mov rax, 3390
  jmp r15
L.nest_t.32088:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32082
  jmp L.nest_f.32083
L.nest_f.32089:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32086
  jmp L.nest_f.32087
L.nest_t.32090:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.32088
  jmp L.nest_f.32089
L.nest_f.32091:
  mov rax, 3134
  jmp r15
L.nest_t.32092:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.32078
  jmp L.nest_f.32079
L.nest_f.32093:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.32090
  jmp L.nest_f.32091
L.fixnum?.32039:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.32066
  jmp L.nest_f.32067
L.nest_t.32066:
  mov rax, 14
  jmp r15
L.nest_f.32067:
  mov rax, 6
  jmp r15
L.boolean?.32040:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.32064
  jmp L.nest_f.32065
L.nest_t.32064:
  mov rax, 14
  jmp r15
L.nest_f.32065:
  mov rax, 6
  jmp r15
L.empty?.32041:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.32062
  jmp L.nest_f.32063
L.nest_t.32062:
  mov rax, 14
  jmp r15
L.nest_f.32063:
  mov rax, 6
  jmp r15
L.void?.32042:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.32060
  jmp L.nest_f.32061
L.nest_t.32060:
  mov rax, 14
  jmp r15
L.nest_f.32061:
  mov rax, 6
  jmp r15
L.ascii-char?.32043:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.32058
  jmp L.nest_f.32059
L.nest_t.32058:
  mov rax, 14
  jmp r15
L.nest_f.32059:
  mov rax, 6
  jmp r15
L.error?.32044:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.32056
  jmp L.nest_f.32057
L.nest_t.32056:
  mov rax, 14
  jmp r15
L.nest_f.32057:
  mov rax, 6
  jmp r15
L.not.32045:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.32054
  jmp L.nest_f.32055
L.nest_t.32054:
  mov rax, 6
  jmp r15
L.nest_f.32055:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:209:3
actual:
  '("Failed on pass uniquify\n  #(struct:exn:misc:match match: no matching clause for 'twoParams #<continuation-mark-set> twoParams (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for '+ #<continuation-mark-set> + (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    6
    6
    6
    6
    1000000000
    6
    #<eof>
    6
    6
    6
    6
    6
    6
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.31246 #<continuation-mark-set> L.tmp.31246 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    6
    6
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    6
    6)
expected:   6
--------------------

expose-basic-blocks: (module (define L.main.35342 () (begin (nop) (set! (rbp + 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (nop) (jump L.F.35324))) (define L.not.35341 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.35340 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.35339 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.35338 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.35337 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.35336 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.35335 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.35334 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.35333 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.35332 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.35331 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.35330 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.35329 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.35328 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.35327 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.F.35324 () (begin (set! (rbp + 8) r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! r12 rcx) (nop) (nop) (set! rdi (rbp + 0)) (set! rbp (+ rbp 16)) (return-point L.rp.35343 (begin (set! (rbp + 8) 64) (set! (rbp + 0) rdi) (nop) (nop) (set! rcx r12) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35343) (jump L.G.35325))) (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi 80) (set! rdi r15) (set! r15 (rbp + 8)) (jump L.+.35329))) (define L.G.35325 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 rdx) (set! rdi rcx) (nop) (nop) (set! rsi (rbp + 0)) (set! rdx (rbp + 8)) (set! (rbp + 16) 72) (set! (rbp + 8) rdx) (set! (rbp + 0) rsi) (nop) (nop) (set! rcx rdi) (set! rdx r12) (set! rsi r13) (set! rdi r14) (nop) (jump L.H.35326))) (define L.H.35326 () (begin (set! (rbp + 24) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp + 64) rdx) (set! (rbp + 56) rcx) (set! (rbp + 48) r8) (set! (rbp + 40) r9) (set! (rbp + 32) (rbp + 0)) (nop) (set! (rbp + 0) (rbp + 16)) (set! rbp (+ rbp 72)) (return-point L.rp.35344 (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35344) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35345 (begin (set! rsi (rbp + -8)) (set! rdi r15) (set! r15 L.rp.35345) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35346 (begin (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.35346) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35347 (begin (set! rsi (rbp + -24)) (set! rdi r15) (set! r15 L.rp.35347) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35348 (begin (set! rsi (rbp + -32)) (set! rdi r15) (set! r15 L.rp.35348) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35349 (begin (set! rsi (rbp + -40)) (set! rdi r15) (set! r15 L.rp.35349) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (return-point L.rp.35350 (begin (set! rsi (rbp + -64)) (set! rdi r15) (set! r15 L.rp.35350) (jump L.+.35329))) (set! rbp (- rbp 72)) (set! r15 rax) (set! rsi (rbp + 0)) (set! rdi r15) (set! r15 (rbp + 24)) (jump L.+.35329))))
process-rp: (begin (set! (rbp + 8) 64) (set! (rbp + 0) rdi) (nop) (nop) (set! rcx r12) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35343) (jump L.G.35325))
process-rp: (jump L.G.35325)
updating tai with: (set! rbp (- rbp 16))
updating tai with: (set! r15 rax)
updating tai with: (set! rsi 80)
updating tai with: (set! rdi r15)
updating tai with: (set! r15 (rbp + 8))
updating tai with: (jump L.+.35329)
process-rp: (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35344) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -8)) (set! rdi r15) (set! r15 L.rp.35345) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.35346) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -24)) (set! rdi r15) (set! r15 L.rp.35347) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -32)) (set! rdi r15) (set! r15 L.rp.35348) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -40)) (set! rdi r15) (set! r15 L.rp.35349) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 72))
process-rp: (begin (set! rsi (rbp + -64)) (set! rdi r15) (set! r15 L.rp.35350) (jump L.+.35329))
process-rp: (jump L.+.35329)
updating tai with: (set! rbp (- rbp 72))
updating tai with: (set! r15 rax)
updating tai with: (set! rsi (rbp + 0))
updating tai with: (set! rdi r15)
updating tai with: (set! r15 (rbp + 24))
updating tai with: (jump L.+.35329)
create-return-point-blocktwo: (return-point L.rp.35350 (begin ((jump L.+.35329) (set! r15 (rbp + 24)) (set! rdi r15) (set! rsi (rbp + 0)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (jump L.+.35329) (set! r15 (rbp + 8)) (set! rdi r15) (set! rsi 80) (set! r15 rax) (set! rbp (- rbp 16)))))
parse-rp-tail (begin ((set! rbp (- rbp 16)) (set! r15 rax) (set! rsi 80) (set! rdi r15) (set! r15 (rbp + 8)) (jump L.+.35329) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rbp (- rbp 72)) (set! r15 rax) (set! rsi (rbp + 0)) (set! rdi r15) (set! r15 (rbp + 24)) (jump L.+.35329)))
parse-rp-tail (jump L.+.35329)
flatten (module (define L.main.35701 () (begin (nop) (set! (rbp + 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (nop) (jump L.F.35683))) (define L.H.35685 () (begin (set! (rbp + 24) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp + 64) rdx) (set! (rbp + 56) rcx) (set! (rbp + 48) r8) (set! (rbp + 40) r9) (set! (rbp + 32) (rbp + 0)) (nop) (set! (rbp + 0) (rbp + 16)) (set! rbp (+ rbp 72)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35703) (jump L.+.35688))) (define L.rp.35703 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -8)) (set! rdi r15) (set! r15 L.rp.35704) (jump L.+.35688))) (define L.rp.35704 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.35705) (jump L.+.35688))) (define L.rp.35705 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -24)) (set! rdi r15) (set! r15 L.rp.35706) (jump L.+.35688))) (define L.rp.35706 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -32)) (set! rdi r15) (set! r15 L.rp.35707) (jump L.+.35688))) (define L.rp.35707 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -40)) (set! rdi r15) (set! r15 L.rp.35708) (jump L.+.35688))) (define L.rp.35708 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rbp (+ rbp 72)) (set! rsi (rbp + -64)) (set! rdi r15) (set! r15 L.rp.35709) (jump L.+.35688))) (define L.rp.35709 () (begin (set! rbp (- rbp 72)) (set! r15 rax) (set! rsi (rbp + 0)) (set! rdi r15) (set! r15 (rbp + 24)) (jump L.+.35688))) (define L.G.35684 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 rdx) (set! rdi rcx) (nop) (nop) (set! rsi (rbp + 0)) (set! rdx (rbp + 8)) (set! (rbp + 16) 72) (set! (rbp + 8) rdx) (set! (rbp + 0) rsi) (nop) (nop) (set! rcx rdi) (set! rdx r12) (set! rsi r13) (set! rdi r14) (nop) (jump L.H.35685))) (define L.F.35683 () (begin (set! (rbp + 8) r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! r12 rcx) (nop) (nop) (set! rdi (rbp + 0)) (set! rbp (+ rbp 16)) (set! (rbp + 8) 64) (set! (rbp + 0) rdi) (nop) (nop) (set! rcx r12) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.35702) (jump L.G.35684))) (define L.rp.35702 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (set! rsi 80) (set! rdi r15) (set! r15 (rbp + 8)) (jump L.+.35688))) (define L.eq?.35686 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.35882) (jump L.nest_f.35883)))) (define L.nest_t.35882 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35883 () (begin (set! rax 6) (jump r15))) (define L.*.35687 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35880) (jump L.nest_f.35881)))) (define L.nest_t.35864 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35865 () (begin (set! rax 318) (jump r15))) (define L.nest_t.35866 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35867 () (begin (set! rax 318) (jump r15))) (define L.nest_t.35868 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35864) (jump L.nest_f.35865)))) (define L.nest_f.35869 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35866) (jump L.nest_f.35867)))) (define L.nest_t.35870 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35868) (jump L.nest_f.35869)))) (define L.nest_f.35871 () (begin (set! rax 62) (jump r15))) (define L.nest_t.35872 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35873 () (begin (set! rax 318) (jump r15))) (define L.nest_t.35874 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35875 () (begin (set! rax 318) (jump r15))) (define L.nest_t.35876 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35872) (jump L.nest_f.35873)))) (define L.nest_f.35877 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35874) (jump L.nest_f.35875)))) (define L.nest_t.35878 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35876) (jump L.nest_f.35877)))) (define L.nest_f.35879 () (begin (set! rax 62) (jump r15))) (define L.nest_t.35880 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35870) (jump L.nest_f.35871)))) (define L.nest_f.35881 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35878) (jump L.nest_f.35879)))) (define L.+.35688 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35862) (jump L.nest_f.35863)))) (define L.nest_t.35846 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35847 () (begin (set! rax 830) (jump r15))) (define L.nest_t.35848 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35849 () (begin (set! rax 830) (jump r15))) (define L.nest_t.35850 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35846) (jump L.nest_f.35847)))) (define L.nest_f.35851 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35848) (jump L.nest_f.35849)))) (define L.nest_t.35852 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35850) (jump L.nest_f.35851)))) (define L.nest_f.35853 () (begin (set! rax 574) (jump r15))) (define L.nest_t.35854 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35855 () (begin (set! rax 830) (jump r15))) (define L.nest_t.35856 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35857 () (begin (set! rax 830) (jump r15))) (define L.nest_t.35858 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35854) (jump L.nest_f.35855)))) (define L.nest_f.35859 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35856) (jump L.nest_f.35857)))) (define L.nest_t.35860 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35858) (jump L.nest_f.35859)))) (define L.nest_f.35861 () (begin (set! rax 574) (jump r15))) (define L.nest_t.35862 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35852) (jump L.nest_f.35853)))) (define L.nest_f.35863 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35860) (jump L.nest_f.35861)))) (define L.-.35689 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35844) (jump L.nest_f.35845)))) (define L.nest_t.35828 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35829 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.35830 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35831 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.35832 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35828) (jump L.nest_f.35829)))) (define L.nest_f.35833 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35830) (jump L.nest_f.35831)))) (define L.nest_t.35834 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35832) (jump L.nest_f.35833)))) (define L.nest_f.35835 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.35836 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35837 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.35838 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.35839 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.35840 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35836) (jump L.nest_f.35837)))) (define L.nest_f.35841 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35838) (jump L.nest_f.35839)))) (define L.nest_t.35842 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35840) (jump L.nest_f.35841)))) (define L.nest_f.35843 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.35844 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35834) (jump L.nest_f.35835)))) (define L.nest_f.35845 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35842) (jump L.nest_f.35843)))) (define L.<.35690 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35826) (jump L.nest_f.35827)))) (define L.nest_t.35802 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35803 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35804 () (if (< r14 r13) (jump L.nest_t.35802) (jump L.nest_f.35803))) (define L.nest_f.35805 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.35806 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35807 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35808 () (if (< r14 r13) (jump L.nest_t.35806) (jump L.nest_f.35807))) (define L.nest_f.35809 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.35810 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35804) (jump L.nest_f.35805)))) (define L.nest_f.35811 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35808) (jump L.nest_f.35809)))) (define L.nest_t.35812 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35810) (jump L.nest_f.35811)))) (define L.nest_f.35813 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.35814 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35815 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35816 () (if (< r14 r13) (jump L.nest_t.35814) (jump L.nest_f.35815))) (define L.nest_f.35817 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.35818 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35819 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35820 () (if (< r14 r13) (jump L.nest_t.35818) (jump L.nest_f.35819))) (define L.nest_f.35821 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.35822 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35816) (jump L.nest_f.35817)))) (define L.nest_f.35823 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35820) (jump L.nest_f.35821)))) (define L.nest_t.35824 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35822) (jump L.nest_f.35823)))) (define L.nest_f.35825 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.35826 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35812) (jump L.nest_f.35813)))) (define L.nest_f.35827 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35824) (jump L.nest_f.35825)))) (define L.<=.35691 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35800) (jump L.nest_f.35801)))) (define L.nest_t.35776 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35777 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35778 () (if (<= r14 r13) (jump L.nest_t.35776) (jump L.nest_f.35777))) (define L.nest_f.35779 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.35780 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35781 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35782 () (if (<= r14 r13) (jump L.nest_t.35780) (jump L.nest_f.35781))) (define L.nest_f.35783 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.35784 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35778) (jump L.nest_f.35779)))) (define L.nest_f.35785 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35782) (jump L.nest_f.35783)))) (define L.nest_t.35786 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35784) (jump L.nest_f.35785)))) (define L.nest_f.35787 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.35788 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35789 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35790 () (if (<= r14 r13) (jump L.nest_t.35788) (jump L.nest_f.35789))) (define L.nest_f.35791 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.35792 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35793 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35794 () (if (<= r14 r13) (jump L.nest_t.35792) (jump L.nest_f.35793))) (define L.nest_f.35795 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.35796 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35790) (jump L.nest_f.35791)))) (define L.nest_f.35797 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35794) (jump L.nest_f.35795)))) (define L.nest_t.35798 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35796) (jump L.nest_f.35797)))) (define L.nest_f.35799 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.35800 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35786) (jump L.nest_f.35787)))) (define L.nest_f.35801 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35798) (jump L.nest_f.35799)))) (define L.>.35692 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35774) (jump L.nest_f.35775)))) (define L.nest_t.35750 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35751 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35752 () (if (> r14 r13) (jump L.nest_t.35750) (jump L.nest_f.35751))) (define L.nest_f.35753 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.35754 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35755 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35756 () (if (> r14 r13) (jump L.nest_t.35754) (jump L.nest_f.35755))) (define L.nest_f.35757 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.35758 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35752) (jump L.nest_f.35753)))) (define L.nest_f.35759 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35756) (jump L.nest_f.35757)))) (define L.nest_t.35760 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35758) (jump L.nest_f.35759)))) (define L.nest_f.35761 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.35762 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35763 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35764 () (if (> r14 r13) (jump L.nest_t.35762) (jump L.nest_f.35763))) (define L.nest_f.35765 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.35766 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35767 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35768 () (if (> r14 r13) (jump L.nest_t.35766) (jump L.nest_f.35767))) (define L.nest_f.35769 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.35770 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35764) (jump L.nest_f.35765)))) (define L.nest_f.35771 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35768) (jump L.nest_f.35769)))) (define L.nest_t.35772 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35770) (jump L.nest_f.35771)))) (define L.nest_f.35773 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.35774 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35760) (jump L.nest_f.35761)))) (define L.nest_f.35775 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35772) (jump L.nest_f.35773)))) (define L.>=.35693 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35748) (jump L.nest_f.35749)))) (define L.nest_t.35724 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35725 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35726 () (if (>= r14 r13) (jump L.nest_t.35724) (jump L.nest_f.35725))) (define L.nest_f.35727 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.35728 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35729 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35730 () (if (>= r14 r13) (jump L.nest_t.35728) (jump L.nest_f.35729))) (define L.nest_f.35731 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.35732 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35726) (jump L.nest_f.35727)))) (define L.nest_f.35733 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35730) (jump L.nest_f.35731)))) (define L.nest_t.35734 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35732) (jump L.nest_f.35733)))) (define L.nest_f.35735 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.35736 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35737 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35738 () (if (>= r14 r13) (jump L.nest_t.35736) (jump L.nest_f.35737))) (define L.nest_f.35739 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.35740 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35741 () (begin (set! rax 6) (jump r15))) (define L.nest_t.35742 () (if (>= r14 r13) (jump L.nest_t.35740) (jump L.nest_f.35741))) (define L.nest_f.35743 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.35744 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35738) (jump L.nest_f.35739)))) (define L.nest_f.35745 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35742) (jump L.nest_f.35743)))) (define L.nest_t.35746 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.35744) (jump L.nest_f.35745)))) (define L.nest_f.35747 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.35748 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.35734) (jump L.nest_f.35735)))) (define L.nest_f.35749 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.35746) (jump L.nest_f.35747)))) (define L.fixnum?.35694 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.35722) (jump L.nest_f.35723)))) (define L.nest_t.35722 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35723 () (begin (set! rax 6) (jump r15))) (define L.boolean?.35695 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.35720) (jump L.nest_f.35721)))) (define L.nest_t.35720 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35721 () (begin (set! rax 6) (jump r15))) (define L.empty?.35696 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.35718) (jump L.nest_f.35719)))) (define L.nest_t.35718 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35719 () (begin (set! rax 6) (jump r15))) (define L.void?.35697 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.35716) (jump L.nest_f.35717)))) (define L.nest_t.35716 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35717 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.35698 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.35714) (jump L.nest_f.35715)))) (define L.nest_t.35714 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35715 () (begin (set! rax 6) (jump r15))) (define L.error?.35699 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.35712) (jump L.nest_f.35713)))) (define L.nest_t.35712 () (begin (set! rax 14) (jump r15))) (define L.nest_f.35713 () (begin (set! rax 6) (jump r15))) (define L.not.35700 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.35710) (jump L.nest_f.35711)))) (define L.nest_t.35710 () (begin (set! rax 6) (jump r15))) (define L.nest_f.35711 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858000991585800099781.s:27: error: invalid operand type

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.35902:
  mov QWORD [rbp + 0], 56
  mov r9, 48
  mov r8, 40
  mov rcx, 32
  mov rdx, 24
  mov rsi, 16
  mov rdi, 8
  jmp L.F.35884
L.H.35886:
  mov QWORD [rbp + 24], r15
  mov r15, rdi
  mov r14, rsi
  mov QWORD [rbp + 64], rdx
  mov QWORD [rbp + 56], rcx
  mov QWORD [rbp + 48], r8
  mov QWORD [rbp + 40], r9
  mov (rbp + 32), QWORD [rbp + 0]
  mov (rbp + 0), QWORD [rbp + 16]
  add rbp, 72
  mov rsi, r14
  mov rdi, r15
  mov r15, L.rp.35904
  jmp L.$2b$.35889
L.rp.35904:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -8]
  mov rdi, r15
  mov r15, L.rp.35905
  jmp L.$2b$.35889
L.rp.35905:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -16]
  mov rdi, r15
  mov r15, L.rp.35906
  jmp L.$2b$.35889
L.rp.35906:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -24]
  mov rdi, r15
  mov r15, L.rp.35907
  jmp L.$2b$.35889
L.rp.35907:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -32]
  mov rdi, r15
  mov r15, L.rp.35908
  jmp L.$2b$.35889
L.rp.35908:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -40]
  mov rdi, r15
  mov r15, L.rp.35909
  jmp L.$2b$.35889
L.rp.35909:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -64]
  mov rdi, r15
  mov r15, L.rp.35910
  jmp L.$2b$.35889
L.rp.35910:
  sub rbp, 72
  mov r15, rax
  mov rsi, QWORD [rbp + 0]
  mov rdi, r15
  mov r15, QWORD [rbp + 24]
  jmp L.$2b$.35889
L.G.35885:
  mov r14, rdi
  mov r13, rsi
  mov r12, rdx
  mov rdi, rcx
  mov rsi, QWORD [rbp + 0]
  mov rdx, QWORD [rbp + 8]
  mov QWORD [rbp + 16], 72
  mov QWORD [rbp + 8], rdx
  mov QWORD [rbp + 0], rsi
  mov rcx, rdi
  mov rdx, r12
  mov rsi, r13
  mov rdi, r14
  jmp L.H.35886
L.F.35884:
  mov QWORD [rbp + 8], r15
  mov r15, rdi
  mov r14, rsi
  mov r13, rdx
  mov r12, rcx
  mov rdi, QWORD [rbp + 0]
  add rbp, 16
  mov QWORD [rbp + 8], 64
  mov QWORD [rbp + 0], rdi
  mov rcx, r12
  mov rdx, r13
  mov rsi, r14
  mov rdi, r15
  mov r15, L.rp.35903
  jmp L.G.35885
L.rp.35903:
  sub rbp, 16
  mov r15, rax
  mov rsi, 80
  mov rdi, r15
  mov r15, QWORD [rbp + 8]
  jmp L.$2b$.35889
L.eq?.35887:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.36083
  jmp L.nest_f.36084
L.nest_t.36083:
  mov rax, 14
  jmp r15
L.nest_f.36084:
  mov rax, 6
  jmp r15
L.$2a$.35888:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36081
  jmp L.nest_f.36082
L.nest_t.36065:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36066:
  mov rax, 318
  jmp r15
L.nest_t.36067:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36068:
  mov rax, 318
  jmp r15
L.nest_t.36069:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36065
  jmp L.nest_f.36066
L.nest_f.36070:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36067
  jmp L.nest_f.36068
L.nest_t.36071:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36069
  jmp L.nest_f.36070
L.nest_f.36072:
  mov rax, 62
  jmp r15
L.nest_t.36073:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36074:
  mov rax, 318
  jmp r15
L.nest_t.36075:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36076:
  mov rax, 318
  jmp r15
L.nest_t.36077:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36073
  jmp L.nest_f.36074
L.nest_f.36078:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36075
  jmp L.nest_f.36076
L.nest_t.36079:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36077
  jmp L.nest_f.36078
L.nest_f.36080:
  mov rax, 62
  jmp r15
L.nest_t.36081:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36071
  jmp L.nest_f.36072
L.nest_f.36082:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36079
  jmp L.nest_f.36080
L.$2b$.35889:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36063
  jmp L.nest_f.36064
L.nest_t.36047:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36048:
  mov rax, 830
  jmp r15
L.nest_t.36049:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36050:
  mov rax, 830
  jmp r15
L.nest_t.36051:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36047
  jmp L.nest_f.36048
L.nest_f.36052:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36049
  jmp L.nest_f.36050
L.nest_t.36053:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36051
  jmp L.nest_f.36052
L.nest_f.36054:
  mov rax, 574
  jmp r15
L.nest_t.36055:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36056:
  mov rax, 830
  jmp r15
L.nest_t.36057:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36058:
  mov rax, 830
  jmp r15
L.nest_t.36059:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36055
  jmp L.nest_f.36056
L.nest_f.36060:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36057
  jmp L.nest_f.36058
L.nest_t.36061:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36059
  jmp L.nest_f.36060
L.nest_f.36062:
  mov rax, 574
  jmp r15
L.nest_t.36063:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36053
  jmp L.nest_f.36054
L.nest_f.36064:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36061
  jmp L.nest_f.36062
L.$2d$.35890:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36045
  jmp L.nest_f.36046
L.nest_t.36029:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36030:
  mov rax, 1342
  jmp r15
L.nest_t.36031:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36032:
  mov rax, 1342
  jmp r15
L.nest_t.36033:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36029
  jmp L.nest_f.36030
L.nest_f.36034:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36031
  jmp L.nest_f.36032
L.nest_t.36035:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36033
  jmp L.nest_f.36034
L.nest_f.36036:
  mov rax, 1086
  jmp r15
L.nest_t.36037:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36038:
  mov rax, 1342
  jmp r15
L.nest_t.36039:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36040:
  mov rax, 1342
  jmp r15
L.nest_t.36041:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36037
  jmp L.nest_f.36038
L.nest_f.36042:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36039
  jmp L.nest_f.36040
L.nest_t.36043:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36041
  jmp L.nest_f.36042
L.nest_f.36044:
  mov rax, 1086
  jmp r15
L.nest_t.36045:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36035
  jmp L.nest_f.36036
L.nest_f.36046:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36043
  jmp L.nest_f.36044
L.$3c$.35891:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36027
  jmp L.nest_f.36028
L.nest_t.36003:
  mov rax, 14
  jmp r15
L.nest_f.36004:
  mov rax, 6
  jmp r15
L.nest_t.36005:
  cmp r14, r13
  jl L.nest_t.36003
  jmp L.nest_f.36004
L.nest_f.36006:
  mov rax, 1854
  jmp r15
L.nest_t.36007:
  mov rax, 14
  jmp r15
L.nest_f.36008:
  mov rax, 6
  jmp r15
L.nest_t.36009:
  cmp r14, r13
  jl L.nest_t.36007
  jmp L.nest_f.36008
L.nest_f.36010:
  mov rax, 1854
  jmp r15
L.nest_t.36011:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36005
  jmp L.nest_f.36006
L.nest_f.36012:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36009
  jmp L.nest_f.36010
L.nest_t.36013:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36011
  jmp L.nest_f.36012
L.nest_f.36014:
  mov rax, 1598
  jmp r15
L.nest_t.36015:
  mov rax, 14
  jmp r15
L.nest_f.36016:
  mov rax, 6
  jmp r15
L.nest_t.36017:
  cmp r14, r13
  jl L.nest_t.36015
  jmp L.nest_f.36016
L.nest_f.36018:
  mov rax, 1854
  jmp r15
L.nest_t.36019:
  mov rax, 14
  jmp r15
L.nest_f.36020:
  mov rax, 6
  jmp r15
L.nest_t.36021:
  cmp r14, r13
  jl L.nest_t.36019
  jmp L.nest_f.36020
L.nest_f.36022:
  mov rax, 1854
  jmp r15
L.nest_t.36023:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36017
  jmp L.nest_f.36018
L.nest_f.36024:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36021
  jmp L.nest_f.36022
L.nest_t.36025:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36023
  jmp L.nest_f.36024
L.nest_f.36026:
  mov rax, 1598
  jmp r15
L.nest_t.36027:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36013
  jmp L.nest_f.36014
L.nest_f.36028:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36025
  jmp L.nest_f.36026
L.$3c$$3d$.35892:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36001
  jmp L.nest_f.36002
L.nest_t.35977:
  mov rax, 14
  jmp r15
L.nest_f.35978:
  mov rax, 6
  jmp r15
L.nest_t.35979:
  cmp r14, r13
  jle L.nest_t.35977
  jmp L.nest_f.35978
L.nest_f.35980:
  mov rax, 2366
  jmp r15
L.nest_t.35981:
  mov rax, 14
  jmp r15
L.nest_f.35982:
  mov rax, 6
  jmp r15
L.nest_t.35983:
  cmp r14, r13
  jle L.nest_t.35981
  jmp L.nest_f.35982
L.nest_f.35984:
  mov rax, 2366
  jmp r15
L.nest_t.35985:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35979
  jmp L.nest_f.35980
L.nest_f.35986:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35983
  jmp L.nest_f.35984
L.nest_t.35987:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35985
  jmp L.nest_f.35986
L.nest_f.35988:
  mov rax, 2110
  jmp r15
L.nest_t.35989:
  mov rax, 14
  jmp r15
L.nest_f.35990:
  mov rax, 6
  jmp r15
L.nest_t.35991:
  cmp r14, r13
  jle L.nest_t.35989
  jmp L.nest_f.35990
L.nest_f.35992:
  mov rax, 2366
  jmp r15
L.nest_t.35993:
  mov rax, 14
  jmp r15
L.nest_f.35994:
  mov rax, 6
  jmp r15
L.nest_t.35995:
  cmp r14, r13
  jle L.nest_t.35993
  jmp L.nest_f.35994
L.nest_f.35996:
  mov rax, 2366
  jmp r15
L.nest_t.35997:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35991
  jmp L.nest_f.35992
L.nest_f.35998:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35995
  jmp L.nest_f.35996
L.nest_t.35999:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35997
  jmp L.nest_f.35998
L.nest_f.36000:
  mov rax, 2110
  jmp r15
L.nest_t.36001:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35987
  jmp L.nest_f.35988
L.nest_f.36002:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35999
  jmp L.nest_f.36000
L.$3e$.35893:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35975
  jmp L.nest_f.35976
L.nest_t.35951:
  mov rax, 14
  jmp r15
L.nest_f.35952:
  mov rax, 6
  jmp r15
L.nest_t.35953:
  cmp r14, r13
  jg L.nest_t.35951
  jmp L.nest_f.35952
L.nest_f.35954:
  mov rax, 2878
  jmp r15
L.nest_t.35955:
  mov rax, 14
  jmp r15
L.nest_f.35956:
  mov rax, 6
  jmp r15
L.nest_t.35957:
  cmp r14, r13
  jg L.nest_t.35955
  jmp L.nest_f.35956
L.nest_f.35958:
  mov rax, 2878
  jmp r15
L.nest_t.35959:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35953
  jmp L.nest_f.35954
L.nest_f.35960:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35957
  jmp L.nest_f.35958
L.nest_t.35961:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35959
  jmp L.nest_f.35960
L.nest_f.35962:
  mov rax, 2622
  jmp r15
L.nest_t.35963:
  mov rax, 14
  jmp r15
L.nest_f.35964:
  mov rax, 6
  jmp r15
L.nest_t.35965:
  cmp r14, r13
  jg L.nest_t.35963
  jmp L.nest_f.35964
L.nest_f.35966:
  mov rax, 2878
  jmp r15
L.nest_t.35967:
  mov rax, 14
  jmp r15
L.nest_f.35968:
  mov rax, 6
  jmp r15
L.nest_t.35969:
  cmp r14, r13
  jg L.nest_t.35967
  jmp L.nest_f.35968
L.nest_f.35970:
  mov rax, 2878
  jmp r15
L.nest_t.35971:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35965
  jmp L.nest_f.35966
L.nest_f.35972:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35969
  jmp L.nest_f.35970
L.nest_t.35973:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35971
  jmp L.nest_f.35972
L.nest_f.35974:
  mov rax, 2622
  jmp r15
L.nest_t.35975:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35961
  jmp L.nest_f.35962
L.nest_f.35976:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35973
  jmp L.nest_f.35974
L.$3e$$3d$.35894:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35949
  jmp L.nest_f.35950
L.nest_t.35925:
  mov rax, 14
  jmp r15
L.nest_f.35926:
  mov rax, 6
  jmp r15
L.nest_t.35927:
  cmp r14, r13
  jge L.nest_t.35925
  jmp L.nest_f.35926
L.nest_f.35928:
  mov rax, 3390
  jmp r15
L.nest_t.35929:
  mov rax, 14
  jmp r15
L.nest_f.35930:
  mov rax, 6
  jmp r15
L.nest_t.35931:
  cmp r14, r13
  jge L.nest_t.35929
  jmp L.nest_f.35930
L.nest_f.35932:
  mov rax, 3390
  jmp r15
L.nest_t.35933:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35927
  jmp L.nest_f.35928
L.nest_f.35934:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35931
  jmp L.nest_f.35932
L.nest_t.35935:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35933
  jmp L.nest_f.35934
L.nest_f.35936:
  mov rax, 3134
  jmp r15
L.nest_t.35937:
  mov rax, 14
  jmp r15
L.nest_f.35938:
  mov rax, 6
  jmp r15
L.nest_t.35939:
  cmp r14, r13
  jge L.nest_t.35937
  jmp L.nest_f.35938
L.nest_f.35940:
  mov rax, 3390
  jmp r15
L.nest_t.35941:
  mov rax, 14
  jmp r15
L.nest_f.35942:
  mov rax, 6
  jmp r15
L.nest_t.35943:
  cmp r14, r13
  jge L.nest_t.35941
  jmp L.nest_f.35942
L.nest_f.35944:
  mov rax, 3390
  jmp r15
L.nest_t.35945:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35939
  jmp L.nest_f.35940
L.nest_f.35946:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35943
  jmp L.nest_f.35944
L.nest_t.35947:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.35945
  jmp L.nest_f.35946
L.nest_f.35948:
  mov rax, 3134
  jmp r15
L.nest_t.35949:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.35935
  jmp L.nest_f.35936
L.nest_f.35950:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.35947
  jmp L.nest_f.35948
L.fixnum?.35895:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.35923
  jmp L.nest_f.35924
L.nest_t.35923:
  mov rax, 14
  jmp r15
L.nest_f.35924:
  mov rax, 6
  jmp r15
L.boolean?.35896:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.35921
  jmp L.nest_f.35922
L.nest_t.35921:
  mov rax, 14
  jmp r15
L.nest_f.35922:
  mov rax, 6
  jmp r15
L.empty?.35897:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.35919
  jmp L.nest_f.35920
L.nest_t.35919:
  mov rax, 14
  jmp r15
L.nest_f.35920:
  mov rax, 6
  jmp r15
L.void?.35898:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.35917
  jmp L.nest_f.35918
L.nest_t.35917:
  mov rax, 14
  jmp r15
L.nest_f.35918:
  mov rax, 6
  jmp r15
L.ascii$2d$char?.35899:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.35915
  jmp L.nest_f.35916
L.nest_t.35915:
  mov rax, 14
  jmp r15
L.nest_f.35916:
  mov rax, 6
  jmp r15
L.error?.35900:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.35913
  jmp L.nest_f.35914
L.nest_t.35913:
  mov rax, 14
  jmp r15
L.nest_f.35914:
  mov rax, 6
  jmp r15
L.not.35901:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.35911
  jmp L.nest_f.35912
L.nest_t.35911:
  mov rax, 6
  jmp r15
L.nest_f.35912:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg/var/tmp/rkt15858000991585800099917.s:141: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:232: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:232: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:319: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:319: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:406: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:406: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:517: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:517: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:628: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:628: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:739: error: symbol `L.' redefined
/var/tmp/rkt15858000991585800099917.s:739: error: parser: instruction expected
/var/tmp/rkt15858000991585800099917.s:898: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.36103:
  mov QWORD [rbp + 0], 56
  mov r9, 48
  mov r8, 40
  mov rcx, 32
  mov rdx, 24
  mov rsi, 16
  mov rdi, 8
  jmp L.F.36085
L.H.36087:
  mov QWORD [rbp + 24], r15
  mov r15, rdi
  mov r14, rsi
  mov QWORD [rbp + 64], rdx
  mov QWORD [rbp + 56], rcx
  mov QWORD [rbp + 48], r8
  mov QWORD [rbp + 40], r9
  mov r10, QWORD [rbp + 0]
  mov QWORD [rbp + 32], r10
  mov r10, QWORD [rbp + 16]
  mov QWORD [rbp + 0], r10
  add rbp, 72
  mov rsi, r14
  mov rdi, r15
  mov r15, L.rp.36105
  jmp L.+.36090
L.rp.36105:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -8]
  mov rdi, r15
  mov r15, L.rp.36106
  jmp L.+.36090
L.rp.36106:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -16]
  mov rdi, r15
  mov r15, L.rp.36107
  jmp L.+.36090
L.rp.36107:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -24]
  mov rdi, r15
  mov r15, L.rp.36108
  jmp L.+.36090
L.rp.36108:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -32]
  mov rdi, r15
  mov r15, L.rp.36109
  jmp L.+.36090
L.rp.36109:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -40]
  mov rdi, r15
  mov r15, L.rp.36110
  jmp L.+.36090
L.rp.36110:
  sub rbp, 72
  mov r15, rax
  add rbp, 72
  mov rsi, QWORD [rbp + -64]
  mov rdi, r15
  mov r15, L.rp.36111
  jmp L.+.36090
L.rp.36111:
  sub rbp, 72
  mov r15, rax
  mov rsi, QWORD [rbp + 0]
  mov rdi, r15
  mov r15, QWORD [rbp + 24]
  jmp L.+.36090
L.G.36086:
  mov r14, rdi
  mov r13, rsi
  mov r12, rdx
  mov rdi, rcx
  mov rsi, QWORD [rbp + 0]
  mov rdx, QWORD [rbp + 8]
  mov QWORD [rbp + 16], 72
  mov QWORD [rbp + 8], rdx
  mov QWORD [rbp + 0], rsi
  mov rcx, rdi
  mov rdx, r12
  mov rsi, r13
  mov rdi, r14
  jmp L.H.36087
L.F.36085:
  mov QWORD [rbp + 8], r15
  mov r15, rdi
  mov r14, rsi
  mov r13, rdx
  mov r12, rcx
  mov rdi, QWORD [rbp + 0]
  add rbp, 16
  mov QWORD [rbp + 8], 64
  mov QWORD [rbp + 0], rdi
  mov rcx, r12
  mov rdx, r13
  mov rsi, r14
  mov rdi, r15
  mov r15, L.rp.36104
  jmp L.G.36086
L.rp.36104:
  sub rbp, 16
  mov r15, rax
  mov rsi, 80
  mov rdi, r15
  mov r15, QWORD [rbp + 8]
  jmp L.+.36090
L.eq?.36088:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.36284
  jmp L.nest_f.36285
L.nest_t.36284:
  mov rax, 14
  jmp r15
L.nest_f.36285:
  mov rax, 6
  jmp r15
L.*.36089:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36282
  jmp L.nest_f.36283
L.nest_t.36266:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36267:
  mov rax, 318
  jmp r15
L.nest_t.36268:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36269:
  mov rax, 318
  jmp r15
L.nest_t.36270:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36266
  jmp L.nest_f.36267
L.nest_f.36271:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36268
  jmp L.nest_f.36269
L.nest_t.36272:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36270
  jmp L.nest_f.36271
L.nest_f.36273:
  mov rax, 62
  jmp r15
L.nest_t.36274:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36275:
  mov rax, 318
  jmp r15
L.nest_t.36276:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36277:
  mov rax, 318
  jmp r15
L.nest_t.36278:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36274
  jmp L.nest_f.36275
L.nest_f.36279:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36276
  jmp L.nest_f.36277
L.nest_t.36280:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36278
  jmp L.nest_f.36279
L.nest_f.36281:
  mov rax, 62
  jmp r15
L.nest_t.36282:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36272
  jmp L.nest_f.36273
L.nest_f.36283:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36280
  jmp L.nest_f.36281
L.+.36090:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36264
  jmp L.nest_f.36265
L.nest_t.36248:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36249:
  mov rax, 830
  jmp r15
L.nest_t.36250:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36251:
  mov rax, 830
  jmp r15
L.nest_t.36252:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36248
  jmp L.nest_f.36249
L.nest_f.36253:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36250
  jmp L.nest_f.36251
L.nest_t.36254:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36252
  jmp L.nest_f.36253
L.nest_f.36255:
  mov rax, 574
  jmp r15
L.nest_t.36256:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36257:
  mov rax, 830
  jmp r15
L.nest_t.36258:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36259:
  mov rax, 830
  jmp r15
L.nest_t.36260:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36256
  jmp L.nest_f.36257
L.nest_f.36261:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36258
  jmp L.nest_f.36259
L.nest_t.36262:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36260
  jmp L.nest_f.36261
L.nest_f.36263:
  mov rax, 574
  jmp r15
L.nest_t.36264:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36254
  jmp L.nest_f.36255
L.nest_f.36265:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36262
  jmp L.nest_f.36263
L.-.36091:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36246
  jmp L.nest_f.36247
L.nest_t.36230:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36231:
  mov rax, 1342
  jmp r15
L.nest_t.36232:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36233:
  mov rax, 1342
  jmp r15
L.nest_t.36234:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36230
  jmp L.nest_f.36231
L.nest_f.36235:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36232
  jmp L.nest_f.36233
L.nest_t.36236:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36234
  jmp L.nest_f.36235
L.nest_f.36237:
  mov rax, 1086
  jmp r15
L.nest_t.36238:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36239:
  mov rax, 1342
  jmp r15
L.nest_t.36240:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.36241:
  mov rax, 1342
  jmp r15
L.nest_t.36242:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36238
  jmp L.nest_f.36239
L.nest_f.36243:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36240
  jmp L.nest_f.36241
L.nest_t.36244:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36242
  jmp L.nest_f.36243
L.nest_f.36245:
  mov rax, 1086
  jmp r15
L.nest_t.36246:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36236
  jmp L.nest_f.36237
L.nest_f.36247:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36244
  jmp L.nest_f.36245
L.<.36092:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36228
  jmp L.nest_f.36229
L.nest_t.36204:
  mov rax, 14
  jmp r15
L.nest_f.36205:
  mov rax, 6
  jmp r15
L.nest_t.36206:
  cmp r14, r13
  jl L.nest_t.36204
  jmp L.nest_f.36205
L.nest_f.36207:
  mov rax, 1854
  jmp r15
L.nest_t.36208:
  mov rax, 14
  jmp r15
L.nest_f.36209:
  mov rax, 6
  jmp r15
L.nest_t.36210:
  cmp r14, r13
  jl L.nest_t.36208
  jmp L.nest_f.36209
L.nest_f.36211:
  mov rax, 1854
  jmp r15
L.nest_t.36212:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36206
  jmp L.nest_f.36207
L.nest_f.36213:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36210
  jmp L.nest_f.36211
L.nest_t.36214:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36212
  jmp L.nest_f.36213
L.nest_f.36215:
  mov rax, 1598
  jmp r15
L.nest_t.36216:
  mov rax, 14
  jmp r15
L.nest_f.36217:
  mov rax, 6
  jmp r15
L.nest_t.36218:
  cmp r14, r13
  jl L.nest_t.36216
  jmp L.nest_f.36217
L.nest_f.36219:
  mov rax, 1854
  jmp r15
L.nest_t.36220:
  mov rax, 14
  jmp r15
L.nest_f.36221:
  mov rax, 6
  jmp r15
L.nest_t.36222:
  cmp r14, r13
  jl L.nest_t.36220
  jmp L.nest_f.36221
L.nest_f.36223:
  mov rax, 1854
  jmp r15
L.nest_t.36224:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36218
  jmp L.nest_f.36219
L.nest_f.36225:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36222
  jmp L.nest_f.36223
L.nest_t.36226:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36224
  jmp L.nest_f.36225
L.nest_f.36227:
  mov rax, 1598
  jmp r15
L.nest_t.36228:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36214
  jmp L.nest_f.36215
L.nest_f.36229:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36226
  jmp L.nest_f.36227
L.<=.36093:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36202
  jmp L.nest_f.36203
L.nest_t.36178:
  mov rax, 14
  jmp r15
L.nest_f.36179:
  mov rax, 6
  jmp r15
L.nest_t.36180:
  cmp r14, r13
  jle L.nest_t.36178
  jmp L.nest_f.36179
L.nest_f.36181:
  mov rax, 2366
  jmp r15
L.nest_t.36182:
  mov rax, 14
  jmp r15
L.nest_f.36183:
  mov rax, 6
  jmp r15
L.nest_t.36184:
  cmp r14, r13
  jle L.nest_t.36182
  jmp L.nest_f.36183
L.nest_f.36185:
  mov rax, 2366
  jmp r15
L.nest_t.36186:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36180
  jmp L.nest_f.36181
L.nest_f.36187:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36184
  jmp L.nest_f.36185
L.nest_t.36188:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36186
  jmp L.nest_f.36187
L.nest_f.36189:
  mov rax, 2110
  jmp r15
L.nest_t.36190:
  mov rax, 14
  jmp r15
L.nest_f.36191:
  mov rax, 6
  jmp r15
L.nest_t.36192:
  cmp r14, r13
  jle L.nest_t.36190
  jmp L.nest_f.36191
L.nest_f.36193:
  mov rax, 2366
  jmp r15
L.nest_t.36194:
  mov rax, 14
  jmp r15
L.nest_f.36195:
  mov rax, 6
  jmp r15
L.nest_t.36196:
  cmp r14, r13
  jle L.nest_t.36194
  jmp L.nest_f.36195
L.nest_f.36197:
  mov rax, 2366
  jmp r15
L.nest_t.36198:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36192
  jmp L.nest_f.36193
L.nest_f.36199:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36196
  jmp L.nest_f.36197
L.nest_t.36200:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36198
  jmp L.nest_f.36199
L.nest_f.36201:
  mov rax, 2110
  jmp r15
L.nest_t.36202:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36188
  jmp L.nest_f.36189
L.nest_f.36203:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36200
  jmp L.nest_f.36201
L.>.36094:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36176
  jmp L.nest_f.36177
L.nest_t.36152:
  mov rax, 14
  jmp r15
L.nest_f.36153:
  mov rax, 6
  jmp r15
L.nest_t.36154:
  cmp r14, r13
  jg L.nest_t.36152
  jmp L.nest_f.36153
L.nest_f.36155:
  mov rax, 2878
  jmp r15
L.nest_t.36156:
  mov rax, 14
  jmp r15
L.nest_f.36157:
  mov rax, 6
  jmp r15
L.nest_t.36158:
  cmp r14, r13
  jg L.nest_t.36156
  jmp L.nest_f.36157
L.nest_f.36159:
  mov rax, 2878
  jmp r15
L.nest_t.36160:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36154
  jmp L.nest_f.36155
L.nest_f.36161:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36158
  jmp L.nest_f.36159
L.nest_t.36162:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36160
  jmp L.nest_f.36161
L.nest_f.36163:
  mov rax, 2622
  jmp r15
L.nest_t.36164:
  mov rax, 14
  jmp r15
L.nest_f.36165:
  mov rax, 6
  jmp r15
L.nest_t.36166:
  cmp r14, r13
  jg L.nest_t.36164
  jmp L.nest_f.36165
L.nest_f.36167:
  mov rax, 2878
  jmp r15
L.nest_t.36168:
  mov rax, 14
  jmp r15
L.nest_f.36169:
  mov rax, 6
  jmp r15
L.nest_t.36170:
  cmp r14, r13
  jg L.nest_t.36168
  jmp L.nest_f.36169
L.nest_f.36171:
  mov rax, 2878
  jmp r15
L.nest_t.36172:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36166
  jmp L.nest_f.36167
L.nest_f.36173:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36170
  jmp L.nest_f.36171
L.nest_t.36174:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36172
  jmp L.nest_f.36173
L.nest_f.36175:
  mov rax, 2622
  jmp r15
L.nest_t.36176:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36162
  jmp L.nest_f.36163
L.nest_f.36177:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36174
  jmp L.nest_f.36175
L.>=.36095:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36150
  jmp L.nest_f.36151
L.nest_t.36126:
  mov rax, 14
  jmp r15
L.nest_f.36127:
  mov rax, 6
  jmp r15
L.nest_t.36128:
  cmp r14, r13
  jge L.nest_t.36126
  jmp L.nest_f.36127
L.nest_f.36129:
  mov rax, 3390
  jmp r15
L.nest_t.36130:
  mov rax, 14
  jmp r15
L.nest_f.36131:
  mov rax, 6
  jmp r15
L.nest_t.36132:
  cmp r14, r13
  jge L.nest_t.36130
  jmp L.nest_f.36131
L.nest_f.36133:
  mov rax, 3390
  jmp r15
L.nest_t.36134:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36128
  jmp L.nest_f.36129
L.nest_f.36135:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36132
  jmp L.nest_f.36133
L.nest_t.36136:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36134
  jmp L.nest_f.36135
L.nest_f.36137:
  mov rax, 3134
  jmp r15
L.nest_t.36138:
  mov rax, 14
  jmp r15
L.nest_f.36139:
  mov rax, 6
  jmp r15
L.nest_t.36140:
  cmp r14, r13
  jge L.nest_t.36138
  jmp L.nest_f.36139
L.nest_f.36141:
  mov rax, 3390
  jmp r15
L.nest_t.36142:
  mov rax, 14
  jmp r15
L.nest_f.36143:
  mov rax, 6
  jmp r15
L.nest_t.36144:
  cmp r14, r13
  jge L.nest_t.36142
  jmp L.nest_f.36143
L.nest_f.36145:
  mov rax, 3390
  jmp r15
L.nest_t.36146:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36140
  jmp L.nest_f.36141
L.nest_f.36147:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36144
  jmp L.nest_f.36145
L.nest_t.36148:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.36146
  jmp L.nest_f.36147
L.nest_f.36149:
  mov rax, 3134
  jmp r15
L.nest_t.36150:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.36136
  jmp L.nest_f.36137
L.nest_f.36151:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.36148
  jmp L.nest_f.36149
L.fixnum?.36096:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.36124
  jmp L.nest_f.36125
L.nest_t.36124:
  mov rax, 14
  jmp r15
L.nest_f.36125:
  mov rax, 6
  jmp r15
L.boolean?.36097:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.36122
  jmp L.nest_f.36123
L.nest_t.36122:
  mov rax, 14
  jmp r15
L.nest_f.36123:
  mov rax, 6
  jmp r15
L.empty?.36098:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.36120
  jmp L.nest_f.36121
L.nest_t.36120:
  mov rax, 14
  jmp r15
L.nest_f.36121:
  mov rax, 6
  jmp r15
L.void?.36099:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.36118
  jmp L.nest_f.36119
L.nest_t.36118:
  mov rax, 14
  jmp r15
L.nest_f.36119:
  mov rax, 6
  jmp r15
L.ascii-char?.36100:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.36116
  jmp L.nest_f.36117
L.nest_t.36116:
  mov rax, 14
  jmp r15
L.nest_f.36117:
  mov rax, 6
  jmp r15
L.error?.36101:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.36114
  jmp L.nest_f.36115
L.nest_t.36114:
  mov rax, 14
  jmp r15
L.nest_f.36115:
  mov rax, 6
  jmp r15
L.not.36102:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.36112
  jmp L.nest_f.36113
L.nest_t.36112:
  mov rax, 6
  jmp r15
L.nest_f.36113:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:238:2
actual:
  '(55
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for '+ #<continuation-mark-set> + (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    55
    55
    55
    55
    1043
    55
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    55
    55
    55
    55
    "Failed on pass replace-locations\n  #(struct:exn:misc:match match: no matching clause for '(set! fv0 56) #<continuation-mark-set> (set! fv0 56) (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a6-anton.rkt 577 4 23817 837)))"
    55
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.35352 #<continuation-mark-set> L.tmp.35352 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    55
    "Failed on pass patch-instructions\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    55
    55)
expected:   55
--------------------

expose-basic-blocks: (module (define L.main.39481 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (return-point L.rp.39482 (begin (set! rsi 16) (set! rdi 8) (set! r15 L.rp.39482) (jump L.eq?.39466))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.big.39464)) (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.sum.39465))))) (define L.not.39480 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.39479 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.39478 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.39477 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.39476 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.39475 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.39474 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.39473 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.39472 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.39471 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.39470 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.39469 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.39468 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.39467 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.39466 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.big.39464 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 32)) (return-point L.rp.39483 (begin (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39483) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39484 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39484) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39485 (begin (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39485) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39486 (begin (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39486) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (return-point L.rp.39487 (begin (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39487) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39488 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39488) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39489 (begin (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39489) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39490 (begin (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39490) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39491 (begin (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.39491) (jump L.>.39472))) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (begin (set! rbp (+ rbp 32)) (return-point L.rp.39492 (begin (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39492) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39493 (begin (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39493) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39494 (begin (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39494) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39467)) (begin (set! rbp (+ rbp 32)) (return-point L.rp.39495 (begin (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39495) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39496 (begin (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39496) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39497 (begin (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39497) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39467))))) (define L.sum.39465 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! rsi r13) (set! rdi r14) (nop) (jump L.+.39468))))
process-rp: (begin (set! rsi 16) (set! rdi 8) (set! r15 L.rp.39482) (jump L.eq?.39466))
process-rp: (jump L.eq?.39466)
updating tai with: (set! rbp (- rbp 8))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.big.39464)) (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.sum.39465)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 255))
updating tai with: (nop)
updating tai with: (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 255))
updating tai with: (nop)
updating tai with: (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 255))
updating tai with: (nop)
updating tai with: (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 255))
updating tai with: (nop)
updating tai with: (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 247))
updating tai with: (nop)
updating tai with: (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r14 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! r12 (bitwise-and r14 7))
updating tai with: (nop)
updating tai with: (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15)))
updating tai with: (set! (rbp + 0) r15)
updating tai with: (set! (rbp + 8) rdi)
updating tai with: (set! (rbp + 16) rsi)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39483) (jump L.*.39467))
process-rp: (jump L.*.39467)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39484) (jump L.-.39469))
process-rp: (jump L.-.39469)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39485) (jump L.+.39468))
process-rp: (jump L.+.39468)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39486) (jump L.*.39467))
process-rp: (jump L.*.39467)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! (rbp + 24) rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39487) (jump L.*.39467))
process-rp: (jump L.*.39467)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39488) (jump L.-.39469))
process-rp: (jump L.-.39469)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39489) (jump L.+.39468))
process-rp: (jump L.+.39468)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39490) (jump L.*.39467))
process-rp: (jump L.*.39467)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 32))
process-rp: (begin (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.39491) (jump L.>.39472))
process-rp: (jump L.>.39472)
updating tai with: (set! rbp (- rbp 32))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rbp (+ rbp 32)) (return-point L.rp.39492 (begin (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39492) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39493 (begin (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39493) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39494 (begin (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39494) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39467)) (begin (set! rbp (+ rbp 32)) (return-point L.rp.39495 (begin (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39495) (jump L.*.39467))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39496 (begin (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39496) (jump L.-.39469))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (return-point L.rp.39497 (begin (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39497) (jump L.+.39468))) (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39467)))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! r13 rsi)
updating tai with: (set! rsi r13)
updating tai with: (set! rdi r14)
updating tai with: (nop)
updating tai with: (jump L.+.39468)
create-return-point-blocktwo: (return-point L.rp.39491 (begin ((jump L.+.39468) (nop) (set! rdi r14) (set! rsi r13) (set! r13 rsi) (set! r14 rdi) (nop) (if (neq? r15 6) (jump L.tmp.39834) (jump L.tmp.39836)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! (rbp + 24) rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! r15 rax) (set! rbp (- rbp 32)) (set! rbp (+ rbp 32)) (set! (rbp + 16) rsi) (set! (rbp + 8) rdi) (set! (rbp + 0) r15) (if (eq? r14 r13) (jump L.tmp.39830) (jump L.tmp.39832)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39794) (jump L.tmp.39812)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39758) (jump L.tmp.39776)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39722) (jump L.tmp.39740)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39674) (jump L.tmp.39698)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39626) (jump L.tmp.39650)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39578) (jump L.tmp.39602)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r12 0) (jump L.tmp.39530) (jump L.tmp.39554)) (nop) (set! r12 (bitwise-and r14 7)) (set! r13 rsi) (set! r14 rdi) (nop) (if (eq? r14 0) (jump L.tmp.39526) (jump L.tmp.39528)) (nop) (set! r14 (bitwise-and r14 7)) (set! r14 rdi) (nop) (if (eq? r14 6) (jump L.tmp.39522) (jump L.tmp.39524)) (nop) (set! r14 (bitwise-and r14 247)) (set! r14 rdi) (nop) (if (eq? r14 22) (jump L.tmp.39518) (jump L.tmp.39520)) (nop) (set! r14 (bitwise-and r14 255)) (set! r14 rdi) (nop) (if (eq? r14 30) (jump L.tmp.39514) (jump L.tmp.39516)) (nop) (set! r14 (bitwise-and r14 255)) (set! r14 rdi) (nop) (if (eq? r14 46) (jump L.tmp.39510) (jump L.tmp.39512)) (nop) (set! r14 (bitwise-and r14 255)) (set! r14 rdi) (nop) (if (eq? r14 62) (jump L.tmp.39506) (jump L.tmp.39508)) (nop) (set! r14 (bitwise-and r14 255)) (set! r14 rdi) (nop) (if (neq? r14 6) (jump L.tmp.39502) (jump L.tmp.39504)) (set! r14 rdi) (nop) (if (neq? r15 6) (jump L.tmp.39498) (jump L.tmp.39500)) (set! r15 rax) (set! rbp (- rbp 8)))))
parse-rp-tail (begin ((set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.39498) (jump L.tmp.39500)) (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.tmp.39502) (jump L.tmp.39504)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.tmp.39506) (jump L.tmp.39508)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.tmp.39510) (jump L.tmp.39512)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.tmp.39514) (jump L.tmp.39516)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.tmp.39518) (jump L.tmp.39520)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.tmp.39522) (jump L.tmp.39524)) (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.tmp.39526) (jump L.tmp.39528)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39530) (jump L.tmp.39554)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39578) (jump L.tmp.39602)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39626) (jump L.tmp.39650)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39674) (jump L.tmp.39698)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39722) (jump L.tmp.39740)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39758) (jump L.tmp.39776)) (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.tmp.39794) (jump L.tmp.39812)) (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.tmp.39830) (jump L.tmp.39832)) (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.39834) (jump L.tmp.39836)) (nop) (set! r14 rdi) (set! r13 rsi) (set! rsi r13) (set! rdi r14) (nop) (jump L.+.39468)))
parse-rp-tail (jump L.+.39468)
flatten (module (define L.main.39855 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (set! rsi 16) (set! rdi 8) (set! r15 L.rp.39856) (jump L.eq?.39840))) (define L.sum.39839 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! rsi r13) (set! rdi r14) (nop) (jump L.+.39842))) (define L.big.39838 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! rbp (+ rbp 32)) (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39857) (jump L.*.39841))) (define L.rp.39857 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39858) (jump L.-.39843))) (define L.rp.39858 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39859) (jump L.+.39842))) (define L.rp.39859 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39860) (jump L.*.39841))) (define L.rp.39860 () (begin (set! rbp (- rbp 32)) (set! (rbp + 24) rax) (set! rbp (+ rbp 32)) (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39861) (jump L.*.39841))) (define L.rp.39861 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi 0) (set! rdi r15) (set! r15 L.rp.39862) (jump L.-.39843))) (define L.rp.39862 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi 0) (set! r15 L.rp.39863) (jump L.+.39842))) (define L.rp.39863 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi -8) (set! r15 L.rp.39864) (jump L.*.39841))) (define L.rp.39864 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.39865) (jump L.>.39846))) (define L.rp.39865 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.40048) (jump L.nest_f.40049)))) (define L.rp.39866 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39867) (jump L.-.39843))) (define L.rp.39867 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39868) (jump L.+.39842))) (define L.rp.39868 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39841))) (define L.rp.39869 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi 80) (set! rdi r15) (set! r15 L.rp.39870) (jump L.-.39843))) (define L.rp.39870 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rbp (+ rbp 32)) (set! rsi r15) (set! rdi 80) (set! r15 L.rp.39871) (jump L.+.39842))) (define L.rp.39871 () (begin (set! rbp (- rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi -8) (set! r15 (rbp + 0)) (jump L.*.39841))) (define L.nest_t.40048 () (begin (set! rbp (+ rbp 32)) (set! rsi (rbp + -24)) (set! rdi -8) (set! r15 L.rp.39866) (jump L.*.39841))) (define L.nest_f.40049 () (begin (set! rbp (+ rbp 32)) (set! rsi (rbp + -16)) (set! rdi -8) (set! r15 L.rp.39869) (jump L.*.39841))) (define L.eq?.39840 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.40046) (jump L.nest_f.40047)))) (define L.nest_t.40046 () (begin (set! rax 14) (jump r15))) (define L.nest_f.40047 () (begin (set! rax 6) (jump r15))) (define L.*.39841 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40044) (jump L.nest_f.40045)))) (define L.nest_t.40028 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40029 () (begin (set! rax 318) (jump r15))) (define L.nest_t.40030 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40031 () (begin (set! rax 318) (jump r15))) (define L.nest_t.40032 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40028) (jump L.nest_f.40029)))) (define L.nest_f.40033 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40030) (jump L.nest_f.40031)))) (define L.nest_t.40034 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40032) (jump L.nest_f.40033)))) (define L.nest_f.40035 () (begin (set! rax 62) (jump r15))) (define L.nest_t.40036 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40037 () (begin (set! rax 318) (jump r15))) (define L.nest_t.40038 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40039 () (begin (set! rax 318) (jump r15))) (define L.nest_t.40040 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40036) (jump L.nest_f.40037)))) (define L.nest_f.40041 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40038) (jump L.nest_f.40039)))) (define L.nest_t.40042 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40040) (jump L.nest_f.40041)))) (define L.nest_f.40043 () (begin (set! rax 62) (jump r15))) (define L.nest_t.40044 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40034) (jump L.nest_f.40035)))) (define L.nest_f.40045 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40042) (jump L.nest_f.40043)))) (define L.+.39842 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40026) (jump L.nest_f.40027)))) (define L.nest_t.40010 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40011 () (begin (set! rax 830) (jump r15))) (define L.nest_t.40012 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40013 () (begin (set! rax 830) (jump r15))) (define L.nest_t.40014 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40010) (jump L.nest_f.40011)))) (define L.nest_f.40015 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40012) (jump L.nest_f.40013)))) (define L.nest_t.40016 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40014) (jump L.nest_f.40015)))) (define L.nest_f.40017 () (begin (set! rax 574) (jump r15))) (define L.nest_t.40018 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40019 () (begin (set! rax 830) (jump r15))) (define L.nest_t.40020 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40021 () (begin (set! rax 830) (jump r15))) (define L.nest_t.40022 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40018) (jump L.nest_f.40019)))) (define L.nest_f.40023 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40020) (jump L.nest_f.40021)))) (define L.nest_t.40024 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40022) (jump L.nest_f.40023)))) (define L.nest_f.40025 () (begin (set! rax 574) (jump r15))) (define L.nest_t.40026 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40016) (jump L.nest_f.40017)))) (define L.nest_f.40027 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40024) (jump L.nest_f.40025)))) (define L.-.39843 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40008) (jump L.nest_f.40009)))) (define L.nest_t.39992 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.39993 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.39994 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.39995 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.39996 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39992) (jump L.nest_f.39993)))) (define L.nest_f.39997 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39994) (jump L.nest_f.39995)))) (define L.nest_t.39998 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39996) (jump L.nest_f.39997)))) (define L.nest_f.39999 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.40000 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40001 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.40002 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.40003 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.40004 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.40000) (jump L.nest_f.40001)))) (define L.nest_f.40005 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40002) (jump L.nest_f.40003)))) (define L.nest_t.40006 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.40004) (jump L.nest_f.40005)))) (define L.nest_f.40007 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.40008 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39998) (jump L.nest_f.39999)))) (define L.nest_f.40009 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.40006) (jump L.nest_f.40007)))) (define L.<.39844 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39990) (jump L.nest_f.39991)))) (define L.nest_t.39966 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39967 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39968 () (if (< r14 r13) (jump L.nest_t.39966) (jump L.nest_f.39967))) (define L.nest_f.39969 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.39970 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39971 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39972 () (if (< r14 r13) (jump L.nest_t.39970) (jump L.nest_f.39971))) (define L.nest_f.39973 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.39974 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39968) (jump L.nest_f.39969)))) (define L.nest_f.39975 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39972) (jump L.nest_f.39973)))) (define L.nest_t.39976 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39974) (jump L.nest_f.39975)))) (define L.nest_f.39977 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.39978 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39979 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39980 () (if (< r14 r13) (jump L.nest_t.39978) (jump L.nest_f.39979))) (define L.nest_f.39981 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.39982 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39983 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39984 () (if (< r14 r13) (jump L.nest_t.39982) (jump L.nest_f.39983))) (define L.nest_f.39985 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.39986 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39980) (jump L.nest_f.39981)))) (define L.nest_f.39987 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39984) (jump L.nest_f.39985)))) (define L.nest_t.39988 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39986) (jump L.nest_f.39987)))) (define L.nest_f.39989 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.39990 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39976) (jump L.nest_f.39977)))) (define L.nest_f.39991 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39988) (jump L.nest_f.39989)))) (define L.<=.39845 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39964) (jump L.nest_f.39965)))) (define L.nest_t.39940 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39941 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39942 () (if (<= r14 r13) (jump L.nest_t.39940) (jump L.nest_f.39941))) (define L.nest_f.39943 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.39944 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39945 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39946 () (if (<= r14 r13) (jump L.nest_t.39944) (jump L.nest_f.39945))) (define L.nest_f.39947 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.39948 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39942) (jump L.nest_f.39943)))) (define L.nest_f.39949 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39946) (jump L.nest_f.39947)))) (define L.nest_t.39950 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39948) (jump L.nest_f.39949)))) (define L.nest_f.39951 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.39952 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39953 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39954 () (if (<= r14 r13) (jump L.nest_t.39952) (jump L.nest_f.39953))) (define L.nest_f.39955 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.39956 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39957 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39958 () (if (<= r14 r13) (jump L.nest_t.39956) (jump L.nest_f.39957))) (define L.nest_f.39959 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.39960 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39954) (jump L.nest_f.39955)))) (define L.nest_f.39961 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39958) (jump L.nest_f.39959)))) (define L.nest_t.39962 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39960) (jump L.nest_f.39961)))) (define L.nest_f.39963 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.39964 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39950) (jump L.nest_f.39951)))) (define L.nest_f.39965 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39962) (jump L.nest_f.39963)))) (define L.>.39846 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39938) (jump L.nest_f.39939)))) (define L.nest_t.39914 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39915 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39916 () (if (> r14 r13) (jump L.nest_t.39914) (jump L.nest_f.39915))) (define L.nest_f.39917 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.39918 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39919 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39920 () (if (> r14 r13) (jump L.nest_t.39918) (jump L.nest_f.39919))) (define L.nest_f.39921 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.39922 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39916) (jump L.nest_f.39917)))) (define L.nest_f.39923 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39920) (jump L.nest_f.39921)))) (define L.nest_t.39924 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39922) (jump L.nest_f.39923)))) (define L.nest_f.39925 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.39926 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39927 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39928 () (if (> r14 r13) (jump L.nest_t.39926) (jump L.nest_f.39927))) (define L.nest_f.39929 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.39930 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39931 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39932 () (if (> r14 r13) (jump L.nest_t.39930) (jump L.nest_f.39931))) (define L.nest_f.39933 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.39934 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39928) (jump L.nest_f.39929)))) (define L.nest_f.39935 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39932) (jump L.nest_f.39933)))) (define L.nest_t.39936 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39934) (jump L.nest_f.39935)))) (define L.nest_f.39937 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.39938 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39924) (jump L.nest_f.39925)))) (define L.nest_f.39939 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39936) (jump L.nest_f.39937)))) (define L.>=.39847 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39912) (jump L.nest_f.39913)))) (define L.nest_t.39888 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39889 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39890 () (if (>= r14 r13) (jump L.nest_t.39888) (jump L.nest_f.39889))) (define L.nest_f.39891 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.39892 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39893 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39894 () (if (>= r14 r13) (jump L.nest_t.39892) (jump L.nest_f.39893))) (define L.nest_f.39895 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.39896 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39890) (jump L.nest_f.39891)))) (define L.nest_f.39897 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39894) (jump L.nest_f.39895)))) (define L.nest_t.39898 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39896) (jump L.nest_f.39897)))) (define L.nest_f.39899 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.39900 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39901 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39902 () (if (>= r14 r13) (jump L.nest_t.39900) (jump L.nest_f.39901))) (define L.nest_f.39903 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.39904 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39905 () (begin (set! rax 6) (jump r15))) (define L.nest_t.39906 () (if (>= r14 r13) (jump L.nest_t.39904) (jump L.nest_f.39905))) (define L.nest_f.39907 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.39908 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39902) (jump L.nest_f.39903)))) (define L.nest_f.39909 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39906) (jump L.nest_f.39907)))) (define L.nest_t.39910 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.39908) (jump L.nest_f.39909)))) (define L.nest_f.39911 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.39912 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.39898) (jump L.nest_f.39899)))) (define L.nest_f.39913 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.39910) (jump L.nest_f.39911)))) (define L.fixnum?.39848 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.39886) (jump L.nest_f.39887)))) (define L.nest_t.39886 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39887 () (begin (set! rax 6) (jump r15))) (define L.boolean?.39849 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.39884) (jump L.nest_f.39885)))) (define L.nest_t.39884 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39885 () (begin (set! rax 6) (jump r15))) (define L.empty?.39850 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.39882) (jump L.nest_f.39883)))) (define L.nest_t.39882 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39883 () (begin (set! rax 6) (jump r15))) (define L.void?.39851 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.39880) (jump L.nest_f.39881)))) (define L.nest_t.39880 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39881 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.39852 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.39878) (jump L.nest_f.39879)))) (define L.nest_t.39878 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39879 () (begin (set! rax 6) (jump r15))) (define L.error?.39853 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.39876) (jump L.nest_f.39877)))) (define L.nest_t.39876 () (begin (set! rax 14) (jump r15))) (define L.nest_f.39877 () (begin (set! rax 6) (jump r15))) (define L.not.39854 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.39874) (jump L.nest_f.39875)))) (define L.nest_t.39874 () (begin (set! rax 6) (jump r15))) (define L.nest_f.39875 () (begin (set! rax 14) (jump r15))) (define L.rp.39856 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.39872) (jump L.nest_f.39873)))) (define L.nest_t.39872 () (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.big.39838))) (define L.nest_f.39873 () (begin (set! rsi 160) (set! rdi 80) (set! r15 (rbp + 0)) (jump L.sum.39839))))/var/tmp/rkt15858001281585800128416.s:95: error: comma, colon, decorator or end of line expected after operand
/var/tmp/rkt15858001281585800128416.s:172: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:263: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:263: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:350: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:350: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:437: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:437: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:548: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:548: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:659: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:659: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:770: error: symbol `L.' redefined
/var/tmp/rkt15858001281585800128416.s:770: error: parser: instruction expected
/var/tmp/rkt15858001281585800128416.s:929: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.40279:
  mov QWORD [rbp + 0], r15
  add rbp, 8
  mov rsi, 16
  mov rdi, 8
  mov r15, L.rp.40280
  jmp L.eq?.40264
L.sum.40263:
  mov r14, rdi
  mov r13, rsi
  mov rsi, r13
  mov rdi, r14
  jmp L.+.40266
L.big.40262:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  mov QWORD [rbp + 16], rsi
  add rbp, 32
  mov rsi, QWORD [rbp + -24]
  mov rdi, -8
  mov r15, L.rp.40281
  jmp L.*.40265
L.rp.40281:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.40282
  jmp L.-.40267
L.rp.40282:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, 0
  mov r15, L.rp.40283
  jmp L.+.40266
L.rp.40283:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, -8
  mov r15, L.rp.40284
  jmp L.*.40265
L.rp.40284:
  sub rbp, 32
  mov QWORD [rbp + 24], rax
  add rbp, 32
  mov rsi, QWORD [rbp + -16]
  mov rdi, -8
  mov r15, L.rp.40285
  jmp L.*.40265
L.rp.40285:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.40286
  jmp L.-.40267
L.rp.40286:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, 0
  mov r15, L.rp.40287
  jmp L.+.40266
L.rp.40287:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, -8
  mov r15, L.rp.40288
  jmp L.*.40265
L.rp.40288:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.40289
  jmp L.>.40270
L.rp.40289:
  sub rbp, 32
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.40472
  jmp L.nest_f.40473
L.rp.40290:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, 80
  mov rdi, r15
  mov r15, L.rp.40291
  jmp L.-.40267
L.rp.40291:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, 80
  mov r15, L.rp.40292
  jmp L.+.40266
L.rp.40292:
  sub rbp, 32
  mov r15, rax
  mov rsi, r15
  mov rdi, -8
  mov r15, QWORD [rbp + 0]
  jmp L.*.40265
L.rp.40293:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, 80
  mov rdi, r15
  mov r15, L.rp.40294
  jmp L.-.40267
L.rp.40294:
  sub rbp, 32
  mov r15, rax
  add rbp, 32
  mov rsi, r15
  mov rdi, 80
  mov r15, L.rp.40295
  jmp L.+.40266
L.rp.40295:
  sub rbp, 32
  mov r15, rax
  mov rsi, r15
  mov rdi, -8
  mov r15, QWORD [rbp + 0]
  jmp L.*.40265
L.nest_t.40472:
  add rbp, 32
  mov rsi, QWORD [rbp + -24]
  mov rdi, -8
  mov r15, L.rp.40290
  jmp L.*.40265
L.nest_f.40473:
  add rbp, 32
  mov rsi, QWORD [rbp + -16]
  mov rdi, -8
  mov r15, L.rp.40293
  jmp L.*.40265
L.eq?.40264:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.40470
  jmp L.nest_f.40471
L.nest_t.40470:
  mov rax, 14
  jmp r15
L.nest_f.40471:
  mov rax, 6
  jmp r15
L.*.40265:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40468
  jmp L.nest_f.40469
L.nest_t.40452:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40453:
  mov rax, 318
  jmp r15
L.nest_t.40454:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40455:
  mov rax, 318
  jmp r15
L.nest_t.40456:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40452
  jmp L.nest_f.40453
L.nest_f.40457:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40454
  jmp L.nest_f.40455
L.nest_t.40458:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40456
  jmp L.nest_f.40457
L.nest_f.40459:
  mov rax, 62
  jmp r15
L.nest_t.40460:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40461:
  mov rax, 318
  jmp r15
L.nest_t.40462:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40463:
  mov rax, 318
  jmp r15
L.nest_t.40464:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40460
  jmp L.nest_f.40461
L.nest_f.40465:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40462
  jmp L.nest_f.40463
L.nest_t.40466:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40464
  jmp L.nest_f.40465
L.nest_f.40467:
  mov rax, 62
  jmp r15
L.nest_t.40468:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40458
  jmp L.nest_f.40459
L.nest_f.40469:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40466
  jmp L.nest_f.40467
L.+.40266:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40450
  jmp L.nest_f.40451
L.nest_t.40434:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40435:
  mov rax, 830
  jmp r15
L.nest_t.40436:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40437:
  mov rax, 830
  jmp r15
L.nest_t.40438:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40434
  jmp L.nest_f.40435
L.nest_f.40439:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40436
  jmp L.nest_f.40437
L.nest_t.40440:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40438
  jmp L.nest_f.40439
L.nest_f.40441:
  mov rax, 574
  jmp r15
L.nest_t.40442:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40443:
  mov rax, 830
  jmp r15
L.nest_t.40444:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40445:
  mov rax, 830
  jmp r15
L.nest_t.40446:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40442
  jmp L.nest_f.40443
L.nest_f.40447:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40444
  jmp L.nest_f.40445
L.nest_t.40448:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40446
  jmp L.nest_f.40447
L.nest_f.40449:
  mov rax, 574
  jmp r15
L.nest_t.40450:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40440
  jmp L.nest_f.40441
L.nest_f.40451:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40448
  jmp L.nest_f.40449
L.-.40267:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40432
  jmp L.nest_f.40433
L.nest_t.40416:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40417:
  mov rax, 1342
  jmp r15
L.nest_t.40418:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40419:
  mov rax, 1342
  jmp r15
L.nest_t.40420:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40416
  jmp L.nest_f.40417
L.nest_f.40421:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40418
  jmp L.nest_f.40419
L.nest_t.40422:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40420
  jmp L.nest_f.40421
L.nest_f.40423:
  mov rax, 1086
  jmp r15
L.nest_t.40424:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40425:
  mov rax, 1342
  jmp r15
L.nest_t.40426:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.40427:
  mov rax, 1342
  jmp r15
L.nest_t.40428:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40424
  jmp L.nest_f.40425
L.nest_f.40429:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40426
  jmp L.nest_f.40427
L.nest_t.40430:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40428
  jmp L.nest_f.40429
L.nest_f.40431:
  mov rax, 1086
  jmp r15
L.nest_t.40432:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40422
  jmp L.nest_f.40423
L.nest_f.40433:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40430
  jmp L.nest_f.40431
L.<.40268:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40414
  jmp L.nest_f.40415
L.nest_t.40390:
  mov rax, 14
  jmp r15
L.nest_f.40391:
  mov rax, 6
  jmp r15
L.nest_t.40392:
  cmp r14, r13
  jl L.nest_t.40390
  jmp L.nest_f.40391
L.nest_f.40393:
  mov rax, 1854
  jmp r15
L.nest_t.40394:
  mov rax, 14
  jmp r15
L.nest_f.40395:
  mov rax, 6
  jmp r15
L.nest_t.40396:
  cmp r14, r13
  jl L.nest_t.40394
  jmp L.nest_f.40395
L.nest_f.40397:
  mov rax, 1854
  jmp r15
L.nest_t.40398:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40392
  jmp L.nest_f.40393
L.nest_f.40399:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40396
  jmp L.nest_f.40397
L.nest_t.40400:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40398
  jmp L.nest_f.40399
L.nest_f.40401:
  mov rax, 1598
  jmp r15
L.nest_t.40402:
  mov rax, 14
  jmp r15
L.nest_f.40403:
  mov rax, 6
  jmp r15
L.nest_t.40404:
  cmp r14, r13
  jl L.nest_t.40402
  jmp L.nest_f.40403
L.nest_f.40405:
  mov rax, 1854
  jmp r15
L.nest_t.40406:
  mov rax, 14
  jmp r15
L.nest_f.40407:
  mov rax, 6
  jmp r15
L.nest_t.40408:
  cmp r14, r13
  jl L.nest_t.40406
  jmp L.nest_f.40407
L.nest_f.40409:
  mov rax, 1854
  jmp r15
L.nest_t.40410:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40404
  jmp L.nest_f.40405
L.nest_f.40411:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40408
  jmp L.nest_f.40409
L.nest_t.40412:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40410
  jmp L.nest_f.40411
L.nest_f.40413:
  mov rax, 1598
  jmp r15
L.nest_t.40414:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40400
  jmp L.nest_f.40401
L.nest_f.40415:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40412
  jmp L.nest_f.40413
L.<=.40269:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40388
  jmp L.nest_f.40389
L.nest_t.40364:
  mov rax, 14
  jmp r15
L.nest_f.40365:
  mov rax, 6
  jmp r15
L.nest_t.40366:
  cmp r14, r13
  jle L.nest_t.40364
  jmp L.nest_f.40365
L.nest_f.40367:
  mov rax, 2366
  jmp r15
L.nest_t.40368:
  mov rax, 14
  jmp r15
L.nest_f.40369:
  mov rax, 6
  jmp r15
L.nest_t.40370:
  cmp r14, r13
  jle L.nest_t.40368
  jmp L.nest_f.40369
L.nest_f.40371:
  mov rax, 2366
  jmp r15
L.nest_t.40372:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40366
  jmp L.nest_f.40367
L.nest_f.40373:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40370
  jmp L.nest_f.40371
L.nest_t.40374:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40372
  jmp L.nest_f.40373
L.nest_f.40375:
  mov rax, 2110
  jmp r15
L.nest_t.40376:
  mov rax, 14
  jmp r15
L.nest_f.40377:
  mov rax, 6
  jmp r15
L.nest_t.40378:
  cmp r14, r13
  jle L.nest_t.40376
  jmp L.nest_f.40377
L.nest_f.40379:
  mov rax, 2366
  jmp r15
L.nest_t.40380:
  mov rax, 14
  jmp r15
L.nest_f.40381:
  mov rax, 6
  jmp r15
L.nest_t.40382:
  cmp r14, r13
  jle L.nest_t.40380
  jmp L.nest_f.40381
L.nest_f.40383:
  mov rax, 2366
  jmp r15
L.nest_t.40384:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40378
  jmp L.nest_f.40379
L.nest_f.40385:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40382
  jmp L.nest_f.40383
L.nest_t.40386:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40384
  jmp L.nest_f.40385
L.nest_f.40387:
  mov rax, 2110
  jmp r15
L.nest_t.40388:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40374
  jmp L.nest_f.40375
L.nest_f.40389:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40386
  jmp L.nest_f.40387
L.>.40270:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40362
  jmp L.nest_f.40363
L.nest_t.40338:
  mov rax, 14
  jmp r15
L.nest_f.40339:
  mov rax, 6
  jmp r15
L.nest_t.40340:
  cmp r14, r13
  jg L.nest_t.40338
  jmp L.nest_f.40339
L.nest_f.40341:
  mov rax, 2878
  jmp r15
L.nest_t.40342:
  mov rax, 14
  jmp r15
L.nest_f.40343:
  mov rax, 6
  jmp r15
L.nest_t.40344:
  cmp r14, r13
  jg L.nest_t.40342
  jmp L.nest_f.40343
L.nest_f.40345:
  mov rax, 2878
  jmp r15
L.nest_t.40346:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40340
  jmp L.nest_f.40341
L.nest_f.40347:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40344
  jmp L.nest_f.40345
L.nest_t.40348:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40346
  jmp L.nest_f.40347
L.nest_f.40349:
  mov rax, 2622
  jmp r15
L.nest_t.40350:
  mov rax, 14
  jmp r15
L.nest_f.40351:
  mov rax, 6
  jmp r15
L.nest_t.40352:
  cmp r14, r13
  jg L.nest_t.40350
  jmp L.nest_f.40351
L.nest_f.40353:
  mov rax, 2878
  jmp r15
L.nest_t.40354:
  mov rax, 14
  jmp r15
L.nest_f.40355:
  mov rax, 6
  jmp r15
L.nest_t.40356:
  cmp r14, r13
  jg L.nest_t.40354
  jmp L.nest_f.40355
L.nest_f.40357:
  mov rax, 2878
  jmp r15
L.nest_t.40358:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40352
  jmp L.nest_f.40353
L.nest_f.40359:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40356
  jmp L.nest_f.40357
L.nest_t.40360:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40358
  jmp L.nest_f.40359
L.nest_f.40361:
  mov rax, 2622
  jmp r15
L.nest_t.40362:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40348
  jmp L.nest_f.40349
L.nest_f.40363:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40360
  jmp L.nest_f.40361
L.>=.40271:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40336
  jmp L.nest_f.40337
L.nest_t.40312:
  mov rax, 14
  jmp r15
L.nest_f.40313:
  mov rax, 6
  jmp r15
L.nest_t.40314:
  cmp r14, r13
  jge L.nest_t.40312
  jmp L.nest_f.40313
L.nest_f.40315:
  mov rax, 3390
  jmp r15
L.nest_t.40316:
  mov rax, 14
  jmp r15
L.nest_f.40317:
  mov rax, 6
  jmp r15
L.nest_t.40318:
  cmp r14, r13
  jge L.nest_t.40316
  jmp L.nest_f.40317
L.nest_f.40319:
  mov rax, 3390
  jmp r15
L.nest_t.40320:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40314
  jmp L.nest_f.40315
L.nest_f.40321:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40318
  jmp L.nest_f.40319
L.nest_t.40322:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40320
  jmp L.nest_f.40321
L.nest_f.40323:
  mov rax, 3134
  jmp r15
L.nest_t.40324:
  mov rax, 14
  jmp r15
L.nest_f.40325:
  mov rax, 6
  jmp r15
L.nest_t.40326:
  cmp r14, r13
  jge L.nest_t.40324
  jmp L.nest_f.40325
L.nest_f.40327:
  mov rax, 3390
  jmp r15
L.nest_t.40328:
  mov rax, 14
  jmp r15
L.nest_f.40329:
  mov rax, 6
  jmp r15
L.nest_t.40330:
  cmp r14, r13
  jge L.nest_t.40328
  jmp L.nest_f.40329
L.nest_f.40331:
  mov rax, 3390
  jmp r15
L.nest_t.40332:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40326
  jmp L.nest_f.40327
L.nest_f.40333:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40330
  jmp L.nest_f.40331
L.nest_t.40334:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40332
  jmp L.nest_f.40333
L.nest_f.40335:
  mov rax, 3134
  jmp r15
L.nest_t.40336:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40322
  jmp L.nest_f.40323
L.nest_f.40337:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40334
  jmp L.nest_f.40335
L.fixnum?.40272:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.40310
  jmp L.nest_f.40311
L.nest_t.40310:
  mov rax, 14
  jmp r15
L.nest_f.40311:
  mov rax, 6
  jmp r15
L.boolean?.40273:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.40308
  jmp L.nest_f.40309
L.nest_t.40308:
  mov rax, 14
  jmp r15
L.nest_f.40309:
  mov rax, 6
  jmp r15
L.empty?.40274:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.40306
  jmp L.nest_f.40307
L.nest_t.40306:
  mov rax, 14
  jmp r15
L.nest_f.40307:
  mov rax, 6
  jmp r15
L.void?.40275:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.40304
  jmp L.nest_f.40305
L.nest_t.40304:
  mov rax, 14
  jmp r15
L.nest_f.40305:
  mov rax, 6
  jmp r15
L.ascii-char?.40276:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.40302
  jmp L.nest_f.40303
L.nest_t.40302:
  mov rax, 14
  jmp r15
L.nest_f.40303:
  mov rax, 6
  jmp r15
L.error?.40277:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.40300
  jmp L.nest_f.40301
L.nest_t.40300:
  mov rax, 14
  jmp r15
L.nest_f.40301:
  mov rax, 6
  jmp r15
L.not.40278:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.40298
  jmp L.nest_f.40299
L.nest_t.40298:
  mov rax, 6
  jmp r15
L.nest_f.40299:
  mov rax, 14
  jmp r15
L.rp.40280:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.40296
  jmp L.nest_f.40297
L.nest_t.40296:
  mov rsi, 160
  mov rdi, 80
  mov r15, QWORD [rbp + 0]
  jmp L.big.40262
L.nest_f.40297:
  mov rsi, 160
  mov rdi, 80
  mov r15, QWORD [rbp + 0]
  jmp L.sum.40263

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:263:4
actual:
  '("Failed on pass uniquify\n  #(struct:exn:fail:contract format-symbol: contract violation\n  expected: (or/c string? symbol? identifier? keyword? char? number?)\n  given: '(if (apply eq? 1 2) big sum) #<continuation-mark-set>)"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for '> #<continuation-mark-set> > (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    30
    30
    30
    30
    #<eof>
    30
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    30
    30
    30
    30
    30
    30
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for '(begin) #<continuation-mark-set> (begin) (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    30
    30
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    30
    30)
expected:   30
--------------------
/var/tmp/rkt15858001291585800129085.s:27: error: symbol `L.fixnum?.40900' undefined
/var/tmp/rkt15858001291585800129085.s:62: error: symbol `L.error?.40904' undefined
/var/tmp/rkt15858001291585800129085.s:71: error: symbol `L.ascii$2d$char?.40902' undefined

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.40920:
  mov rdi, 30
  jmp L.label2.40899
L.ascii$2d$charfn.40903:
  mov r14, rdi
  mov rax, r14
  jmp r15
L.fixnumfn.40901:
  mov r14, rdi
  mov rax, r14
  jmp r15
L.label2.40899:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.40925
  jmp L.fixnum?.40900
L.rp.40925:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.41106
  jmp L.nest_f.41107
L.rp.40926:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.41104
  jmp L.nest_f.41105
L.rp.40927:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.41102
  jmp L.nest_f.41103
L.nest_t.41102:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.41103:
  mov rax, 80
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.41104:
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.ascii$2d$charfn.40903
L.nest_f.41105:
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.40927
  jmp L.error?.40904
L.nest_t.41106:
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.fixnumfn.40901
L.nest_f.41107:
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.40926
  jmp L.ascii$2d$char?.40902
L.label1.40898:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 24
  mov rsi, 160
  mov rdi, 80
  mov r15, L.rp.40921
  jmp L.$2b$.40907
L.rp.40921:
  sub rbp, 24
  mov QWORD [rbp + 16], rax
  add rbp, 24
  mov rdi, 0
  mov r15, L.rp.40922
  jmp L.label1.40898
L.rp.40922:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, r15
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.40923
  jmp L.$2b$.40907
L.rp.40923:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, QWORD [rbp + -16]
  mov rdi, r15
  mov r15, L.rp.40924
  jmp L.$2d$.40908
L.rp.40924:
  sub rbp, 24
  mov QWORD [rbp + 8], rax
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.eq?.40905:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.41100
  jmp L.nest_f.41101
L.nest_t.41100:
  mov rax, 14
  jmp r15
L.nest_f.41101:
  mov rax, 6
  jmp r15
L.$2a$.40906:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41098
  jmp L.nest_f.41099
L.nest_t.41082:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41083:
  mov rax, 318
  jmp r15
L.nest_t.41084:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41085:
  mov rax, 318
  jmp r15
L.nest_t.41086:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41082
  jmp L.nest_f.41083
L.nest_f.41087:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41084
  jmp L.nest_f.41085
L.nest_t.41088:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41086
  jmp L.nest_f.41087
L.nest_f.41089:
  mov rax, 62
  jmp r15
L.nest_t.41090:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41091:
  mov rax, 318
  jmp r15
L.nest_t.41092:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41093:
  mov rax, 318
  jmp r15
L.nest_t.41094:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41090
  jmp L.nest_f.41091
L.nest_f.41095:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41092
  jmp L.nest_f.41093
L.nest_t.41096:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41094
  jmp L.nest_f.41095
L.nest_f.41097:
  mov rax, 62
  jmp r15
L.nest_t.41098:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41088
  jmp L.nest_f.41089
L.nest_f.41099:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41096
  jmp L.nest_f.41097
L.$2b$.40907:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41080
  jmp L.nest_f.41081
L.nest_t.41064:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41065:
  mov rax, 830
  jmp r15
L.nest_t.41066:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41067:
  mov rax, 830
  jmp r15
L.nest_t.41068:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41064
  jmp L.nest_f.41065
L.nest_f.41069:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41066
  jmp L.nest_f.41067
L.nest_t.41070:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41068
  jmp L.nest_f.41069
L.nest_f.41071:
  mov rax, 574
  jmp r15
L.nest_t.41072:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41073:
  mov rax, 830
  jmp r15
L.nest_t.41074:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41075:
  mov rax, 830
  jmp r15
L.nest_t.41076:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41072
  jmp L.nest_f.41073
L.nest_f.41077:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41074
  jmp L.nest_f.41075
L.nest_t.41078:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41076
  jmp L.nest_f.41077
L.nest_f.41079:
  mov rax, 574
  jmp r15
L.nest_t.41080:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41070
  jmp L.nest_f.41071
L.nest_f.41081:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41078
  jmp L.nest_f.41079
L.$2d$.40908:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41062
  jmp L.nest_f.41063
L.nest_t.41046:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41047:
  mov rax, 1342
  jmp r15
L.nest_t.41048:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41049:
  mov rax, 1342
  jmp r15
L.nest_t.41050:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41046
  jmp L.nest_f.41047
L.nest_f.41051:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41048
  jmp L.nest_f.41049
L.nest_t.41052:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41050
  jmp L.nest_f.41051
L.nest_f.41053:
  mov rax, 1086
  jmp r15
L.nest_t.41054:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41055:
  mov rax, 1342
  jmp r15
L.nest_t.41056:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.41057:
  mov rax, 1342
  jmp r15
L.nest_t.41058:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41054
  jmp L.nest_f.41055
L.nest_f.41059:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41056
  jmp L.nest_f.41057
L.nest_t.41060:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41058
  jmp L.nest_f.41059
L.nest_f.41061:
  mov rax, 1086
  jmp r15
L.nest_t.41062:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41052
  jmp L.nest_f.41053
L.nest_f.41063:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41060
  jmp L.nest_f.41061
L.$3c$.40909:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41044
  jmp L.nest_f.41045
L.nest_t.41020:
  mov rax, 14
  jmp r15
L.nest_f.41021:
  mov rax, 6
  jmp r15
L.nest_t.41022:
  cmp r14, r13
  jl L.nest_t.41020
  jmp L.nest_f.41021
L.nest_f.41023:
  mov rax, 1854
  jmp r15
L.nest_t.41024:
  mov rax, 14
  jmp r15
L.nest_f.41025:
  mov rax, 6
  jmp r15
L.nest_t.41026:
  cmp r14, r13
  jl L.nest_t.41024
  jmp L.nest_f.41025
L.nest_f.41027:
  mov rax, 1854
  jmp r15
L.nest_t.41028:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41022
  jmp L.nest_f.41023
L.nest_f.41029:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41026
  jmp L.nest_f.41027
L.nest_t.41030:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41028
  jmp L.nest_f.41029
L.nest_f.41031:
  mov rax, 1598
  jmp r15
L.nest_t.41032:
  mov rax, 14
  jmp r15
L.nest_f.41033:
  mov rax, 6
  jmp r15
L.nest_t.41034:
  cmp r14, r13
  jl L.nest_t.41032
  jmp L.nest_f.41033
L.nest_f.41035:
  mov rax, 1854
  jmp r15
L.nest_t.41036:
  mov rax, 14
  jmp r15
L.nest_f.41037:
  mov rax, 6
  jmp r15
L.nest_t.41038:
  cmp r14, r13
  jl L.nest_t.41036
  jmp L.nest_f.41037
L.nest_f.41039:
  mov rax, 1854
  jmp r15
L.nest_t.41040:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41034
  jmp L.nest_f.41035
L.nest_f.41041:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41038
  jmp L.nest_f.41039
L.nest_t.41042:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41040
  jmp L.nest_f.41041
L.nest_f.41043:
  mov rax, 1598
  jmp r15
L.nest_t.41044:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41030
  jmp L.nest_f.41031
L.nest_f.41045:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41042
  jmp L.nest_f.41043
L.$3c$$3d$.40910:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41018
  jmp L.nest_f.41019
L.nest_t.40994:
  mov rax, 14
  jmp r15
L.nest_f.40995:
  mov rax, 6
  jmp r15
L.nest_t.40996:
  cmp r14, r13
  jle L.nest_t.40994
  jmp L.nest_f.40995
L.nest_f.40997:
  mov rax, 2366
  jmp r15
L.nest_t.40998:
  mov rax, 14
  jmp r15
L.nest_f.40999:
  mov rax, 6
  jmp r15
L.nest_t.41000:
  cmp r14, r13
  jle L.nest_t.40998
  jmp L.nest_f.40999
L.nest_f.41001:
  mov rax, 2366
  jmp r15
L.nest_t.41002:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40996
  jmp L.nest_f.40997
L.nest_f.41003:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41000
  jmp L.nest_f.41001
L.nest_t.41004:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41002
  jmp L.nest_f.41003
L.nest_f.41005:
  mov rax, 2110
  jmp r15
L.nest_t.41006:
  mov rax, 14
  jmp r15
L.nest_f.41007:
  mov rax, 6
  jmp r15
L.nest_t.41008:
  cmp r14, r13
  jle L.nest_t.41006
  jmp L.nest_f.41007
L.nest_f.41009:
  mov rax, 2366
  jmp r15
L.nest_t.41010:
  mov rax, 14
  jmp r15
L.nest_f.41011:
  mov rax, 6
  jmp r15
L.nest_t.41012:
  cmp r14, r13
  jle L.nest_t.41010
  jmp L.nest_f.41011
L.nest_f.41013:
  mov rax, 2366
  jmp r15
L.nest_t.41014:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41008
  jmp L.nest_f.41009
L.nest_f.41015:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41012
  jmp L.nest_f.41013
L.nest_t.41016:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.41014
  jmp L.nest_f.41015
L.nest_f.41017:
  mov rax, 2110
  jmp r15
L.nest_t.41018:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.41004
  jmp L.nest_f.41005
L.nest_f.41019:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.41016
  jmp L.nest_f.41017
L.$3e$.40911:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40992
  jmp L.nest_f.40993
L.nest_t.40968:
  mov rax, 14
  jmp r15
L.nest_f.40969:
  mov rax, 6
  jmp r15
L.nest_t.40970:
  cmp r14, r13
  jg L.nest_t.40968
  jmp L.nest_f.40969
L.nest_f.40971:
  mov rax, 2878
  jmp r15
L.nest_t.40972:
  mov rax, 14
  jmp r15
L.nest_f.40973:
  mov rax, 6
  jmp r15
L.nest_t.40974:
  cmp r14, r13
  jg L.nest_t.40972
  jmp L.nest_f.40973
L.nest_f.40975:
  mov rax, 2878
  jmp r15
L.nest_t.40976:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40970
  jmp L.nest_f.40971
L.nest_f.40977:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40974
  jmp L.nest_f.40975
L.nest_t.40978:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40976
  jmp L.nest_f.40977
L.nest_f.40979:
  mov rax, 2622
  jmp r15
L.nest_t.40980:
  mov rax, 14
  jmp r15
L.nest_f.40981:
  mov rax, 6
  jmp r15
L.nest_t.40982:
  cmp r14, r13
  jg L.nest_t.40980
  jmp L.nest_f.40981
L.nest_f.40983:
  mov rax, 2878
  jmp r15
L.nest_t.40984:
  mov rax, 14
  jmp r15
L.nest_f.40985:
  mov rax, 6
  jmp r15
L.nest_t.40986:
  cmp r14, r13
  jg L.nest_t.40984
  jmp L.nest_f.40985
L.nest_f.40987:
  mov rax, 2878
  jmp r15
L.nest_t.40988:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40982
  jmp L.nest_f.40983
L.nest_f.40989:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40986
  jmp L.nest_f.40987
L.nest_t.40990:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40988
  jmp L.nest_f.40989
L.nest_f.40991:
  mov rax, 2622
  jmp r15
L.nest_t.40992:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40978
  jmp L.nest_f.40979
L.nest_f.40993:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40990
  jmp L.nest_f.40991
L.$3e$$3d$.40912:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40966
  jmp L.nest_f.40967
L.nest_t.40942:
  mov rax, 14
  jmp r15
L.nest_f.40943:
  mov rax, 6
  jmp r15
L.nest_t.40944:
  cmp r14, r13
  jge L.nest_t.40942
  jmp L.nest_f.40943
L.nest_f.40945:
  mov rax, 3390
  jmp r15
L.nest_t.40946:
  mov rax, 14
  jmp r15
L.nest_f.40947:
  mov rax, 6
  jmp r15
L.nest_t.40948:
  cmp r14, r13
  jge L.nest_t.40946
  jmp L.nest_f.40947
L.nest_f.40949:
  mov rax, 3390
  jmp r15
L.nest_t.40950:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40944
  jmp L.nest_f.40945
L.nest_f.40951:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40948
  jmp L.nest_f.40949
L.nest_t.40952:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40950
  jmp L.nest_f.40951
L.nest_f.40953:
  mov rax, 3134
  jmp r15
L.nest_t.40954:
  mov rax, 14
  jmp r15
L.nest_f.40955:
  mov rax, 6
  jmp r15
L.nest_t.40956:
  cmp r14, r13
  jge L.nest_t.40954
  jmp L.nest_f.40955
L.nest_f.40957:
  mov rax, 3390
  jmp r15
L.nest_t.40958:
  mov rax, 14
  jmp r15
L.nest_f.40959:
  mov rax, 6
  jmp r15
L.nest_t.40960:
  cmp r14, r13
  jge L.nest_t.40958
  jmp L.nest_f.40959
L.nest_f.40961:
  mov rax, 3390
  jmp r15
L.nest_t.40962:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40956
  jmp L.nest_f.40957
L.nest_f.40963:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40960
  jmp L.nest_f.40961
L.nest_t.40964:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.40962
  jmp L.nest_f.40963
L.nest_f.40965:
  mov rax, 3134
  jmp r15
L.nest_t.40966:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.40952
  jmp L.nest_f.40953
L.nest_f.40967:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.40964
  jmp L.nest_f.40965
L.fixnum?.40913:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.40940
  jmp L.nest_f.40941
L.nest_t.40940:
  mov rax, 14
  jmp r15
L.nest_f.40941:
  mov rax, 6
  jmp r15
L.boolean?.40914:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.40938
  jmp L.nest_f.40939
L.nest_t.40938:
  mov rax, 14
  jmp r15
L.nest_f.40939:
  mov rax, 6
  jmp r15
L.empty?.40915:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.40936
  jmp L.nest_f.40937
L.nest_t.40936:
  mov rax, 14
  jmp r15
L.nest_f.40937:
  mov rax, 6
  jmp r15
L.void?.40916:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.40934
  jmp L.nest_f.40935
L.nest_t.40934:
  mov rax, 14
  jmp r15
L.nest_f.40935:
  mov rax, 6
  jmp r15
L.ascii$2d$char?.40917:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.40932
  jmp L.nest_f.40933
L.nest_t.40932:
  mov rax, 14
  jmp r15
L.nest_f.40933:
  mov rax, 6
  jmp r15
L.error?.40918:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.40930
  jmp L.nest_f.40931
L.nest_t.40930:
  mov rax, 14
  jmp r15
L.nest_f.40931:
  mov rax, 6
  jmp r15
L.not.40919:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.40928
  jmp L.nest_f.40929
L.nest_t.40928:
  mov rax, 6
  jmp r15
L.nest_f.40929:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg
expose-basic-blocks: (module (define L.main.43837 () (begin (nop) (set! rdi 30) (nop) (jump L.label2.43819))) (define L.not.43836 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.43835 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.43834 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.43833 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.43832 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.43831 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.43830 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.43829 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.43828 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.43827 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.43826 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.43825 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.43824 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.43823 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.43822 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.label1.43818 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 24)) (return-point L.rp.43838 (begin (set! rsi 160) (set! rdi 80) (set! r15 L.rp.43838) (jump L.+.43824))) (set! rbp (- rbp 24)) (set! (rbp + 16) rax) (set! rbp (+ rbp 24)) (return-point L.rp.43839 (begin (set! rdi 0) (set! r15 L.rp.43839) (jump L.label1.43818))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.43840 (begin (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.43840) (jump L.+.43824))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.43841 (begin (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.43841) (jump L.-.43825))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0)))) (define L.label2.43819 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (return-point L.rp.43842 (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43842) (jump L.fixnum?.43830))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.fixnumfn.43820)) (begin (set! rbp (+ rbp 16)) (return-point L.rp.43843 (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43843) (jump L.ascii-char?.43834))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.ascii-charfn.43821)) (begin (set! rbp (+ rbp 16)) (return-point L.rp.43844 (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43844) (jump L.error?.43835))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rax 80) (jump (rbp + 0)))))))))) (define L.fixnumfn.43820 () (begin (nop) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.ascii-charfn.43821 () (begin (nop) (set! r14 rdi) (set! rax r14) (jump r15))))
process-rp: (begin (set! rsi 160) (set! rdi 80) (set! r15 L.rp.43838) (jump L.+.43824))
process-rp: (jump L.+.43824)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! (rbp + 16) rax)
updating tai with: (set! rbp (+ rbp 24))
process-rp: (begin (set! rdi 0) (set! r15 L.rp.43839) (jump L.label1.43818))
process-rp: (jump L.label1.43818)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 24))
process-rp: (begin (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.43840) (jump L.+.43824))
process-rp: (jump L.+.43824)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 24))
process-rp: (begin (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.43841) (jump L.-.43825))
process-rp: (jump L.-.43825)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (set! rax r15)
updating tai with: (jump (rbp + 0))
process-rp: (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43842) (jump L.fixnum?.43830))
process-rp: (jump L.fixnum?.43830)
updating tai with: (set! rbp (- rbp 16))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.fixnumfn.43820)) (begin (set! rbp (+ rbp 16)) (return-point L.rp.43843 (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43843) (jump L.ascii-char?.43834))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.ascii-charfn.43821)) (begin (set! rbp (+ rbp 16)) (return-point L.rp.43844 (begin (set! rdi (rbp + -8)) (set! r15 L.rp.43844) (jump L.error?.43835))) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 8)) (jump (rbp + 0))) (begin (set! rax 80) (jump (rbp + 0))))))))
updating tai with: (nop)
updating tai with: (set! r14 rdi)
updating tai with: (set! rax r14)
updating tai with: (jump r15)
create-return-point-blocktwo: (return-point L.rp.43842 (begin ((jump r15) (set! rax r14) (set! r14 rdi) (nop) (if (neq? r15 6) (jump L.tmp.44177) (jump L.tmp.44179)) (set! r15 rax) (set! rbp (- rbp 16)) (jump (rbp + 0)) (set! rax r15) (set! r15 rax) (set! rbp (- rbp 24)) (set! rbp (+ rbp 24)) (set! r15 rax) (set! rbp (- rbp 24)) (set! rbp (+ rbp 24)) (set! r15 rax) (set! rbp (- rbp 24)) (set! rbp (+ rbp 24)) (set! (rbp + 16) rax) (set! rbp (- rbp 24)))))
parse-rp-tail (begin ((set! rbp (- rbp 24)) (set! (rbp + 16) rax) (set! rbp (+ rbp 24)) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0)) (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.44177) (jump L.tmp.44179)) (nop) (set! r14 rdi) (set! rax r14) (jump r15)))
parse-rp-tail (jump r15)
flatten (module (define L.main.44208 () (begin (nop) (set! rdi 30) (nop) (jump L.label2.44190))) (define L.ascii-charfn.44192 () (begin (nop) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.fixnumfn.44191 () (begin (nop) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.label2.44190 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 16)) (set! rdi (rbp + -8)) (set! r15 L.rp.44213) (jump L.fixnum?.44201))) (define L.rp.44213 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.44394) (jump L.nest_f.44395)))) (define L.rp.44214 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.44392) (jump L.nest_f.44393)))) (define L.rp.44215 () (begin (set! rbp (- rbp 16)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.44390) (jump L.nest_f.44391)))) (define L.nest_t.44390 () (begin (set! rax (rbp + 8)) (jump (rbp + 0)))) (define L.nest_f.44391 () (begin (set! rax 80) (jump (rbp + 0)))) (define L.nest_t.44392 () (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.ascii-charfn.44192))) (define L.nest_f.44393 () (begin (set! rbp (+ rbp 16)) (set! rdi (rbp + -8)) (set! r15 L.rp.44215) (jump L.error?.44206))) (define L.nest_t.44394 () (begin (set! rdi (rbp + 8)) (set! r15 (rbp + 0)) (jump L.fixnumfn.44191))) (define L.nest_f.44395 () (begin (set! rbp (+ rbp 16)) (set! rdi (rbp + -8)) (set! r15 L.rp.44214) (jump L.ascii-char?.44205))) (define L.label1.44189 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! rbp (+ rbp 24)) (set! rsi 160) (set! rdi 80) (set! r15 L.rp.44209) (jump L.+.44195))) (define L.rp.44209 () (begin (set! rbp (- rbp 24)) (set! (rbp + 16) rax) (set! rbp (+ rbp 24)) (set! rdi 0) (set! r15 L.rp.44210) (jump L.label1.44189))) (define L.rp.44210 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rsi r15) (set! rdi (rbp + -8)) (set! r15 L.rp.44211) (jump L.+.44195))) (define L.rp.44211 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rsi (rbp + -16)) (set! rdi r15) (set! r15 L.rp.44212) (jump L.-.44196))) (define L.rp.44212 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rax r15) (jump (rbp + 0)))) (define L.eq?.44193 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.44388) (jump L.nest_f.44389)))) (define L.nest_t.44388 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44389 () (begin (set! rax 6) (jump r15))) (define L.*.44194 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44386) (jump L.nest_f.44387)))) (define L.nest_t.44370 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44371 () (begin (set! rax 318) (jump r15))) (define L.nest_t.44372 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44373 () (begin (set! rax 318) (jump r15))) (define L.nest_t.44374 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44370) (jump L.nest_f.44371)))) (define L.nest_f.44375 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44372) (jump L.nest_f.44373)))) (define L.nest_t.44376 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44374) (jump L.nest_f.44375)))) (define L.nest_f.44377 () (begin (set! rax 62) (jump r15))) (define L.nest_t.44378 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44379 () (begin (set! rax 318) (jump r15))) (define L.nest_t.44380 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44381 () (begin (set! rax 318) (jump r15))) (define L.nest_t.44382 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44378) (jump L.nest_f.44379)))) (define L.nest_f.44383 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44380) (jump L.nest_f.44381)))) (define L.nest_t.44384 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44382) (jump L.nest_f.44383)))) (define L.nest_f.44385 () (begin (set! rax 62) (jump r15))) (define L.nest_t.44386 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44376) (jump L.nest_f.44377)))) (define L.nest_f.44387 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44384) (jump L.nest_f.44385)))) (define L.+.44195 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44368) (jump L.nest_f.44369)))) (define L.nest_t.44352 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44353 () (begin (set! rax 830) (jump r15))) (define L.nest_t.44354 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44355 () (begin (set! rax 830) (jump r15))) (define L.nest_t.44356 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44352) (jump L.nest_f.44353)))) (define L.nest_f.44357 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44354) (jump L.nest_f.44355)))) (define L.nest_t.44358 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44356) (jump L.nest_f.44357)))) (define L.nest_f.44359 () (begin (set! rax 574) (jump r15))) (define L.nest_t.44360 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44361 () (begin (set! rax 830) (jump r15))) (define L.nest_t.44362 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44363 () (begin (set! rax 830) (jump r15))) (define L.nest_t.44364 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44360) (jump L.nest_f.44361)))) (define L.nest_f.44365 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44362) (jump L.nest_f.44363)))) (define L.nest_t.44366 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44364) (jump L.nest_f.44365)))) (define L.nest_f.44367 () (begin (set! rax 574) (jump r15))) (define L.nest_t.44368 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44358) (jump L.nest_f.44359)))) (define L.nest_f.44369 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44366) (jump L.nest_f.44367)))) (define L.-.44196 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44350) (jump L.nest_f.44351)))) (define L.nest_t.44334 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44335 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.44336 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44337 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.44338 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44334) (jump L.nest_f.44335)))) (define L.nest_f.44339 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44336) (jump L.nest_f.44337)))) (define L.nest_t.44340 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44338) (jump L.nest_f.44339)))) (define L.nest_f.44341 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.44342 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44343 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.44344 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.44345 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.44346 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44342) (jump L.nest_f.44343)))) (define L.nest_f.44347 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44344) (jump L.nest_f.44345)))) (define L.nest_t.44348 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44346) (jump L.nest_f.44347)))) (define L.nest_f.44349 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.44350 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44340) (jump L.nest_f.44341)))) (define L.nest_f.44351 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44348) (jump L.nest_f.44349)))) (define L.<.44197 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44332) (jump L.nest_f.44333)))) (define L.nest_t.44308 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44309 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44310 () (if (< r14 r13) (jump L.nest_t.44308) (jump L.nest_f.44309))) (define L.nest_f.44311 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.44312 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44313 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44314 () (if (< r14 r13) (jump L.nest_t.44312) (jump L.nest_f.44313))) (define L.nest_f.44315 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.44316 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44310) (jump L.nest_f.44311)))) (define L.nest_f.44317 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44314) (jump L.nest_f.44315)))) (define L.nest_t.44318 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44316) (jump L.nest_f.44317)))) (define L.nest_f.44319 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.44320 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44321 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44322 () (if (< r14 r13) (jump L.nest_t.44320) (jump L.nest_f.44321))) (define L.nest_f.44323 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.44324 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44325 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44326 () (if (< r14 r13) (jump L.nest_t.44324) (jump L.nest_f.44325))) (define L.nest_f.44327 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.44328 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44322) (jump L.nest_f.44323)))) (define L.nest_f.44329 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44326) (jump L.nest_f.44327)))) (define L.nest_t.44330 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44328) (jump L.nest_f.44329)))) (define L.nest_f.44331 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.44332 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44318) (jump L.nest_f.44319)))) (define L.nest_f.44333 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44330) (jump L.nest_f.44331)))) (define L.<=.44198 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44306) (jump L.nest_f.44307)))) (define L.nest_t.44282 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44283 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44284 () (if (<= r14 r13) (jump L.nest_t.44282) (jump L.nest_f.44283))) (define L.nest_f.44285 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.44286 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44287 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44288 () (if (<= r14 r13) (jump L.nest_t.44286) (jump L.nest_f.44287))) (define L.nest_f.44289 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.44290 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44284) (jump L.nest_f.44285)))) (define L.nest_f.44291 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44288) (jump L.nest_f.44289)))) (define L.nest_t.44292 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44290) (jump L.nest_f.44291)))) (define L.nest_f.44293 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.44294 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44295 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44296 () (if (<= r14 r13) (jump L.nest_t.44294) (jump L.nest_f.44295))) (define L.nest_f.44297 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.44298 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44299 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44300 () (if (<= r14 r13) (jump L.nest_t.44298) (jump L.nest_f.44299))) (define L.nest_f.44301 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.44302 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44296) (jump L.nest_f.44297)))) (define L.nest_f.44303 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44300) (jump L.nest_f.44301)))) (define L.nest_t.44304 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44302) (jump L.nest_f.44303)))) (define L.nest_f.44305 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.44306 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44292) (jump L.nest_f.44293)))) (define L.nest_f.44307 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44304) (jump L.nest_f.44305)))) (define L.>.44199 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44280) (jump L.nest_f.44281)))) (define L.nest_t.44256 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44257 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44258 () (if (> r14 r13) (jump L.nest_t.44256) (jump L.nest_f.44257))) (define L.nest_f.44259 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.44260 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44261 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44262 () (if (> r14 r13) (jump L.nest_t.44260) (jump L.nest_f.44261))) (define L.nest_f.44263 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.44264 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44258) (jump L.nest_f.44259)))) (define L.nest_f.44265 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44262) (jump L.nest_f.44263)))) (define L.nest_t.44266 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44264) (jump L.nest_f.44265)))) (define L.nest_f.44267 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.44268 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44269 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44270 () (if (> r14 r13) (jump L.nest_t.44268) (jump L.nest_f.44269))) (define L.nest_f.44271 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.44272 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44273 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44274 () (if (> r14 r13) (jump L.nest_t.44272) (jump L.nest_f.44273))) (define L.nest_f.44275 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.44276 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44270) (jump L.nest_f.44271)))) (define L.nest_f.44277 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44274) (jump L.nest_f.44275)))) (define L.nest_t.44278 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44276) (jump L.nest_f.44277)))) (define L.nest_f.44279 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.44280 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44266) (jump L.nest_f.44267)))) (define L.nest_f.44281 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44278) (jump L.nest_f.44279)))) (define L.>=.44200 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44254) (jump L.nest_f.44255)))) (define L.nest_t.44230 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44231 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44232 () (if (>= r14 r13) (jump L.nest_t.44230) (jump L.nest_f.44231))) (define L.nest_f.44233 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.44234 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44235 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44236 () (if (>= r14 r13) (jump L.nest_t.44234) (jump L.nest_f.44235))) (define L.nest_f.44237 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.44238 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44232) (jump L.nest_f.44233)))) (define L.nest_f.44239 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44236) (jump L.nest_f.44237)))) (define L.nest_t.44240 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44238) (jump L.nest_f.44239)))) (define L.nest_f.44241 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.44242 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44243 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44244 () (if (>= r14 r13) (jump L.nest_t.44242) (jump L.nest_f.44243))) (define L.nest_f.44245 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.44246 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44247 () (begin (set! rax 6) (jump r15))) (define L.nest_t.44248 () (if (>= r14 r13) (jump L.nest_t.44246) (jump L.nest_f.44247))) (define L.nest_f.44249 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.44250 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44244) (jump L.nest_f.44245)))) (define L.nest_f.44251 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44248) (jump L.nest_f.44249)))) (define L.nest_t.44252 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.44250) (jump L.nest_f.44251)))) (define L.nest_f.44253 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.44254 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.44240) (jump L.nest_f.44241)))) (define L.nest_f.44255 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.44252) (jump L.nest_f.44253)))) (define L.fixnum?.44201 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.44228) (jump L.nest_f.44229)))) (define L.nest_t.44228 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44229 () (begin (set! rax 6) (jump r15))) (define L.boolean?.44202 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.44226) (jump L.nest_f.44227)))) (define L.nest_t.44226 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44227 () (begin (set! rax 6) (jump r15))) (define L.empty?.44203 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.44224) (jump L.nest_f.44225)))) (define L.nest_t.44224 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44225 () (begin (set! rax 6) (jump r15))) (define L.void?.44204 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.44222) (jump L.nest_f.44223)))) (define L.nest_t.44222 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44223 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.44205 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.44220) (jump L.nest_f.44221)))) (define L.nest_t.44220 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44221 () (begin (set! rax 6) (jump r15))) (define L.error?.44206 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.44218) (jump L.nest_f.44219)))) (define L.nest_t.44218 () (begin (set! rax 14) (jump r15))) (define L.nest_f.44219 () (begin (set! rax 6) (jump r15))) (define L.not.44207 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.44216) (jump L.nest_f.44217)))) (define L.nest_t.44216 () (begin (set! rax 6) (jump r15))) (define L.nest_f.44217 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858001551585800155262.s:13: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:121: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:212: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:212: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:299: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:299: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:386: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:386: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:497: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:497: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:608: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:608: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:719: error: symbol `L.' redefined
/var/tmp/rkt15858001551585800155262.s:719: error: parser: instruction expected
/var/tmp/rkt15858001551585800155262.s:878: error: symbol `L.ascii' redefined
/var/tmp/rkt15858001551585800155262.s:878: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.44622:
  mov rdi, 30
  jmp L.label2.44604
L.ascii-charfn.44606:
  mov r14, rdi
  mov rax, r14
  jmp r15
L.fixnumfn.44605:
  mov r14, rdi
  mov rax, r14
  jmp r15
L.label2.44604:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.44627
  jmp L.fixnum?.44615
L.rp.44627:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.44808
  jmp L.nest_f.44809
L.rp.44628:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.44806
  jmp L.nest_f.44807
L.rp.44629:
  sub rbp, 16
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.44804
  jmp L.nest_f.44805
L.nest_t.44804:
  mov rax, QWORD [rbp + 8]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.44805:
  mov rax, 80
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.44806:
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.ascii-charfn.44606
L.nest_f.44807:
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.44629
  jmp L.error?.44620
L.nest_t.44808:
  mov rdi, QWORD [rbp + 8]
  mov r15, QWORD [rbp + 0]
  jmp L.fixnumfn.44605
L.nest_f.44809:
  add rbp, 16
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.44628
  jmp L.ascii-char?.44619
L.label1.44603:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  add rbp, 24
  mov rsi, 160
  mov rdi, 80
  mov r15, L.rp.44623
  jmp L.+.44609
L.rp.44623:
  sub rbp, 24
  mov QWORD [rbp + 16], rax
  add rbp, 24
  mov rdi, 0
  mov r15, L.rp.44624
  jmp L.label1.44603
L.rp.44624:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, r15
  mov rdi, QWORD [rbp + -8]
  mov r15, L.rp.44625
  jmp L.+.44609
L.rp.44625:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, QWORD [rbp + -16]
  mov rdi, r15
  mov r15, L.rp.44626
  jmp L.-.44610
L.rp.44626:
  sub rbp, 24
  mov r15, rax
  mov rax, r15
  mov r10, QWORD [rbp + 0]
  jmp r10
L.eq?.44607:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.44802
  jmp L.nest_f.44803
L.nest_t.44802:
  mov rax, 14
  jmp r15
L.nest_f.44803:
  mov rax, 6
  jmp r15
L.*.44608:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44800
  jmp L.nest_f.44801
L.nest_t.44784:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44785:
  mov rax, 318
  jmp r15
L.nest_t.44786:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44787:
  mov rax, 318
  jmp r15
L.nest_t.44788:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44784
  jmp L.nest_f.44785
L.nest_f.44789:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44786
  jmp L.nest_f.44787
L.nest_t.44790:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44788
  jmp L.nest_f.44789
L.nest_f.44791:
  mov rax, 62
  jmp r15
L.nest_t.44792:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44793:
  mov rax, 318
  jmp r15
L.nest_t.44794:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44795:
  mov rax, 318
  jmp r15
L.nest_t.44796:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44792
  jmp L.nest_f.44793
L.nest_f.44797:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44794
  jmp L.nest_f.44795
L.nest_t.44798:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44796
  jmp L.nest_f.44797
L.nest_f.44799:
  mov rax, 62
  jmp r15
L.nest_t.44800:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44790
  jmp L.nest_f.44791
L.nest_f.44801:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44798
  jmp L.nest_f.44799
L.+.44609:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44782
  jmp L.nest_f.44783
L.nest_t.44766:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44767:
  mov rax, 830
  jmp r15
L.nest_t.44768:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44769:
  mov rax, 830
  jmp r15
L.nest_t.44770:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44766
  jmp L.nest_f.44767
L.nest_f.44771:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44768
  jmp L.nest_f.44769
L.nest_t.44772:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44770
  jmp L.nest_f.44771
L.nest_f.44773:
  mov rax, 574
  jmp r15
L.nest_t.44774:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44775:
  mov rax, 830
  jmp r15
L.nest_t.44776:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44777:
  mov rax, 830
  jmp r15
L.nest_t.44778:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44774
  jmp L.nest_f.44775
L.nest_f.44779:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44776
  jmp L.nest_f.44777
L.nest_t.44780:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44778
  jmp L.nest_f.44779
L.nest_f.44781:
  mov rax, 574
  jmp r15
L.nest_t.44782:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44772
  jmp L.nest_f.44773
L.nest_f.44783:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44780
  jmp L.nest_f.44781
L.-.44610:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44764
  jmp L.nest_f.44765
L.nest_t.44748:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44749:
  mov rax, 1342
  jmp r15
L.nest_t.44750:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44751:
  mov rax, 1342
  jmp r15
L.nest_t.44752:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44748
  jmp L.nest_f.44749
L.nest_f.44753:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44750
  jmp L.nest_f.44751
L.nest_t.44754:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44752
  jmp L.nest_f.44753
L.nest_f.44755:
  mov rax, 1086
  jmp r15
L.nest_t.44756:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44757:
  mov rax, 1342
  jmp r15
L.nest_t.44758:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.44759:
  mov rax, 1342
  jmp r15
L.nest_t.44760:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44756
  jmp L.nest_f.44757
L.nest_f.44761:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44758
  jmp L.nest_f.44759
L.nest_t.44762:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44760
  jmp L.nest_f.44761
L.nest_f.44763:
  mov rax, 1086
  jmp r15
L.nest_t.44764:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44754
  jmp L.nest_f.44755
L.nest_f.44765:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44762
  jmp L.nest_f.44763
L.<.44611:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44746
  jmp L.nest_f.44747
L.nest_t.44722:
  mov rax, 14
  jmp r15
L.nest_f.44723:
  mov rax, 6
  jmp r15
L.nest_t.44724:
  cmp r14, r13
  jl L.nest_t.44722
  jmp L.nest_f.44723
L.nest_f.44725:
  mov rax, 1854
  jmp r15
L.nest_t.44726:
  mov rax, 14
  jmp r15
L.nest_f.44727:
  mov rax, 6
  jmp r15
L.nest_t.44728:
  cmp r14, r13
  jl L.nest_t.44726
  jmp L.nest_f.44727
L.nest_f.44729:
  mov rax, 1854
  jmp r15
L.nest_t.44730:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44724
  jmp L.nest_f.44725
L.nest_f.44731:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44728
  jmp L.nest_f.44729
L.nest_t.44732:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44730
  jmp L.nest_f.44731
L.nest_f.44733:
  mov rax, 1598
  jmp r15
L.nest_t.44734:
  mov rax, 14
  jmp r15
L.nest_f.44735:
  mov rax, 6
  jmp r15
L.nest_t.44736:
  cmp r14, r13
  jl L.nest_t.44734
  jmp L.nest_f.44735
L.nest_f.44737:
  mov rax, 1854
  jmp r15
L.nest_t.44738:
  mov rax, 14
  jmp r15
L.nest_f.44739:
  mov rax, 6
  jmp r15
L.nest_t.44740:
  cmp r14, r13
  jl L.nest_t.44738
  jmp L.nest_f.44739
L.nest_f.44741:
  mov rax, 1854
  jmp r15
L.nest_t.44742:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44736
  jmp L.nest_f.44737
L.nest_f.44743:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44740
  jmp L.nest_f.44741
L.nest_t.44744:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44742
  jmp L.nest_f.44743
L.nest_f.44745:
  mov rax, 1598
  jmp r15
L.nest_t.44746:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44732
  jmp L.nest_f.44733
L.nest_f.44747:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44744
  jmp L.nest_f.44745
L.<=.44612:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44720
  jmp L.nest_f.44721
L.nest_t.44696:
  mov rax, 14
  jmp r15
L.nest_f.44697:
  mov rax, 6
  jmp r15
L.nest_t.44698:
  cmp r14, r13
  jle L.nest_t.44696
  jmp L.nest_f.44697
L.nest_f.44699:
  mov rax, 2366
  jmp r15
L.nest_t.44700:
  mov rax, 14
  jmp r15
L.nest_f.44701:
  mov rax, 6
  jmp r15
L.nest_t.44702:
  cmp r14, r13
  jle L.nest_t.44700
  jmp L.nest_f.44701
L.nest_f.44703:
  mov rax, 2366
  jmp r15
L.nest_t.44704:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44698
  jmp L.nest_f.44699
L.nest_f.44705:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44702
  jmp L.nest_f.44703
L.nest_t.44706:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44704
  jmp L.nest_f.44705
L.nest_f.44707:
  mov rax, 2110
  jmp r15
L.nest_t.44708:
  mov rax, 14
  jmp r15
L.nest_f.44709:
  mov rax, 6
  jmp r15
L.nest_t.44710:
  cmp r14, r13
  jle L.nest_t.44708
  jmp L.nest_f.44709
L.nest_f.44711:
  mov rax, 2366
  jmp r15
L.nest_t.44712:
  mov rax, 14
  jmp r15
L.nest_f.44713:
  mov rax, 6
  jmp r15
L.nest_t.44714:
  cmp r14, r13
  jle L.nest_t.44712
  jmp L.nest_f.44713
L.nest_f.44715:
  mov rax, 2366
  jmp r15
L.nest_t.44716:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44710
  jmp L.nest_f.44711
L.nest_f.44717:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44714
  jmp L.nest_f.44715
L.nest_t.44718:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44716
  jmp L.nest_f.44717
L.nest_f.44719:
  mov rax, 2110
  jmp r15
L.nest_t.44720:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44706
  jmp L.nest_f.44707
L.nest_f.44721:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44718
  jmp L.nest_f.44719
L.>.44613:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44694
  jmp L.nest_f.44695
L.nest_t.44670:
  mov rax, 14
  jmp r15
L.nest_f.44671:
  mov rax, 6
  jmp r15
L.nest_t.44672:
  cmp r14, r13
  jg L.nest_t.44670
  jmp L.nest_f.44671
L.nest_f.44673:
  mov rax, 2878
  jmp r15
L.nest_t.44674:
  mov rax, 14
  jmp r15
L.nest_f.44675:
  mov rax, 6
  jmp r15
L.nest_t.44676:
  cmp r14, r13
  jg L.nest_t.44674
  jmp L.nest_f.44675
L.nest_f.44677:
  mov rax, 2878
  jmp r15
L.nest_t.44678:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44672
  jmp L.nest_f.44673
L.nest_f.44679:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44676
  jmp L.nest_f.44677
L.nest_t.44680:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44678
  jmp L.nest_f.44679
L.nest_f.44681:
  mov rax, 2622
  jmp r15
L.nest_t.44682:
  mov rax, 14
  jmp r15
L.nest_f.44683:
  mov rax, 6
  jmp r15
L.nest_t.44684:
  cmp r14, r13
  jg L.nest_t.44682
  jmp L.nest_f.44683
L.nest_f.44685:
  mov rax, 2878
  jmp r15
L.nest_t.44686:
  mov rax, 14
  jmp r15
L.nest_f.44687:
  mov rax, 6
  jmp r15
L.nest_t.44688:
  cmp r14, r13
  jg L.nest_t.44686
  jmp L.nest_f.44687
L.nest_f.44689:
  mov rax, 2878
  jmp r15
L.nest_t.44690:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44684
  jmp L.nest_f.44685
L.nest_f.44691:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44688
  jmp L.nest_f.44689
L.nest_t.44692:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44690
  jmp L.nest_f.44691
L.nest_f.44693:
  mov rax, 2622
  jmp r15
L.nest_t.44694:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44680
  jmp L.nest_f.44681
L.nest_f.44695:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44692
  jmp L.nest_f.44693
L.>=.44614:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44668
  jmp L.nest_f.44669
L.nest_t.44644:
  mov rax, 14
  jmp r15
L.nest_f.44645:
  mov rax, 6
  jmp r15
L.nest_t.44646:
  cmp r14, r13
  jge L.nest_t.44644
  jmp L.nest_f.44645
L.nest_f.44647:
  mov rax, 3390
  jmp r15
L.nest_t.44648:
  mov rax, 14
  jmp r15
L.nest_f.44649:
  mov rax, 6
  jmp r15
L.nest_t.44650:
  cmp r14, r13
  jge L.nest_t.44648
  jmp L.nest_f.44649
L.nest_f.44651:
  mov rax, 3390
  jmp r15
L.nest_t.44652:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44646
  jmp L.nest_f.44647
L.nest_f.44653:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44650
  jmp L.nest_f.44651
L.nest_t.44654:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44652
  jmp L.nest_f.44653
L.nest_f.44655:
  mov rax, 3134
  jmp r15
L.nest_t.44656:
  mov rax, 14
  jmp r15
L.nest_f.44657:
  mov rax, 6
  jmp r15
L.nest_t.44658:
  cmp r14, r13
  jge L.nest_t.44656
  jmp L.nest_f.44657
L.nest_f.44659:
  mov rax, 3390
  jmp r15
L.nest_t.44660:
  mov rax, 14
  jmp r15
L.nest_f.44661:
  mov rax, 6
  jmp r15
L.nest_t.44662:
  cmp r14, r13
  jge L.nest_t.44660
  jmp L.nest_f.44661
L.nest_f.44663:
  mov rax, 3390
  jmp r15
L.nest_t.44664:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44658
  jmp L.nest_f.44659
L.nest_f.44665:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44662
  jmp L.nest_f.44663
L.nest_t.44666:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.44664
  jmp L.nest_f.44665
L.nest_f.44667:
  mov rax, 3134
  jmp r15
L.nest_t.44668:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.44654
  jmp L.nest_f.44655
L.nest_f.44669:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.44666
  jmp L.nest_f.44667
L.fixnum?.44615:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.44642
  jmp L.nest_f.44643
L.nest_t.44642:
  mov rax, 14
  jmp r15
L.nest_f.44643:
  mov rax, 6
  jmp r15
L.boolean?.44616:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.44640
  jmp L.nest_f.44641
L.nest_t.44640:
  mov rax, 14
  jmp r15
L.nest_f.44641:
  mov rax, 6
  jmp r15
L.empty?.44617:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.44638
  jmp L.nest_f.44639
L.nest_t.44638:
  mov rax, 14
  jmp r15
L.nest_f.44639:
  mov rax, 6
  jmp r15
L.void?.44618:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.44636
  jmp L.nest_f.44637
L.nest_t.44636:
  mov rax, 14
  jmp r15
L.nest_f.44637:
  mov rax, 6
  jmp r15
L.ascii-char?.44619:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.44634
  jmp L.nest_f.44635
L.nest_t.44634:
  mov rax, 14
  jmp r15
L.nest_f.44635:
  mov rax, 6
  jmp r15
L.error?.44620:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.44632
  jmp L.nest_f.44633
L.nest_t.44632:
  mov rax, 14
  jmp r15
L.nest_f.44633:
  mov rax, 6
  jmp r15
L.not.44621:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.44630
  jmp L.nest_f.44631
L.nest_t.44630:
  mov rax, 6
  jmp r15
L.nest_f.44631:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:276:5
actual:
  '("Failed on pass uniquify\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for '- #<continuation-mark-set> - (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    10
    10
    10
    10
    #<eof>
    10
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    10
    10
    10
    10
    10
    10
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for '(begin) #<continuation-mark-set> (begin) (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    10
    10
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    10
    10)
expected:   10
--------------------
/var/tmp/rkt15858001561585800156135.s:26: error: symbol `L.ascii$2d$char?.45226' undefined
/var/tmp/rkt15858001561585800156135.s:33: error: symbol `L.not.45225' undefined
/var/tmp/rkt15858001561585800156135.s:54: error: symbol `L.void?.45227' undefined
/var/tmp/rkt15858001561585800156135.s:119: error: symbol `L.not.45225' undefined
/var/tmp/rkt15858001561585800156135.s:929: error: symbol `L.error?.45228' undefined

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.45244:
  mov QWORD [rbp + 0], r15
  add rbp, 8
  mov rdx, 6
  mov rsi, 31022
  mov rdi, 32
  mov r15, L.rp.45245
  jmp L.raiseError.45224
L.raiseError.45224:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  mov QWORD [rbp + 16], rsi
  mov r15, rdx
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.45246
  jmp L.ascii$2d$char?.45226
L.rp.45246:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.45247
  jmp L.not.45225
L.rp.45247:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.45433
  jmp L.nest_f.45434
L.rp.45248:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 16
  mov rdi, r15
  mov r15, L.rp.45249
  jmp L.$2b$.45231
L.rp.45249:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.45250
  jmp L.void?.45227
L.rp.45250:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.45429
  jmp L.nest_f.45430
L.rp.45251:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 232
  mov rdi, r15
  mov r15, L.rp.45252
  jmp L.$2d$.45232
L.rp.45252:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.45253
  jmp L.$2d$.45232
L.rp.45253:
  sub rbp, 24
  mov QWORD [rbp + 8], rax
  mov rax, 17470
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.45429:
  mov rax, 22
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.45430:
  add rbp, 24
  mov rsi, 160
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.45251
  jmp L.$2b$.45231
L.rp.45254:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.45431
  jmp L.nest_f.45432
L.nest_t.45431:
  mov rax, QWORD [rbp + 16]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.45432:
  mov rdx, 22
  mov rsi, 24878
  mov rdi, 96
  mov r15, QWORD [rbp + 0]
  jmp L.$2b$.45231
L.nest_t.45433:
  add rbp, 24
  mov rsi, 0
  mov rdi, 112
  mov r15, L.rp.45248
  jmp L.$2a$.45230
L.nest_f.45434:
  add rbp, 24
  mov rdi, 14
  mov r15, L.rp.45254
  jmp L.not.45225
L.eq?.45229:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.45427
  jmp L.nest_f.45428
L.nest_t.45427:
  mov rax, 14
  jmp r15
L.nest_f.45428:
  mov rax, 6
  jmp r15
L.$2a$.45230:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45425
  jmp L.nest_f.45426
L.nest_t.45409:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45410:
  mov rax, 318
  jmp r15
L.nest_t.45411:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45412:
  mov rax, 318
  jmp r15
L.nest_t.45413:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45409
  jmp L.nest_f.45410
L.nest_f.45414:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45411
  jmp L.nest_f.45412
L.nest_t.45415:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45413
  jmp L.nest_f.45414
L.nest_f.45416:
  mov rax, 62
  jmp r15
L.nest_t.45417:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45418:
  mov rax, 318
  jmp r15
L.nest_t.45419:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45420:
  mov rax, 318
  jmp r15
L.nest_t.45421:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45417
  jmp L.nest_f.45418
L.nest_f.45422:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45419
  jmp L.nest_f.45420
L.nest_t.45423:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45421
  jmp L.nest_f.45422
L.nest_f.45424:
  mov rax, 62
  jmp r15
L.nest_t.45425:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45415
  jmp L.nest_f.45416
L.nest_f.45426:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45423
  jmp L.nest_f.45424
L.$2b$.45231:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45407
  jmp L.nest_f.45408
L.nest_t.45391:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45392:
  mov rax, 830
  jmp r15
L.nest_t.45393:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45394:
  mov rax, 830
  jmp r15
L.nest_t.45395:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45391
  jmp L.nest_f.45392
L.nest_f.45396:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45393
  jmp L.nest_f.45394
L.nest_t.45397:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45395
  jmp L.nest_f.45396
L.nest_f.45398:
  mov rax, 574
  jmp r15
L.nest_t.45399:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45400:
  mov rax, 830
  jmp r15
L.nest_t.45401:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45402:
  mov rax, 830
  jmp r15
L.nest_t.45403:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45399
  jmp L.nest_f.45400
L.nest_f.45404:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45401
  jmp L.nest_f.45402
L.nest_t.45405:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45403
  jmp L.nest_f.45404
L.nest_f.45406:
  mov rax, 574
  jmp r15
L.nest_t.45407:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45397
  jmp L.nest_f.45398
L.nest_f.45408:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45405
  jmp L.nest_f.45406
L.$2d$.45232:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45389
  jmp L.nest_f.45390
L.nest_t.45373:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45374:
  mov rax, 1342
  jmp r15
L.nest_t.45375:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45376:
  mov rax, 1342
  jmp r15
L.nest_t.45377:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45373
  jmp L.nest_f.45374
L.nest_f.45378:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45375
  jmp L.nest_f.45376
L.nest_t.45379:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45377
  jmp L.nest_f.45378
L.nest_f.45380:
  mov rax, 1086
  jmp r15
L.nest_t.45381:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45382:
  mov rax, 1342
  jmp r15
L.nest_t.45383:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.45384:
  mov rax, 1342
  jmp r15
L.nest_t.45385:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45381
  jmp L.nest_f.45382
L.nest_f.45386:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45383
  jmp L.nest_f.45384
L.nest_t.45387:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45385
  jmp L.nest_f.45386
L.nest_f.45388:
  mov rax, 1086
  jmp r15
L.nest_t.45389:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45379
  jmp L.nest_f.45380
L.nest_f.45390:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45387
  jmp L.nest_f.45388
L.$3c$.45233:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45371
  jmp L.nest_f.45372
L.nest_t.45347:
  mov rax, 14
  jmp r15
L.nest_f.45348:
  mov rax, 6
  jmp r15
L.nest_t.45349:
  cmp r14, r13
  jl L.nest_t.45347
  jmp L.nest_f.45348
L.nest_f.45350:
  mov rax, 1854
  jmp r15
L.nest_t.45351:
  mov rax, 14
  jmp r15
L.nest_f.45352:
  mov rax, 6
  jmp r15
L.nest_t.45353:
  cmp r14, r13
  jl L.nest_t.45351
  jmp L.nest_f.45352
L.nest_f.45354:
  mov rax, 1854
  jmp r15
L.nest_t.45355:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45349
  jmp L.nest_f.45350
L.nest_f.45356:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45353
  jmp L.nest_f.45354
L.nest_t.45357:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45355
  jmp L.nest_f.45356
L.nest_f.45358:
  mov rax, 1598
  jmp r15
L.nest_t.45359:
  mov rax, 14
  jmp r15
L.nest_f.45360:
  mov rax, 6
  jmp r15
L.nest_t.45361:
  cmp r14, r13
  jl L.nest_t.45359
  jmp L.nest_f.45360
L.nest_f.45362:
  mov rax, 1854
  jmp r15
L.nest_t.45363:
  mov rax, 14
  jmp r15
L.nest_f.45364:
  mov rax, 6
  jmp r15
L.nest_t.45365:
  cmp r14, r13
  jl L.nest_t.45363
  jmp L.nest_f.45364
L.nest_f.45366:
  mov rax, 1854
  jmp r15
L.nest_t.45367:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45361
  jmp L.nest_f.45362
L.nest_f.45368:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45365
  jmp L.nest_f.45366
L.nest_t.45369:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45367
  jmp L.nest_f.45368
L.nest_f.45370:
  mov rax, 1598
  jmp r15
L.nest_t.45371:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45357
  jmp L.nest_f.45358
L.nest_f.45372:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45369
  jmp L.nest_f.45370
L.$3c$$3d$.45234:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45345
  jmp L.nest_f.45346
L.nest_t.45321:
  mov rax, 14
  jmp r15
L.nest_f.45322:
  mov rax, 6
  jmp r15
L.nest_t.45323:
  cmp r14, r13
  jle L.nest_t.45321
  jmp L.nest_f.45322
L.nest_f.45324:
  mov rax, 2366
  jmp r15
L.nest_t.45325:
  mov rax, 14
  jmp r15
L.nest_f.45326:
  mov rax, 6
  jmp r15
L.nest_t.45327:
  cmp r14, r13
  jle L.nest_t.45325
  jmp L.nest_f.45326
L.nest_f.45328:
  mov rax, 2366
  jmp r15
L.nest_t.45329:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45323
  jmp L.nest_f.45324
L.nest_f.45330:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45327
  jmp L.nest_f.45328
L.nest_t.45331:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45329
  jmp L.nest_f.45330
L.nest_f.45332:
  mov rax, 2110
  jmp r15
L.nest_t.45333:
  mov rax, 14
  jmp r15
L.nest_f.45334:
  mov rax, 6
  jmp r15
L.nest_t.45335:
  cmp r14, r13
  jle L.nest_t.45333
  jmp L.nest_f.45334
L.nest_f.45336:
  mov rax, 2366
  jmp r15
L.nest_t.45337:
  mov rax, 14
  jmp r15
L.nest_f.45338:
  mov rax, 6
  jmp r15
L.nest_t.45339:
  cmp r14, r13
  jle L.nest_t.45337
  jmp L.nest_f.45338
L.nest_f.45340:
  mov rax, 2366
  jmp r15
L.nest_t.45341:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45335
  jmp L.nest_f.45336
L.nest_f.45342:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45339
  jmp L.nest_f.45340
L.nest_t.45343:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45341
  jmp L.nest_f.45342
L.nest_f.45344:
  mov rax, 2110
  jmp r15
L.nest_t.45345:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45331
  jmp L.nest_f.45332
L.nest_f.45346:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45343
  jmp L.nest_f.45344
L.$3e$.45235:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45319
  jmp L.nest_f.45320
L.nest_t.45295:
  mov rax, 14
  jmp r15
L.nest_f.45296:
  mov rax, 6
  jmp r15
L.nest_t.45297:
  cmp r14, r13
  jg L.nest_t.45295
  jmp L.nest_f.45296
L.nest_f.45298:
  mov rax, 2878
  jmp r15
L.nest_t.45299:
  mov rax, 14
  jmp r15
L.nest_f.45300:
  mov rax, 6
  jmp r15
L.nest_t.45301:
  cmp r14, r13
  jg L.nest_t.45299
  jmp L.nest_f.45300
L.nest_f.45302:
  mov rax, 2878
  jmp r15
L.nest_t.45303:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45297
  jmp L.nest_f.45298
L.nest_f.45304:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45301
  jmp L.nest_f.45302
L.nest_t.45305:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45303
  jmp L.nest_f.45304
L.nest_f.45306:
  mov rax, 2622
  jmp r15
L.nest_t.45307:
  mov rax, 14
  jmp r15
L.nest_f.45308:
  mov rax, 6
  jmp r15
L.nest_t.45309:
  cmp r14, r13
  jg L.nest_t.45307
  jmp L.nest_f.45308
L.nest_f.45310:
  mov rax, 2878
  jmp r15
L.nest_t.45311:
  mov rax, 14
  jmp r15
L.nest_f.45312:
  mov rax, 6
  jmp r15
L.nest_t.45313:
  cmp r14, r13
  jg L.nest_t.45311
  jmp L.nest_f.45312
L.nest_f.45314:
  mov rax, 2878
  jmp r15
L.nest_t.45315:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45309
  jmp L.nest_f.45310
L.nest_f.45316:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45313
  jmp L.nest_f.45314
L.nest_t.45317:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45315
  jmp L.nest_f.45316
L.nest_f.45318:
  mov rax, 2622
  jmp r15
L.nest_t.45319:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45305
  jmp L.nest_f.45306
L.nest_f.45320:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45317
  jmp L.nest_f.45318
L.$3e$$3d$.45236:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45293
  jmp L.nest_f.45294
L.nest_t.45269:
  mov rax, 14
  jmp r15
L.nest_f.45270:
  mov rax, 6
  jmp r15
L.nest_t.45271:
  cmp r14, r13
  jge L.nest_t.45269
  jmp L.nest_f.45270
L.nest_f.45272:
  mov rax, 3390
  jmp r15
L.nest_t.45273:
  mov rax, 14
  jmp r15
L.nest_f.45274:
  mov rax, 6
  jmp r15
L.nest_t.45275:
  cmp r14, r13
  jge L.nest_t.45273
  jmp L.nest_f.45274
L.nest_f.45276:
  mov rax, 3390
  jmp r15
L.nest_t.45277:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45271
  jmp L.nest_f.45272
L.nest_f.45278:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45275
  jmp L.nest_f.45276
L.nest_t.45279:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45277
  jmp L.nest_f.45278
L.nest_f.45280:
  mov rax, 3134
  jmp r15
L.nest_t.45281:
  mov rax, 14
  jmp r15
L.nest_f.45282:
  mov rax, 6
  jmp r15
L.nest_t.45283:
  cmp r14, r13
  jge L.nest_t.45281
  jmp L.nest_f.45282
L.nest_f.45284:
  mov rax, 3390
  jmp r15
L.nest_t.45285:
  mov rax, 14
  jmp r15
L.nest_f.45286:
  mov rax, 6
  jmp r15
L.nest_t.45287:
  cmp r14, r13
  jge L.nest_t.45285
  jmp L.nest_f.45286
L.nest_f.45288:
  mov rax, 3390
  jmp r15
L.nest_t.45289:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45283
  jmp L.nest_f.45284
L.nest_f.45290:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45287
  jmp L.nest_f.45288
L.nest_t.45291:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.45289
  jmp L.nest_f.45290
L.nest_f.45292:
  mov rax, 3134
  jmp r15
L.nest_t.45293:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.45279
  jmp L.nest_f.45280
L.nest_f.45294:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.45291
  jmp L.nest_f.45292
L.fixnum?.45237:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.45267
  jmp L.nest_f.45268
L.nest_t.45267:
  mov rax, 14
  jmp r15
L.nest_f.45268:
  mov rax, 6
  jmp r15
L.boolean?.45238:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.45265
  jmp L.nest_f.45266
L.nest_t.45265:
  mov rax, 14
  jmp r15
L.nest_f.45266:
  mov rax, 6
  jmp r15
L.empty?.45239:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.45263
  jmp L.nest_f.45264
L.nest_t.45263:
  mov rax, 14
  jmp r15
L.nest_f.45264:
  mov rax, 6
  jmp r15
L.void?.45240:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.45261
  jmp L.nest_f.45262
L.nest_t.45261:
  mov rax, 14
  jmp r15
L.nest_f.45262:
  mov rax, 6
  jmp r15
L.ascii$2d$char?.45241:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.45259
  jmp L.nest_f.45260
L.nest_t.45259:
  mov rax, 14
  jmp r15
L.nest_f.45260:
  mov rax, 6
  jmp r15
L.error?.45242:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.45257
  jmp L.nest_f.45258
L.nest_t.45257:
  mov rax, 14
  jmp r15
L.nest_f.45258:
  mov rax, 6
  jmp r15
L.not.45243:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.45255
  jmp L.nest_f.45256
L.nest_t.45255:
  mov rax, 6
  jmp r15
L.nest_f.45256:
  mov rax, 14
  jmp r15
L.rp.45245:
  sub rbp, 8
  mov r15, rax
  mov rdi, r15
  mov r15, QWORD [rbp + 0]
  jmp L.error?.45228

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg
expose-basic-blocks: (module (define L.main.48158 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (return-point L.rp.48159 (begin (set! rdx 6) (set! rsi 31022) (set! rdi 32) (set! r15 L.rp.48159) (jump L.raiseError.48142))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.error?.48156))) (define L.not.48157 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.48156 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.48155 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.48154 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.48153 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.48152 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.48151 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.48150 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.48149 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.48148 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.48147 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.48146 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.48145 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.48144 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.48143 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.raiseError.48142 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! r15 rdx) (set! rbp (+ rbp 24)) (return-point L.rp.48160 (begin (set! rdi r15) (set! r15 L.rp.48160) (jump L.ascii-char?.48155))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48161 (begin (set! rdi r15) (set! r15 L.rp.48161) (jump L.not.48157))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48162 (begin (set! rsi 0) (set! rdi 112) (set! r15 L.rp.48162) (jump L.*.48144))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48163 (begin (set! rsi 16) (set! rdi r15) (set! r15 L.rp.48163) (jump L.+.48145))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48164 (begin (set! rdi r15) (set! r15 L.rp.48164) (jump L.void?.48154))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 22) (jump (rbp + 0))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48165 (begin (set! rsi 160) (set! rdi (rbp + -16)) (set! r15 L.rp.48165) (jump L.+.48145))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48166 (begin (set! rsi 232) (set! rdi r15) (set! r15 L.rp.48166) (jump L.-.48146))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48167 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.48167) (jump L.-.48146))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax 17470) (jump (rbp + 0))))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48168 (begin (set! rdi 14) (set! r15 L.rp.48168) (jump L.not.48157))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 16)) (jump (rbp + 0))) (begin (set! rdx 22) (set! rsi 24878) (set! rdi 96) (set! r15 (rbp + 0)) (jump L.+.48145))))))))
process-rp: (begin (set! rdx 6) (set! rsi 31022) (set! rdi 32) (set! r15 L.rp.48159) (jump L.raiseError.48142))
process-rp: (jump L.raiseError.48142)
updating tai with: (set! rbp (- rbp 8))
updating tai with: (set! r15 rax)
updating tai with: (set! rdi r15)
updating tai with: (set! r15 (rbp + 0))
updating tai with: (jump L.error?.48156)
process-rp: (begin (set! rdi r15) (set! r15 L.rp.48160) (jump L.ascii-char?.48155))
process-rp: (jump L.ascii-char?.48155)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (set! rbp (+ rbp 24))
process-rp: (begin (set! rdi r15) (set! r15 L.rp.48161) (jump L.not.48157))
process-rp: (jump L.not.48157)
updating tai with: (set! rbp (- rbp 24))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48162 (begin (set! rsi 0) (set! rdi 112) (set! r15 L.rp.48162) (jump L.*.48144))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48163 (begin (set! rsi 16) (set! rdi r15) (set! r15 L.rp.48163) (jump L.+.48145))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48164 (begin (set! rdi r15) (set! r15 L.rp.48164) (jump L.void?.48154))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 22) (jump (rbp + 0))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48165 (begin (set! rsi 160) (set! rdi (rbp + -16)) (set! r15 L.rp.48165) (jump L.+.48145))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48166 (begin (set! rsi 232) (set! rdi r15) (set! r15 L.rp.48166) (jump L.-.48146))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (return-point L.rp.48167 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.48167) (jump L.-.48146))) (set! rbp (- rbp 24)) (set! r15 rax) (set! rax 17470) (jump (rbp + 0))))) (begin (set! rbp (+ rbp 24)) (return-point L.rp.48168 (begin (set! rdi 14) (set! r15 L.rp.48168) (jump L.not.48157))) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax (rbp + 16)) (jump (rbp + 0))) (begin (set! rdx 22) (set! rsi 24878) (set! rdi 96) (set! r15 (rbp + 0)) (jump L.+.48145)))))
create-return-point-blocktwo: (return-point L.rp.48161 (begin ((if (neq? r15 6) (jump L.tmp.48501) (jump L.tmp.48507)) (set! r15 rax) (set! rbp (- rbp 24)) (set! rbp (+ rbp 24)) (set! r15 rax) (set! rbp (- rbp 24)) (jump L.error?.48156) (set! r15 (rbp + 0)) (set! rdi r15) (set! r15 rax) (set! rbp (- rbp 8)))))
parse-rp-tail (begin ((set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.error?.48156) (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.48501) (jump L.tmp.48507))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.48501) (jump L.tmp.48507))
parse-rp-tail (jump L.tmp.48501)
parse-rp-tail (jump L.tmp.48507)
flatten (module (define L.main.48529 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (set! rdx 6) (set! rsi 31022) (set! rdi 32) (set! r15 L.rp.48530) (jump L.raiseError.48513))) (define L.raiseError.48513 () (begin (set! (rbp + 0) r15) (set! (rbp + 8) rdi) (set! (rbp + 16) rsi) (set! r15 rdx) (set! rbp (+ rbp 24)) (set! rdi r15) (set! r15 L.rp.48531) (jump L.ascii-char?.48526))) (define L.rp.48531 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rdi r15) (set! r15 L.rp.48532) (jump L.not.48528))) (define L.rp.48532 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.48718) (jump L.nest_f.48719)))) (define L.rp.48533 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rsi 16) (set! rdi r15) (set! r15 L.rp.48534) (jump L.+.48516))) (define L.rp.48534 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rdi r15) (set! r15 L.rp.48535) (jump L.void?.48525))) (define L.rp.48535 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.48714) (jump L.nest_f.48715)))) (define L.rp.48536 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rsi 232) (set! rdi r15) (set! r15 L.rp.48537) (jump L.-.48517))) (define L.rp.48537 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rbp (+ rbp 24)) (set! rsi 0) (set! rdi r15) (set! r15 L.rp.48538) (jump L.-.48517))) (define L.rp.48538 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (set! rax 17470) (jump (rbp + 0)))) (define L.nest_t.48714 () (begin (set! rax 22) (jump (rbp + 0)))) (define L.nest_f.48715 () (begin (set! rbp (+ rbp 24)) (set! rsi 160) (set! rdi (rbp + -16)) (set! r15 L.rp.48536) (jump L.+.48516))) (define L.rp.48539 () (begin (set! rbp (- rbp 24)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.48716) (jump L.nest_f.48717)))) (define L.nest_t.48716 () (begin (set! rax (rbp + 16)) (jump (rbp + 0)))) (define L.nest_f.48717 () (begin (set! rdx 22) (set! rsi 24878) (set! rdi 96) (set! r15 (rbp + 0)) (jump L.+.48516))) (define L.nest_t.48718 () (begin (set! rbp (+ rbp 24)) (set! rsi 0) (set! rdi 112) (set! r15 L.rp.48533) (jump L.*.48515))) (define L.nest_f.48719 () (begin (set! rbp (+ rbp 24)) (set! rdi 14) (set! r15 L.rp.48539) (jump L.not.48528))) (define L.eq?.48514 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.48712) (jump L.nest_f.48713)))) (define L.nest_t.48712 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48713 () (begin (set! rax 6) (jump r15))) (define L.*.48515 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48710) (jump L.nest_f.48711)))) (define L.nest_t.48694 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48695 () (begin (set! rax 318) (jump r15))) (define L.nest_t.48696 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48697 () (begin (set! rax 318) (jump r15))) (define L.nest_t.48698 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48694) (jump L.nest_f.48695)))) (define L.nest_f.48699 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48696) (jump L.nest_f.48697)))) (define L.nest_t.48700 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48698) (jump L.nest_f.48699)))) (define L.nest_f.48701 () (begin (set! rax 62) (jump r15))) (define L.nest_t.48702 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48703 () (begin (set! rax 318) (jump r15))) (define L.nest_t.48704 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48705 () (begin (set! rax 318) (jump r15))) (define L.nest_t.48706 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48702) (jump L.nest_f.48703)))) (define L.nest_f.48707 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48704) (jump L.nest_f.48705)))) (define L.nest_t.48708 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48706) (jump L.nest_f.48707)))) (define L.nest_f.48709 () (begin (set! rax 62) (jump r15))) (define L.nest_t.48710 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48700) (jump L.nest_f.48701)))) (define L.nest_f.48711 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48708) (jump L.nest_f.48709)))) (define L.+.48516 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48692) (jump L.nest_f.48693)))) (define L.nest_t.48676 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48677 () (begin (set! rax 830) (jump r15))) (define L.nest_t.48678 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48679 () (begin (set! rax 830) (jump r15))) (define L.nest_t.48680 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48676) (jump L.nest_f.48677)))) (define L.nest_f.48681 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48678) (jump L.nest_f.48679)))) (define L.nest_t.48682 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48680) (jump L.nest_f.48681)))) (define L.nest_f.48683 () (begin (set! rax 574) (jump r15))) (define L.nest_t.48684 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48685 () (begin (set! rax 830) (jump r15))) (define L.nest_t.48686 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48687 () (begin (set! rax 830) (jump r15))) (define L.nest_t.48688 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48684) (jump L.nest_f.48685)))) (define L.nest_f.48689 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48686) (jump L.nest_f.48687)))) (define L.nest_t.48690 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48688) (jump L.nest_f.48689)))) (define L.nest_f.48691 () (begin (set! rax 574) (jump r15))) (define L.nest_t.48692 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48682) (jump L.nest_f.48683)))) (define L.nest_f.48693 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48690) (jump L.nest_f.48691)))) (define L.-.48517 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48674) (jump L.nest_f.48675)))) (define L.nest_t.48658 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48659 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.48660 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48661 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.48662 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48658) (jump L.nest_f.48659)))) (define L.nest_f.48663 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48660) (jump L.nest_f.48661)))) (define L.nest_t.48664 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48662) (jump L.nest_f.48663)))) (define L.nest_f.48665 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.48666 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48667 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.48668 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.48669 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.48670 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48666) (jump L.nest_f.48667)))) (define L.nest_f.48671 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48668) (jump L.nest_f.48669)))) (define L.nest_t.48672 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48670) (jump L.nest_f.48671)))) (define L.nest_f.48673 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.48674 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48664) (jump L.nest_f.48665)))) (define L.nest_f.48675 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48672) (jump L.nest_f.48673)))) (define L.<.48518 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48656) (jump L.nest_f.48657)))) (define L.nest_t.48632 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48633 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48634 () (if (< r14 r13) (jump L.nest_t.48632) (jump L.nest_f.48633))) (define L.nest_f.48635 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.48636 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48637 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48638 () (if (< r14 r13) (jump L.nest_t.48636) (jump L.nest_f.48637))) (define L.nest_f.48639 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.48640 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48634) (jump L.nest_f.48635)))) (define L.nest_f.48641 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48638) (jump L.nest_f.48639)))) (define L.nest_t.48642 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48640) (jump L.nest_f.48641)))) (define L.nest_f.48643 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.48644 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48645 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48646 () (if (< r14 r13) (jump L.nest_t.48644) (jump L.nest_f.48645))) (define L.nest_f.48647 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.48648 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48649 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48650 () (if (< r14 r13) (jump L.nest_t.48648) (jump L.nest_f.48649))) (define L.nest_f.48651 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.48652 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48646) (jump L.nest_f.48647)))) (define L.nest_f.48653 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48650) (jump L.nest_f.48651)))) (define L.nest_t.48654 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48652) (jump L.nest_f.48653)))) (define L.nest_f.48655 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.48656 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48642) (jump L.nest_f.48643)))) (define L.nest_f.48657 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48654) (jump L.nest_f.48655)))) (define L.<=.48519 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48630) (jump L.nest_f.48631)))) (define L.nest_t.48606 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48607 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48608 () (if (<= r14 r13) (jump L.nest_t.48606) (jump L.nest_f.48607))) (define L.nest_f.48609 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.48610 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48611 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48612 () (if (<= r14 r13) (jump L.nest_t.48610) (jump L.nest_f.48611))) (define L.nest_f.48613 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.48614 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48608) (jump L.nest_f.48609)))) (define L.nest_f.48615 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48612) (jump L.nest_f.48613)))) (define L.nest_t.48616 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48614) (jump L.nest_f.48615)))) (define L.nest_f.48617 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.48618 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48619 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48620 () (if (<= r14 r13) (jump L.nest_t.48618) (jump L.nest_f.48619))) (define L.nest_f.48621 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.48622 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48623 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48624 () (if (<= r14 r13) (jump L.nest_t.48622) (jump L.nest_f.48623))) (define L.nest_f.48625 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.48626 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48620) (jump L.nest_f.48621)))) (define L.nest_f.48627 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48624) (jump L.nest_f.48625)))) (define L.nest_t.48628 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48626) (jump L.nest_f.48627)))) (define L.nest_f.48629 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.48630 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48616) (jump L.nest_f.48617)))) (define L.nest_f.48631 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48628) (jump L.nest_f.48629)))) (define L.>.48520 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48604) (jump L.nest_f.48605)))) (define L.nest_t.48580 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48581 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48582 () (if (> r14 r13) (jump L.nest_t.48580) (jump L.nest_f.48581))) (define L.nest_f.48583 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.48584 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48585 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48586 () (if (> r14 r13) (jump L.nest_t.48584) (jump L.nest_f.48585))) (define L.nest_f.48587 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.48588 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48582) (jump L.nest_f.48583)))) (define L.nest_f.48589 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48586) (jump L.nest_f.48587)))) (define L.nest_t.48590 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48588) (jump L.nest_f.48589)))) (define L.nest_f.48591 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.48592 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48593 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48594 () (if (> r14 r13) (jump L.nest_t.48592) (jump L.nest_f.48593))) (define L.nest_f.48595 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.48596 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48597 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48598 () (if (> r14 r13) (jump L.nest_t.48596) (jump L.nest_f.48597))) (define L.nest_f.48599 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.48600 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48594) (jump L.nest_f.48595)))) (define L.nest_f.48601 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48598) (jump L.nest_f.48599)))) (define L.nest_t.48602 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48600) (jump L.nest_f.48601)))) (define L.nest_f.48603 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.48604 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48590) (jump L.nest_f.48591)))) (define L.nest_f.48605 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48602) (jump L.nest_f.48603)))) (define L.>=.48521 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48578) (jump L.nest_f.48579)))) (define L.nest_t.48554 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48555 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48556 () (if (>= r14 r13) (jump L.nest_t.48554) (jump L.nest_f.48555))) (define L.nest_f.48557 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.48558 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48559 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48560 () (if (>= r14 r13) (jump L.nest_t.48558) (jump L.nest_f.48559))) (define L.nest_f.48561 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.48562 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48556) (jump L.nest_f.48557)))) (define L.nest_f.48563 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48560) (jump L.nest_f.48561)))) (define L.nest_t.48564 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48562) (jump L.nest_f.48563)))) (define L.nest_f.48565 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.48566 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48567 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48568 () (if (>= r14 r13) (jump L.nest_t.48566) (jump L.nest_f.48567))) (define L.nest_f.48569 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.48570 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48571 () (begin (set! rax 6) (jump r15))) (define L.nest_t.48572 () (if (>= r14 r13) (jump L.nest_t.48570) (jump L.nest_f.48571))) (define L.nest_f.48573 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.48574 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48568) (jump L.nest_f.48569)))) (define L.nest_f.48575 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48572) (jump L.nest_f.48573)))) (define L.nest_t.48576 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.48574) (jump L.nest_f.48575)))) (define L.nest_f.48577 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.48578 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.48564) (jump L.nest_f.48565)))) (define L.nest_f.48579 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.48576) (jump L.nest_f.48577)))) (define L.fixnum?.48522 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.48552) (jump L.nest_f.48553)))) (define L.nest_t.48552 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48553 () (begin (set! rax 6) (jump r15))) (define L.boolean?.48523 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.48550) (jump L.nest_f.48551)))) (define L.nest_t.48550 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48551 () (begin (set! rax 6) (jump r15))) (define L.empty?.48524 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.48548) (jump L.nest_f.48549)))) (define L.nest_t.48548 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48549 () (begin (set! rax 6) (jump r15))) (define L.void?.48525 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.48546) (jump L.nest_f.48547)))) (define L.nest_t.48546 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48547 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.48526 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.48544) (jump L.nest_f.48545)))) (define L.nest_t.48544 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48545 () (begin (set! rax 6) (jump r15))) (define L.error?.48527 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.48542) (jump L.nest_f.48543)))) (define L.nest_t.48542 () (begin (set! rax 14) (jump r15))) (define L.nest_f.48543 () (begin (set! rax 6) (jump r15))) (define L.not.48528 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.48540) (jump L.nest_f.48541)))) (define L.nest_t.48540 () (begin (set! rax 6) (jump r15))) (define L.nest_f.48541 () (begin (set! rax 14) (jump r15))) (define L.rp.48530 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.error?.48527))))/var/tmp/rkt15858001831585800183219.s:132: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:223: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:223: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:310: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:310: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:397: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:397: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:508: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:508: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:619: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:619: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:730: error: symbol `L.' redefined
/var/tmp/rkt15858001831585800183219.s:730: error: parser: instruction expected
/var/tmp/rkt15858001831585800183219.s:889: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.48943:
  mov QWORD [rbp + 0], r15
  add rbp, 8
  mov rdx, 6
  mov rsi, 31022
  mov rdi, 32
  mov r15, L.rp.48944
  jmp L.raiseError.48927
L.raiseError.48927:
  mov QWORD [rbp + 0], r15
  mov QWORD [rbp + 8], rdi
  mov QWORD [rbp + 16], rsi
  mov r15, rdx
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.48945
  jmp L.ascii-char?.48940
L.rp.48945:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.48946
  jmp L.not.48942
L.rp.48946:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49132
  jmp L.nest_f.49133
L.rp.48947:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 16
  mov rdi, r15
  mov r15, L.rp.48948
  jmp L.+.48930
L.rp.48948:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rdi, r15
  mov r15, L.rp.48949
  jmp L.void?.48939
L.rp.48949:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49128
  jmp L.nest_f.49129
L.rp.48950:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 232
  mov rdi, r15
  mov r15, L.rp.48951
  jmp L.-.48931
L.rp.48951:
  sub rbp, 24
  mov r15, rax
  add rbp, 24
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.48952
  jmp L.-.48931
L.rp.48952:
  sub rbp, 24
  mov r15, rax
  mov rax, 17470
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_t.49128:
  mov rax, 22
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.49129:
  add rbp, 24
  mov rsi, 160
  mov rdi, QWORD [rbp + -16]
  mov r15, L.rp.48950
  jmp L.+.48930
L.rp.48953:
  sub rbp, 24
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49130
  jmp L.nest_f.49131
L.nest_t.49130:
  mov rax, QWORD [rbp + 16]
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.49131:
  mov rdx, 22
  mov rsi, 24878
  mov rdi, 96
  mov r15, QWORD [rbp + 0]
  jmp L.+.48930
L.nest_t.49132:
  add rbp, 24
  mov rsi, 0
  mov rdi, 112
  mov r15, L.rp.48947
  jmp L.*.48929
L.nest_f.49133:
  add rbp, 24
  mov rdi, 14
  mov r15, L.rp.48953
  jmp L.not.48942
L.eq?.48928:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.49126
  jmp L.nest_f.49127
L.nest_t.49126:
  mov rax, 14
  jmp r15
L.nest_f.49127:
  mov rax, 6
  jmp r15
L.*.48929:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49124
  jmp L.nest_f.49125
L.nest_t.49108:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49109:
  mov rax, 318
  jmp r15
L.nest_t.49110:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49111:
  mov rax, 318
  jmp r15
L.nest_t.49112:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49108
  jmp L.nest_f.49109
L.nest_f.49113:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49110
  jmp L.nest_f.49111
L.nest_t.49114:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49112
  jmp L.nest_f.49113
L.nest_f.49115:
  mov rax, 62
  jmp r15
L.nest_t.49116:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49117:
  mov rax, 318
  jmp r15
L.nest_t.49118:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49119:
  mov rax, 318
  jmp r15
L.nest_t.49120:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49116
  jmp L.nest_f.49117
L.nest_f.49121:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49118
  jmp L.nest_f.49119
L.nest_t.49122:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49120
  jmp L.nest_f.49121
L.nest_f.49123:
  mov rax, 62
  jmp r15
L.nest_t.49124:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49114
  jmp L.nest_f.49115
L.nest_f.49125:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49122
  jmp L.nest_f.49123
L.+.48930:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49106
  jmp L.nest_f.49107
L.nest_t.49090:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49091:
  mov rax, 830
  jmp r15
L.nest_t.49092:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49093:
  mov rax, 830
  jmp r15
L.nest_t.49094:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49090
  jmp L.nest_f.49091
L.nest_f.49095:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49092
  jmp L.nest_f.49093
L.nest_t.49096:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49094
  jmp L.nest_f.49095
L.nest_f.49097:
  mov rax, 574
  jmp r15
L.nest_t.49098:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49099:
  mov rax, 830
  jmp r15
L.nest_t.49100:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49101:
  mov rax, 830
  jmp r15
L.nest_t.49102:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49098
  jmp L.nest_f.49099
L.nest_f.49103:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49100
  jmp L.nest_f.49101
L.nest_t.49104:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49102
  jmp L.nest_f.49103
L.nest_f.49105:
  mov rax, 574
  jmp r15
L.nest_t.49106:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49096
  jmp L.nest_f.49097
L.nest_f.49107:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49104
  jmp L.nest_f.49105
L.-.48931:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49088
  jmp L.nest_f.49089
L.nest_t.49072:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49073:
  mov rax, 1342
  jmp r15
L.nest_t.49074:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49075:
  mov rax, 1342
  jmp r15
L.nest_t.49076:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49072
  jmp L.nest_f.49073
L.nest_f.49077:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49074
  jmp L.nest_f.49075
L.nest_t.49078:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49076
  jmp L.nest_f.49077
L.nest_f.49079:
  mov rax, 1086
  jmp r15
L.nest_t.49080:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49081:
  mov rax, 1342
  jmp r15
L.nest_t.49082:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49083:
  mov rax, 1342
  jmp r15
L.nest_t.49084:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49080
  jmp L.nest_f.49081
L.nest_f.49085:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49082
  jmp L.nest_f.49083
L.nest_t.49086:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49084
  jmp L.nest_f.49085
L.nest_f.49087:
  mov rax, 1086
  jmp r15
L.nest_t.49088:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49078
  jmp L.nest_f.49079
L.nest_f.49089:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49086
  jmp L.nest_f.49087
L.<.48932:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49070
  jmp L.nest_f.49071
L.nest_t.49046:
  mov rax, 14
  jmp r15
L.nest_f.49047:
  mov rax, 6
  jmp r15
L.nest_t.49048:
  cmp r14, r13
  jl L.nest_t.49046
  jmp L.nest_f.49047
L.nest_f.49049:
  mov rax, 1854
  jmp r15
L.nest_t.49050:
  mov rax, 14
  jmp r15
L.nest_f.49051:
  mov rax, 6
  jmp r15
L.nest_t.49052:
  cmp r14, r13
  jl L.nest_t.49050
  jmp L.nest_f.49051
L.nest_f.49053:
  mov rax, 1854
  jmp r15
L.nest_t.49054:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49048
  jmp L.nest_f.49049
L.nest_f.49055:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49052
  jmp L.nest_f.49053
L.nest_t.49056:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49054
  jmp L.nest_f.49055
L.nest_f.49057:
  mov rax, 1598
  jmp r15
L.nest_t.49058:
  mov rax, 14
  jmp r15
L.nest_f.49059:
  mov rax, 6
  jmp r15
L.nest_t.49060:
  cmp r14, r13
  jl L.nest_t.49058
  jmp L.nest_f.49059
L.nest_f.49061:
  mov rax, 1854
  jmp r15
L.nest_t.49062:
  mov rax, 14
  jmp r15
L.nest_f.49063:
  mov rax, 6
  jmp r15
L.nest_t.49064:
  cmp r14, r13
  jl L.nest_t.49062
  jmp L.nest_f.49063
L.nest_f.49065:
  mov rax, 1854
  jmp r15
L.nest_t.49066:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49060
  jmp L.nest_f.49061
L.nest_f.49067:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49064
  jmp L.nest_f.49065
L.nest_t.49068:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49066
  jmp L.nest_f.49067
L.nest_f.49069:
  mov rax, 1598
  jmp r15
L.nest_t.49070:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49056
  jmp L.nest_f.49057
L.nest_f.49071:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49068
  jmp L.nest_f.49069
L.<=.48933:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49044
  jmp L.nest_f.49045
L.nest_t.49020:
  mov rax, 14
  jmp r15
L.nest_f.49021:
  mov rax, 6
  jmp r15
L.nest_t.49022:
  cmp r14, r13
  jle L.nest_t.49020
  jmp L.nest_f.49021
L.nest_f.49023:
  mov rax, 2366
  jmp r15
L.nest_t.49024:
  mov rax, 14
  jmp r15
L.nest_f.49025:
  mov rax, 6
  jmp r15
L.nest_t.49026:
  cmp r14, r13
  jle L.nest_t.49024
  jmp L.nest_f.49025
L.nest_f.49027:
  mov rax, 2366
  jmp r15
L.nest_t.49028:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49022
  jmp L.nest_f.49023
L.nest_f.49029:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49026
  jmp L.nest_f.49027
L.nest_t.49030:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49028
  jmp L.nest_f.49029
L.nest_f.49031:
  mov rax, 2110
  jmp r15
L.nest_t.49032:
  mov rax, 14
  jmp r15
L.nest_f.49033:
  mov rax, 6
  jmp r15
L.nest_t.49034:
  cmp r14, r13
  jle L.nest_t.49032
  jmp L.nest_f.49033
L.nest_f.49035:
  mov rax, 2366
  jmp r15
L.nest_t.49036:
  mov rax, 14
  jmp r15
L.nest_f.49037:
  mov rax, 6
  jmp r15
L.nest_t.49038:
  cmp r14, r13
  jle L.nest_t.49036
  jmp L.nest_f.49037
L.nest_f.49039:
  mov rax, 2366
  jmp r15
L.nest_t.49040:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49034
  jmp L.nest_f.49035
L.nest_f.49041:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49038
  jmp L.nest_f.49039
L.nest_t.49042:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49040
  jmp L.nest_f.49041
L.nest_f.49043:
  mov rax, 2110
  jmp r15
L.nest_t.49044:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49030
  jmp L.nest_f.49031
L.nest_f.49045:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49042
  jmp L.nest_f.49043
L.>.48934:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49018
  jmp L.nest_f.49019
L.nest_t.48994:
  mov rax, 14
  jmp r15
L.nest_f.48995:
  mov rax, 6
  jmp r15
L.nest_t.48996:
  cmp r14, r13
  jg L.nest_t.48994
  jmp L.nest_f.48995
L.nest_f.48997:
  mov rax, 2878
  jmp r15
L.nest_t.48998:
  mov rax, 14
  jmp r15
L.nest_f.48999:
  mov rax, 6
  jmp r15
L.nest_t.49000:
  cmp r14, r13
  jg L.nest_t.48998
  jmp L.nest_f.48999
L.nest_f.49001:
  mov rax, 2878
  jmp r15
L.nest_t.49002:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.48996
  jmp L.nest_f.48997
L.nest_f.49003:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49000
  jmp L.nest_f.49001
L.nest_t.49004:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49002
  jmp L.nest_f.49003
L.nest_f.49005:
  mov rax, 2622
  jmp r15
L.nest_t.49006:
  mov rax, 14
  jmp r15
L.nest_f.49007:
  mov rax, 6
  jmp r15
L.nest_t.49008:
  cmp r14, r13
  jg L.nest_t.49006
  jmp L.nest_f.49007
L.nest_f.49009:
  mov rax, 2878
  jmp r15
L.nest_t.49010:
  mov rax, 14
  jmp r15
L.nest_f.49011:
  mov rax, 6
  jmp r15
L.nest_t.49012:
  cmp r14, r13
  jg L.nest_t.49010
  jmp L.nest_f.49011
L.nest_f.49013:
  mov rax, 2878
  jmp r15
L.nest_t.49014:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49008
  jmp L.nest_f.49009
L.nest_f.49015:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49012
  jmp L.nest_f.49013
L.nest_t.49016:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49014
  jmp L.nest_f.49015
L.nest_f.49017:
  mov rax, 2622
  jmp r15
L.nest_t.49018:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49004
  jmp L.nest_f.49005
L.nest_f.49019:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49016
  jmp L.nest_f.49017
L.>=.48935:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.48992
  jmp L.nest_f.48993
L.nest_t.48968:
  mov rax, 14
  jmp r15
L.nest_f.48969:
  mov rax, 6
  jmp r15
L.nest_t.48970:
  cmp r14, r13
  jge L.nest_t.48968
  jmp L.nest_f.48969
L.nest_f.48971:
  mov rax, 3390
  jmp r15
L.nest_t.48972:
  mov rax, 14
  jmp r15
L.nest_f.48973:
  mov rax, 6
  jmp r15
L.nest_t.48974:
  cmp r14, r13
  jge L.nest_t.48972
  jmp L.nest_f.48973
L.nest_f.48975:
  mov rax, 3390
  jmp r15
L.nest_t.48976:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.48970
  jmp L.nest_f.48971
L.nest_f.48977:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.48974
  jmp L.nest_f.48975
L.nest_t.48978:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.48976
  jmp L.nest_f.48977
L.nest_f.48979:
  mov rax, 3134
  jmp r15
L.nest_t.48980:
  mov rax, 14
  jmp r15
L.nest_f.48981:
  mov rax, 6
  jmp r15
L.nest_t.48982:
  cmp r14, r13
  jge L.nest_t.48980
  jmp L.nest_f.48981
L.nest_f.48983:
  mov rax, 3390
  jmp r15
L.nest_t.48984:
  mov rax, 14
  jmp r15
L.nest_f.48985:
  mov rax, 6
  jmp r15
L.nest_t.48986:
  cmp r14, r13
  jge L.nest_t.48984
  jmp L.nest_f.48985
L.nest_f.48987:
  mov rax, 3390
  jmp r15
L.nest_t.48988:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.48982
  jmp L.nest_f.48983
L.nest_f.48989:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.48986
  jmp L.nest_f.48987
L.nest_t.48990:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.48988
  jmp L.nest_f.48989
L.nest_f.48991:
  mov rax, 3134
  jmp r15
L.nest_t.48992:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.48978
  jmp L.nest_f.48979
L.nest_f.48993:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.48990
  jmp L.nest_f.48991
L.fixnum?.48936:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.48966
  jmp L.nest_f.48967
L.nest_t.48966:
  mov rax, 14
  jmp r15
L.nest_f.48967:
  mov rax, 6
  jmp r15
L.boolean?.48937:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.48964
  jmp L.nest_f.48965
L.nest_t.48964:
  mov rax, 14
  jmp r15
L.nest_f.48965:
  mov rax, 6
  jmp r15
L.empty?.48938:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.48962
  jmp L.nest_f.48963
L.nest_t.48962:
  mov rax, 14
  jmp r15
L.nest_f.48963:
  mov rax, 6
  jmp r15
L.void?.48939:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.48960
  jmp L.nest_f.48961
L.nest_t.48960:
  mov rax, 14
  jmp r15
L.nest_f.48961:
  mov rax, 6
  jmp r15
L.ascii-char?.48940:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.48958
  jmp L.nest_f.48959
L.nest_t.48958:
  mov rax, 14
  jmp r15
L.nest_f.48959:
  mov rax, 6
  jmp r15
L.error?.48941:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.48956
  jmp L.nest_f.48957
L.nest_t.48956:
  mov rax, 14
  jmp r15
L.nest_f.48957:
  mov rax, 6
  jmp r15
L.not.48942:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.48954
  jmp L.nest_f.48955
L.nest_t.48954:
  mov rax, 6
  jmp r15
L.nest_f.48955:
  mov rax, 14
  jmp r15
L.rp.48944:
  sub rbp, 8
  mov r15, rax
  mov rdi, r15
  mov r15, QWORD [rbp + 0]
  jmp L.error?.48941

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:295:2
actual:
  '("Failed on pass uniquify\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'not #<continuation-mark-set> not (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    #t
    #t
    #t
    #t
    #<eof>
    #t
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    #t
    #t
    #t
    #t
    #t
    #t
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.48170 #<continuation-mark-set> L.tmp.48170 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    #t
    #t
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    #t
    #t)
expected:   #t
--------------------
/var/tmp/rkt15858001841585800184351.s:17: error: symbol `L.error?.49549' undefined
/var/tmp/rkt15858001841585800184351.s:37: error: symbol `L.ascii$2d$char?.49551' undefined
/var/tmp/rkt15858001841585800184351.s:52: error: symbol `L.void?.49552' undefined
/var/tmp/rkt15858001841585800184351.s:80: error: symbol `L.fixnum?.49553' undefined
/var/tmp/rkt15858001841585800184351.s:95: error: symbol `L.not.49550' undefined

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.49569:
  jmp L.b.49548
L.b.49548:
  mov QWORD [rbp + 0], r15
  add rbp, 8
  mov rdi, 112
  mov r15, L.rp.49570
  jmp L.error?.49549
L.rp.49570:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49756
  jmp L.nest_f.49757
L.rp.49571:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49752
  jmp L.nest_f.49753
L.nest_t.49752:
  mov rax, 30766
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.49753:
  mov rdi, 31022
  mov r15, QWORD [rbp + 0]
  jmp L.ascii$2d$char?.49551
L.rp.49572:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 16
  mov rdi, r15
  mov r15, L.rp.49573
  jmp L.$2b$.49556
L.rp.49573:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rdi, r15
  mov r15, L.rp.49574
  jmp L.void?.49552
L.rp.49574:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.49754
  jmp L.nest_f.49755
L.rp.49575:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 232
  mov rdi, r15
  mov r15, L.rp.49576
  jmp L.$2d$.49557
L.rp.49576:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.49577
  jmp L.$2d$.49557
L.rp.49577:
  sub rbp, 8
  mov r15, rax
  mov rdi, r15
  mov r15, QWORD [rbp + 0]
  jmp L.fixnum?.49553
L.nest_t.49754:
  mov rax, 22
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.49755:
  add rbp, 8
  mov rsi, 160
  mov rdi, 80
  mov r15, L.rp.49575
  jmp L.$2b$.49556
L.nest_t.49756:
  add rbp, 8
  mov rdi, 14
  mov r15, L.rp.49571
  jmp L.not.49550
L.nest_f.49757:
  add rbp, 8
  mov rsi, 0
  mov rdi, 112
  mov r15, L.rp.49572
  jmp L.$2a$.49555
L.eq?.49554:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.49750
  jmp L.nest_f.49751
L.nest_t.49750:
  mov rax, 14
  jmp r15
L.nest_f.49751:
  mov rax, 6
  jmp r15
L.$2a$.49555:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49748
  jmp L.nest_f.49749
L.nest_t.49732:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49733:
  mov rax, 318
  jmp r15
L.nest_t.49734:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49735:
  mov rax, 318
  jmp r15
L.nest_t.49736:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49732
  jmp L.nest_f.49733
L.nest_f.49737:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49734
  jmp L.nest_f.49735
L.nest_t.49738:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49736
  jmp L.nest_f.49737
L.nest_f.49739:
  mov rax, 62
  jmp r15
L.nest_t.49740:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49741:
  mov rax, 318
  jmp r15
L.nest_t.49742:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49743:
  mov rax, 318
  jmp r15
L.nest_t.49744:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49740
  jmp L.nest_f.49741
L.nest_f.49745:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49742
  jmp L.nest_f.49743
L.nest_t.49746:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49744
  jmp L.nest_f.49745
L.nest_f.49747:
  mov rax, 62
  jmp r15
L.nest_t.49748:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49738
  jmp L.nest_f.49739
L.nest_f.49749:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49746
  jmp L.nest_f.49747
L.$2b$.49556:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49730
  jmp L.nest_f.49731
L.nest_t.49714:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49715:
  mov rax, 830
  jmp r15
L.nest_t.49716:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49717:
  mov rax, 830
  jmp r15
L.nest_t.49718:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49714
  jmp L.nest_f.49715
L.nest_f.49719:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49716
  jmp L.nest_f.49717
L.nest_t.49720:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49718
  jmp L.nest_f.49719
L.nest_f.49721:
  mov rax, 574
  jmp r15
L.nest_t.49722:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49723:
  mov rax, 830
  jmp r15
L.nest_t.49724:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49725:
  mov rax, 830
  jmp r15
L.nest_t.49726:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49722
  jmp L.nest_f.49723
L.nest_f.49727:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49724
  jmp L.nest_f.49725
L.nest_t.49728:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49726
  jmp L.nest_f.49727
L.nest_f.49729:
  mov rax, 574
  jmp r15
L.nest_t.49730:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49720
  jmp L.nest_f.49721
L.nest_f.49731:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49728
  jmp L.nest_f.49729
L.$2d$.49557:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49712
  jmp L.nest_f.49713
L.nest_t.49696:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49697:
  mov rax, 1342
  jmp r15
L.nest_t.49698:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49699:
  mov rax, 1342
  jmp r15
L.nest_t.49700:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49696
  jmp L.nest_f.49697
L.nest_f.49701:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49698
  jmp L.nest_f.49699
L.nest_t.49702:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49700
  jmp L.nest_f.49701
L.nest_f.49703:
  mov rax, 1086
  jmp r15
L.nest_t.49704:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49705:
  mov rax, 1342
  jmp r15
L.nest_t.49706:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.49707:
  mov rax, 1342
  jmp r15
L.nest_t.49708:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49704
  jmp L.nest_f.49705
L.nest_f.49709:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49706
  jmp L.nest_f.49707
L.nest_t.49710:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49708
  jmp L.nest_f.49709
L.nest_f.49711:
  mov rax, 1086
  jmp r15
L.nest_t.49712:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49702
  jmp L.nest_f.49703
L.nest_f.49713:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49710
  jmp L.nest_f.49711
L.$3c$.49558:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49694
  jmp L.nest_f.49695
L.nest_t.49670:
  mov rax, 14
  jmp r15
L.nest_f.49671:
  mov rax, 6
  jmp r15
L.nest_t.49672:
  cmp r14, r13
  jl L.nest_t.49670
  jmp L.nest_f.49671
L.nest_f.49673:
  mov rax, 1854
  jmp r15
L.nest_t.49674:
  mov rax, 14
  jmp r15
L.nest_f.49675:
  mov rax, 6
  jmp r15
L.nest_t.49676:
  cmp r14, r13
  jl L.nest_t.49674
  jmp L.nest_f.49675
L.nest_f.49677:
  mov rax, 1854
  jmp r15
L.nest_t.49678:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49672
  jmp L.nest_f.49673
L.nest_f.49679:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49676
  jmp L.nest_f.49677
L.nest_t.49680:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49678
  jmp L.nest_f.49679
L.nest_f.49681:
  mov rax, 1598
  jmp r15
L.nest_t.49682:
  mov rax, 14
  jmp r15
L.nest_f.49683:
  mov rax, 6
  jmp r15
L.nest_t.49684:
  cmp r14, r13
  jl L.nest_t.49682
  jmp L.nest_f.49683
L.nest_f.49685:
  mov rax, 1854
  jmp r15
L.nest_t.49686:
  mov rax, 14
  jmp r15
L.nest_f.49687:
  mov rax, 6
  jmp r15
L.nest_t.49688:
  cmp r14, r13
  jl L.nest_t.49686
  jmp L.nest_f.49687
L.nest_f.49689:
  mov rax, 1854
  jmp r15
L.nest_t.49690:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49684
  jmp L.nest_f.49685
L.nest_f.49691:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49688
  jmp L.nest_f.49689
L.nest_t.49692:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49690
  jmp L.nest_f.49691
L.nest_f.49693:
  mov rax, 1598
  jmp r15
L.nest_t.49694:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49680
  jmp L.nest_f.49681
L.nest_f.49695:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49692
  jmp L.nest_f.49693
L.$3c$$3d$.49559:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49668
  jmp L.nest_f.49669
L.nest_t.49644:
  mov rax, 14
  jmp r15
L.nest_f.49645:
  mov rax, 6
  jmp r15
L.nest_t.49646:
  cmp r14, r13
  jle L.nest_t.49644
  jmp L.nest_f.49645
L.nest_f.49647:
  mov rax, 2366
  jmp r15
L.nest_t.49648:
  mov rax, 14
  jmp r15
L.nest_f.49649:
  mov rax, 6
  jmp r15
L.nest_t.49650:
  cmp r14, r13
  jle L.nest_t.49648
  jmp L.nest_f.49649
L.nest_f.49651:
  mov rax, 2366
  jmp r15
L.nest_t.49652:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49646
  jmp L.nest_f.49647
L.nest_f.49653:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49650
  jmp L.nest_f.49651
L.nest_t.49654:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49652
  jmp L.nest_f.49653
L.nest_f.49655:
  mov rax, 2110
  jmp r15
L.nest_t.49656:
  mov rax, 14
  jmp r15
L.nest_f.49657:
  mov rax, 6
  jmp r15
L.nest_t.49658:
  cmp r14, r13
  jle L.nest_t.49656
  jmp L.nest_f.49657
L.nest_f.49659:
  mov rax, 2366
  jmp r15
L.nest_t.49660:
  mov rax, 14
  jmp r15
L.nest_f.49661:
  mov rax, 6
  jmp r15
L.nest_t.49662:
  cmp r14, r13
  jle L.nest_t.49660
  jmp L.nest_f.49661
L.nest_f.49663:
  mov rax, 2366
  jmp r15
L.nest_t.49664:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49658
  jmp L.nest_f.49659
L.nest_f.49665:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49662
  jmp L.nest_f.49663
L.nest_t.49666:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49664
  jmp L.nest_f.49665
L.nest_f.49667:
  mov rax, 2110
  jmp r15
L.nest_t.49668:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49654
  jmp L.nest_f.49655
L.nest_f.49669:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49666
  jmp L.nest_f.49667
L.$3e$.49560:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49642
  jmp L.nest_f.49643
L.nest_t.49618:
  mov rax, 14
  jmp r15
L.nest_f.49619:
  mov rax, 6
  jmp r15
L.nest_t.49620:
  cmp r14, r13
  jg L.nest_t.49618
  jmp L.nest_f.49619
L.nest_f.49621:
  mov rax, 2878
  jmp r15
L.nest_t.49622:
  mov rax, 14
  jmp r15
L.nest_f.49623:
  mov rax, 6
  jmp r15
L.nest_t.49624:
  cmp r14, r13
  jg L.nest_t.49622
  jmp L.nest_f.49623
L.nest_f.49625:
  mov rax, 2878
  jmp r15
L.nest_t.49626:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49620
  jmp L.nest_f.49621
L.nest_f.49627:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49624
  jmp L.nest_f.49625
L.nest_t.49628:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49626
  jmp L.nest_f.49627
L.nest_f.49629:
  mov rax, 2622
  jmp r15
L.nest_t.49630:
  mov rax, 14
  jmp r15
L.nest_f.49631:
  mov rax, 6
  jmp r15
L.nest_t.49632:
  cmp r14, r13
  jg L.nest_t.49630
  jmp L.nest_f.49631
L.nest_f.49633:
  mov rax, 2878
  jmp r15
L.nest_t.49634:
  mov rax, 14
  jmp r15
L.nest_f.49635:
  mov rax, 6
  jmp r15
L.nest_t.49636:
  cmp r14, r13
  jg L.nest_t.49634
  jmp L.nest_f.49635
L.nest_f.49637:
  mov rax, 2878
  jmp r15
L.nest_t.49638:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49632
  jmp L.nest_f.49633
L.nest_f.49639:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49636
  jmp L.nest_f.49637
L.nest_t.49640:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49638
  jmp L.nest_f.49639
L.nest_f.49641:
  mov rax, 2622
  jmp r15
L.nest_t.49642:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49628
  jmp L.nest_f.49629
L.nest_f.49643:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49640
  jmp L.nest_f.49641
L.$3e$$3d$.49561:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49616
  jmp L.nest_f.49617
L.nest_t.49592:
  mov rax, 14
  jmp r15
L.nest_f.49593:
  mov rax, 6
  jmp r15
L.nest_t.49594:
  cmp r14, r13
  jge L.nest_t.49592
  jmp L.nest_f.49593
L.nest_f.49595:
  mov rax, 3390
  jmp r15
L.nest_t.49596:
  mov rax, 14
  jmp r15
L.nest_f.49597:
  mov rax, 6
  jmp r15
L.nest_t.49598:
  cmp r14, r13
  jge L.nest_t.49596
  jmp L.nest_f.49597
L.nest_f.49599:
  mov rax, 3390
  jmp r15
L.nest_t.49600:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49594
  jmp L.nest_f.49595
L.nest_f.49601:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49598
  jmp L.nest_f.49599
L.nest_t.49602:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49600
  jmp L.nest_f.49601
L.nest_f.49603:
  mov rax, 3134
  jmp r15
L.nest_t.49604:
  mov rax, 14
  jmp r15
L.nest_f.49605:
  mov rax, 6
  jmp r15
L.nest_t.49606:
  cmp r14, r13
  jge L.nest_t.49604
  jmp L.nest_f.49605
L.nest_f.49607:
  mov rax, 3390
  jmp r15
L.nest_t.49608:
  mov rax, 14
  jmp r15
L.nest_f.49609:
  mov rax, 6
  jmp r15
L.nest_t.49610:
  cmp r14, r13
  jge L.nest_t.49608
  jmp L.nest_f.49609
L.nest_f.49611:
  mov rax, 3390
  jmp r15
L.nest_t.49612:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49606
  jmp L.nest_f.49607
L.nest_f.49613:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49610
  jmp L.nest_f.49611
L.nest_t.49614:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.49612
  jmp L.nest_f.49613
L.nest_f.49615:
  mov rax, 3134
  jmp r15
L.nest_t.49616:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.49602
  jmp L.nest_f.49603
L.nest_f.49617:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.49614
  jmp L.nest_f.49615
L.fixnum?.49562:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.49590
  jmp L.nest_f.49591
L.nest_t.49590:
  mov rax, 14
  jmp r15
L.nest_f.49591:
  mov rax, 6
  jmp r15
L.boolean?.49563:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.49588
  jmp L.nest_f.49589
L.nest_t.49588:
  mov rax, 14
  jmp r15
L.nest_f.49589:
  mov rax, 6
  jmp r15
L.empty?.49564:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.49586
  jmp L.nest_f.49587
L.nest_t.49586:
  mov rax, 14
  jmp r15
L.nest_f.49587:
  mov rax, 6
  jmp r15
L.void?.49565:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.49584
  jmp L.nest_f.49585
L.nest_t.49584:
  mov rax, 14
  jmp r15
L.nest_f.49585:
  mov rax, 6
  jmp r15
L.ascii$2d$char?.49566:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.49582
  jmp L.nest_f.49583
L.nest_t.49582:
  mov rax, 14
  jmp r15
L.nest_f.49583:
  mov rax, 6
  jmp r15
L.error?.49567:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.49580
  jmp L.nest_f.49581
L.nest_t.49580:
  mov rax, 14
  jmp r15
L.nest_f.49581:
  mov rax, 6
  jmp r15
L.not.49568:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.49578
  jmp L.nest_f.49579
L.nest_t.49578:
  mov rax, 6
  jmp r15
L.nest_f.49579:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg
expose-basic-blocks: (module (define L.main.52455 () (begin (nop) (nop) (jump L.b.52439))) (define L.not.52454 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (begin (set! rax 6) (jump r15)) (begin (set! rax 14) (jump r15))))) (define L.error?.52453 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.ascii-char?.52452 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.void?.52451 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.empty?.52450 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.boolean?.52449 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.fixnum?.52448 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.>=.52447 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (>= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 3390) (jump r15)))))) (begin (set! rax 3134) (jump r15))))))) (define L.>.52446 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (> r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2878) (jump r15)))))) (begin (set! rax 2622) (jump r15))))))) (define L.<=.52445 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (<= r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 2366) (jump r15)))))) (begin (set! rax 2110) (jump r15))))))) (define L.<.52444 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 1854) (jump r15)))))) (begin (set! rax 1598) (jump r15))))))) (define L.-.52443 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 1342) (jump r15)))))) (begin (set! rax 1086) (jump r15))))))) (define L.+.52442 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 830) (jump r15)))))) (begin (set! rax 574) (jump r15))))))) (define L.*.52441 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (begin (set! r12 14) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))) (begin (set! r12 6) (if (neq? r12 6) (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15)) (begin (set! rax 318) (jump r15)))))) (begin (set! rax 62) (jump r15))))))) (define L.eq?.52440 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))))) (define L.b.52439 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (return-point L.rp.52456 (begin (set! rdi 112) (set! r15 L.rp.52456) (jump L.error?.52453))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52457 (begin (set! rdi 14) (set! r15 L.rp.52457) (jump L.not.52454))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 30766) (jump (rbp + 0))) (begin (set! rdi 31022) (set! r15 (rbp + 0)) (jump L.ascii-char?.52452)))) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52458 (begin (set! rsi 0) (set! rdi 112) (set! r15 L.rp.52458) (jump L.*.52441))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52459 (begin (set! rsi 16) (set! rdi r15) (set! r15 L.rp.52459) (jump L.+.52442))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52460 (begin (set! rdi r15) (set! r15 L.rp.52460) (jump L.void?.52451))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 22) (jump (rbp + 0))) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52461 (begin (set! rsi 160) (set! rdi 80) (set! r15 L.rp.52461) (jump L.+.52442))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52462 (begin (set! rsi 232) (set! rdi r15) (set! r15 L.rp.52462) (jump L.-.52443))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52463 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.52463) (jump L.-.52443))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.fixnum?.52448))))))))
process-rp: (begin (set! rdi 112) (set! r15 L.rp.52456) (jump L.error?.52453))
process-rp: (jump L.error?.52453)
updating tai with: (set! rbp (- rbp 8))
updating tai with: (set! r15 rax)
updating tai with: (if (neq? r15 6) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52457 (begin (set! rdi 14) (set! r15 L.rp.52457) (jump L.not.52454))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 30766) (jump (rbp + 0))) (begin (set! rdi 31022) (set! r15 (rbp + 0)) (jump L.ascii-char?.52452)))) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52458 (begin (set! rsi 0) (set! rdi 112) (set! r15 L.rp.52458) (jump L.*.52441))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52459 (begin (set! rsi 16) (set! rdi r15) (set! r15 L.rp.52459) (jump L.+.52442))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52460 (begin (set! rdi r15) (set! r15 L.rp.52460) (jump L.void?.52451))) (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (begin (set! rax 22) (jump (rbp + 0))) (begin (set! rbp (+ rbp 8)) (return-point L.rp.52461 (begin (set! rsi 160) (set! rdi 80) (set! r15 L.rp.52461) (jump L.+.52442))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52462 (begin (set! rsi 232) (set! rdi r15) (set! r15 L.rp.52462) (jump L.-.52443))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (return-point L.rp.52463 (begin (set! rsi 0) (set! rdi r15) (set! r15 L.rp.52463) (jump L.-.52443))) (set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.fixnum?.52448)))))
create-return-point-blocktwo: (return-point L.rp.52456 (begin ((if (neq? r15 6) (jump L.tmp.52796) (jump L.tmp.52802)) (set! r15 rax) (set! rbp (- rbp 8)))))
parse-rp-tail (begin ((set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.tmp.52796) (jump L.tmp.52802))))
parse-rp-tail (if (neq? r15 6) (jump L.tmp.52796) (jump L.tmp.52802))
parse-rp-tail (jump L.tmp.52796)
parse-rp-tail (jump L.tmp.52802)
flatten (module (define L.main.52824 () (begin (nop) (nop) (jump L.b.52808))) (define L.b.52808 () (begin (set! (rbp + 0) r15) (set! rbp (+ rbp 8)) (set! rdi 112) (set! r15 L.rp.52825) (jump L.error?.52822))) (define L.rp.52825 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.53011) (jump L.nest_f.53012)))) (define L.rp.52826 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.53007) (jump L.nest_f.53008)))) (define L.nest_t.53007 () (begin (set! rax 30766) (jump (rbp + 0)))) (define L.nest_f.53008 () (begin (set! rdi 31022) (set! r15 (rbp + 0)) (jump L.ascii-char?.52821))) (define L.rp.52827 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (set! rsi 16) (set! rdi r15) (set! r15 L.rp.52828) (jump L.+.52811))) (define L.rp.52828 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (set! rdi r15) (set! r15 L.rp.52829) (jump L.void?.52820))) (define L.rp.52829 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (if (neq? r15 6) (jump L.nest_t.53009) (jump L.nest_f.53010)))) (define L.rp.52830 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (set! rsi 232) (set! rdi r15) (set! r15 L.rp.52831) (jump L.-.52812))) (define L.rp.52831 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rbp (+ rbp 8)) (set! rsi 0) (set! rdi r15) (set! r15 L.rp.52832) (jump L.-.52812))) (define L.rp.52832 () (begin (set! rbp (- rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp + 0)) (jump L.fixnum?.52817))) (define L.nest_t.53009 () (begin (set! rax 22) (jump (rbp + 0)))) (define L.nest_f.53010 () (begin (set! rbp (+ rbp 8)) (set! rsi 160) (set! rdi 80) (set! r15 L.rp.52830) (jump L.+.52811))) (define L.nest_t.53011 () (begin (set! rbp (+ rbp 8)) (set! rdi 14) (set! r15 L.rp.52826) (jump L.not.52823))) (define L.nest_f.53012 () (begin (set! rbp (+ rbp 8)) (set! rsi 0) (set! rdi 112) (set! r15 L.rp.52827) (jump L.*.52810))) (define L.eq?.52809 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (if (eq? r14 r13) (jump L.nest_t.53005) (jump L.nest_f.53006)))) (define L.nest_t.53005 () (begin (set! rax 14) (jump r15))) (define L.nest_f.53006 () (begin (set! rax 6) (jump r15))) (define L.*.52810 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.53003) (jump L.nest_f.53004)))) (define L.nest_t.52987 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52988 () (begin (set! rax 318) (jump r15))) (define L.nest_t.52989 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52990 () (begin (set! rax 318) (jump r15))) (define L.nest_t.52991 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52987) (jump L.nest_f.52988)))) (define L.nest_f.52992 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52989) (jump L.nest_f.52990)))) (define L.nest_t.52993 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52991) (jump L.nest_f.52992)))) (define L.nest_f.52994 () (begin (set! rax 62) (jump r15))) (define L.nest_t.52995 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52996 () (begin (set! rax 318) (jump r15))) (define L.nest_t.52997 () (begin (set! r13 (arithmetic-shift-right r13 3)) (nop) (set! r14 (* r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52998 () (begin (set! rax 318) (jump r15))) (define L.nest_t.52999 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52995) (jump L.nest_f.52996)))) (define L.nest_f.53000 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52997) (jump L.nest_f.52998)))) (define L.nest_t.53001 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52999) (jump L.nest_f.53000)))) (define L.nest_f.53002 () (begin (set! rax 62) (jump r15))) (define L.nest_t.53003 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52993) (jump L.nest_f.52994)))) (define L.nest_f.53004 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.53001) (jump L.nest_f.53002)))) (define L.+.52811 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52985) (jump L.nest_f.52986)))) (define L.nest_t.52969 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52970 () (begin (set! rax 830) (jump r15))) (define L.nest_t.52971 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52972 () (begin (set! rax 830) (jump r15))) (define L.nest_t.52973 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52969) (jump L.nest_f.52970)))) (define L.nest_f.52974 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52971) (jump L.nest_f.52972)))) (define L.nest_t.52975 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52973) (jump L.nest_f.52974)))) (define L.nest_f.52976 () (begin (set! rax 574) (jump r15))) (define L.nest_t.52977 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52978 () (begin (set! rax 830) (jump r15))) (define L.nest_t.52979 () (begin (set! r14 (+ r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52980 () (begin (set! rax 830) (jump r15))) (define L.nest_t.52981 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52977) (jump L.nest_f.52978)))) (define L.nest_f.52982 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52979) (jump L.nest_f.52980)))) (define L.nest_t.52983 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52981) (jump L.nest_f.52982)))) (define L.nest_f.52984 () (begin (set! rax 574) (jump r15))) (define L.nest_t.52985 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52975) (jump L.nest_f.52976)))) (define L.nest_f.52986 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52983) (jump L.nest_f.52984)))) (define L.-.52812 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52967) (jump L.nest_f.52968)))) (define L.nest_t.52951 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52952 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.52953 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52954 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.52955 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52951) (jump L.nest_f.52952)))) (define L.nest_f.52956 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52953) (jump L.nest_f.52954)))) (define L.nest_t.52957 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52955) (jump L.nest_f.52956)))) (define L.nest_f.52958 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.52959 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52960 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.52961 () (begin (set! r14 (- r14 r13)) (set! rax r14) (jump r15))) (define L.nest_f.52962 () (begin (set! rax 1342) (jump r15))) (define L.nest_t.52963 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52959) (jump L.nest_f.52960)))) (define L.nest_f.52964 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52961) (jump L.nest_f.52962)))) (define L.nest_t.52965 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52963) (jump L.nest_f.52964)))) (define L.nest_f.52966 () (begin (set! rax 1086) (jump r15))) (define L.nest_t.52967 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52957) (jump L.nest_f.52958)))) (define L.nest_f.52968 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52965) (jump L.nest_f.52966)))) (define L.<.52813 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52949) (jump L.nest_f.52950)))) (define L.nest_t.52925 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52926 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52927 () (if (< r14 r13) (jump L.nest_t.52925) (jump L.nest_f.52926))) (define L.nest_f.52928 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.52929 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52930 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52931 () (if (< r14 r13) (jump L.nest_t.52929) (jump L.nest_f.52930))) (define L.nest_f.52932 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.52933 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52927) (jump L.nest_f.52928)))) (define L.nest_f.52934 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52931) (jump L.nest_f.52932)))) (define L.nest_t.52935 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52933) (jump L.nest_f.52934)))) (define L.nest_f.52936 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.52937 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52938 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52939 () (if (< r14 r13) (jump L.nest_t.52937) (jump L.nest_f.52938))) (define L.nest_f.52940 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.52941 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52942 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52943 () (if (< r14 r13) (jump L.nest_t.52941) (jump L.nest_f.52942))) (define L.nest_f.52944 () (begin (set! rax 1854) (jump r15))) (define L.nest_t.52945 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52939) (jump L.nest_f.52940)))) (define L.nest_f.52946 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52943) (jump L.nest_f.52944)))) (define L.nest_t.52947 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52945) (jump L.nest_f.52946)))) (define L.nest_f.52948 () (begin (set! rax 1598) (jump r15))) (define L.nest_t.52949 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52935) (jump L.nest_f.52936)))) (define L.nest_f.52950 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52947) (jump L.nest_f.52948)))) (define L.<=.52814 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52923) (jump L.nest_f.52924)))) (define L.nest_t.52899 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52900 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52901 () (if (<= r14 r13) (jump L.nest_t.52899) (jump L.nest_f.52900))) (define L.nest_f.52902 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.52903 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52904 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52905 () (if (<= r14 r13) (jump L.nest_t.52903) (jump L.nest_f.52904))) (define L.nest_f.52906 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.52907 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52901) (jump L.nest_f.52902)))) (define L.nest_f.52908 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52905) (jump L.nest_f.52906)))) (define L.nest_t.52909 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52907) (jump L.nest_f.52908)))) (define L.nest_f.52910 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.52911 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52912 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52913 () (if (<= r14 r13) (jump L.nest_t.52911) (jump L.nest_f.52912))) (define L.nest_f.52914 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.52915 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52916 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52917 () (if (<= r14 r13) (jump L.nest_t.52915) (jump L.nest_f.52916))) (define L.nest_f.52918 () (begin (set! rax 2366) (jump r15))) (define L.nest_t.52919 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52913) (jump L.nest_f.52914)))) (define L.nest_f.52920 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52917) (jump L.nest_f.52918)))) (define L.nest_t.52921 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52919) (jump L.nest_f.52920)))) (define L.nest_f.52922 () (begin (set! rax 2110) (jump r15))) (define L.nest_t.52923 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52909) (jump L.nest_f.52910)))) (define L.nest_f.52924 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52921) (jump L.nest_f.52922)))) (define L.>.52815 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52897) (jump L.nest_f.52898)))) (define L.nest_t.52873 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52874 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52875 () (if (> r14 r13) (jump L.nest_t.52873) (jump L.nest_f.52874))) (define L.nest_f.52876 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.52877 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52878 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52879 () (if (> r14 r13) (jump L.nest_t.52877) (jump L.nest_f.52878))) (define L.nest_f.52880 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.52881 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52875) (jump L.nest_f.52876)))) (define L.nest_f.52882 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52879) (jump L.nest_f.52880)))) (define L.nest_t.52883 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52881) (jump L.nest_f.52882)))) (define L.nest_f.52884 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.52885 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52886 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52887 () (if (> r14 r13) (jump L.nest_t.52885) (jump L.nest_f.52886))) (define L.nest_f.52888 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.52889 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52890 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52891 () (if (> r14 r13) (jump L.nest_t.52889) (jump L.nest_f.52890))) (define L.nest_f.52892 () (begin (set! rax 2878) (jump r15))) (define L.nest_t.52893 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52887) (jump L.nest_f.52888)))) (define L.nest_f.52894 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52891) (jump L.nest_f.52892)))) (define L.nest_t.52895 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52893) (jump L.nest_f.52894)))) (define L.nest_f.52896 () (begin (set! rax 2622) (jump r15))) (define L.nest_t.52897 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52883) (jump L.nest_f.52884)))) (define L.nest_f.52898 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52895) (jump L.nest_f.52896)))) (define L.>=.52816 () (begin (nop) (set! r14 rdi) (set! r13 rsi) (set! r12 (bitwise-and r14 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52871) (jump L.nest_f.52872)))) (define L.nest_t.52847 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52848 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52849 () (if (>= r14 r13) (jump L.nest_t.52847) (jump L.nest_f.52848))) (define L.nest_f.52850 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.52851 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52852 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52853 () (if (>= r14 r13) (jump L.nest_t.52851) (jump L.nest_f.52852))) (define L.nest_f.52854 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.52855 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52849) (jump L.nest_f.52850)))) (define L.nest_f.52856 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52853) (jump L.nest_f.52854)))) (define L.nest_t.52857 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52855) (jump L.nest_f.52856)))) (define L.nest_f.52858 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.52859 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52860 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52861 () (if (>= r14 r13) (jump L.nest_t.52859) (jump L.nest_f.52860))) (define L.nest_f.52862 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.52863 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52864 () (begin (set! rax 6) (jump r15))) (define L.nest_t.52865 () (if (>= r14 r13) (jump L.nest_t.52863) (jump L.nest_f.52864))) (define L.nest_f.52866 () (begin (set! rax 3390) (jump r15))) (define L.nest_t.52867 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52861) (jump L.nest_f.52862)))) (define L.nest_f.52868 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52865) (jump L.nest_f.52866)))) (define L.nest_t.52869 () (begin (set! r12 (bitwise-and r13 7)) (nop) (if (eq? r12 0) (jump L.nest_t.52867) (jump L.nest_f.52868)))) (define L.nest_f.52870 () (begin (set! rax 3134) (jump r15))) (define L.nest_t.52871 () (begin (set! r12 14) (if (neq? r12 6) (jump L.nest_t.52857) (jump L.nest_f.52858)))) (define L.nest_f.52872 () (begin (set! r12 6) (if (neq? r12 6) (jump L.nest_t.52869) (jump L.nest_f.52870)))) (define L.fixnum?.52817 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 7)) (nop) (if (eq? r14 0) (jump L.nest_t.52845) (jump L.nest_f.52846)))) (define L.nest_t.52845 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52846 () (begin (set! rax 6) (jump r15))) (define L.boolean?.52818 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 247)) (nop) (if (eq? r14 6) (jump L.nest_t.52843) (jump L.nest_f.52844)))) (define L.nest_t.52843 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52844 () (begin (set! rax 6) (jump r15))) (define L.empty?.52819 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 22) (jump L.nest_t.52841) (jump L.nest_f.52842)))) (define L.nest_t.52841 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52842 () (begin (set! rax 6) (jump r15))) (define L.void?.52820 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 30) (jump L.nest_t.52839) (jump L.nest_f.52840)))) (define L.nest_t.52839 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52840 () (begin (set! rax 6) (jump r15))) (define L.ascii-char?.52821 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 46) (jump L.nest_t.52837) (jump L.nest_f.52838)))) (define L.nest_t.52837 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52838 () (begin (set! rax 6) (jump r15))) (define L.error?.52822 () (begin (nop) (set! r14 rdi) (set! r14 (bitwise-and r14 255)) (nop) (if (eq? r14 62) (jump L.nest_t.52835) (jump L.nest_f.52836)))) (define L.nest_t.52835 () (begin (set! rax 14) (jump r15))) (define L.nest_f.52836 () (begin (set! rax 6) (jump r15))) (define L.not.52823 () (begin (nop) (set! r14 rdi) (if (neq? r14 6) (jump L.nest_t.52833) (jump L.nest_f.52834)))) (define L.nest_t.52833 () (begin (set! rax 6) (jump r15))) (define L.nest_f.52834 () (begin (set! rax 14) (jump r15))))/var/tmp/rkt15858002111585800211984.s:114: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:205: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:205: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:292: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:292: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:379: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:379: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:490: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:490: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:601: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:601: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:712: error: symbol `L.' redefined
/var/tmp/rkt15858002111585800211984.s:712: error: parser: instruction expected
/var/tmp/rkt15858002111585800211984.s:871: error: parser: instruction expected

global start

section .text

start:
  mov rbp, stack
  ; move pointer to middle stack, to allow operands in both directions.
  add rbp, 4194304
  mov r15, done
L.main.53234:
  jmp L.b.53218
L.b.53218:
  mov QWORD [rbp + 0], r15
  add rbp, 8
  mov rdi, 112
  mov r15, L.rp.53235
  jmp L.error?.53232
L.rp.53235:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.53421
  jmp L.nest_f.53422
L.rp.53236:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.53417
  jmp L.nest_f.53418
L.nest_t.53417:
  mov rax, 30766
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.53418:
  mov rdi, 31022
  mov r15, QWORD [rbp + 0]
  jmp L.ascii-char?.53231
L.rp.53237:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 16
  mov rdi, r15
  mov r15, L.rp.53238
  jmp L.+.53221
L.rp.53238:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rdi, r15
  mov r15, L.rp.53239
  jmp L.void?.53230
L.rp.53239:
  sub rbp, 8
  mov r15, rax
  cmp r15, 6
  jne L.nest_t.53419
  jmp L.nest_f.53420
L.rp.53240:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 232
  mov rdi, r15
  mov r15, L.rp.53241
  jmp L.-.53222
L.rp.53241:
  sub rbp, 8
  mov r15, rax
  add rbp, 8
  mov rsi, 0
  mov rdi, r15
  mov r15, L.rp.53242
  jmp L.-.53222
L.rp.53242:
  sub rbp, 8
  mov r15, rax
  mov rdi, r15
  mov r15, QWORD [rbp + 0]
  jmp L.fixnum?.53227
L.nest_t.53419:
  mov rax, 22
  mov r10, QWORD [rbp + 0]
  jmp r10
L.nest_f.53420:
  add rbp, 8
  mov rsi, 160
  mov rdi, 80
  mov r15, L.rp.53240
  jmp L.+.53221
L.nest_t.53421:
  add rbp, 8
  mov rdi, 14
  mov r15, L.rp.53236
  jmp L.not.53233
L.nest_f.53422:
  add rbp, 8
  mov rsi, 0
  mov rdi, 112
  mov r15, L.rp.53237
  jmp L.*.53220
L.eq?.53219:
  mov r14, rdi
  mov r13, rsi
  cmp r14, r13
  je L.nest_t.53415
  jmp L.nest_f.53416
L.nest_t.53415:
  mov rax, 14
  jmp r15
L.nest_f.53416:
  mov rax, 6
  jmp r15
L.*.53220:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53413
  jmp L.nest_f.53414
L.nest_t.53397:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53398:
  mov rax, 318
  jmp r15
L.nest_t.53399:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53400:
  mov rax, 318
  jmp r15
L.nest_t.53401:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53397
  jmp L.nest_f.53398
L.nest_f.53402:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53399
  jmp L.nest_f.53400
L.nest_t.53403:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53401
  jmp L.nest_f.53402
L.nest_f.53404:
  mov rax, 62
  jmp r15
L.nest_t.53405:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53406:
  mov rax, 318
  jmp r15
L.nest_t.53407:
  sar r13, 3
  imul r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53408:
  mov rax, 318
  jmp r15
L.nest_t.53409:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53405
  jmp L.nest_f.53406
L.nest_f.53410:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53407
  jmp L.nest_f.53408
L.nest_t.53411:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53409
  jmp L.nest_f.53410
L.nest_f.53412:
  mov rax, 62
  jmp r15
L.nest_t.53413:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53403
  jmp L.nest_f.53404
L.nest_f.53414:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53411
  jmp L.nest_f.53412
L.+.53221:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53395
  jmp L.nest_f.53396
L.nest_t.53379:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53380:
  mov rax, 830
  jmp r15
L.nest_t.53381:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53382:
  mov rax, 830
  jmp r15
L.nest_t.53383:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53379
  jmp L.nest_f.53380
L.nest_f.53384:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53381
  jmp L.nest_f.53382
L.nest_t.53385:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53383
  jmp L.nest_f.53384
L.nest_f.53386:
  mov rax, 574
  jmp r15
L.nest_t.53387:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53388:
  mov rax, 830
  jmp r15
L.nest_t.53389:
  add r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53390:
  mov rax, 830
  jmp r15
L.nest_t.53391:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53387
  jmp L.nest_f.53388
L.nest_f.53392:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53389
  jmp L.nest_f.53390
L.nest_t.53393:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53391
  jmp L.nest_f.53392
L.nest_f.53394:
  mov rax, 574
  jmp r15
L.nest_t.53395:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53385
  jmp L.nest_f.53386
L.nest_f.53396:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53393
  jmp L.nest_f.53394
L.-.53222:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53377
  jmp L.nest_f.53378
L.nest_t.53361:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53362:
  mov rax, 1342
  jmp r15
L.nest_t.53363:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53364:
  mov rax, 1342
  jmp r15
L.nest_t.53365:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53361
  jmp L.nest_f.53362
L.nest_f.53366:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53363
  jmp L.nest_f.53364
L.nest_t.53367:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53365
  jmp L.nest_f.53366
L.nest_f.53368:
  mov rax, 1086
  jmp r15
L.nest_t.53369:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53370:
  mov rax, 1342
  jmp r15
L.nest_t.53371:
  sub r14, r13
  mov rax, r14
  jmp r15
L.nest_f.53372:
  mov rax, 1342
  jmp r15
L.nest_t.53373:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53369
  jmp L.nest_f.53370
L.nest_f.53374:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53371
  jmp L.nest_f.53372
L.nest_t.53375:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53373
  jmp L.nest_f.53374
L.nest_f.53376:
  mov rax, 1086
  jmp r15
L.nest_t.53377:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53367
  jmp L.nest_f.53368
L.nest_f.53378:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53375
  jmp L.nest_f.53376
L.<.53223:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53359
  jmp L.nest_f.53360
L.nest_t.53335:
  mov rax, 14
  jmp r15
L.nest_f.53336:
  mov rax, 6
  jmp r15
L.nest_t.53337:
  cmp r14, r13
  jl L.nest_t.53335
  jmp L.nest_f.53336
L.nest_f.53338:
  mov rax, 1854
  jmp r15
L.nest_t.53339:
  mov rax, 14
  jmp r15
L.nest_f.53340:
  mov rax, 6
  jmp r15
L.nest_t.53341:
  cmp r14, r13
  jl L.nest_t.53339
  jmp L.nest_f.53340
L.nest_f.53342:
  mov rax, 1854
  jmp r15
L.nest_t.53343:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53337
  jmp L.nest_f.53338
L.nest_f.53344:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53341
  jmp L.nest_f.53342
L.nest_t.53345:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53343
  jmp L.nest_f.53344
L.nest_f.53346:
  mov rax, 1598
  jmp r15
L.nest_t.53347:
  mov rax, 14
  jmp r15
L.nest_f.53348:
  mov rax, 6
  jmp r15
L.nest_t.53349:
  cmp r14, r13
  jl L.nest_t.53347
  jmp L.nest_f.53348
L.nest_f.53350:
  mov rax, 1854
  jmp r15
L.nest_t.53351:
  mov rax, 14
  jmp r15
L.nest_f.53352:
  mov rax, 6
  jmp r15
L.nest_t.53353:
  cmp r14, r13
  jl L.nest_t.53351
  jmp L.nest_f.53352
L.nest_f.53354:
  mov rax, 1854
  jmp r15
L.nest_t.53355:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53349
  jmp L.nest_f.53350
L.nest_f.53356:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53353
  jmp L.nest_f.53354
L.nest_t.53357:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53355
  jmp L.nest_f.53356
L.nest_f.53358:
  mov rax, 1598
  jmp r15
L.nest_t.53359:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53345
  jmp L.nest_f.53346
L.nest_f.53360:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53357
  jmp L.nest_f.53358
L.<=.53224:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53333
  jmp L.nest_f.53334
L.nest_t.53309:
  mov rax, 14
  jmp r15
L.nest_f.53310:
  mov rax, 6
  jmp r15
L.nest_t.53311:
  cmp r14, r13
  jle L.nest_t.53309
  jmp L.nest_f.53310
L.nest_f.53312:
  mov rax, 2366
  jmp r15
L.nest_t.53313:
  mov rax, 14
  jmp r15
L.nest_f.53314:
  mov rax, 6
  jmp r15
L.nest_t.53315:
  cmp r14, r13
  jle L.nest_t.53313
  jmp L.nest_f.53314
L.nest_f.53316:
  mov rax, 2366
  jmp r15
L.nest_t.53317:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53311
  jmp L.nest_f.53312
L.nest_f.53318:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53315
  jmp L.nest_f.53316
L.nest_t.53319:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53317
  jmp L.nest_f.53318
L.nest_f.53320:
  mov rax, 2110
  jmp r15
L.nest_t.53321:
  mov rax, 14
  jmp r15
L.nest_f.53322:
  mov rax, 6
  jmp r15
L.nest_t.53323:
  cmp r14, r13
  jle L.nest_t.53321
  jmp L.nest_f.53322
L.nest_f.53324:
  mov rax, 2366
  jmp r15
L.nest_t.53325:
  mov rax, 14
  jmp r15
L.nest_f.53326:
  mov rax, 6
  jmp r15
L.nest_t.53327:
  cmp r14, r13
  jle L.nest_t.53325
  jmp L.nest_f.53326
L.nest_f.53328:
  mov rax, 2366
  jmp r15
L.nest_t.53329:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53323
  jmp L.nest_f.53324
L.nest_f.53330:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53327
  jmp L.nest_f.53328
L.nest_t.53331:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53329
  jmp L.nest_f.53330
L.nest_f.53332:
  mov rax, 2110
  jmp r15
L.nest_t.53333:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53319
  jmp L.nest_f.53320
L.nest_f.53334:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53331
  jmp L.nest_f.53332
L.>.53225:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53307
  jmp L.nest_f.53308
L.nest_t.53283:
  mov rax, 14
  jmp r15
L.nest_f.53284:
  mov rax, 6
  jmp r15
L.nest_t.53285:
  cmp r14, r13
  jg L.nest_t.53283
  jmp L.nest_f.53284
L.nest_f.53286:
  mov rax, 2878
  jmp r15
L.nest_t.53287:
  mov rax, 14
  jmp r15
L.nest_f.53288:
  mov rax, 6
  jmp r15
L.nest_t.53289:
  cmp r14, r13
  jg L.nest_t.53287
  jmp L.nest_f.53288
L.nest_f.53290:
  mov rax, 2878
  jmp r15
L.nest_t.53291:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53285
  jmp L.nest_f.53286
L.nest_f.53292:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53289
  jmp L.nest_f.53290
L.nest_t.53293:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53291
  jmp L.nest_f.53292
L.nest_f.53294:
  mov rax, 2622
  jmp r15
L.nest_t.53295:
  mov rax, 14
  jmp r15
L.nest_f.53296:
  mov rax, 6
  jmp r15
L.nest_t.53297:
  cmp r14, r13
  jg L.nest_t.53295
  jmp L.nest_f.53296
L.nest_f.53298:
  mov rax, 2878
  jmp r15
L.nest_t.53299:
  mov rax, 14
  jmp r15
L.nest_f.53300:
  mov rax, 6
  jmp r15
L.nest_t.53301:
  cmp r14, r13
  jg L.nest_t.53299
  jmp L.nest_f.53300
L.nest_f.53302:
  mov rax, 2878
  jmp r15
L.nest_t.53303:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53297
  jmp L.nest_f.53298
L.nest_f.53304:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53301
  jmp L.nest_f.53302
L.nest_t.53305:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53303
  jmp L.nest_f.53304
L.nest_f.53306:
  mov rax, 2622
  jmp r15
L.nest_t.53307:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53293
  jmp L.nest_f.53294
L.nest_f.53308:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53305
  jmp L.nest_f.53306
L.>=.53226:
  mov r14, rdi
  mov r13, rsi
  mov r10, r14
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53281
  jmp L.nest_f.53282
L.nest_t.53257:
  mov rax, 14
  jmp r15
L.nest_f.53258:
  mov rax, 6
  jmp r15
L.nest_t.53259:
  cmp r14, r13
  jge L.nest_t.53257
  jmp L.nest_f.53258
L.nest_f.53260:
  mov rax, 3390
  jmp r15
L.nest_t.53261:
  mov rax, 14
  jmp r15
L.nest_f.53262:
  mov rax, 6
  jmp r15
L.nest_t.53263:
  cmp r14, r13
  jge L.nest_t.53261
  jmp L.nest_f.53262
L.nest_f.53264:
  mov rax, 3390
  jmp r15
L.nest_t.53265:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53259
  jmp L.nest_f.53260
L.nest_f.53266:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53263
  jmp L.nest_f.53264
L.nest_t.53267:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53265
  jmp L.nest_f.53266
L.nest_f.53268:
  mov rax, 3134
  jmp r15
L.nest_t.53269:
  mov rax, 14
  jmp r15
L.nest_f.53270:
  mov rax, 6
  jmp r15
L.nest_t.53271:
  cmp r14, r13
  jge L.nest_t.53269
  jmp L.nest_f.53270
L.nest_f.53272:
  mov rax, 3390
  jmp r15
L.nest_t.53273:
  mov rax, 14
  jmp r15
L.nest_f.53274:
  mov rax, 6
  jmp r15
L.nest_t.53275:
  cmp r14, r13
  jge L.nest_t.53273
  jmp L.nest_f.53274
L.nest_f.53276:
  mov rax, 3390
  jmp r15
L.nest_t.53277:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53271
  jmp L.nest_f.53272
L.nest_f.53278:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53275
  jmp L.nest_f.53276
L.nest_t.53279:
  mov r10, r13
  and r10, 7
  mov r12, r10
  cmp r12, 0
  je L.nest_t.53277
  jmp L.nest_f.53278
L.nest_f.53280:
  mov rax, 3134
  jmp r15
L.nest_t.53281:
  mov r12, 14
  cmp r12, 6
  jne L.nest_t.53267
  jmp L.nest_f.53268
L.nest_f.53282:
  mov r12, 6
  cmp r12, 6
  jne L.nest_t.53279
  jmp L.nest_f.53280
L.fixnum?.53227:
  mov r14, rdi
  and r14, 7
  cmp r14, 0
  je L.nest_t.53255
  jmp L.nest_f.53256
L.nest_t.53255:
  mov rax, 14
  jmp r15
L.nest_f.53256:
  mov rax, 6
  jmp r15
L.boolean?.53228:
  mov r14, rdi
  and r14, 247
  cmp r14, 6
  je L.nest_t.53253
  jmp L.nest_f.53254
L.nest_t.53253:
  mov rax, 14
  jmp r15
L.nest_f.53254:
  mov rax, 6
  jmp r15
L.empty?.53229:
  mov r14, rdi
  and r14, 255
  cmp r14, 22
  je L.nest_t.53251
  jmp L.nest_f.53252
L.nest_t.53251:
  mov rax, 14
  jmp r15
L.nest_f.53252:
  mov rax, 6
  jmp r15
L.void?.53230:
  mov r14, rdi
  and r14, 255
  cmp r14, 30
  je L.nest_t.53249
  jmp L.nest_f.53250
L.nest_t.53249:
  mov rax, 14
  jmp r15
L.nest_f.53250:
  mov rax, 6
  jmp r15
L.ascii-char?.53231:
  mov r14, rdi
  and r14, 255
  cmp r14, 46
  je L.nest_t.53247
  jmp L.nest_f.53248
L.nest_t.53247:
  mov rax, 14
  jmp r15
L.nest_f.53248:
  mov rax, 6
  jmp r15
L.error?.53232:
  mov r14, rdi
  and r14, 255
  cmp r14, 62
  je L.nest_t.53245
  jmp L.nest_f.53246
L.nest_t.53245:
  mov rax, 14
  jmp r15
L.nest_f.53246:
  mov rax, 6
  jmp r15
L.not.53233:
  mov r14, rdi
  cmp r14, 6
  jne L.nest_t.53243
  jmp L.nest_f.53244
L.nest_t.53243:
  mov rax, 6
  jmp r15
L.nest_f.53244:
  mov rax, 14
  jmp r15

  jmp done

; Convert RAX to a string, left in buffer msg
; The result should be a number in RAX
; build the string backwards, then reverse
done:
  mov rax, rax
printer:
  mov r10, rax
  ; if fixnum
  and r10, 7
  cmp r10, 0
  je fixnum_to_string
  ; if boolean
  mov r10, rax
  and r10, 247
  cmp r10, 6
  je boolean_to_string
  ; if void
  mov r10, rax
  and r10, 255
  cmp r10, 30
  je void_to_string
  ; if empty
  mov r10, rax
  and r10, 255
  cmp r10, 22
  je empty_to_string
  ; if ascii
  mov r10, rax
  and r10, 255
  cmp r10, 46
  je ascii_to_string
  ; if error
  mov r10, rax
  and r10, 255
  cmp r10, 62
  je error_to_string

invalid_to_string:
  mov rsi, invalid_msg
  mov rdx, invalid_len
  jmp print_msg

error_to_string:
  sar rax, 8
  mov     r10, rax
  mov     rsi, error_msg
  mov     rdx, error_len
  mov     rax, 1
  mov     rdi, 2
  syscall

  mov     rax, 60
  mov     rdi, r10
  syscall

boolean_to_string:
  xor rax, 6
  cmp rax, 0
  je false_to_string
  mov rsi, true_msg
  mov rdx, true_len
  jmp print_msg

false_to_string:
  mov rsi, false_msg
  mov rdx, false_len
  jmp print_msg

void_to_string:
  mov rsi, void_msg
  mov rdx, void_len
  jmp print_msg

empty_to_string:
  mov rsi, empty_msg
  mov rdx, empty_len
  jmp print_msg

ascii_to_string:
  sar rax, 8
  mov rsi, ascii_char_msg
  mov rdx, rax
  mov BYTE [rsi + 2], dl
  mov rdx, ascii_char_len
  jmp print_msg

fixnum_to_string:
  sar rax, 3
  mov rdi, 0                    ; index into msg, starting at beginning
  mov r12, 10                   ; divide by 10; idiv requires register arg
  mov rsi, fixnum_msg
  mov r15, 0                    ; clear r15 to store negative flag
  cmp rax, 0                    ; if negative
  js neg

loop:
  mov rdx, 0                    ; extend rax to rdx
  idiv r12                      ; signed divide RDX:RAX by r12, with result
                                ; stored in RAX ← Quotient, RDX ← Remainder.
  add rdx, 48                   ; convert digit to ASCII char
  mov BYTE [rsi + rdi], dl      ; mov char into msg
  inc rdi
  cmp rax, 0
  jne loop
  cmp r15, 0                    ; if number if negative, add - as final character
  jl add_minus

; rdi contains the length of the msg
; msg is in rsi
reverse_msg:
  mov rdx, rdi ; preserve the length for printing
  dec rdi      ; length -> final index
  mov r9, 0    ; first character
rev_loop:
  cmp rdi, r9
  jle print_msg
  ; Until rdi <= r9, swap [rsi + rdi] and [rsi + r9]
  ; Save last character into register, move first character
  mov r8b, BYTE [rsi + rdi]
  mov r10b, BYTE [rsi + r9]
  mov BYTE [rsi + rdi], r10b
  mov BYTE [rsi + r9], r8b
  inc r9
  dec rdi
  jmp rev_loop

print_msg:
  mov     rax, 1
  mov     rdi, 1                ; And I want it to write to stdout
                                ; The message pointer is in rsi
                                ; length in rdx
  syscall

  mov     rax, 60      ; I'm about to call the OS sys_exit function
  mov     rdi, 0                ; The exit code is 0
  syscall

neg:
  mov r15, -1
  imul rax, -1
  jmp loop

add_minus:
  mov BYTE [rsi + rdi], 45
  inc rdi
  jmp reverse_msg

section .bss
stack:   resb 8388608

section .data

dummy: db 0 ; Mac isn't happy with an empty .data
invalid_msg: db '"Invalid data returned"'
invalid_len: equ $-invalid_msg

fixnum_len:   equ  19
fixnum_msg:   times fixnum_len db '0'

true_msg: db '#t'
true_len: equ $-true_msg

false_msg: db '#f'
false_len: equ $-false_msg

empty_msg: db '()'
empty_len: equ $-empty_msg

void_msg: db ''
void_len: equ $-void_msg

ascii_char_msg: db '#\ '
ascii_char_len: equ $-ascii_char_msg

error_msg: db 'Run-time error; see exit code'
error_len: equ $-error_msg--------------------
FAILURE
name:       check-equal?
location:   a7_end.rkt:310:4
actual:
  '("Failed on pass uniquify\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    "Failed on pass implement-safe-primops\n  #(struct:exn:misc:match match: no matching clause for 'error? #<continuation-mark-set> error? (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 5059 4 156449 364)))"
    #t
    #t
    #t
    #t
    #<eof>
    #t
    "Failed on pass pre-assign-frame-variables\n  #(struct:exn:fail:resource with-limit: out of time #<continuation-mark-set> ...)"
    #t
    #t
    #t
    #t
    #t
    #t
    "Failed on pass expose-basic-blocks\n  #(struct:exn:misc:match match: no matching clause for 'L.tmp.52465 #<continuation-mark-set> L.tmp.52465 (#(struct:srcloc /ubc/cs/home/r/ritschel/a7/a7_a1q1b_v4u0b_x8x9a/a7-solution.rkt 1527 4 41487 304)))"
    #t
    #t
    "Failed on pass generate-x64\n  #(struct:exn:fail execute: Failed to compile #<continuation-mark-set>)"
    #t
    #t)
expected:   #t
--------------------
13/26 test failures

