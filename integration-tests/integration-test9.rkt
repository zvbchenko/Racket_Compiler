#lang racket
(require
  "../a10.rkt"
  "../a10-implement-safe-primops.rkt"
  "../a10-compiler-lib.rkt"
  "../a10-graph-lib.rkt")
(module+ test
  (require rackunit))


(module+ test

(parameterize ([current-pass-list
                  (list
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.111 (set! (rbp + 0) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.unsafe-vector-ref.3.1)
    (set! (r15 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.unsafe-vector-set!.2.2)
    (set! (r14 + 6) 24)
    (set! r10 r14)
    (set! r13 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.vector-init-loop.80.3)
    (set! (r14 + 6) 24)
    (set! r10 r14)
    (set! r8 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.make-init-vector.1.4)
    (set! (r14 + 6) 8)
    (set! r10 r14)
    (set! rdi r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.eq?.77.5)
    (set! (r14 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 2))
    (nop)
    (set! (r9 + -2) L.cons.76.6)
    (set! (r9 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.not.75.7)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.vector?.74.8)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.procedure?.73.9)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.pair?.72.10)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.error?.71.11)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.ascii-char?.70.12)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.void?.69.13)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.empty?.68.14)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.boolean?.67.15)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.fixnum?.66.16)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.procedure-arity.65.17)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.cdr.64.18)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.car.63.19)
    (set! (rcx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (set! (rbx + -2) L.vector-ref.62.20)
    (set! (rbx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (set! (rsp + -2) L.vector-set!.61.21)
    (set! (rsp + 6) 24)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 8))
    (set! r10 (+ r10 2))
    (set! (rbp + 8) r10)
    (nop)
    (set! r10 (rbp + 8))
    (set! (r10 + -2) L.vector-length.60.22)
    (set! r10 (rbp + 8))
    (set! (r10 + 6) 8)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 24))
    (set! r10 (rbp + 8))
    (set! r10 (+ r10 2))
    (set! (rbp + 8) r10)
    (nop)
    (set! r10 (rbp + 8))
    (set! (r10 + -2) L.make-vector.59.23)
    (set! r10 (rbp + 8))
    (set! (r10 + 6) 8)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.>=.58.24)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.>.57.25)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.<=.56.26)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.<.55.27)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.-.54.28)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (set! r10 (rbp + 16))
    (set! (rbp + 24) r10)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.+.53.29)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (set! r10 (rbp + 16))
    (set! (rbp + 32) r10)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (set! (r10 + -2) L.*.52.30)
    (set! r10 (rbp + 16))
    (set! (r10 + 6) 16)
    (nop)
    (set! (r8 + 14) r8)
    (set! (rdi + 14) r8)
    (set! (rbx + 14) r15)
    (set! (rsp + 14) r13)
    (set! r10 (rbp + 8))
    (set! (r10 + 14) rdi)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 48))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.zeros.4.31)
    (set! (r15 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 56))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.map.5.32)
    (set! (r13 + 6) 16)
    (set! (rbp + 16) r13)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.inc.6.33)
    (set! (r13 + 6) 8)
    (set! (rbp + 8) r13)
    (set! (r15 + 14) r9)
    (set! r10 (rbp + 24))
    (set! (r15 + 22) r10)
    (set! (r15 + 30) r15)
    (set! (r15 + 38) r14)
    (set! r10 (rbp + 16))
    (set! (r10 + 14) rdx)
    (set! r10 (rbp + 16))
    (set! r11 (rbp + 16))
    (set! (r11 + 22) r10)
    (set! r10 (rbp + 16))
    (set! (r10 + 30) rcx)
    (set! r10 (rbp + 16))
    (set! (r10 + 38) r9)
    (set! r10 (rbp + 16))
    (set! (r10 + 46) rsi)
    (set! r10 (rbp + 32))
    (set! r11 (rbp + 8))
    (set! (r11 + 14) r10)
    (nop)
    (set! rbp (+ rbp 24))
    (set! rdx 22)
    (set! rsi 256)
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.112)
    (jump L.zeros.4.31)
    (define L.jp.35 (set! (rbp + 0) r15))
    (set! (rbp + 16) rdi)
    (set! r10 rsi)
    (set! r15 r10)
    (set! (rbp + 24) rdx)
    (set! (rbp + 8) rcx)
    (set! r10 r8)
    (set! r14 r10)
    (set! (rbp + 32) r9)
    (set! r13 (rbp + 32))
    (nop)
    (set! rbp (+ rbp 40))
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.120)
    (jump L.cdr.64.18)
    (define L.rp.120 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 40))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.121)
    (jump L.map.5.32)
    (define L.rp.121 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.cons.76.6)
    (define L.jp.37 (set! (rbp + 16) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! (rbp + 40) rdx)
    (set! (rbp + 24) rcx)
    (set! (rbp + 32) r8)
    (set! (rbp + 48) r9)
    (nop)
    (set! r13 (rbp + 8))
    (compare r15 6)
    (jump-if neq? L.nest_t.274)
    (jump L.nest_f.275)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -56))
    (set! r15 L.rp.119)
    (set! r10 (rbp + -48))
    (jump r10)
    (define L.rp.119 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r9 (rbp + 48))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.nest_t.274 (set! r10 (r14 + -2)))
    (set! (rbp + 8) r10)
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -16))
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.118)
    (jump L.car.63.19)
    (define L.nest_f.275 (set! r9 (rbp + 48)))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! rdi 10814)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.jp.38 (nop))
    (nop)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! rsi r10)
    (set! r10 rcx)
    (set! r14 r10)
    (set! r10 r8)
    (set! rcx r10)
    (nop)
    (set! rdx (rbp + 0))
    (set! r8 (rbp + 8))
    (compare rdi 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.270 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r10 r14)
    (set! rcx r10)
    (set! r10 rsi)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.37)
    (define L.nest_f.271 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r10 r14)
    (set! rcx r10)
    (set! r10 rsi)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.37)
    (define L.nest_t.272 (set! rdi (r13 + 6)))
    (compare rdi 8)
    (jump-if eq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_f.273 (nop))
    (set! r10 rsi)
    (set! r8 r10)
    (nop)
    (nop)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 11070)
    (nop)
    (jump L.jp.35)
    (define L.jp.42 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_t.268 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.269 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.264 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.265 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.266 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_f.267 (set! rax 62))
    (jump r15)
    (define L.jp.46 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_t.262 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.263 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.258 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.46)
    (define L.nest_f.259 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.46)
    (define L.nest_t.260 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_f.261 (set! rax 318))
    (jump r15)
    (define L.jp.50 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_t.256 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.257 (set! rax 574))
    (jump r15)
    (define L.jp.51 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.50)
    (define L.nest_f.253 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.50)
    (define L.nest_t.254 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 574))
    (jump r15)
    (define L.jp.55 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! rax 14))
    (jump r15)
    (define L.nest_f.249 (set! rax 6))
    (jump r15)
    (define L.nest_t.250 (compare r13 r9))
    (jump-if < L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.56 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.55)
    (define L.nest_f.245 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.55)
    (define L.nest_t.246 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 830))
    (jump r15)
    (define L.jp.60 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! rax 14))
    (jump r15)
    (define L.nest_f.241 (set! rax 6))
    (jump r15)
    (define L.nest_t.242 (compare r13 r9))
    (jump-if <= L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.61 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.60)
    (define L.nest_f.237 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.60)
    (define L.nest_t.238 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1086))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! rax 14))
    (jump r15)
    (define L.nest_f.233 (set! rax 6))
    (jump r15)
    (define L.nest_t.234 (compare r13 r9))
    (jump-if > L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.66 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.229 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.nest_t.230 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1342))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! rax 14))
    (jump r15)
    (define L.nest_f.225 (set! rax 6))
    (jump r15)
    (define L.nest_t.226 (compare r13 r9))
    (jump-if >= L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.71 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.220 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.221 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.222 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_f.223 (set! rax 1598))
    (jump r15)
    (define L.jp.73 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.219 (set! rax 1854))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.216 (set! rax (r13 + -3)))
    (jump r15)
    (define L.nest_f.217 (set! rax 2110))
    (jump r15)
    (define L.jp.78 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_t.214 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.215 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.210 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.78)
    (define L.nest_f.211 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.78)
    (define L.nest_t.212 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_f.213 (set! rax 2366))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_t.208 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.209 (set! rax 2622))
    (jump r15)
    (define L.jp.83 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.204 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.205 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.nest_t.206 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_f.207 (set! rax 2622))
    (jump r15)
    (define L.jp.85 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (r13 + -1)))
    (jump r15)
    (define L.nest_f.203 (set! rax 2878))
    (jump r15)
    (define L.jp.87 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! rax (r13 + 7)))
    (jump r15)
    (define L.nest_f.201 (set! rax 3134))
    (jump r15)
    (define L.jp.89 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! rax (r13 + 6)))
    (jump r15)
    (define L.nest_f.199 (set! rax 3390))
    (jump r15)
    (define L.jp.102 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.196 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.197 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (set! (r8 + rdi) 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.jp.105 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_t.194 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (set! (r14 + r9) r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.195 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.190 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.105)
    (define L.nest_f.191 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.105)
    (define L.nest_t.192 (compare r13 0))
    (jump-if >= L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_f.193 (set! rax 2366))
    (jump r15)
    (define L.jp.109 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_t.188 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (r14 + r13))
    (jump r15)
    (define L.nest_f.189 (set! rax 2622))
    (jump r15)
    (define L.jp.110 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.184 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.109)
    (define L.nest_f.185 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.109)
    (define L.nest_t.186 (compare r13 0))
    (jump-if >= L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_f.187 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r14 + -3))
    (compare r13 r9)
    (jump-if < L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.110)
    (define L.nest_f.183 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.110)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (r14 + -3))
    (compare r13 r8)
    (jump-if < L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.181 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.vector-init-loop.80.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (r9 + 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.179 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (set! (r9 + -3) r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.eq?.77.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.cons.76.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (set! (r9 + -1) r14)
    (set! (r9 + 7) r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.75.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 6))
    (jump r15)
    (define L.nest_f.175 (set! rax 14))
    (jump r15)
    (define L.vector?.74.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.procedure?.73.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.pair?.72.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.error?.71.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.70.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.void?.69.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.empty?.68.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.boolean?.67.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! rax 14))
    (jump r15)
    (define L.nest_f.159 (set! rax 6))
    (jump r15)
    (define L.fixnum?.66.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! rax 14))
    (jump r15)
    (define L.nest_f.157 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.65.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.89)
    (define L.nest_f.155 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.89)
    (define L.cdr.64.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.87)
    (define L.nest_f.153 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.87)
    (define L.car.63.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.85)
    (define L.nest_f.151 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.85)
    (define L.vector-ref.62.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r9 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.83)
    (define L.nest_f.149 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.83)
    (define L.vector-set!.61.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (r8 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.147 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.vector-length.60.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.145 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.make-vector.59.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.73)
    (define L.nest_f.143 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.73)
    (define L.>=.58.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.141 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.>.57.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.66)
    (define L.nest_f.139 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.66)
    (define L.<=.56.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.61)
    (define L.nest_f.137 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.61)
    (define L.<.55.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.56)
    (define L.nest_f.135 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.56)
    (define L.-.54.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.51)
    (define L.nest_f.133 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.51)
    (define L.+.53.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.nest_t.130 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.131 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.*.52.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.nest_t.128 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.129 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.zeros.4.31 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 24) rsi)
    (set! (rbp + 8) rdx)
    (set! r10 (r15 + 14))
    (set! (rbp + 32) r10)
    (set! r10 (r15 + 22))
    (set! (rbp + 16) r10)
    (set! r10 (r15 + 30))
    (set! (rbp + 40) r10)
    (set! r15 (r15 + 38))
    (nop)
    (set! rbp (+ rbp 48))
    (set! rdx 0)
    (set! rsi (rbp + -24))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.115)
    (jump L.eq?.77.5)
    (define L.rp.115 (set! rbp (- rbp 48)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.116 (set! rbp (- rbp 48)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 48))
    (set! rdx (rbp + -40))
    (set! rsi 0)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.117)
    (jump L.cons.76.6)
    (define L.rp.117 (set! rbp (- rbp 48)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.zeros.4.31)
    (define L.nest_t.126 (set! rax (rbp + 8)))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.nest_f.127 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 48))
    (set! rdx 8)
    (set! rsi (rbp + -24))
    (set! rdi (rbp + -32))
    (set! r15 L.rp.116)
    (jump L.-.54.28)
    (define L.map.5.32 (set! (rbp + 16) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 32) rsi)
    (set! (rbp + 24) rdx)
    (set! r10 (r15 + 14))
    (set! (rbp + 56) r10)
    (set! r10 (r15 + 22))
    (set! (rbp + 40) r10)
    (set! r10 (r15 + 30))
    (set! (rbp + 0) r10)
    (set! r10 (r15 + 38))
    (set! (rbp + 48) r10)
    (set! r15 (r15 + 46))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -40))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.114)
    (jump L.empty?.68.14)
    (define L.rp.114 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.124)
    (jump L.nest_f.125)
    (define L.nest_t.122 (set! r10 (rbp + 0)))
    (set! (rbp + 8) r10)
    (set! r10 (rbp + 32))
    (set! (rbp + 0) r10)
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi 14)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_f.123 (set! r10 (rbp + 0)))
    (set! (rbp + 8) r10)
    (set! r10 (rbp + 32))
    (set! (rbp + 0) r10)
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi 6)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_t.124 (set! rax (rbp + 24)))
    (set! r10 (rbp + 16))
    (jump r10)
    (define L.nest_f.125 (set! r15 (rbp + 48)))
    (set! r15 (rbp + 32))
    (set! r10 r15)
    (set! r10 (bitwise-and r10 7))
    (set! r14 r10)
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.122)
    (jump L.nest_f.123)
    (define L.inc.6.33 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (nop)
    (set! rdx 8)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.+.53.29)
    (define L.rp.112 (set! rbp (- rbp 24)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r14 (rbp + 16))
    (set! rbp (+ rbp 24))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.113)
    (jump L.map.5.32)
    (define L.rp.113 (set! rbp (- rbp 24)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rax r10)
    (set! r10 (rbp + 0))
    (jump r10))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

(parameterize ([current-pass-list
                  (list
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.111 (set! (rbp + 0) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (set! r10 r14)
    (set! r13 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.vector-init-loop.80.3)
    (mset! r14 6 24)
    (set! r10 r14)
    (set! r8 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.make-init-vector.1.4)
    (mset! r14 6 8)
    (set! r10 r14)
    (set! rdi r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.eq?.77.5)
    (mset! r14 6 16)
    (nop)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 2))
    (nop)
    (mset! r9 -2 L.cons.76.6)
    (mset! r9 6 16)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.not.75.7)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.vector?.74.8)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.procedure?.73.9)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.pair?.72.10)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.error?.71.11)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.ascii-char?.70.12)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.void?.69.13)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.empty?.68.14)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.boolean?.67.15)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.fixnum?.66.16)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.procedure-arity.65.17)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.cdr.64.18)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.car.63.19)
    (mset! rcx 6 8)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.vector-ref.62.20)
    (mset! rbx 6 16)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.vector-set!.61.21)
    (mset! rsp 6 24)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 8))
    (set! r10 (+ r10 2))
    (set! (rbp + 8) r10)
    (nop)
    (set! r10 (rbp + 8))
    (mset! r10 -2 L.vector-length.60.22)
    (set! r10 (rbp + 8))
    (mset! r10 6 8)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 24))
    (set! r10 (rbp + 8))
    (set! r10 (+ r10 2))
    (set! (rbp + 8) r10)
    (nop)
    (set! r10 (rbp + 8))
    (mset! r10 -2 L.make-vector.59.23)
    (set! r10 (rbp + 8))
    (mset! r10 6 8)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.>=.58.24)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.>.57.25)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.<=.56.26)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.<.55.27)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.-.54.28)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (set! r10 (rbp + 16))
    (set! (rbp + 24) r10)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.+.53.29)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (set! r10 (rbp + 16))
    (set! (rbp + 32) r10)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 16))
    (set! r10 (+ r10 2))
    (set! (rbp + 16) r10)
    (nop)
    (set! r10 (rbp + 16))
    (mset! r10 -2 L.*.52.30)
    (set! r10 (rbp + 16))
    (mset! r10 6 16)
    (nop)
    (mset! r8 14 r8)
    (mset! rdi 14 r8)
    (mset! rbx 14 r15)
    (mset! rsp 14 r13)
    (set! r10 (rbp + 8))
    (mset! r10 14 rdi)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 48))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.zeros.4.31)
    (mset! r15 6 16)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 56))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.map.5.32)
    (mset! r13 6 16)
    (set! (rbp + 16) r13)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.inc.6.33)
    (mset! r13 6 8)
    (set! (rbp + 8) r13)
    (mset! r15 14 r9)
    (set! r10 (rbp + 24))
    (mset! r15 22 r10)
    (mset! r15 30 r15)
    (mset! r15 38 r14)
    (set! r10 (rbp + 16))
    (mset! r10 14 rdx)
    (set! r10 (rbp + 16))
    (set! r11 (rbp + 16))
    (mset! r11 22 r10)
    (set! r10 (rbp + 16))
    (mset! r10 30 rcx)
    (set! r10 (rbp + 16))
    (mset! r10 38 r9)
    (set! r10 (rbp + 16))
    (mset! r10 46 rsi)
    (set! r10 (rbp + 32))
    (set! r11 (rbp + 8))
    (mset! r11 14 r10)
    (nop)
    (set! rbp (+ rbp 24))
    (set! rdx 22)
    (set! rsi 256)
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.112)
    (jump L.zeros.4.31)
    (define L.jp.35 (set! (rbp + 0) r15))
    (set! (rbp + 16) rdi)
    (set! r10 rsi)
    (set! r15 r10)
    (set! (rbp + 24) rdx)
    (set! (rbp + 8) rcx)
    (set! r10 r8)
    (set! r14 r10)
    (set! (rbp + 32) r9)
    (set! r13 (rbp + 32))
    (nop)
    (set! rbp (+ rbp 40))
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.120)
    (jump L.cdr.64.18)
    (define L.rp.120 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 40))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.121)
    (jump L.map.5.32)
    (define L.rp.121 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.cons.76.6)
    (define L.jp.37 (set! (rbp + 16) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! (rbp + 40) rdx)
    (set! (rbp + 24) rcx)
    (set! (rbp + 32) r8)
    (set! (rbp + 48) r9)
    (nop)
    (set! r13 (rbp + 8))
    (compare r15 6)
    (jump-if neq? L.nest_t.274)
    (jump L.nest_f.275)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -56))
    (set! r15 L.rp.119)
    (set! r10 (rbp + -48))
    (jump r10)
    (define L.rp.119 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r9 (rbp + 48))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.nest_t.274 (set! r10 (mref r14 -2)))
    (set! (rbp + 8) r10)
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -16))
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.118)
    (jump L.car.63.19)
    (define L.nest_f.275 (set! r9 (rbp + 48)))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! rdi 10814)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.jp.38 (nop))
    (nop)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! rsi r10)
    (set! r10 rcx)
    (set! r14 r10)
    (set! r10 r8)
    (set! rcx r10)
    (nop)
    (set! rdx (rbp + 0))
    (set! r8 (rbp + 8))
    (compare rdi 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.270 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r10 r14)
    (set! rcx r10)
    (set! r10 rsi)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.37)
    (define L.nest_f.271 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r10 r14)
    (set! rcx r10)
    (set! r10 rsi)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.37)
    (define L.nest_t.272 (set! rdi (mref r13 6)))
    (compare rdi 8)
    (jump-if eq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_f.273 (nop))
    (set! r10 rsi)
    (set! r8 r10)
    (nop)
    (nop)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 11070)
    (nop)
    (jump L.jp.35)
    (define L.jp.42 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_t.268 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.269 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.264 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.265 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.266 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_f.267 (set! rax 62))
    (jump r15)
    (define L.jp.46 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_t.262 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.263 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.258 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.46)
    (define L.nest_f.259 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.46)
    (define L.nest_t.260 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_f.261 (set! rax 318))
    (jump r15)
    (define L.jp.50 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_t.256 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.257 (set! rax 574))
    (jump r15)
    (define L.jp.51 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.50)
    (define L.nest_f.253 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.50)
    (define L.nest_t.254 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 574))
    (jump r15)
    (define L.jp.55 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! rax 14))
    (jump r15)
    (define L.nest_f.249 (set! rax 6))
    (jump r15)
    (define L.nest_t.250 (compare r13 r9))
    (jump-if < L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.56 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.55)
    (define L.nest_f.245 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.55)
    (define L.nest_t.246 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 830))
    (jump r15)
    (define L.jp.60 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! rax 14))
    (jump r15)
    (define L.nest_f.241 (set! rax 6))
    (jump r15)
    (define L.nest_t.242 (compare r13 r9))
    (jump-if <= L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.61 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.60)
    (define L.nest_f.237 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.60)
    (define L.nest_t.238 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1086))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! rax 14))
    (jump r15)
    (define L.nest_f.233 (set! rax 6))
    (jump r15)
    (define L.nest_t.234 (compare r13 r9))
    (jump-if > L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.66 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.229 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.nest_t.230 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1342))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! rax 14))
    (jump r15)
    (define L.nest_f.225 (set! rax 6))
    (jump r15)
    (define L.nest_t.226 (compare r13 r9))
    (jump-if >= L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.71 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.220 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.221 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.222 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_f.223 (set! rax 1598))
    (jump r15)
    (define L.jp.73 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.219 (set! rax 1854))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.216 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.217 (set! rax 2110))
    (jump r15)
    (define L.jp.78 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_t.214 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.215 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.210 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.78)
    (define L.nest_f.211 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.78)
    (define L.nest_t.212 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_f.213 (set! rax 2366))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_t.208 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.209 (set! rax 2622))
    (jump r15)
    (define L.jp.83 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.204 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.205 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.nest_t.206 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_f.207 (set! rax 2622))
    (jump r15)
    (define L.jp.85 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.203 (set! rax 2878))
    (jump r15)
    (define L.jp.87 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.201 (set! rax 3134))
    (jump r15)
    (define L.jp.89 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.199 (set! rax 3390))
    (jump r15)
    (define L.jp.102 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.196 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.197 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.jp.105 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_t.194 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.195 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.190 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.105)
    (define L.nest_f.191 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.105)
    (define L.nest_t.192 (compare r13 0))
    (jump-if >= L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_f.193 (set! rax 2366))
    (jump r15)
    (define L.jp.109 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_t.188 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.189 (set! rax 2622))
    (jump r15)
    (define L.jp.110 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.184 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.109)
    (define L.nest_f.185 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.109)
    (define L.nest_t.186 (compare r13 0))
    (jump-if >= L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_f.187 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.110)
    (define L.nest_f.183 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.110)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.181 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.vector-init-loop.80.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.179 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.eq?.77.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.cons.76.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.75.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 6))
    (jump r15)
    (define L.nest_f.175 (set! rax 14))
    (jump r15)
    (define L.vector?.74.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.procedure?.73.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.pair?.72.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.error?.71.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.70.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.void?.69.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.empty?.68.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.boolean?.67.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! rax 14))
    (jump r15)
    (define L.nest_f.159 (set! rax 6))
    (jump r15)
    (define L.fixnum?.66.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! rax 14))
    (jump r15)
    (define L.nest_f.157 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.65.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.89)
    (define L.nest_f.155 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.89)
    (define L.cdr.64.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.87)
    (define L.nest_f.153 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.87)
    (define L.car.63.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.85)
    (define L.nest_f.151 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.85)
    (define L.vector-ref.62.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r9 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.83)
    (define L.nest_f.149 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.83)
    (define L.vector-set!.61.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (mref r8 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.147 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.vector-length.60.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.145 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.make-vector.59.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.73)
    (define L.nest_f.143 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.73)
    (define L.>=.58.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.141 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.>.57.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.66)
    (define L.nest_f.139 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.66)
    (define L.<=.56.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.61)
    (define L.nest_f.137 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.61)
    (define L.<.55.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.56)
    (define L.nest_f.135 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.56)
    (define L.-.54.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.51)
    (define L.nest_f.133 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.51)
    (define L.+.53.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.nest_t.130 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.131 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.*.52.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.nest_t.128 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.129 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.zeros.4.31 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 24) rsi)
    (set! (rbp + 8) rdx)
    (set! r10 (mref r15 14))
    (set! (rbp + 32) r10)
    (set! r10 (mref r15 22))
    (set! (rbp + 16) r10)
    (set! r10 (mref r15 30))
    (set! (rbp + 40) r10)
    (set! r15 (mref r15 38))
    (nop)
    (set! rbp (+ rbp 48))
    (set! rdx 0)
    (set! rsi (rbp + -24))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.115)
    (jump L.eq?.77.5)
    (define L.rp.115 (set! rbp (- rbp 48)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.116 (set! rbp (- rbp 48)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 48))
    (set! rdx (rbp + -40))
    (set! rsi 0)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.117)
    (jump L.cons.76.6)
    (define L.rp.117 (set! rbp (- rbp 48)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.zeros.4.31)
    (define L.nest_t.126 (set! rax (rbp + 8)))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.nest_f.127 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 48))
    (set! rdx 8)
    (set! rsi (rbp + -24))
    (set! rdi (rbp + -32))
    (set! r15 L.rp.116)
    (jump L.-.54.28)
    (define L.map.5.32 (set! (rbp + 16) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 32) rsi)
    (set! (rbp + 24) rdx)
    (set! r10 (mref r15 14))
    (set! (rbp + 56) r10)
    (set! r10 (mref r15 22))
    (set! (rbp + 40) r10)
    (set! r10 (mref r15 30))
    (set! (rbp + 0) r10)
    (set! r10 (mref r15 38))
    (set! (rbp + 48) r10)
    (set! r15 (mref r15 46))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -40))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.114)
    (jump L.empty?.68.14)
    (define L.rp.114 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.124)
    (jump L.nest_f.125)
    (define L.nest_t.122 (set! r10 (rbp + 0)))
    (set! (rbp + 8) r10)
    (set! r10 (rbp + 32))
    (set! (rbp + 0) r10)
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi 14)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_f.123 (set! r10 (rbp + 0)))
    (set! (rbp + 8) r10)
    (set! r10 (rbp + 32))
    (set! (rbp + 0) r10)
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi 6)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_t.124 (set! rax (rbp + 24)))
    (set! r10 (rbp + 16))
    (jump r10)
    (define L.nest_f.125 (set! r15 (rbp + 48)))
    (set! r15 (rbp + 32))
    (set! r10 r15)
    (set! r10 (bitwise-and r10 7))
    (set! r14 r10)
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.122)
    (jump L.nest_f.123)
    (define L.inc.6.33 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (nop)
    (set! rdx 8)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.+.53.29)
    (define L.rp.112 (set! rbp (- rbp 24)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r14 (rbp + 16))
    (set! rbp (+ rbp 24))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.113)
    (jump L.map.5.32)
    (define L.rp.113 (set! rbp (- rbp 24)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rax r10)
    (set! r10 (rbp + 0))
    (jump r10))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

(parameterize ([current-pass-list
                  (list
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.111 (set! (rbp + 0) r15))
    (set! r15 r12)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r14 r12)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (set! r13 r14)
    (set! r14 r12)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.vector-init-loop.80.3)
    (mset! r14 6 24)
    (set! r8 r14)
    (set! r14 r12)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.make-init-vector.1.4)
    (mset! r14 6 8)
    (set! rdi r14)
    (set! r14 r12)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.eq?.77.5)
    (mset! r14 6 16)
    (nop)
    (set! r9 r12)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 2))
    (nop)
    (mset! r9 -2 L.cons.76.6)
    (mset! r9 6 16)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.not.75.7)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.vector?.74.8)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.procedure?.73.9)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.pair?.72.10)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.error?.71.11)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.ascii-char?.70.12)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.void?.69.13)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.empty?.68.14)
    (mset! rsi 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.boolean?.67.15)
    (mset! rdx 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.fixnum?.66.16)
    (mset! rdx 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.procedure-arity.65.17)
    (mset! rdx 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.cdr.64.18)
    (mset! rdx 6 8)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.car.63.19)
    (mset! rcx 6 8)
    (nop)
    (set! rbx r12)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.vector-ref.62.20)
    (mset! rbx 6 16)
    (nop)
    (set! rsp r12)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.vector-set!.61.21)
    (mset! rsp 6 24)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 8) (+ (rbp + 8) 2))
    (nop)
    (mset! (rbp + 8) -2 L.vector-length.60.22)
    (mset! (rbp + 8) 6 8)
    (nop)
    (set! (rbp + 8) r12)
    (set! r12 (+ r12 24))
    (set! (rbp + 8) (+ (rbp + 8) 2))
    (nop)
    (mset! (rbp + 8) -2 L.make-vector.59.23)
    (mset! (rbp + 8) 6 8)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.>=.58.24)
    (mset! (rbp + 16) 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.>.57.25)
    (mset! (rbp + 16) 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.<=.56.26)
    (mset! (rbp + 16) 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.<.55.27)
    (mset! (rbp + 16) 6 16)
    (nop)
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.-.54.28)
    (mset! (rbp + 16) 6 16)
    (set! (rbp + 24) (rbp + 16))
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.+.53.29)
    (mset! (rbp + 16) 6 16)
    (set! (rbp + 32) (rbp + 16))
    (set! (rbp + 16) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 16) (+ (rbp + 16) 2))
    (nop)
    (mset! (rbp + 16) -2 L.*.52.30)
    (mset! (rbp + 16) 6 16)
    (nop)
    (mset! r8 14 r8)
    (mset! rdi 14 r8)
    (mset! rbx 14 r15)
    (mset! rsp 14 r13)
    (mset! (rbp + 8) 14 rdi)
    (set! r15 r12)
    (set! r12 (+ r12 48))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.zeros.4.31)
    (mset! r15 6 16)
    (nop)
    (set! r13 r12)
    (set! r12 (+ r12 56))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.map.5.32)
    (mset! r13 6 16)
    (set! (rbp + 16) r13)
    (set! r13 r12)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.inc.6.33)
    (mset! r13 6 8)
    (set! (rbp + 8) r13)
    (mset! r15 14 r9)
    (mset! r15 22 (rbp + 24))
    (mset! r15 30 r15)
    (mset! r15 38 r14)
    (mset! (rbp + 16) 14 rdx)
    (mset! (rbp + 16) 22 (rbp + 16))
    (mset! (rbp + 16) 30 rcx)
    (mset! (rbp + 16) 38 r9)
    (mset! (rbp + 16) 46 rsi)
    (mset! (rbp + 8) 14 (rbp + 32))
    (nop)
    (set! rbp (+ rbp 24))
    (set! rdx 22)
    (set! rsi 256)
    (set! rdi r15)
    (set! r15 L.rp.112)
    (jump L.zeros.4.31)
    (define L.jp.35 (set! (rbp + 0) r15))
    (set! (rbp + 16) rdi)
    (set! r15 rsi)
    (set! (rbp + 24) rdx)
    (set! (rbp + 8) rcx)
    (set! r14 r8)
    (set! (rbp + 32) r9)
    (set! r13 (rbp + 32))
    (nop)
    (set! rbp (+ rbp 40))
    (set! rsi r14)
    (set! rdi r15)
    (set! r15 L.rp.120)
    (jump L.cdr.64.18)
    (define L.rp.120 (set! rbp (- rbp 40)))
    (set! r15 rax)
    (set! rbp (+ rbp 40))
    (set! rdx r15)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.121)
    (jump L.map.5.32)
    (define L.rp.121 (set! rbp (- rbp 40)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.cons.76.6)
    (define L.jp.37 (set! (rbp + 16) r15))
    (set! r15 rdi)
    (set! r14 rsi)
    (set! (rbp + 40) rdx)
    (set! (rbp + 24) rcx)
    (set! (rbp + 32) r8)
    (set! (rbp + 48) r9)
    (nop)
    (set! r13 (rbp + 8))
    (compare r15 6)
    (jump-if neq? L.nest_t.274)
    (jump L.nest_f.275)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r15 rax)
    (set! rbp (+ rbp 56))
    (set! rsi r15)
    (set! rdi (rbp + -56))
    (set! r15 L.rp.119)
    (jump (rbp + -48))
    (define L.rp.119 (set! rbp (- rbp 56)))
    (set! r15 rax)
    (set! r9 (rbp + 48))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! rdi r15)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.nest_t.274 (set! (rbp + 8) (mref r14 -2)))
    (set! r15 r13)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -16))
    (set! rdi r13)
    (set! r15 L.rp.118)
    (jump L.car.63.19)
    (define L.nest_f.275 (set! r9 (rbp + 48)))
    (set! r8 (rbp + 40))
    (set! rcx (rbp + 32))
    (set! rdx (rbp + 0))
    (set! rsi (rbp + 24))
    (set! rdi 10814)
    (set! r15 (rbp + 16))
    (jump L.jp.35)
    (define L.jp.38 (nop))
    (nop)
    (set! r13 rsi)
    (set! rsi rdx)
    (set! r14 rcx)
    (set! rcx r8)
    (nop)
    (set! rdx (rbp + 0))
    (set! r8 (rbp + 8))
    (compare rdi 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.270 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r8 rcx)
    (set! rcx r14)
    (set! rdx rsi)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.37)
    (define L.nest_f.271 (set! (rbp + 8) r8))
    (set! (rbp + 0) rdx)
    (nop)
    (set! r8 rcx)
    (set! rcx r14)
    (set! rdx rsi)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.37)
    (define L.nest_t.272 (set! rdi (mref r13 6)))
    (compare rdi 8)
    (jump-if eq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_f.273 (nop))
    (set! r8 rsi)
    (nop)
    (nop)
    (set! rsi r14)
    (set! rdi 11070)
    (nop)
    (jump L.jp.35)
    (define L.jp.42 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_t.268 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r14 (* r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.269 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.264 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.265 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.266 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_f.267 (set! rax 62))
    (jump r15)
    (define L.jp.46 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_t.262 (set! r14 (+ r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.263 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.258 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.46)
    (define L.nest_f.259 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.46)
    (define L.nest_t.260 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_f.261 (set! rax 318))
    (jump r15)
    (define L.jp.50 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_t.256 (set! r14 (- r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.257 (set! rax 574))
    (jump r15)
    (define L.jp.51 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.50)
    (define L.nest_f.253 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.50)
    (define L.nest_t.254 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 574))
    (jump r15)
    (define L.jp.55 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! rax 14))
    (jump r15)
    (define L.nest_f.249 (set! rax 6))
    (jump r15)
    (define L.nest_t.250 (compare r13 r9))
    (jump-if < L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.56 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.55)
    (define L.nest_f.245 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.55)
    (define L.nest_t.246 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 830))
    (jump r15)
    (define L.jp.60 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! rax 14))
    (jump r15)
    (define L.nest_f.241 (set! rax 6))
    (jump r15)
    (define L.nest_t.242 (compare r13 r9))
    (jump-if <= L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.61 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.60)
    (define L.nest_f.237 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.60)
    (define L.nest_t.238 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1086))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! rax 14))
    (jump r15)
    (define L.nest_f.233 (set! rax 6))
    (jump r15)
    (define L.nest_t.234 (compare r13 r9))
    (jump-if > L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.66 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.229 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.nest_t.230 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1342))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! rax 14))
    (jump r15)
    (define L.nest_f.225 (set! rax 6))
    (jump r15)
    (define L.nest_t.226 (compare r13 r9))
    (jump-if >= L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.71 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.220 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.221 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.222 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_f.223 (set! rax 1598))
    (jump r15)
    (define L.jp.73 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! rsi r9)
    (set! rdi r14)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.219 (set! rax 1854))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.216 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.217 (set! rax 2110))
    (jump r15)
    (define L.jp.78 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! rdi rcx)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_t.214 (nop))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.215 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (nop)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rsi r8)
    (compare rdi 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.210 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.78)
    (define L.nest_f.211 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.78)
    (define L.nest_t.212 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_f.213 (set! rax 2366))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r13 6)
    (jump-if neq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_t.208 (nop))
    (set! rdx r9)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.209 (set! rax 2622))
    (jump r15)
    (define L.jp.83 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (compare r8 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.204 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.205 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.nest_t.206 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_f.207 (set! rax 2622))
    (jump r15)
    (define L.jp.85 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.203 (set! rax 2878))
    (jump r15)
    (define L.jp.87 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.201 (set! rax 3134))
    (jump r15)
    (define L.jp.89 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.199 (set! rax 3390))
    (jump r15)
    (define L.jp.102 (nop))
    (nop)
    (set! r9 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.196 (set! rax r8))
    (jump r15)
    (define L.nest_f.197 (set! rdi (arithmetic-shift-right r9 3)))
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! rcx r8)
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.jp.105 (nop))
    (set! r9 rdi)
    (set! r8 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (compare r9 6)
    (jump-if neq? L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_t.194 (set! r9 (arithmetic-shift-right r8 3)))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.195 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r14 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.190 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.105)
    (define L.nest_f.191 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.105)
    (define L.nest_t.192 (compare r13 0))
    (jump-if >= L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_f.193 (set! rax 2366))
    (jump r15)
    (define L.jp.109 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_t.188 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.189 (set! rax 2622))
    (jump r15)
    (define L.jp.110 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.184 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.109)
    (define L.nest_f.185 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.109)
    (define L.nest_t.186 (compare r13 0))
    (jump-if >= L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_f.187 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.110)
    (define L.nest_f.183 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.110)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.181 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.vector-init-loop.80.3 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r8 rcx)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.179 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.make-init-vector.1.4 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (arithmetic-shift-right r14 3))
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r8 r12)
    (set! r12 (+ r12 r9))
    (set! r9 (+ r8 3))
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! rcx r9)
    (set! rdx 0)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.80.3)
    (define L.eq?.77.5 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r14 r13)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.cons.76.6 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 r12)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! rax r9)
    (jump r15)
    (define L.not.75.7 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 6))
    (jump r15)
    (define L.nest_f.175 (set! rax 14))
    (jump r15)
    (define L.vector?.74.8 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.procedure?.73.9 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.pair?.72.10 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.error?.71.11 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.70.12 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.void?.69.13 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.empty?.68.14 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.boolean?.67.15 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! rax 14))
    (jump r15)
    (define L.nest_f.159 (set! rax 6))
    (jump r15)
    (define L.fixnum?.66.16 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! rax 14))
    (jump r15)
    (define L.nest_f.157 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.65.17 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.89)
    (define L.nest_f.155 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.89)
    (define L.cdr.64.18 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.87)
    (define L.nest_f.153 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.87)
    (define L.car.63.19 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.85)
    (define L.nest_f.151 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.85)
    (define L.vector-ref.62.20 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r9 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.83)
    (define L.nest_f.149 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.83)
    (define L.vector-set!.61.21 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rdi (mref r8 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.147 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.vector-length.60.22 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.145 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.make-vector.59.23 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (bitwise-and r14 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.73)
    (define L.nest_f.143 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.73)
    (define L.>=.58.24 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.141 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.>.57.25 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.66)
    (define L.nest_f.139 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.66)
    (define L.<=.56.26 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.61)
    (define L.nest_f.137 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.61)
    (define L.<.55.27 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.56)
    (define L.nest_f.135 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.56)
    (define L.-.54.28 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.51)
    (define L.nest_f.133 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.51)
    (define L.+.53.29 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.nest_t.130 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.131 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.*.52.30 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.nest_t.128 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.129 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.zeros.4.31 (set! (rbp + 0) r15))
    (set! r15 rdi)
    (set! (rbp + 24) rsi)
    (set! (rbp + 8) rdx)
    (set! (rbp + 32) (mref r15 14))
    (set! (rbp + 16) (mref r15 22))
    (set! (rbp + 40) (mref r15 30))
    (set! r15 (mref r15 38))
    (nop)
    (set! rbp (+ rbp 48))
    (set! rdx 0)
    (set! rsi (rbp + -24))
    (set! rdi r15)
    (set! r15 L.rp.115)
    (jump L.eq?.77.5)
    (define L.rp.115 (set! rbp (- rbp 48)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.116 (set! rbp (- rbp 48)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 48))
    (set! rdx (rbp + -40))
    (set! rsi 0)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.117)
    (jump L.cons.76.6)
    (define L.rp.117 (set! rbp (- rbp 48)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.zeros.4.31)
    (define L.nest_t.126 (set! rax (rbp + 8)))
    (jump (rbp + 0))
    (define L.nest_f.127 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 48))
    (set! rdx 8)
    (set! rsi (rbp + -24))
    (set! rdi (rbp + -32))
    (set! r15 L.rp.116)
    (jump L.-.54.28)
    (define L.map.5.32 (set! (rbp + 16) r15))
    (set! r15 rdi)
    (set! (rbp + 32) rsi)
    (set! (rbp + 24) rdx)
    (set! (rbp + 56) (mref r15 14))
    (set! (rbp + 40) (mref r15 22))
    (set! (rbp + 0) (mref r15 30))
    (set! (rbp + 48) (mref r15 38))
    (set! r15 (mref r15 46))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -40))
    (set! rdi r15)
    (set! r15 L.rp.114)
    (jump L.empty?.68.14)
    (define L.rp.114 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.124)
    (jump L.nest_f.125)
    (define L.nest_t.122 (set! (rbp + 8) (rbp + 0)))
    (set! (rbp + 0) (rbp + 32))
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! rsi r15)
    (set! rdi 14)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_f.123 (set! (rbp + 8) (rbp + 0)))
    (set! (rbp + 0) (rbp + 32))
    (set! r9 (rbp + 40))
    (set! r8 (rbp + 48))
    (set! rcx (rbp + 56))
    (set! rdx (rbp + 24))
    (set! rsi r15)
    (set! rdi 6)
    (set! r15 (rbp + 16))
    (jump L.jp.38)
    (define L.nest_t.124 (set! rax (rbp + 24)))
    (jump (rbp + 16))
    (define L.nest_f.125 (set! r15 (rbp + 48)))
    (set! r15 (rbp + 32))
    (set! r14 (bitwise-and r15 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.122)
    (jump L.nest_f.123)
    (define L.inc.6.33 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (nop)
    (set! rdx 8)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.+.53.29)
    (define L.rp.112 (set! rbp (- rbp 24)))
    (set! r15 rax)
    (set! r14 (rbp + 16))
    (set! rbp (+ rbp 24))
    (set! rdx r15)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -8))
    (set! r15 L.rp.113)
    (jump L.map.5.32)
    (define L.rp.113 (set! rbp (- rbp 24)))
    (set! r15 rax)
    (set! rax r15)
    (jump (rbp + 0)))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

(parameterize ([current-pass-list
                  (list
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.80.3)
        (mset! r14 6 24)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! rdi r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.77.5)
        (mset! r14 6 16)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.cons.76.6)
        (mset! r9 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.not.75.7)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector?.74.8)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure?.73.9)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.pair?.72.10)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.error?.71.11)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.ascii-char?.70.12)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.void?.69.13)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.empty?.68.14)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.boolean?.67.15)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.fixnum?.66.16)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.procedure-arity.65.17)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.cdr.64.18)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.car.63.19)
        (mset! rcx 6 8)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-ref.62.20)
        (mset! rbx 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-set!.61.21)
        (mset! rsp 6 24)
        (nop)
        (set! (rbp + 8) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 8) (+ (rbp + 8) 2))
        (nop)
        (mset! (rbp + 8) -2 L.vector-length.60.22)
        (mset! (rbp + 8) 6 8)
        (nop)
        (set! (rbp + 8) r12)
        (set! r12 (+ r12 24))
        (set! (rbp + 8) (+ (rbp + 8) 2))
        (nop)
        (mset! (rbp + 8) -2 L.make-vector.59.23)
        (mset! (rbp + 8) 6 8)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.>=.58.24)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.>.57.25)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.<=.56.26)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.<.55.27)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.-.54.28)
        (mset! (rbp + 16) 6 16)
        (set! (rbp + 24) (rbp + 16))
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.+.53.29)
        (mset! (rbp + 16) 6 16)
        (set! (rbp + 32) (rbp + 16))
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.*.52.30)
        (mset! (rbp + 16) 6 16)
        (nop)
        (mset! r8 14 r8)
        (mset! rdi 14 r8)
        (mset! rbx 14 r15)
        (mset! rsp 14 r13)
        (mset! (rbp + 8) 14 rdi)
        (set! r15 r12)
        (set! r12 (+ r12 48))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.zeros.4.31)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 56))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.map.5.32)
        (mset! r13 6 16)
        (set! (rbp + 16) r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.inc.6.33)
        (mset! r13 6 8)
        (set! (rbp + 8) r13)
        (mset! r15 14 r9)
        (mset! r15 22 (rbp + 24))
        (mset! r15 30 r15)
        (mset! r15 38 r14)
        (mset! (rbp + 16) 14 rdx)
        (mset! (rbp + 16) 22 (rbp + 16))
        (mset! (rbp + 16) 30 rcx)
        (mset! (rbp + 16) 38 r9)
        (mset! (rbp + 16) 46 rsi)
        (mset! (rbp + 8) 14 (rbp + 32))
        (nop)
        (set! rbp (+ rbp 24))
        (set! rdx 22)
        (set! rsi 256)
        (set! rdi r15)
        (set! r15 L.rp.112)
        (jump L.zeros.4.31)))
    (define L.jp.35
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! (rbp + 16) rdi)
        (set! r15 rsi)
        (set! (rbp + 24) rdx)
        (set! (rbp + 8) rcx)
        (set! r14 r8)
        (set! (rbp + 32) r9)
        (set! r13 (rbp + 32))
        (nop)
        (set! rbp (+ rbp 40))
        (set! rsi r14)
        (set! rdi r15)
        (set! r15 L.rp.120)
        (jump L.cdr.64.18)))
    (define L.rp.120
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rbp (+ rbp 40))
        (set! rdx r15)
        (set! rsi (rbp + -16))
        (set! rdi (rbp + -8))
        (set! r15 L.rp.121)
        (jump L.map.5.32)))
    (define L.rp.121
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 8))
        (set! r15 (rbp + 0))
        (jump L.cons.76.6)))
    (define L.jp.37
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! r15 rdi)
        (set! r14 rsi)
        (set! (rbp + 40) rdx)
        (set! (rbp + 24) rcx)
        (set! (rbp + 32) r8)
        (set! (rbp + 48) r9)
        (nop)
        (set! r13 (rbp + 8))
        (if (neq? r15 6) (jump L.nest_t.274) (jump L.nest_f.275))))
    (define L.rp.118
      ()
      (begin
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! rbp (+ rbp 56))
        (set! rsi r15)
        (set! rdi (rbp + -56))
        (set! r15 L.rp.119)
        (jump (rbp + -48))))
    (define L.rp.119
      ()
      (begin
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! r9 (rbp + 48))
        (set! r8 (rbp + 40))
        (set! rcx (rbp + 32))
        (set! rdx (rbp + 0))
        (set! rsi (rbp + 24))
        (set! rdi r15)
        (set! r15 (rbp + 16))
        (jump L.jp.35)))
    (define L.nest_t.274
      ()
      (begin
        (set! (rbp + 8) (mref r14 -2))
        (set! r15 r13)
        (set! rbp (+ rbp 56))
        (set! rsi (rbp + -16))
        (set! rdi r13)
        (set! r15 L.rp.118)
        (jump L.car.63.19)))
    (define L.nest_f.275
      ()
      (begin
        (set! r9 (rbp + 48))
        (set! r8 (rbp + 40))
        (set! rcx (rbp + 32))
        (set! rdx (rbp + 0))
        (set! rsi (rbp + 24))
        (set! rdi 10814)
        (set! r15 (rbp + 16))
        (jump L.jp.35)))
    (define L.jp.38
      ()
      (begin
        (nop)
        (nop)
        (set! r13 rsi)
        (set! rsi rdx)
        (set! r14 rcx)
        (set! rcx r8)
        (nop)
        (set! rdx (rbp + 0))
        (set! r8 (rbp + 8))
        (if (neq? rdi 6) (jump L.nest_t.272) (jump L.nest_f.273))))
    (define L.nest_t.270
      ()
      (begin
        (set! (rbp + 8) r8)
        (set! (rbp + 0) rdx)
        (nop)
        (set! r8 rcx)
        (set! rcx r14)
        (set! rdx rsi)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.37)))
    (define L.nest_f.271
      ()
      (begin
        (set! (rbp + 8) r8)
        (set! (rbp + 0) rdx)
        (nop)
        (set! r8 rcx)
        (set! rcx r14)
        (set! rdx rsi)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.37)))
    (define L.nest_t.272
      ()
      (begin
        (set! rdi (mref r13 6))
        (if (eq? rdi 8) (jump L.nest_t.270) (jump L.nest_f.271))))
    (define L.nest_f.273
      ()
      (begin
        (nop)
        (set! r8 rsi)
        (nop)
        (nop)
        (set! rsi r14)
        (set! rdi 11070)
        (nop)
        (jump L.jp.35)))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.268) (jump L.nest_f.269))))
    (define L.nest_t.268
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r14 (* r14 r13))
        (set! rax r14)
        (jump r15)))
    (define L.nest_f.269 () (begin (set! rax 62) (jump r15)))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.266) (jump L.nest_f.267))))
    (define L.nest_t.264
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.42)))
    (define L.nest_f.265
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.42)))
    (define L.nest_t.266
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.264) (jump L.nest_f.265))))
    (define L.nest_f.267 () (begin (set! rax 62) (jump r15)))
    (define L.jp.46
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.262) (jump L.nest_f.263))))
    (define L.nest_t.262
      ()
      (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.263 () (begin (set! rax 318) (jump r15)))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.260) (jump L.nest_f.261))))
    (define L.nest_t.258
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.46)))
    (define L.nest_f.259
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.46)))
    (define L.nest_t.260
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.258) (jump L.nest_f.259))))
    (define L.nest_f.261 () (begin (set! rax 318) (jump r15)))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.256) (jump L.nest_f.257))))
    (define L.nest_t.256
      ()
      (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.257 () (begin (set! rax 574) (jump r15)))
    (define L.jp.51
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.254) (jump L.nest_f.255))))
    (define L.nest_t.252
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.50)))
    (define L.nest_f.253
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.50)))
    (define L.nest_t.254
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.252) (jump L.nest_f.253))))
    (define L.nest_f.255 () (begin (set! rax 574) (jump r15)))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.250) (jump L.nest_f.251))))
    (define L.nest_t.248 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.249 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.250
      ()
      (if (< r13 r9) (jump L.nest_t.248) (jump L.nest_f.249)))
    (define L.nest_f.251 () (begin (set! rax 830) (jump r15)))
    (define L.jp.56
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.246) (jump L.nest_f.247))))
    (define L.nest_t.244
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.55)))
    (define L.nest_f.245
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.55)))
    (define L.nest_t.246
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.244) (jump L.nest_f.245))))
    (define L.nest_f.247 () (begin (set! rax 830) (jump r15)))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.242) (jump L.nest_f.243))))
    (define L.nest_t.240 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.241 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.242
      ()
      (if (<= r13 r9) (jump L.nest_t.240) (jump L.nest_f.241)))
    (define L.nest_f.243 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.61
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.238) (jump L.nest_f.239))))
    (define L.nest_t.236
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.60)))
    (define L.nest_f.237
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.60)))
    (define L.nest_t.238
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.236) (jump L.nest_f.237))))
    (define L.nest_f.239 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.234) (jump L.nest_f.235))))
    (define L.nest_t.232 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.233 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.234
      ()
      (if (> r13 r9) (jump L.nest_t.232) (jump L.nest_f.233)))
    (define L.nest_f.235 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.66
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.230) (jump L.nest_f.231))))
    (define L.nest_t.228
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.65)))
    (define L.nest_f.229
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.65)))
    (define L.nest_t.230
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.228) (jump L.nest_f.229))))
    (define L.nest_f.231 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.226) (jump L.nest_f.227))))
    (define L.nest_t.224 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.225 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.226
      ()
      (if (>= r13 r9) (jump L.nest_t.224) (jump L.nest_f.225)))
    (define L.nest_f.227 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.71
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.222) (jump L.nest_f.223))))
    (define L.nest_t.220
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.70)))
    (define L.nest_f.221
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.70)))
    (define L.nest_t.222
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.220) (jump L.nest_f.221))))
    (define L.nest_f.223 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.73
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6) (jump L.nest_t.218) (jump L.nest_f.219))))
    (define L.nest_t.218
      ()
      (begin
        (nop)
        (set! rsi r9)
        (set! rdi r14)
        (nop)
        (jump L.make-init-vector.1.4)))
    (define L.nest_f.219 () (begin (set! rax 1854) (jump r15)))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.216) (jump L.nest_f.217))))
    (define L.nest_t.216 () (begin (set! rax (mref r13 -3)) (jump r15)))
    (define L.nest_f.217 () (begin (set! rax 2110) (jump r15)))
    (define L.jp.78
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6) (jump L.nest_t.214) (jump L.nest_f.215))))
    (define L.nest_t.214
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-set!.2.2)))
    (define L.nest_f.215 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.79
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6) (jump L.nest_t.212) (jump L.nest_f.213))))
    (define L.nest_t.210
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.78)))
    (define L.nest_f.211
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.78)))
    (define L.nest_t.212
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.210) (jump L.nest_f.211))))
    (define L.nest_f.213 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6) (jump L.nest_t.208) (jump L.nest_f.209))))
    (define L.nest_t.208
      ()
      (begin
        (nop)
        (set! rdx r9)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-ref.3.1)))
    (define L.nest_f.209 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6) (jump L.nest_t.206) (jump L.nest_f.207))))
    (define L.nest_t.204
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.82)))
    (define L.nest_f.205
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.82)))
    (define L.nest_t.206
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.204) (jump L.nest_f.205))))
    (define L.nest_f.207 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.85
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.202) (jump L.nest_f.203))))
    (define L.nest_t.202 () (begin (set! rax (mref r13 -1)) (jump r15)))
    (define L.nest_f.203 () (begin (set! rax 2878) (jump r15)))
    (define L.jp.87
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.200) (jump L.nest_f.201))))
    (define L.nest_t.200 () (begin (set! rax (mref r13 7)) (jump r15)))
    (define L.nest_f.201 () (begin (set! rax 3134) (jump r15)))
    (define L.jp.89
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.198) (jump L.nest_f.199))))
    (define L.nest_t.198 () (begin (set! rax (mref r13 6)) (jump r15)))
    (define L.nest_f.199 () (begin (set! rax 3390) (jump r15)))
    (define L.jp.102
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6) (jump L.nest_t.196) (jump L.nest_f.197))))
    (define L.nest_t.196 () (begin (set! rax r8) (jump r15)))
    (define L.nest_f.197
      ()
      (begin
        (set! rdi (arithmetic-shift-right r9 3))
        (nop)
        (set! rdi (* rdi 8))
        (nop)
        (set! rdi (+ rdi 5))
        (nop)
        (mset! r8 rdi 0)
        (nop)
        (set! r9 (+ r9 8))
        (nop)
        (set! rcx r8)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.80.3)))
    (define L.jp.105
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6) (jump L.nest_t.194) (jump L.nest_f.195))))
    (define L.nest_t.194
      ()
      (begin
        (set! r9 (arithmetic-shift-right r8 3))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (set! r9 (+ r9 5))
        (nop)
        (mset! r14 r9 r13)
        (set! rax 30)
        (jump r15)))
    (define L.nest_f.195 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6) (jump L.nest_t.192) (jump L.nest_f.193))))
    (define L.nest_t.190
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.105)))
    (define L.nest_f.191
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.105)))
    (define L.nest_t.192
      ()
      (if (>= r13 0) (jump L.nest_t.190) (jump L.nest_f.191)))
    (define L.nest_f.193 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.109
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.188) (jump L.nest_f.189))))
    (define L.nest_t.188
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r13 (* r13 8))
        (nop)
        (set! r13 (+ r13 5))
        (nop)
        (set! rax (mref r14 r13))
        (jump r15)))
    (define L.nest_f.189 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.110
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.186) (jump L.nest_f.187))))
    (define L.nest_t.184
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.109)))
    (define L.nest_f.185
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.109)))
    (define L.nest_t.186
      ()
      (if (>= r13 0) (jump L.nest_t.184) (jump L.nest_f.185)))
    (define L.nest_f.187 () (begin (set! rax 2622) (jump r15)))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9) (jump L.nest_t.182) (jump L.nest_f.183))))
    (define L.nest_t.182
      ()
      (begin
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.110)))
    (define L.nest_f.183
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.110)))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8) (jump L.nest_t.180) (jump L.nest_f.181))))
    (define L.nest_t.180
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.106)))
    (define L.nest_f.181
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.106)))
    (define L.vector-init-loop.80.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13) (jump L.nest_t.178) (jump L.nest_f.179))))
    (define L.nest_t.178
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.102)))
    (define L.nest_f.179
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.102)))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.80.3)))
    (define L.eq?.77.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13) (jump L.nest_t.176) (jump L.nest_f.177))))
    (define L.nest_t.176 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.177 () (begin (set! rax 6) (jump r15)))
    (define L.cons.76.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.not.75.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6) (jump L.nest_t.174) (jump L.nest_f.175))))
    (define L.nest_t.174 () (begin (set! rax 6) (jump r15)))
    (define L.nest_f.175 () (begin (set! rax 14) (jump r15)))
    (define L.vector?.74.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3) (jump L.nest_t.172) (jump L.nest_f.173))))
    (define L.nest_t.172 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.173 () (begin (set! rax 6) (jump r15)))
    (define L.procedure?.73.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2) (jump L.nest_t.170) (jump L.nest_f.171))))
    (define L.nest_t.170 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.171 () (begin (set! rax 6) (jump r15)))
    (define L.pair?.72.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1) (jump L.nest_t.168) (jump L.nest_f.169))))
    (define L.nest_t.168 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.169 () (begin (set! rax 6) (jump r15)))
    (define L.error?.71.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62) (jump L.nest_t.166) (jump L.nest_f.167))))
    (define L.nest_t.166 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.167 () (begin (set! rax 6) (jump r15)))
    (define L.ascii-char?.70.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46) (jump L.nest_t.164) (jump L.nest_f.165))))
    (define L.nest_t.164 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.165 () (begin (set! rax 6) (jump r15)))
    (define L.void?.69.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30) (jump L.nest_t.162) (jump L.nest_f.163))))
    (define L.nest_t.162 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.163 () (begin (set! rax 6) (jump r15)))
    (define L.empty?.68.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22) (jump L.nest_t.160) (jump L.nest_f.161))))
    (define L.nest_t.160 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.161 () (begin (set! rax 6) (jump r15)))
    (define L.boolean?.67.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6) (jump L.nest_t.158) (jump L.nest_f.159))))
    (define L.nest_t.158 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.159 () (begin (set! rax 6) (jump r15)))
    (define L.fixnum?.66.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0) (jump L.nest_t.156) (jump L.nest_f.157))))
    (define L.nest_t.156 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.157 () (begin (set! rax 6) (jump r15)))
    (define L.procedure-arity.65.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2) (jump L.nest_t.154) (jump L.nest_f.155))))
    (define L.nest_t.154
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.89)))
    (define L.nest_f.155
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.89)))
    (define L.cdr.64.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.152) (jump L.nest_f.153))))
    (define L.nest_t.152
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.87)))
    (define L.nest_f.153
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.87)))
    (define L.car.63.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.150) (jump L.nest_f.151))))
    (define L.nest_t.150
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.85)))
    (define L.nest_f.151
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.85)))
    (define L.vector-ref.62.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.148) (jump L.nest_f.149))))
    (define L.nest_t.148
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.83)))
    (define L.nest_f.149
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.83)))
    (define L.vector-set!.61.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.146) (jump L.nest_f.147))))
    (define L.nest_t.146
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.79)))
    (define L.nest_f.147
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.79)))
    (define L.vector-length.60.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3) (jump L.nest_t.144) (jump L.nest_f.145))))
    (define L.nest_t.144
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.75)))
    (define L.nest_f.145
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.75)))
    (define L.make-vector.59.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.142) (jump L.nest_f.143))))
    (define L.nest_t.142
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.73)))
    (define L.nest_f.143
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.73)))
    (define L.>=.58.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.140) (jump L.nest_f.141))))
    (define L.nest_t.140
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.71)))
    (define L.nest_f.141
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.71)))
    (define L.>.57.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.138) (jump L.nest_f.139))))
    (define L.nest_t.138
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.66)))
    (define L.nest_f.139
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.66)))
    (define L.<=.56.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.136) (jump L.nest_f.137))))
    (define L.nest_t.136
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.61)))
    (define L.nest_f.137
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.61)))
    (define L.<.55.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.134) (jump L.nest_f.135))))
    (define L.nest_t.134
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.56)))
    (define L.nest_f.135
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.56)))
    (define L.-.54.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.132) (jump L.nest_f.133))))
    (define L.nest_t.132
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.51)))
    (define L.nest_f.133
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.51)))
    (define L.+.53.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.130) (jump L.nest_f.131))))
    (define L.nest_t.130
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.47)))
    (define L.nest_f.131
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.47)))
    (define L.*.52.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.128) (jump L.nest_f.129))))
    (define L.nest_t.128
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.43)))
    (define L.nest_f.129
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.43)))
    (define L.zeros.4.31
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 rdi)
        (set! (rbp + 24) rsi)
        (set! (rbp + 8) rdx)
        (set! (rbp + 32) (mref r15 14))
        (set! (rbp + 16) (mref r15 22))
        (set! (rbp + 40) (mref r15 30))
        (set! r15 (mref r15 38))
        (nop)
        (set! rbp (+ rbp 48))
        (set! rdx 0)
        (set! rsi (rbp + -24))
        (set! rdi r15)
        (set! r15 L.rp.115)
        (jump L.eq?.77.5)))
    (define L.rp.115
      ()
      (begin
        (set! rbp (- rbp 48))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.126) (jump L.nest_f.127))))
    (define L.rp.116
      ()
      (begin
        (set! rbp (- rbp 48))
        (set! (rbp + 16) rax)
        (set! r15 (rbp + 32))
        (set! rbp (+ rbp 48))
        (set! rdx (rbp + -40))
        (set! rsi 0)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.117)
        (jump L.cons.76.6)))
    (define L.rp.117
      ()
      (begin
        (set! rbp (- rbp 48))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 40))
        (set! r15 (rbp + 0))
        (jump L.zeros.4.31)))
    (define L.nest_t.126 () (begin (set! rax (rbp + 8)) (jump (rbp + 0))))
    (define L.nest_f.127
      ()
      (begin
        (set! r15 (rbp + 40))
        (set! r15 (rbp + 16))
        (set! rbp (+ rbp 48))
        (set! rdx 8)
        (set! rsi (rbp + -24))
        (set! rdi (rbp + -32))
        (set! r15 L.rp.116)
        (jump L.-.54.28)))
    (define L.map.5.32
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! r15 rdi)
        (set! (rbp + 32) rsi)
        (set! (rbp + 24) rdx)
        (set! (rbp + 56) (mref r15 14))
        (set! (rbp + 40) (mref r15 22))
        (set! (rbp + 0) (mref r15 30))
        (set! (rbp + 48) (mref r15 38))
        (set! r15 (mref r15 46))
        (nop)
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -40))
        (set! rdi r15)
        (set! r15 L.rp.114)
        (jump L.empty?.68.14)))
    (define L.rp.114
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.124) (jump L.nest_f.125))))
    (define L.nest_t.122
      ()
      (begin
        (set! (rbp + 8) (rbp + 0))
        (set! (rbp + 0) (rbp + 32))
        (set! r9 (rbp + 40))
        (set! r8 (rbp + 48))
        (set! rcx (rbp + 56))
        (set! rdx (rbp + 24))
        (set! rsi r15)
        (set! rdi 14)
        (set! r15 (rbp + 16))
        (jump L.jp.38)))
    (define L.nest_f.123
      ()
      (begin
        (set! (rbp + 8) (rbp + 0))
        (set! (rbp + 0) (rbp + 32))
        (set! r9 (rbp + 40))
        (set! r8 (rbp + 48))
        (set! rcx (rbp + 56))
        (set! rdx (rbp + 24))
        (set! rsi r15)
        (set! rdi 6)
        (set! r15 (rbp + 16))
        (jump L.jp.38)))
    (define L.nest_t.124 () (begin (set! rax (rbp + 24)) (jump (rbp + 16))))
    (define L.nest_f.125
      ()
      (begin
        (set! r15 (rbp + 48))
        (set! r15 (rbp + 32))
        (set! r14 (bitwise-and r15 7))
        (nop)
        (if (eq? r14 2) (jump L.nest_t.122) (jump L.nest_f.123))))
    (define L.inc.6.33
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (nop)
        (set! rdx 8)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.+.53.29)))
    (define L.rp.112
      ()
      (begin
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 (rbp + 16))
        (set! rbp (+ rbp 24))
        (set! rdx r15)
        (set! rsi (rbp + -16))
        (set! rdi (rbp + -8))
        (set! r15 L.rp.113)
        (jump L.map.5.32)))
    (define L.rp.113
      ()
      (begin
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! rax r15)
        (jump (rbp + 0)))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

(parameterize ([current-pass-list
                  (list
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.80.3)
        (mset! r14 6 24)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! rdi r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.77.5)
        (mset! r14 6 16)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.cons.76.6)
        (mset! r9 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.not.75.7)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector?.74.8)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure?.73.9)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.pair?.72.10)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.error?.71.11)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.ascii-char?.70.12)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.void?.69.13)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.empty?.68.14)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.boolean?.67.15)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.fixnum?.66.16)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.procedure-arity.65.17)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.cdr.64.18)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.car.63.19)
        (mset! rcx 6 8)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-ref.62.20)
        (mset! rbx 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-set!.61.21)
        (mset! rsp 6 24)
        (nop)
        (set! (rbp + 8) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 8) (+ (rbp + 8) 2))
        (nop)
        (mset! (rbp + 8) -2 L.vector-length.60.22)
        (mset! (rbp + 8) 6 8)
        (nop)
        (set! (rbp + 8) r12)
        (set! r12 (+ r12 24))
        (set! (rbp + 8) (+ (rbp + 8) 2))
        (nop)
        (mset! (rbp + 8) -2 L.make-vector.59.23)
        (mset! (rbp + 8) 6 8)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.>=.58.24)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.>.57.25)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.<=.56.26)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.<.55.27)
        (mset! (rbp + 16) 6 16)
        (nop)
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.-.54.28)
        (mset! (rbp + 16) 6 16)
        (set! (rbp + 24) (rbp + 16))
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.+.53.29)
        (mset! (rbp + 16) 6 16)
        (set! (rbp + 32) (rbp + 16))
        (set! (rbp + 16) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 16) (+ (rbp + 16) 2))
        (nop)
        (mset! (rbp + 16) -2 L.*.52.30)
        (mset! (rbp + 16) 6 16)
        (nop)
        (mset! r8 14 r8)
        (mset! rdi 14 r8)
        (mset! rbx 14 r15)
        (mset! rsp 14 r13)
        (mset! (rbp + 8) 14 rdi)
        (set! r15 r12)
        (set! r12 (+ r12 48))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.zeros.4.31)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 56))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.map.5.32)
        (mset! r13 6 16)
        (set! (rbp + 16) r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.inc.6.33)
        (mset! r13 6 8)
        (set! (rbp + 8) r13)
        (mset! r15 14 r9)
        (mset! r15 22 (rbp + 24))
        (mset! r15 30 r15)
        (mset! r15 38 r14)
        (mset! (rbp + 16) 14 rdx)
        (mset! (rbp + 16) 22 (rbp + 16))
        (mset! (rbp + 16) 30 rcx)
        (mset! (rbp + 16) 38 r9)
        (mset! (rbp + 16) 46 rsi)
        (mset! (rbp + 8) 14 (rbp + 32))
        (nop)
        (set! rbp (+ rbp 24))
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi r15)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 (rbp + 16))
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! rdx r15)
            (set! rsi (rbp + -16))
            (set! rdi (rbp + -8))
            (set! r15 L.rp.113)
            (jump L.map.5.32)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! rax r15)
        (jump (rbp + 0))))
    (define L.inc.6.33
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (nop)
        (set! rdx 8)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.+.53.29)))
    (define L.map.5.32
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! r15 rdi)
        (set! (rbp + 32) rsi)
        (set! (rbp + 24) rdx)
        (set! (rbp + 56) (mref r15 14))
        (set! (rbp + 40) (mref r15 22))
        (set! (rbp + 0) (mref r15 30))
        (set! (rbp + 48) (mref r15 38))
        (set! r15 (mref r15 46))
        (nop)
        (set! rbp (+ rbp 64))
        (return-point L.rp.114
          (begin
            (set! rsi (rbp + -40))
            (set! rdi r15)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14)))
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax (rbp + 24)) (jump (rbp + 16)))
          (begin
            (set! r15 (rbp + 48))
            (set! r15 (rbp + 32))
            (set! r14 (bitwise-and r15 7))
            (nop)
            (if (eq? r14 2)
              (begin
                (set! (rbp + 8) (rbp + 0))
                (set! (rbp + 0) (rbp + 32))
                (set! r9 (rbp + 40))
                (set! r8 (rbp + 48))
                (set! rcx (rbp + 56))
                (set! rdx (rbp + 24))
                (set! rsi r15)
                (set! rdi 14)
                (set! r15 (rbp + 16))
                (jump L.jp.38))
              (begin
                (set! (rbp + 8) (rbp + 0))
                (set! (rbp + 0) (rbp + 32))
                (set! r9 (rbp + 40))
                (set! r8 (rbp + 48))
                (set! rcx (rbp + 56))
                (set! rdx (rbp + 24))
                (set! rsi r15)
                (set! rdi 6)
                (set! r15 (rbp + 16))
                (jump L.jp.38)))))))
    (define L.zeros.4.31
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 rdi)
        (set! (rbp + 24) rsi)
        (set! (rbp + 8) rdx)
        (set! (rbp + 32) (mref r15 14))
        (set! (rbp + 16) (mref r15 22))
        (set! (rbp + 40) (mref r15 30))
        (set! r15 (mref r15 38))
        (nop)
        (set! rbp (+ rbp 48))
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi (rbp + -24))
            (set! rdi r15)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5)))
        (set! rbp (- rbp 48))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax (rbp + 8)) (jump (rbp + 0)))
          (begin
            (set! r15 (rbp + 40))
            (set! r15 (rbp + 16))
            (set! rbp (+ rbp 48))
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi (rbp + -24))
                (set! rdi (rbp + -32))
                (set! r15 L.rp.116)
                (jump L.-.54.28)))
            (set! rbp (- rbp 48))
            (set! (rbp + 16) rax)
            (set! r15 (rbp + 32))
            (set! rbp (+ rbp 48))
            (return-point L.rp.117
              (begin
                (set! rdx (rbp + -40))
                (set! rsi 0)
                (set! rdi (rbp + -16))
                (set! r15 L.rp.117)
                (jump L.cons.76.6)))
            (set! rbp (- rbp 48))
            (set! r15 rax)
            (set! rdx r15)
            (set! rsi (rbp + 16))
            (set! rdi (rbp + 40))
            (set! r15 (rbp + 0))
            (jump L.zeros.4.31)))))
    (define L.*.52.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.43))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.43)))))
    (define L.+.53.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.47))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.47)))))
    (define L.-.54.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.51))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.51)))))
    (define L.<.55.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.56))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.56)))))
    (define L.<=.56.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.61))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.61)))))
    (define L.>.57.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.66))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.66)))))
    (define L.>=.58.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.71))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.71)))))
    (define L.make-vector.59.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.73))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.73)))))
    (define L.vector-length.60.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.75))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.75)))))
    (define L.vector-set!.61.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.79))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.79)))))
    (define L.vector-ref.62.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.83))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.83)))))
    (define L.car.63.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.85))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.85)))))
    (define L.cdr.64.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.87))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.87)))))
    (define L.procedure-arity.65.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.89))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.89)))))
    (define L.fixnum?.66.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.67.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.68.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.69.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.70.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.71.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.72.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.73.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.74.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.75.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.76.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.77.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.80.3)))
    (define L.vector-init-loop.80.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.102))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.102)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.106))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.106)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.110))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.110)))))
    (define L.jp.110
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.109))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.109)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.109
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.105))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.105)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.105
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.80.3)))))
    (define L.jp.89
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.87
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.85
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.82))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.82))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.78))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.78))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.78
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.73
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.71
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.70))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.70))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.66
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.65))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.65))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.61
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.60))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.60))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.56
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.55))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.55))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.51
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.50))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.50))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.46))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.46))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.46
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.42))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.42))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.38
      ()
      (begin
        (nop)
        (nop)
        (set! r13 rsi)
        (set! rsi rdx)
        (set! r14 rcx)
        (set! rcx r8)
        (nop)
        (set! rdx (rbp + 0))
        (set! r8 (rbp + 8))
        (if (neq? rdi 6)
          (begin
            (set! rdi (mref r13 6))
            (if (eq? rdi 8)
              (begin
                (set! (rbp + 8) r8)
                (set! (rbp + 0) rdx)
                (nop)
                (set! r8 rcx)
                (set! rcx r14)
                (set! rdx rsi)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.37))
              (begin
                (set! (rbp + 8) r8)
                (set! (rbp + 0) rdx)
                (nop)
                (set! r8 rcx)
                (set! rcx r14)
                (set! rdx rsi)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.37))))
          (begin
            (nop)
            (set! r8 rsi)
            (nop)
            (nop)
            (set! rsi r14)
            (set! rdi 11070)
            (nop)
            (jump L.jp.35)))))
    (define L.jp.37
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! r15 rdi)
        (set! r14 rsi)
        (set! (rbp + 40) rdx)
        (set! (rbp + 24) rcx)
        (set! (rbp + 32) r8)
        (set! (rbp + 48) r9)
        (nop)
        (set! r13 (rbp + 8))
        (if (neq? r15 6)
          (begin
            (set! (rbp + 8) (mref r14 -2))
            (set! r15 r13)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi (rbp + -16))
                (set! rdi r13)
                (set! r15 L.rp.118)
                (jump L.car.63.19)))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! rbp (+ rbp 56))
            (return-point L.rp.119
              (begin
                (set! rsi r15)
                (set! rdi (rbp + -56))
                (set! r15 L.rp.119)
                (jump (rbp + -48))))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! r9 (rbp + 48))
            (set! r8 (rbp + 40))
            (set! rcx (rbp + 32))
            (set! rdx (rbp + 0))
            (set! rsi (rbp + 24))
            (set! rdi r15)
            (set! r15 (rbp + 16))
            (jump L.jp.35))
          (begin
            (set! r9 (rbp + 48))
            (set! r8 (rbp + 40))
            (set! rcx (rbp + 32))
            (set! rdx (rbp + 0))
            (set! rsi (rbp + 24))
            (set! rdi 10814)
            (set! r15 (rbp + 16))
            (jump L.jp.35)))))
    (define L.jp.35
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! (rbp + 16) rdi)
        (set! r15 rsi)
        (set! (rbp + 24) rdx)
        (set! (rbp + 8) rcx)
        (set! r14 r8)
        (set! (rbp + 32) r9)
        (set! r13 (rbp + 32))
        (nop)
        (set! rbp (+ rbp 40))
        (return-point L.rp.120
          (begin
            (set! rsi r14)
            (set! rdi r15)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rbp (+ rbp 40))
        (return-point L.rp.121
          (begin
            (set! rdx r15)
            (set! rsi (rbp + -16))
            (set! rdi (rbp + -8))
            (set! r15 L.rp.121)
            (jump L.map.5.32)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 8))
        (set! r15 (rbp + 0))
        (jump L.cons.76.6))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

(parameterize ([current-pass-list
                  (list
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ()
      (begin
        (set! fv0 r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.80.3)
        (mset! r14 6 24)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! rdi r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.77.5)
        (mset! r14 6 16)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.cons.76.6)
        (mset! r9 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.not.75.7)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector?.74.8)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure?.73.9)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.pair?.72.10)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.error?.71.11)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.ascii-char?.70.12)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.void?.69.13)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.empty?.68.14)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.boolean?.67.15)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.fixnum?.66.16)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.procedure-arity.65.17)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.cdr.64.18)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.car.63.19)
        (mset! rcx 6 8)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-ref.62.20)
        (mset! rbx 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-set!.61.21)
        (mset! rsp 6 24)
        (nop)
        (set! fv1 r12)
        (set! r12 (+ r12 16))
        (set! fv1 (+ fv1 2))
        (nop)
        (mset! fv1 -2 L.vector-length.60.22)
        (mset! fv1 6 8)
        (nop)
        (set! fv1 r12)
        (set! r12 (+ r12 24))
        (set! fv1 (+ fv1 2))
        (nop)
        (mset! fv1 -2 L.make-vector.59.23)
        (mset! fv1 6 8)
        (nop)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.>=.58.24)
        (mset! fv2 6 16)
        (nop)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.>.57.25)
        (mset! fv2 6 16)
        (nop)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.<=.56.26)
        (mset! fv2 6 16)
        (nop)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.<.55.27)
        (mset! fv2 6 16)
        (nop)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.-.54.28)
        (mset! fv2 6 16)
        (set! fv3 fv2)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.+.53.29)
        (mset! fv2 6 16)
        (set! fv4 fv2)
        (set! fv2 r12)
        (set! r12 (+ r12 16))
        (set! fv2 (+ fv2 2))
        (nop)
        (mset! fv2 -2 L.*.52.30)
        (mset! fv2 6 16)
        (nop)
        (mset! r8 14 r8)
        (mset! rdi 14 r8)
        (mset! rbx 14 r15)
        (mset! rsp 14 r13)
        (mset! fv1 14 rdi)
        (set! r15 r12)
        (set! r12 (+ r12 48))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.zeros.4.31)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 56))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.map.5.32)
        (mset! r13 6 16)
        (set! fv2 r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.inc.6.33)
        (mset! r13 6 8)
        (set! fv1 r13)
        (mset! r15 14 r9)
        (mset! r15 22 fv3)
        (mset! r15 30 r15)
        (mset! r15 38 r14)
        (mset! fv2 14 rdx)
        (mset! fv2 22 fv2)
        (mset! fv2 30 rcx)
        (mset! fv2 38 r9)
        (mset! fv2 46 rsi)
        (mset! fv1 14 fv4)
        (nop)
        (set! rbp (+ rbp 24))
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi r15)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 fv2)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! rdx r15)
            (set! rsi fv1)
            (set! rdi fv2)
            (set! r15 L.rp.113)
            (jump L.map.5.32)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! rax r15)
        (jump fv0)))
    (define L.inc.6.33
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (nop)
        (set! rdx 8)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.+.53.29)))
    (define L.map.5.32
      ()
      (begin
        (set! fv2 r15)
        (set! r15 rdi)
        (set! fv4 rsi)
        (set! fv3 rdx)
        (set! fv7 (mref r15 14))
        (set! fv5 (mref r15 22))
        (set! fv0 (mref r15 30))
        (set! fv6 (mref r15 38))
        (set! r15 (mref r15 46))
        (nop)
        (set! rbp (+ rbp 64))
        (return-point L.rp.114
          (begin
            (set! rsi fv3)
            (set! rdi r15)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14)))
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax fv3) (jump fv2))
          (begin
            (set! r15 fv6)
            (set! r15 fv4)
            (set! r14 (bitwise-and r15 7))
            (nop)
            (if (eq? r14 2)
              (begin
                (set! fv1 fv0)
                (set! fv0 fv4)
                (set! r9 fv5)
                (set! r8 fv6)
                (set! rcx fv7)
                (set! rdx fv3)
                (set! rsi r15)
                (set! rdi 14)
                (set! r15 fv2)
                (jump L.jp.38))
              (begin
                (set! fv1 fv0)
                (set! fv0 fv4)
                (set! r9 fv5)
                (set! r8 fv6)
                (set! rcx fv7)
                (set! rdx fv3)
                (set! rsi r15)
                (set! rdi 6)
                (set! r15 fv2)
                (jump L.jp.38)))))))
    (define L.zeros.4.31
      ()
      (begin
        (set! fv0 r15)
        (set! r15 rdi)
        (set! fv3 rsi)
        (set! fv1 rdx)
        (set! fv4 (mref r15 14))
        (set! fv2 (mref r15 22))
        (set! fv5 (mref r15 30))
        (set! r15 (mref r15 38))
        (nop)
        (set! rbp (+ rbp 48))
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi fv3)
            (set! rdi r15)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5)))
        (set! rbp (- rbp 48))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax fv1) (jump fv0))
          (begin
            (set! r15 fv5)
            (set! r15 fv2)
            (set! rbp (+ rbp 48))
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi fv3)
                (set! rdi fv2)
                (set! r15 L.rp.116)
                (jump L.-.54.28)))
            (set! rbp (- rbp 48))
            (set! fv2 rax)
            (set! r15 fv4)
            (set! rbp (+ rbp 48))
            (return-point L.rp.117
              (begin
                (set! rdx fv1)
                (set! rsi 0)
                (set! rdi fv4)
                (set! r15 L.rp.117)
                (jump L.cons.76.6)))
            (set! rbp (- rbp 48))
            (set! r15 rax)
            (set! rdx r15)
            (set! rsi fv2)
            (set! rdi fv5)
            (set! r15 fv0)
            (jump L.zeros.4.31)))))
    (define L.*.52.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.43))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.43)))))
    (define L.+.53.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.47))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.47)))))
    (define L.-.54.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.51))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.51)))))
    (define L.<.55.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.56))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.56)))))
    (define L.<=.56.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.61))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.61)))))
    (define L.>.57.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.66))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.66)))))
    (define L.>=.58.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.71))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.71)))))
    (define L.make-vector.59.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.73))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.73)))))
    (define L.vector-length.60.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.75))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.75)))))
    (define L.vector-set!.61.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.79))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.79)))))
    (define L.vector-ref.62.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.83))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.83)))))
    (define L.car.63.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.85))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.85)))))
    (define L.cdr.64.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.87))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.87)))))
    (define L.procedure-arity.65.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.89))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.89)))))
    (define L.fixnum?.66.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.67.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.68.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.69.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.70.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.71.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.72.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.73.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.74.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.75.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.76.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.77.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.80.3)))
    (define L.vector-init-loop.80.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.102))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.102)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.106))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.106)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.110))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.110)))))
    (define L.jp.110
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.109))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.109)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.109
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.105))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.105)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.105
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.80.3)))))
    (define L.jp.89
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.87
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.85
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.82))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.82))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.78))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.78))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.78
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.73
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.71
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.70))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.70))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.66
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.65))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.65))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.61
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.60))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.60))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.56
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.55))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.55))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.51
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.50))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.50))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.46))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.46))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.46
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.42))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.42))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.38
      ()
      (begin
        (nop)
        (nop)
        (set! r13 rsi)
        (set! rsi rdx)
        (set! r14 rcx)
        (set! rcx r8)
        (nop)
        (set! rdx fv0)
        (set! r8 fv1)
        (if (neq? rdi 6)
          (begin
            (set! rdi (mref r13 6))
            (if (eq? rdi 8)
              (begin
                (set! fv1 r8)
                (set! fv0 rdx)
                (nop)
                (set! r8 rcx)
                (set! rcx r14)
                (set! rdx rsi)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.37))
              (begin
                (set! fv1 r8)
                (set! fv0 rdx)
                (nop)
                (set! r8 rcx)
                (set! rcx r14)
                (set! rdx rsi)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.37))))
          (begin
            (nop)
            (set! r8 rsi)
            (nop)
            (nop)
            (set! rsi r14)
            (set! rdi 11070)
            (nop)
            (jump L.jp.35)))))
    (define L.jp.37
      ()
      (begin
        (set! fv2 r15)
        (set! r15 rdi)
        (set! r14 rsi)
        (set! fv5 rdx)
        (set! fv3 rcx)
        (set! fv4 r8)
        (set! fv6 r9)
        (nop)
        (set! r13 fv1)
        (if (neq? r15 6)
          (begin
            (set! fv1 (mref r14 -2))
            (set! r15 r13)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi fv5)
                (set! rdi r13)
                (set! r15 L.rp.118)
                (jump L.car.63.19)))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! rbp (+ rbp 56))
            (return-point L.rp.119
              (begin
                (set! rsi r15)
                (set! rdi fv0)
                (set! r15 L.rp.119)
                (jump fv1)))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! r9 fv6)
            (set! r8 fv5)
            (set! rcx fv4)
            (set! rdx fv0)
            (set! rsi fv3)
            (set! rdi r15)
            (set! r15 fv2)
            (jump L.jp.35))
          (begin
            (set! r9 fv6)
            (set! r8 fv5)
            (set! rcx fv4)
            (set! rdx fv0)
            (set! rsi fv3)
            (set! rdi 10814)
            (set! r15 fv2)
            (jump L.jp.35)))))
    (define L.jp.35
      ()
      (begin
        (set! fv0 r15)
        (set! fv2 rdi)
        (set! r15 rsi)
        (set! fv3 rdx)
        (set! fv1 rcx)
        (set! r14 r8)
        (set! fv4 r9)
        (set! r13 fv4)
        (nop)
        (set! rbp (+ rbp 40))
        (return-point L.rp.120
          (begin
            (set! rsi r14)
            (set! rdi r15)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rbp (+ rbp 40))
        (return-point L.rp.121
          (begin
            (set! rdx r15)
            (set! rsi fv3)
            (set! rdi fv4)
            (set! r15 L.rp.121)
            (jump L.map.5.32)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi fv2)
        (set! rdi fv1)
        (set! r15 fv0)
        (jump L.cons.76.6))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))



(parameterize ([current-pass-list
                  (list
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((assignment
        ((ra.349 fv0)
         (inc.6 fv1)
         (map.5 fv2)
         (unsafe-vector-ref.3 r15)
         (eq?.77 r14)
         (unsafe-vector-set!.2 r13)
         (cons.76 r9)
         (vector-init-loop.80 r8)
         (make-init-vector.1 rdi)
         (empty?.68 rsi)
         (cdr.64 rdx)
         (car.63 rcx)
         (vector-ref.62 rbx)
         (vector-set!.61 rsp)
         (zeros.4 r15)
         (tmp.336 rsp)
         (tmp.370 rsp)
         (tmp.165 rsp)
         (tmp.335 rbx)
         (tmp.369 rbx)
         (tmp.164 rbx)
         (tmp.348 r13)
         (tmp.334 rcx)
         (tmp.368 rcx)
         (tmp.163 rcx)
         (tmp.347 r13)
         (tmp.381 r13)
         (tmp.176 r13)
         (tmp.382 r13)
         (tmp.177 r13)
         (tmp.330 rdx)
         (tmp.364 rdx)
         (tmp.159 rdx)
         (boolean?.67 rdx)
         (tmp.331 rdx)
         (tmp.365 rdx)
         (tmp.160 rdx)
         (fixnum?.66 rdx)
         (tmp.332 rdx)
         (tmp.366 rdx)
         (tmp.161 rdx)
         (procedure-arity.65 rdx)
         (tmp.333 rdx)
         (tmp.367 rdx)
         (tmp.162 rdx)
         (tmp.346 r15)
         (tmp.380 r15)
         (tmp.175 r15)
         (tmp.322 rsi)
         (tmp.356 rsi)
         (tmp.151 rsi)
         (not.75 rsi)
         (tmp.323 rsi)
         (tmp.357 rsi)
         (tmp.152 rsi)
         (vector?.74 rsi)
         (tmp.324 rsi)
         (tmp.358 rsi)
         (tmp.153 rsi)
         (procedure?.73 rsi)
         (tmp.325 rsi)
         (tmp.359 rsi)
         (tmp.154 rsi)
         (pair?.72 rsi)
         (tmp.326 rsi)
         (tmp.360 rsi)
         (tmp.155 rsi)
         (error?.71 rsi)
         (tmp.327 rsi)
         (tmp.361 rsi)
         (tmp.156 rsi)
         (ascii-char?.70 rsi)
         (tmp.328 rsi)
         (tmp.362 rsi)
         (tmp.157 rsi)
         (void?.69 rsi)
         (tmp.329 rsi)
         (tmp.363 rsi)
         (tmp.158 rsi)
         (tmp.321 r9)
         (tmp.355 r9)
         (tmp.150 r9)
         (tmp.320 r14)
         (tmp.354 r14)
         (tmp.149 r14)
         (tmp.319 r14)
         (tmp.353 r14)
         (tmp.148 r14)
         (tmp.318 r14)
         (tmp.352 r14)
         (tmp.147 r14)
         (listofZero.12 r15)
         (tmp.317 r14)
         (tmp.351 r14)
         (tmp.146 r14)
         (tmp.140 r15)
         (tmp.141 r14)
         (tmp.316 r15)
         (tmp.350 r15)
         (tmp.145 r15)
         (ones.13 r15)
         (make-vector.59 fv1)
         (|-.54| fv3)
         (|+.53| fv4)
         (tmp.345 fv2)
         (tmp.379 fv2)
         (tmp.174 fv2)
         (*.52 fv2)
         (tmp.344 fv2)
         (tmp.378 fv2)
         (tmp.173 fv2)
         (tmp.339 fv2)
         (tmp.373 fv2)
         (tmp.168 fv2)
         (>=.58 fv2)
         (tmp.340 fv2)
         (tmp.374 fv2)
         (tmp.169 fv2)
         (>.57 fv2)
         (tmp.341 fv2)
         (tmp.375 fv2)
         (tmp.170 fv2)
         (<=.56 fv2)
         (tmp.342 fv2)
         (tmp.376 fv2)
         (tmp.171 fv2)
         (<.55 fv2)
         (tmp.343 fv2)
         (tmp.377 fv2)
         (tmp.172 fv2)
         (tmp.337 fv1)
         (tmp.371 fv1)
         (tmp.166 fv1)
         (vector-length.60 fv1)
         (tmp.338 fv1)
         (tmp.372 fv1)
         (tmp.167 fv1))))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (set! rbp (+ rbp 24))
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31)))
        (set! rbp (- rbp 24))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32)))
        (set! rbp (- rbp 24))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349)))
    (define L.inc.6.33
      ((assignment
        ((ra.383 r15) (x.11 r14) (|+.53| r13) (c.124 r13) (tmp.139 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29)))
    (define L.map.5.32
      ((assignment
        ((ra.384 fv2)
         (l.10 fv3)
         (car.63 fv0)
         (f.9 fv4)
         (map.5 fv5)
         (cons.76 fv6)
         (cdr.64 fv7)
         (tmp.142 r15)
         (c.123 r15)
         (tmp.385 r14)
         (tmp.190 r14)
         (empty?.68 r15)
         (tmp.179 r15)
         (tmp.134 r15)
         (tmp.135 r15))))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (set! rbp (+ rbp 64))
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14)))
        (set! rbp (- rbp 64))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38)))))))
    (define L.zeros.4.31
      ((assignment
        ((ra.386 fv0)
         (l.8 fv1)
         (|-.54| fv2)
         (n.7 fv3)
         (cons.76 fv4)
         (zeros.4 fv5)
         (tmp.193 fv2)
         (c.122 r15)
         (eq?.77 r15)
         (tmp.192 r15)
         (tmp.130 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.133 r15)
         (tmp.194 r15))))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (set! rbp (+ rbp 48))
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5)))
        (set! rbp (- rbp 48))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (set! rbp (+ rbp 48))
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28)))
            (set! rbp (- rbp 48))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (set! rbp (+ rbp 48))
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6)))
            (set! rbp (- rbp 48))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31)))))
    (define L.*.52.30
      ((assignment
        ((ra.387 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.201 r9)
         (c.121 r14)
         (tmp.388 r9))))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43)))))
    (define L.+.53.29
      ((assignment
        ((ra.389 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.207 r9)
         (c.120 r14)
         (tmp.390 r9))))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47)))))
    (define L.-.54.28
      ((assignment
        ((ra.391 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.213 r9)
         (c.119 r14)
         (tmp.392 r9))))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51)))))
    (define L.<.55.27
      ((assignment
        ((ra.393 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.220 r9)
         (c.118 r14)
         (tmp.394 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56)))))
    (define L.<=.56.26
      ((assignment
        ((ra.395 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.227 r9)
         (c.117 r14)
         (tmp.396 r9))))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61)))))
    (define L.>.57.25
      ((assignment
        ((ra.397 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.234 r9)
         (c.116 r14)
         (tmp.398 r9))))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66)))))
    (define L.>=.58.24
      ((assignment
        ((ra.399 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.241 r9)
         (c.115 r14)
         (tmp.400 r9))))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71)))))
    (define L.make-vector.59.23
      ((assignment
        ((ra.401 r15)
         (tmp.28 r14)
         (make-init-vector.1 r13)
         (tmp.244 r9)
         (c.114 r13)
         (tmp.402 r9))))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73)))))
    (define L.vector-length.60.22
      ((assignment
        ((ra.403 r15) (tmp.29 r14) (tmp.247 r13) (c.113 r14) (tmp.404 r13))))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75)))))
    (define L.vector-set!.61.21
      ((assignment
        ((ra.405 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.32 r9)
         (unsafe-vector-set!.2 rdi)
         (c.112 r8)
         (tmp.253 r8)
         (tmp.406 r8))))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79)))))
    (define L.vector-ref.62.20
      ((assignment
        ((ra.407 r15)
         (tmp.33 r14)
         (tmp.34 r13)
         (unsafe-vector-ref.3 r9)
         (c.111 r9)
         (tmp.259 r8)
         (tmp.408 r8))))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83)))))
    (define L.car.63.19
      ((assignment
        ((ra.409 r15) (tmp.35 r14) (tmp.262 r13) (c.110 r14) (tmp.410 r13))))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85)))))
    (define L.cdr.64.18
      ((assignment
        ((ra.411 r15) (tmp.36 r14) (tmp.265 r13) (c.109 r14) (tmp.412 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87)))))
    (define L.procedure-arity.65.17
      ((assignment
        ((ra.413 r15) (tmp.37 r14) (tmp.268 r13) (c.108 r14) (tmp.414 r13))))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89)))))
    (define L.fixnum?.66.16
      ((assignment
        ((ra.415 r15) (c.107 r14) (tmp.270 r14) (tmp.38 r14) (tmp.416 r14))))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415))
          (begin (set! rax 6) (jump ra.415)))))
    (define L.boolean?.67.15
      ((assignment
        ((ra.417 r15) (c.106 r14) (tmp.272 r14) (tmp.39 r14) (tmp.418 r14))))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417))
          (begin (set! rax 6) (jump ra.417)))))
    (define L.empty?.68.14
      ((assignment
        ((ra.419 r15) (c.105 r14) (tmp.274 r14) (tmp.40 r14) (tmp.420 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419))
          (begin (set! rax 6) (jump ra.419)))))
    (define L.void?.69.13
      ((assignment
        ((ra.421 r15) (c.104 r14) (tmp.276 r14) (tmp.41 r14) (tmp.422 r14))))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421))
          (begin (set! rax 6) (jump ra.421)))))
    (define L.ascii-char?.70.12
      ((assignment
        ((ra.423 r15) (c.103 r14) (tmp.278 r14) (tmp.42 r14) (tmp.424 r14))))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423))
          (begin (set! rax 6) (jump ra.423)))))
    (define L.error?.71.11
      ((assignment
        ((ra.425 r15) (c.102 r14) (tmp.280 r14) (tmp.43 r14) (tmp.426 r14))))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425))
          (begin (set! rax 6) (jump ra.425)))))
    (define L.pair?.72.10
      ((assignment
        ((ra.427 r15) (c.101 r14) (tmp.282 r14) (tmp.44 r14) (tmp.428 r14))))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427))
          (begin (set! rax 6) (jump ra.427)))))
    (define L.procedure?.73.9
      ((assignment
        ((ra.429 r15) (c.100 r14) (tmp.284 r14) (tmp.45 r14) (tmp.430 r14))))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429))
          (begin (set! rax 6) (jump ra.429)))))
    (define L.vector?.74.8
      ((assignment
        ((ra.431 r15) (c.99 r14) (tmp.286 r14) (tmp.46 r14) (tmp.432 r14))))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431))
          (begin (set! rax 6) (jump ra.431)))))
    (define L.not.75.7
      ((assignment ((ra.433 r15) (c.98 r14) (tmp.47 r14))))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433))
          (begin (set! rax 14) (jump ra.433)))))
    (define L.cons.76.6
      ((assignment
        ((ra.434 r15)
         (tmp.48 r14)
         (tmp.49 r13)
         (c.97 r14)
         (tmp.288 r9)
         (tmp.435 r9)
         (tmp.143 r9))))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434)))
    (define L.eq?.77.5
      ((assignment ((ra.436 r15) (tmp.50 r14) (c.96 r14) (tmp.51 r13))))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436))
          (begin (set! rax 6) (jump ra.436)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.437 r15)
         (tmp.78 r14)
         (vector-init-loop.80 r13)
         (tmp.290 r9)
         (tmp.439 r8)
         (tmp.534 r9)
         (tmp.293 r8)
         (c.95 r13)
         (tmp.438 r9)
         (tmp.440 r9)
         (tmp.291 r9)
         (tmp.441 r9)
         (tmp.292 r9)
         (tmp.79 r9)
         (tmp.442 r9)
         (tmp.144 r9)
         (tmp.126 r13))))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3)))
    (define L.vector-init-loop.80.3
      ((assignment
        ((ra.443 r15)
         (len.81 r14)
         (i.83 r13)
         (c.94 r9)
         (vec.82 r8)
         (vector-init-loop.80 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.444 r15)
         (tmp.89 r14)
         (tmp.90 r13)
         (tmp.91 r9)
         (tmp.307 r8)
         (c.93 r14))))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.445 r15) (tmp.86 r14) (tmp.87 r13) (tmp.315 r9) (c.92 r14))))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110)))))
    (define L.jp.110
      ((assignment ((ra.446 r15) (tmp.309 r14) (tmp.87 r13) (tmp.86 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109)))
          (begin (set! rax 2622) (jump ra.446)))))
    (define L.jp.109
      ((assignment
        ((ra.447 r15)
         (tmp.86 r14)
         (tmp.311 r13)
         (tmp.87 r9)
         (tmp.448 r13)
         (tmp.312 r13)
         (tmp.449 r13)
         (tmp.313 r13)
         (tmp.450 r13)
         (tmp.314 r13))))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447))
          (begin (set! rax 2622) (jump ra.447)))))
    (define L.jp.106
      ((assignment
        ((ra.451 r15) (tmp.301 r14) (tmp.90 r13) (tmp.91 r9) (tmp.89 r8))))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105)))
          (begin (set! rax 2366) (jump ra.451)))))
    (define L.jp.105
      ((assignment
        ((ra.452 r15)
         (tmp.89 r14)
         (tmp.91 r13)
         (tmp.303 r9)
         (tmp.90 r8)
         (tmp.453 r9)
         (tmp.304 r9)
         (tmp.454 r9)
         (tmp.305 r9)
         (tmp.455 r9)
         (tmp.306 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452))
          (begin (set! rax 2366) (jump ra.452)))))
    (define L.jp.102
      ((assignment
        ((ra.456 r15)
         (len.81 r14)
         (vector-init-loop.80 r13)
         (i.83 r9)
         (vec.82 r8)
         (tmp.295 rdi)
         (tmp.299 r9)
         (tmp.298 rdi)
         (tmp.459 rdi)
         (tmp.297 rdi)
         (tmp.458 rdi)
         (tmp.296 rdi)
         (tmp.457 rdi)
         (tmp.460 r9)
         (tmp.125 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3)))))
    (define L.jp.89
      ((assignment ((ra.461 r15) (tmp.267 r14) (tmp.37 r13))))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461))
          (begin (set! rax 3390) (jump ra.461)))))
    (define L.jp.87
      ((assignment ((ra.462 r15) (tmp.264 r14) (tmp.36 r13))))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462))
          (begin (set! rax 3134) (jump ra.462)))))
    (define L.jp.85
      ((assignment ((ra.463 r15) (tmp.261 r14) (tmp.35 r13))))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463))
          (begin (set! rax 2878) (jump ra.463)))))
    (define L.jp.83
      ((assignment
        ((ra.464 r15)
         (tmp.33 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.34 r9)
         (tmp.255 r8)
         (tmp.258 r8)
         (tmp.465 r8))))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82))))
          (begin (set! rax 2622) (jump ra.464)))))
    (define L.jp.82
      ((assignment
        ((ra.466 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.257 r13)
         (tmp.34 r9)
         (tmp.33 r8)
         (tmp.127 r14))))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump ra.466)))))
    (define L.jp.79
      ((assignment
        ((ra.467 r15)
         (tmp.30 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.32 r9)
         (tmp.249 rdi)
         (tmp.31 rsi)
         (tmp.252 r8)
         (tmp.468 r8))))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78))))
          (begin (set! rax 2366) (jump ra.467)))))
    (define L.jp.78
      ((assignment
        ((ra.469 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.251 r13)
         (tmp.32 r9)
         (tmp.31 rdi)
         (tmp.30 r8)
         (tmp.128 r14))))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump ra.469)))))
    (define L.jp.75
      ((assignment ((ra.470 r15) (tmp.246 r14) (tmp.29 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470))
          (begin (set! rax 2110) (jump ra.470)))))
    (define L.jp.73
      ((assignment
        ((ra.471 r15)
         (make-init-vector.1 r14)
         (tmp.243 r13)
         (tmp.28 r9)
         (tmp.129 r14))))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump ra.471)))))
    (define L.jp.71
      ((assignment
        ((ra.472 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.473 r9))))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70))))
          (begin (set! rax 1598) (jump ra.472)))))
    (define L.jp.70
      ((assignment ((ra.474 r15) (tmp.238 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474))
            (begin (set! rax 6) (jump ra.474)))
          (begin (set! rax 1598) (jump ra.474)))))
    (define L.jp.66
      ((assignment
        ((ra.475 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.476 r9))))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65))))
          (begin (set! rax 1342) (jump ra.475)))))
    (define L.jp.65
      ((assignment ((ra.477 r15) (tmp.231 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477))
            (begin (set! rax 6) (jump ra.477)))
          (begin (set! rax 1342) (jump ra.477)))))
    (define L.jp.61
      ((assignment
        ((ra.478 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.479 r9))))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60))))
          (begin (set! rax 1086) (jump ra.478)))))
    (define L.jp.60
      ((assignment ((ra.480 r15) (tmp.224 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480))
            (begin (set! rax 6) (jump ra.480)))
          (begin (set! rax 1086) (jump ra.480)))))
    (define L.jp.56
      ((assignment
        ((ra.481 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.215 r9)
         (tmp.219 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55))))
          (begin (set! rax 830) (jump ra.481)))))
    (define L.jp.55
      ((assignment ((ra.483 r15) (tmp.217 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483))
            (begin (set! rax 6) (jump ra.483)))
          (begin (set! rax 830) (jump ra.483)))))
    (define L.jp.51
      ((assignment
        ((ra.484 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.209 r9)
         (tmp.212 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50))))
          (begin (set! rax 574) (jump ra.484)))))
    (define L.jp.50
      ((assignment
        ((ra.486 r15) (tmp.211 r14) (tmp.18 r13) (tmp.19 r9) (tmp.487 r14))))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486))
          (begin (set! rax 574) (jump ra.486)))))
    (define L.jp.47
      ((assignment
        ((ra.488 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.203 r9)
         (tmp.206 r9)
         (tmp.489 r9))))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46))))
          (begin (set! rax 318) (jump ra.488)))))
    (define L.jp.46
      ((assignment
        ((ra.490 r15) (tmp.205 r14) (tmp.16 r13) (tmp.17 r9) (tmp.491 r14))))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490))
          (begin (set! rax 318) (jump ra.490)))))
    (define L.jp.43
      ((assignment
        ((ra.492 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.196 r9)
         (tmp.200 r9)
         (tmp.493 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42))))
          (begin (set! rax 62) (jump ra.492)))))
    (define L.jp.42
      ((assignment
        ((ra.494 r15)
         (tmp.14 r14)
         (tmp.198 r13)
         (tmp.15 r9)
         (tmp.495 r13)
         (tmp.199 r13)
         (tmp.496 r14))))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494))
          (begin (set! rax 62) (jump ra.494)))))
    (define L.jp.38
      ((assignment
        ((ra.497 r15)
         (cdr.64 r14)
         (tmp.142 r13)
         (tmp.183 rdi)
         (l.10 rsi)
         (f.9 rdx)
         (cons.76 rcx)
         (map.5 r9)
         (car.63 r8)
         (tmp.189 rdi))))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35)))))
    (define L.jp.37
      ((assignment
        ((ra.498 fv2)
         (cdr.64 fv3)
         (f.9 fv0)
         (cons.76 fv4)
         (l.10 fv5)
         (map.5 fv6)
         (tmp.186 fv1)
         (tmp.185 r15)
         (tmp.142 r14)
         (tmp.188 r15)
         (car.63 r13)
         (tmp.136 r15)
         (tmp.187 r15))))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19)))
            (set! rbp (- rbp 56))
            (set! tmp.187 rax)
            (set! rbp (+ rbp 56))
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35)))))
    (define L.jp.35
      ((assignment
        ((ra.499 fv0)
         (cons.76 fv1)
         (tmp.180 fv2)
         (f.9 fv3)
         (map.5 fv4)
         (cdr.64 r15)
         (l.10 r14)
         (tmp.137 r13)
         (tmp.138 r15)
         (tmp.181 r15)
         (tmp.182 r15))))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (set! rbp (+ rbp 40))
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18)))
        (set! rbp (- rbp 40))
        (set! tmp.181 rax)
        (set! rbp (+ rbp 40))
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32)))
        (set! rbp (- rbp 40))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))



(parameterize ([current-pass-list
                  (list
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((assignment
        ((ra.349 fv0)
         (inc.6 fv1)
         (map.5 fv2)
         (unsafe-vector-ref.3 r15)
         (eq?.77 r14)
         (unsafe-vector-set!.2 r13)
         (cons.76 r9)
         (vector-init-loop.80 r8)
         (make-init-vector.1 rdi)
         (empty?.68 rsi)
         (cdr.64 rdx)
         (car.63 rcx)
         (vector-ref.62 rbx)
         (vector-set!.61 rsp)
         (zeros.4 r15)
         (tmp.336 rsp)
         (tmp.370 rsp)
         (tmp.165 rsp)
         (tmp.335 rbx)
         (tmp.369 rbx)
         (tmp.164 rbx)
         (tmp.348 r13)
         (tmp.334 rcx)
         (tmp.368 rcx)
         (tmp.163 rcx)
         (tmp.347 r13)
         (tmp.381 r13)
         (tmp.176 r13)
         (tmp.382 r13)
         (tmp.177 r13)
         (tmp.330 rdx)
         (tmp.364 rdx)
         (tmp.159 rdx)
         (boolean?.67 rdx)
         (tmp.331 rdx)
         (tmp.365 rdx)
         (tmp.160 rdx)
         (fixnum?.66 rdx)
         (tmp.332 rdx)
         (tmp.366 rdx)
         (tmp.161 rdx)
         (procedure-arity.65 rdx)
         (tmp.333 rdx)
         (tmp.367 rdx)
         (tmp.162 rdx)
         (tmp.346 r15)
         (tmp.380 r15)
         (tmp.175 r15)
         (tmp.322 rsi)
         (tmp.356 rsi)
         (tmp.151 rsi)
         (not.75 rsi)
         (tmp.323 rsi)
         (tmp.357 rsi)
         (tmp.152 rsi)
         (vector?.74 rsi)
         (tmp.324 rsi)
         (tmp.358 rsi)
         (tmp.153 rsi)
         (procedure?.73 rsi)
         (tmp.325 rsi)
         (tmp.359 rsi)
         (tmp.154 rsi)
         (pair?.72 rsi)
         (tmp.326 rsi)
         (tmp.360 rsi)
         (tmp.155 rsi)
         (error?.71 rsi)
         (tmp.327 rsi)
         (tmp.361 rsi)
         (tmp.156 rsi)
         (ascii-char?.70 rsi)
         (tmp.328 rsi)
         (tmp.362 rsi)
         (tmp.157 rsi)
         (void?.69 rsi)
         (tmp.329 rsi)
         (tmp.363 rsi)
         (tmp.158 rsi)
         (tmp.321 r9)
         (tmp.355 r9)
         (tmp.150 r9)
         (tmp.320 r14)
         (tmp.354 r14)
         (tmp.149 r14)
         (tmp.319 r14)
         (tmp.353 r14)
         (tmp.148 r14)
         (tmp.318 r14)
         (tmp.352 r14)
         (tmp.147 r14)
         (listofZero.12 r15)
         (tmp.317 r14)
         (tmp.351 r14)
         (tmp.146 r14)
         (tmp.140 r15)
         (tmp.141 r14)
         (tmp.316 r15)
         (tmp.350 r15)
         (tmp.145 r15)
         (ones.13 r15)
         (make-vector.59 fv1)
         (|-.54| fv3)
         (|+.53| fv4)
         (tmp.345 fv2)
         (tmp.379 fv2)
         (tmp.174 fv2)
         (*.52 fv2)
         (tmp.344 fv2)
         (tmp.378 fv2)
         (tmp.173 fv2)
         (tmp.339 fv2)
         (tmp.373 fv2)
         (tmp.168 fv2)
         (>=.58 fv2)
         (tmp.340 fv2)
         (tmp.374 fv2)
         (tmp.169 fv2)
         (>.57 fv2)
         (tmp.341 fv2)
         (tmp.375 fv2)
         (tmp.170 fv2)
         (<=.56 fv2)
         (tmp.342 fv2)
         (tmp.376 fv2)
         (tmp.171 fv2)
         (<.55 fv2)
         (tmp.343 fv2)
         (tmp.377 fv2)
         (tmp.172 fv2)
         (tmp.337 fv1)
         (tmp.371 fv1)
         (tmp.166 fv1)
         (vector-length.60 fv1)
         (tmp.338 fv1)
         (tmp.372 fv1)
         (tmp.167 fv1))))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (set! rbp (+ rbp 24))
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 24))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 24))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((assignment
        ((ra.383 r15) (x.11 r14) (|+.53| r13) (c.124 r13) (tmp.139 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((assignment
        ((ra.384 fv2)
         (l.10 fv3)
         (car.63 fv0)
         (f.9 fv4)
         (map.5 fv5)
         (cons.76 fv6)
         (cdr.64 fv7)
         (tmp.142 r15)
         (c.123 r15)
         (tmp.385 r14)
         (tmp.190 r14)
         (empty?.68 r15)
         (tmp.179 r15)
         (tmp.134 r15)
         (tmp.135 r15))))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (set! rbp (+ rbp 64))
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! rbp (- rbp 64))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((assignment
        ((ra.386 fv0)
         (l.8 fv1)
         (|-.54| fv2)
         (n.7 fv3)
         (cons.76 fv4)
         (zeros.4 fv5)
         (tmp.193 fv2)
         (c.122 r15)
         (eq?.77 r15)
         (tmp.192 r15)
         (tmp.130 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.133 r15)
         (tmp.194 r15))))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (set! rbp (+ rbp 48))
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 48))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (set! rbp (+ rbp 48))
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 48))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (set! rbp (+ rbp 48))
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 48))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((assignment
        ((ra.387 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.201 r9)
         (c.121 r14)
         (tmp.388 r9))))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((assignment
        ((ra.389 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.207 r9)
         (c.120 r14)
         (tmp.390 r9))))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((assignment
        ((ra.391 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.213 r9)
         (c.119 r14)
         (tmp.392 r9))))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((assignment
        ((ra.393 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.220 r9)
         (c.118 r14)
         (tmp.394 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((assignment
        ((ra.395 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.227 r9)
         (c.117 r14)
         (tmp.396 r9))))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((assignment
        ((ra.397 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.234 r9)
         (c.116 r14)
         (tmp.398 r9))))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((assignment
        ((ra.399 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.241 r9)
         (c.115 r14)
         (tmp.400 r9))))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((assignment
        ((ra.401 r15)
         (tmp.28 r14)
         (make-init-vector.1 r13)
         (tmp.244 r9)
         (c.114 r13)
         (tmp.402 r9))))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((assignment
        ((ra.403 r15) (tmp.29 r14) (tmp.247 r13) (c.113 r14) (tmp.404 r13))))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((assignment
        ((ra.405 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.32 r9)
         (unsafe-vector-set!.2 rdi)
         (c.112 r8)
         (tmp.253 r8)
         (tmp.406 r8))))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((assignment
        ((ra.407 r15)
         (tmp.33 r14)
         (tmp.34 r13)
         (unsafe-vector-ref.3 r9)
         (c.111 r9)
         (tmp.259 r8)
         (tmp.408 r8))))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((assignment
        ((ra.409 r15) (tmp.35 r14) (tmp.262 r13) (c.110 r14) (tmp.410 r13))))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((assignment
        ((ra.411 r15) (tmp.36 r14) (tmp.265 r13) (c.109 r14) (tmp.412 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((assignment
        ((ra.413 r15) (tmp.37 r14) (tmp.268 r13) (c.108 r14) (tmp.414 r13))))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((assignment
        ((ra.415 r15) (c.107 r14) (tmp.270 r14) (tmp.38 r14) (tmp.416 r14))))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((assignment
        ((ra.417 r15) (c.106 r14) (tmp.272 r14) (tmp.39 r14) (tmp.418 r14))))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((assignment
        ((ra.419 r15) (c.105 r14) (tmp.274 r14) (tmp.40 r14) (tmp.420 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((assignment
        ((ra.421 r15) (c.104 r14) (tmp.276 r14) (tmp.41 r14) (tmp.422 r14))))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((assignment
        ((ra.423 r15) (c.103 r14) (tmp.278 r14) (tmp.42 r14) (tmp.424 r14))))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((assignment
        ((ra.425 r15) (c.102 r14) (tmp.280 r14) (tmp.43 r14) (tmp.426 r14))))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((assignment
        ((ra.427 r15) (c.101 r14) (tmp.282 r14) (tmp.44 r14) (tmp.428 r14))))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((assignment
        ((ra.429 r15) (c.100 r14) (tmp.284 r14) (tmp.45 r14) (tmp.430 r14))))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((assignment
        ((ra.431 r15) (c.99 r14) (tmp.286 r14) (tmp.46 r14) (tmp.432 r14))))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((assignment ((ra.433 r15) (c.98 r14) (tmp.47 r14))))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((assignment
        ((ra.434 r15)
         (tmp.48 r14)
         (tmp.49 r13)
         (c.97 r14)
         (tmp.288 r9)
         (tmp.435 r9)
         (tmp.143 r9))))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((assignment ((ra.436 r15) (tmp.50 r14) (c.96 r14) (tmp.51 r13))))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.437 r15)
         (tmp.78 r14)
         (vector-init-loop.80 r13)
         (tmp.290 r9)
         (tmp.439 r8)
         (tmp.534 r9)
         (tmp.293 r8)
         (c.95 r13)
         (tmp.438 r9)
         (tmp.440 r9)
         (tmp.291 r9)
         (tmp.441 r9)
         (tmp.292 r9)
         (tmp.79 r9)
         (tmp.442 r9)
         (tmp.144 r9)
         (tmp.126 r13))))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((assignment
        ((ra.443 r15)
         (len.81 r14)
         (i.83 r13)
         (c.94 r9)
         (vec.82 r8)
         (vector-init-loop.80 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.444 r15)
         (tmp.89 r14)
         (tmp.90 r13)
         (tmp.91 r9)
         (tmp.307 r8)
         (c.93 r14))))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.445 r15) (tmp.86 r14) (tmp.87 r13) (tmp.315 r9) (c.92 r14))))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((assignment ((ra.446 r15) (tmp.309 r14) (tmp.87 r13) (tmp.86 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((assignment
        ((ra.447 r15)
         (tmp.86 r14)
         (tmp.311 r13)
         (tmp.87 r9)
         (tmp.448 r13)
         (tmp.312 r13)
         (tmp.449 r13)
         (tmp.313 r13)
         (tmp.450 r13)
         (tmp.314 r13))))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((assignment
        ((ra.451 r15) (tmp.301 r14) (tmp.90 r13) (tmp.91 r9) (tmp.89 r8))))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((assignment
        ((ra.452 r15)
         (tmp.89 r14)
         (tmp.91 r13)
         (tmp.303 r9)
         (tmp.90 r8)
         (tmp.453 r9)
         (tmp.304 r9)
         (tmp.454 r9)
         (tmp.305 r9)
         (tmp.455 r9)
         (tmp.306 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((assignment
        ((ra.456 r15)
         (len.81 r14)
         (vector-init-loop.80 r13)
         (i.83 r9)
         (vec.82 r8)
         (tmp.295 rdi)
         (tmp.299 r9)
         (tmp.298 rdi)
         (tmp.459 rdi)
         (tmp.297 rdi)
         (tmp.458 rdi)
         (tmp.296 rdi)
         (tmp.457 rdi)
         (tmp.460 r9)
         (tmp.125 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((assignment ((ra.461 r15) (tmp.267 r14) (tmp.37 r13))))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((assignment ((ra.462 r15) (tmp.264 r14) (tmp.36 r13))))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((assignment ((ra.463 r15) (tmp.261 r14) (tmp.35 r13))))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((assignment
        ((ra.464 r15)
         (tmp.33 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.34 r9)
         (tmp.255 r8)
         (tmp.258 r8)
         (tmp.465 r8))))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((assignment
        ((ra.466 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.257 r13)
         (tmp.34 r9)
         (tmp.33 r8)
         (tmp.127 r14))))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((assignment
        ((ra.467 r15)
         (tmp.30 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.32 r9)
         (tmp.249 rdi)
         (tmp.31 rsi)
         (tmp.252 r8)
         (tmp.468 r8))))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((assignment
        ((ra.469 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.251 r13)
         (tmp.32 r9)
         (tmp.31 rdi)
         (tmp.30 r8)
         (tmp.128 r14))))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((assignment ((ra.470 r15) (tmp.246 r14) (tmp.29 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((assignment
        ((ra.471 r15)
         (make-init-vector.1 r14)
         (tmp.243 r13)
         (tmp.28 r9)
         (tmp.129 r14))))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((assignment
        ((ra.472 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.473 r9))))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((assignment ((ra.474 r15) (tmp.238 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((assignment
        ((ra.475 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.476 r9))))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((assignment ((ra.477 r15) (tmp.231 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((assignment
        ((ra.478 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.479 r9))))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((assignment ((ra.480 r15) (tmp.224 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((assignment
        ((ra.481 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.215 r9)
         (tmp.219 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((assignment ((ra.483 r15) (tmp.217 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((assignment
        ((ra.484 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.209 r9)
         (tmp.212 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((assignment
        ((ra.486 r15) (tmp.211 r14) (tmp.18 r13) (tmp.19 r9) (tmp.487 r14))))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((assignment
        ((ra.488 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.203 r9)
         (tmp.206 r9)
         (tmp.489 r9))))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((assignment
        ((ra.490 r15) (tmp.205 r14) (tmp.16 r13) (tmp.17 r9) (tmp.491 r14))))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((assignment
        ((ra.492 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.196 r9)
         (tmp.200 r9)
         (tmp.493 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((assignment
        ((ra.494 r15)
         (tmp.14 r14)
         (tmp.198 r13)
         (tmp.15 r9)
         (tmp.495 r13)
         (tmp.199 r13)
         (tmp.496 r14))))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((assignment
        ((ra.497 r15)
         (cdr.64 r14)
         (tmp.142 r13)
         (tmp.183 rdi)
         (l.10 rsi)
         (f.9 rdx)
         (cons.76 rcx)
         (map.5 r9)
         (car.63 r8)
         (tmp.189 rdi))))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((assignment
        ((ra.498 fv2)
         (cdr.64 fv3)
         (f.9 fv0)
         (cons.76 fv4)
         (l.10 fv5)
         (map.5 fv6)
         (tmp.186 fv1)
         (tmp.185 r15)
         (tmp.142 r14)
         (tmp.188 r15)
         (car.63 r13)
         (tmp.136 r15)
         (tmp.187 r15))))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.187 rax)
            (set! rbp (+ rbp 56))
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((assignment
        ((ra.499 fv0)
         (cons.76 fv1)
         (tmp.180 fv2)
         (f.9 fv3)
         (map.5 fv4)
         (cdr.64 r15)
         (l.10 r14)
         (tmp.137 r13)
         (tmp.138 r15)
         (tmp.181 r15)
         (tmp.182 r15))))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (set! rbp (+ rbp 40))
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.181 rax)
        (set! rbp (+ rbp 40))
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))

  (parameterize ([current-pass-list
                  (list
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((locals
        (tmp.167
         tmp.372
         tmp.338
         vector-length.60
         tmp.166
         tmp.371
         tmp.337
         tmp.172
         tmp.377
         tmp.343
         <.55
         tmp.171
         tmp.376
         tmp.342
         <=.56
         tmp.170
         tmp.375
         tmp.341
         >.57
         tmp.169
         tmp.374
         tmp.340
         >=.58
         tmp.168
         tmp.373
         tmp.339
         tmp.173
         tmp.378
         tmp.344
         *.52
         tmp.174
         tmp.379
         tmp.345
         |+.53|
         |-.54|
         make-vector.59))
       (undead-out
        ((r12 rbp ra.349)
         (r12 tmp.316 rbp ra.349)
         (tmp.316 r12 rbp ra.349)
         (tmp.350 r12 rbp ra.349)
         (r12 rbp ra.349 tmp.145)
         (ra.349 rbp r12 tmp.145)
         (tmp.145 r12 rbp ra.349)
         (r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.317 rbp ra.349 unsafe-vector-ref.3)
         (tmp.317 r12 rbp ra.349 unsafe-vector-ref.3)
         (tmp.351 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 rbp ra.349 unsafe-vector-ref.3 tmp.146)
         (unsafe-vector-ref.3 ra.349 rbp r12 tmp.146)
         (tmp.146 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.318 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.318 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.352 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3 tmp.147)
         (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12 tmp.147)
         (tmp.147 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.319
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.319
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.353
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.148)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          r12
          tmp.148)
         (tmp.148
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.320
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.320
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.354
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.149)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.321
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.321
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.355
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.150)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.322
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.322
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.356
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.151)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.357
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.152)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.358
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.153)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.359
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.154)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.360
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.155)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.156)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.157)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.158)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.159)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.160)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.161)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.162)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.163)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.164)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.165)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.337
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.337
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.371
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.166)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.338
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.338
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.372
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.167)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.339
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.339
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.373
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.168)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.374
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.169)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.375
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.170)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.376
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.171)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.377
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.172)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.173)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          |-.54|
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.379
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.174)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          tmp.174)
         (tmp.174
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          vector-init-loop.80
          make-init-vector.1)
         (vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62)
         (make-vector.59
          make-init-vector.1
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59)
         (r12 |-.54| eq?.77 |+.53| ra.349 rbp empty?.68 car.63 cdr.64 cons.76)
         (r12
          tmp.346
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.346
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.380
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          tmp.175)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.175)
         (tmp.175
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          tmp.347
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.347
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.381
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4
          tmp.176)
         (zeros.4
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.176)
         (tmp.176
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (r12
          tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.382
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4
          tmp.177)
         (zeros.4
          cons.76
          map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          tmp.177)
         (tmp.177
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          |-.54|
          zeros.4)
         (eq?.77
          cons.76
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          zeros.4)
         (cons.76
          inc.6
          |+.53|
          zeros.4
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5)
         (car.63 empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (cons.76 inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 car.63 map.5)
         (empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 map.5)
         (rbp ra.349 map.5 zeros.4 |+.53| inc.6)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         ((rax map.5 inc.6 ra.349 rbp)
          ((zeros.4 rdx rbp)
           (zeros.4 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         ((rax ra.349 rbp)
          ((inc.6 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (ones.13 ra.349 rbp)
         (ra.349 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.349
          (ones.13
           tmp.141
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           tmp.316
           r12
           rbp))
         (rbp
          (ones.13
           tmp.141
           listofZero.12
           r15
           rdi
           rsi
           rdx
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           r12
           tmp.316
           ra.349))
         (r12
          (tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           rbp
           tmp.316
           ra.349))
         (tmp.316 (r12 rbp ra.349))
         (tmp.350 (ra.349 rbp r12))
         (tmp.145 (r12 rbp ra.349))
         (unsafe-vector-ref.3
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           r12
           rbp
           ra.349))
         (tmp.317 (r12 rbp ra.349 unsafe-vector-ref.3))
         (tmp.351 (unsafe-vector-ref.3 ra.349 rbp r12))
         (tmp.146 (r12 rbp ra.349 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           r12
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.318 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (tmp.352 (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12))
         (tmp.147 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (vector-init-loop.80
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.319
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.353
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.148
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (make-init-vector.1
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.320
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.354
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (eq?.77
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.321
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.355
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cons.76
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.322
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.356
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (not.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.357
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.358
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.359
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (pair?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.360
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (error?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.361
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (ascii-char?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.362
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (void?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.363
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (empty?.68
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.364
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (boolean?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.365
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (fixnum?.66
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.366
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure-arity.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.367
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cdr.64
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.368
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (car.63
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.369
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector-ref.62
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.370
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-set!.61
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.337
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.371
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-length.60
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.338
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.372
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (make-vector.59
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.339
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.373
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>=.58
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.374
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>.57
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.375
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<=.56
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.376
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<.55
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.377
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|-.54|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.378
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           |-.54|
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|+.53|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.379
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1))
         (tmp.174
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (*.52
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.346
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.380
          (cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.175
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (zeros.4
          (rsi
           rdx
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.347
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.381
          (zeros.4
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.176
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (map.5
          (rsi
           rdx
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.348
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.382
          (zeros.4
           cons.76
           map.5
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|))
         (tmp.177
          (|-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (inc.6
          (rdx
           tmp.141
           listofZero.12
           rax
           tmp.140
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.140 (map.5 inc.6 ra.349 rbp))
         (rax (rbp ra.349 inc.6 map.5))
         (rdx (inc.6 map.5 r15 rdi rsi zeros.4 rbp))
         (rsi (map.5 r15 rdi zeros.4 rdx rbp))
         (rdi (r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (listofZero.12 (tmp.141 map.5 inc.6 ra.349 rbp))
         (tmp.141 (inc.6 listofZero.12 ra.349 rbp))
         (ones.13 (ra.349 rbp))))
       (assignment
        ((ra.349 fv0)
         (inc.6 fv1)
         (map.5 fv2)
         (unsafe-vector-ref.3 r15)
         (eq?.77 r14)
         (unsafe-vector-set!.2 r13)
         (cons.76 r9)
         (vector-init-loop.80 r8)
         (make-init-vector.1 rdi)
         (empty?.68 rsi)
         (cdr.64 rdx)
         (car.63 rcx)
         (vector-ref.62 rbx)
         (vector-set!.61 rsp)
         (zeros.4 r15)
         (tmp.336 rsp)
         (tmp.370 rsp)
         (tmp.165 rsp)
         (tmp.335 rbx)
         (tmp.369 rbx)
         (tmp.164 rbx)
         (tmp.348 r13)
         (tmp.334 rcx)
         (tmp.368 rcx)
         (tmp.163 rcx)
         (tmp.347 r13)
         (tmp.381 r13)
         (tmp.176 r13)
         (tmp.382 r13)
         (tmp.177 r13)
         (tmp.330 rdx)
         (tmp.364 rdx)
         (tmp.159 rdx)
         (boolean?.67 rdx)
         (tmp.331 rdx)
         (tmp.365 rdx)
         (tmp.160 rdx)
         (fixnum?.66 rdx)
         (tmp.332 rdx)
         (tmp.366 rdx)
         (tmp.161 rdx)
         (procedure-arity.65 rdx)
         (tmp.333 rdx)
         (tmp.367 rdx)
         (tmp.162 rdx)
         (tmp.346 r15)
         (tmp.380 r15)
         (tmp.175 r15)
         (tmp.322 rsi)
         (tmp.356 rsi)
         (tmp.151 rsi)
         (not.75 rsi)
         (tmp.323 rsi)
         (tmp.357 rsi)
         (tmp.152 rsi)
         (vector?.74 rsi)
         (tmp.324 rsi)
         (tmp.358 rsi)
         (tmp.153 rsi)
         (procedure?.73 rsi)
         (tmp.325 rsi)
         (tmp.359 rsi)
         (tmp.154 rsi)
         (pair?.72 rsi)
         (tmp.326 rsi)
         (tmp.360 rsi)
         (tmp.155 rsi)
         (error?.71 rsi)
         (tmp.327 rsi)
         (tmp.361 rsi)
         (tmp.156 rsi)
         (ascii-char?.70 rsi)
         (tmp.328 rsi)
         (tmp.362 rsi)
         (tmp.157 rsi)
         (void?.69 rsi)
         (tmp.329 rsi)
         (tmp.363 rsi)
         (tmp.158 rsi)
         (tmp.321 r9)
         (tmp.355 r9)
         (tmp.150 r9)
         (tmp.320 r14)
         (tmp.354 r14)
         (tmp.149 r14)
         (tmp.319 r14)
         (tmp.353 r14)
         (tmp.148 r14)
         (tmp.318 r14)
         (tmp.352 r14)
         (tmp.147 r14)
         (listofZero.12 r15)
         (tmp.317 r14)
         (tmp.351 r14)
         (tmp.146 r14)
         (tmp.140 r15)
         (tmp.141 r14)
         (tmp.316 r15)
         (tmp.350 r15)
         (tmp.145 r15)
         (ones.13 r15))))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (set! rbp (+ rbp 24))
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 24))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 24))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((locals ())
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi c.124 ra.383 rbp)
         (c.124 x.11 ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rdx rbp)
         (|+.53| ra.383 rsi rdx rbp)
         (ra.383 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.383 (rdx tmp.139 |+.53| x.11 c.124 rdi rsi rbp))
         (rbp (r15 rdi rsi rdx tmp.139 |+.53| x.11 c.124 ra.383))
         (rsi (r15 rdi |+.53| rdx rbp c.124 ra.383))
         (rdi (r15 rsi rdx rbp ra.383))
         (c.124 (x.11 rsi ra.383 rbp))
         (x.11 (rdx tmp.139 |+.53| c.124 ra.383 rbp))
         (|+.53| (rsi rdx rbp ra.383 x.11))
         (tmp.139 (x.11 ra.383 rbp))
         (rdx (r15 rdi rsi x.11 |+.53| ra.383 rbp))
         (r15 (rdi rsi rdx rbp))))
       (assignment
        ((ra.383 r15) (x.11 r14) (|+.53| r13) (c.124 r13) (tmp.139 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.384 rbp)
         (rsi rdx c.123 ra.384 rbp)
         (rdx c.123 f.9 ra.384 rbp)
         (c.123 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 car.63 l.10 ra.384 rbp)
         (c.123 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((rax cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((empty?.68 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.179 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((ra.384 rax rbp) (rax rbp))
          ((car.63 f.9 map.5 cons.76 cdr.64 l.10 ra.384 rbp)
           (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.385 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.190 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))))))
       (conflicts
        ((fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           rbp))
         (rbp
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           ra.384
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (ra.384
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           rbp
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (tmp.142
          (tmp.190
           tmp.385
           car.63
           map.5
           cons.76
           cdr.64
           l.10
           ra.384
           rbp
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (l.10
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           c.123
           f.9
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rcx
           r8
           r9
           fv0
           fv1))
         (cdr.64
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           rbp
           ra.384
           l.10
           f.9
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r8
           r9
           fv0
           fv1))
         (cons.76
          (tmp.179
           rax
           tmp.134
           empty?.68
           rbp
           ra.384
           l.10
           car.63
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           r9
           fv0
           fv1))
         (map.5
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           rbp
           ra.384
           l.10
           f.9
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           fv0
           fv1))
         (f.9
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           rdx
           c.123
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.135
           fv1))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           rbp))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           fv0
           rbp))
         (r8 (r15 rdi rsi rdx rcx cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp))
         (rdx (f.9 c.123 r15 rdi rsi tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp))
         (rsi (empty?.68 c.123 r15 rdi ra.384 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (tmp.135 (car.63 f.9 map.5 cdr.64 l.10 ra.384 rbp))
         (car.63
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           rbp
           ra.384
           l.10
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135))
         (tmp.385 (rbp ra.384 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (tmp.190 (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp))
         (rax (l.10 car.63 f.9 map.5 cons.76 cdr.64 ra.384 rbp))
         (c.123 (cons.76 car.63 map.5 cdr.64 l.10 f.9 rsi rdx ra.384 rbp))
         (empty?.68 (rsi rbp ra.384 l.10 car.63 f.9 map.5 cons.76 cdr.64))
         (tmp.134 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp))
         (tmp.179 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp))))
       (assignment
        ((ra.384 fv2)
         (l.10 fv3)
         (car.63 fv0)
         (f.9 fv4)
         (map.5 fv5)
         (cons.76 fv6)
         (cdr.64 fv7)
         (tmp.142 r15)
         (c.123 r15)
         (tmp.385 r14)
         (tmp.190 r14)
         (empty?.68 r15)
         (tmp.179 r15)
         (tmp.134 r15)
         (tmp.135 r15))))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (set! rbp (+ rbp 64))
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! rbp (- rbp 64))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.386 rbp)
         (rsi rdx c.122 ra.386 rbp)
         (rdx c.122 n.7 ra.386 rbp)
         (c.122 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (c.122 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((rax zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((n.7 eq?.77 rdx rbp)
           (eq?.77 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.192 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((ra.386 rax rbp) (rax rbp))
          ((|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           (|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           ((rax cons.76 l.8 zeros.4 ra.386 rbp)
            ((n.7 |-.54| rdx rbp)
             (|-.54| rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           ((rax tmp.193 zeros.4 ra.386 rbp)
            ((cons.76 rdx rbp)
             (cons.76 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.194 tmp.193 zeros.4 ra.386 rbp)
           (tmp.193 zeros.4 ra.386 rdx rbp)
           (zeros.4 ra.386 rsi rdx rbp)
           (ra.386 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((tmp.131 (|-.54| n.7 cons.76 l.8 ra.386 rbp))
         (rbp
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           ra.386
           tmp.194
           tmp.133
           tmp.193
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           tmp.131))
         (ra.386
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           rbp
           rdi
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (l.8
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           c.122
           n.7
           ra.386
           rbp
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (cons.76
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           rbp
           ra.386
           l.8
           n.7
           c.122
           rsi
           rdx
           tmp.193
           rax
           tmp.132
           tmp.131))
         (n.7
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           c.122
           ra.386
           rbp
           rdx
           tmp.132
           tmp.131))
         (|-.54|
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           rbp
           ra.386
           l.8
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.131))
         (tmp.132 (n.7 cons.76 l.8 zeros.4 ra.386 rbp))
         (zeros.4
          (tmp.192
           tmp.130
           eq?.77
           rbp
           ra.386
           l.8
           |-.54|
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132))
         (rax (|-.54| n.7 tmp.193 rbp ra.386 zeros.4 l.8 cons.76))
         (rdx
          (eq?.77
           c.122
           tmp.193
           zeros.4
           ra.386
           cons.76
           r15
           rdi
           rsi
           n.7
           |-.54|
           rbp))
         (rsi (eq?.77 c.122 zeros.4 ra.386 cons.76 r15 rdi |-.54| rdx rbp))
         (rdi (ra.386 r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.193 (rdx tmp.194 rax tmp.133 cons.76 l.8 zeros.4 ra.386 rbp))
         (tmp.133 (l.8 tmp.193 zeros.4 ra.386 rbp))
         (tmp.194 (tmp.193 zeros.4 ra.386 rbp))
         (c.122 (zeros.4 |-.54| cons.76 l.8 n.7 rsi rdx ra.386 rbp))
         (eq?.77 (rsi rdx rbp ra.386 l.8 |-.54| n.7 cons.76 zeros.4))
         (tmp.130 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp))
         (tmp.192 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp))))
       (assignment
        ((ra.386 fv0)
         (l.8 fv1)
         (|-.54| fv2)
         (n.7 fv3)
         (cons.76 fv4)
         (zeros.4 fv5)
         (tmp.193 fv2)
         (c.122 r15)
         (eq?.77 r15)
         (tmp.192 r15)
         (tmp.130 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.133 r15)
         (tmp.194 r15))))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (set! rbp (+ rbp 48))
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 48))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (set! rbp (+ rbp 48))
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 48))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (set! rbp (+ rbp 48))
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 48))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.387 rbp)
         (rsi rdx ra.387 rbp)
         (rdx tmp.14 ra.387 rbp)
         (tmp.15 tmp.14 ra.387 rbp)
         (tmp.388 tmp.15 tmp.14 ra.387 rbp)
         (tmp.201 tmp.15 tmp.14 ra.387 rbp)
         ((tmp.15 tmp.14 ra.387 rbp)
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.14 ra.387 rbp))
         (rbp (tmp.201 tmp.388 tmp.15 tmp.14 c.121 ra.387 r15 rdi rsi rdx))
         (ra.387 (tmp.201 tmp.388 tmp.15 tmp.14 c.121 rbp rdi rsi rdx))
         (tmp.14 (tmp.201 tmp.388 tmp.15 ra.387 rbp rdx))
         (rsi (c.121 r15 rdi ra.387 rdx rbp))
         (rdi (r15 ra.387 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.387 rbp))
         (tmp.15 (tmp.201 tmp.388 tmp.14 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.14 tmp.15))
         (tmp.201 (tmp.15 tmp.14 ra.387 rbp))))
       (assignment
        ((ra.387 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.201 r9)
         (c.121 r14)
         (tmp.388 r9))))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.389 rbp)
         (rsi rdx ra.389 rbp)
         (rdx tmp.16 ra.389 rbp)
         (tmp.17 tmp.16 ra.389 rbp)
         (tmp.390 tmp.17 tmp.16 ra.389 rbp)
         (tmp.207 tmp.17 tmp.16 ra.389 rbp)
         ((tmp.17 tmp.16 ra.389 rbp)
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.16 ra.389 rbp))
         (rbp (tmp.207 tmp.390 tmp.17 tmp.16 c.120 ra.389 r15 rdi rsi rdx))
         (ra.389 (tmp.207 tmp.390 tmp.17 tmp.16 c.120 rbp rdi rsi rdx))
         (tmp.16 (tmp.207 tmp.390 tmp.17 ra.389 rbp rdx))
         (rsi (c.120 r15 rdi ra.389 rdx rbp))
         (rdi (r15 ra.389 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.389 rbp))
         (tmp.17 (tmp.207 tmp.390 tmp.16 ra.389 rbp))
         (tmp.390 (rbp ra.389 tmp.16 tmp.17))
         (tmp.207 (tmp.17 tmp.16 ra.389 rbp))))
       (assignment
        ((ra.389 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.207 r9)
         (c.120 r14)
         (tmp.390 r9))))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.391 rbp)
         (rsi rdx ra.391 rbp)
         (rdx tmp.18 ra.391 rbp)
         (tmp.19 tmp.18 ra.391 rbp)
         (tmp.392 tmp.19 tmp.18 ra.391 rbp)
         (tmp.213 tmp.19 tmp.18 ra.391 rbp)
         ((tmp.19 tmp.18 ra.391 rbp)
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.18 ra.391 rbp))
         (rbp (tmp.213 tmp.392 tmp.19 tmp.18 c.119 ra.391 r15 rdi rsi rdx))
         (ra.391 (tmp.213 tmp.392 tmp.19 tmp.18 c.119 rbp rdi rsi rdx))
         (tmp.18 (tmp.213 tmp.392 tmp.19 ra.391 rbp rdx))
         (rsi (c.119 r15 rdi ra.391 rdx rbp))
         (rdi (r15 ra.391 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.391 rbp))
         (tmp.19 (tmp.213 tmp.392 tmp.18 ra.391 rbp))
         (tmp.392 (rbp ra.391 tmp.18 tmp.19))
         (tmp.213 (tmp.19 tmp.18 ra.391 rbp))))
       (assignment
        ((ra.391 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.213 r9)
         (c.119 r14)
         (tmp.392 r9))))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.393 rbp)
         (rsi rdx ra.393 rbp)
         (rdx tmp.20 ra.393 rbp)
         (tmp.21 tmp.20 ra.393 rbp)
         (tmp.394 tmp.21 tmp.20 ra.393 rbp)
         (tmp.220 tmp.21 tmp.20 ra.393 rbp)
         ((tmp.21 tmp.20 ra.393 rbp)
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.20 ra.393 rbp))
         (rbp (tmp.220 tmp.394 tmp.21 tmp.20 c.118 ra.393 r15 rdi rsi rdx))
         (ra.393 (tmp.220 tmp.394 tmp.21 tmp.20 c.118 rbp rdi rsi rdx))
         (tmp.20 (tmp.220 tmp.394 tmp.21 ra.393 rbp rdx))
         (rsi (c.118 r15 rdi ra.393 rdx rbp))
         (rdi (r15 ra.393 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.393 rbp))
         (tmp.21 (tmp.220 tmp.394 tmp.20 ra.393 rbp))
         (tmp.394 (rbp ra.393 tmp.20 tmp.21))
         (tmp.220 (tmp.21 tmp.20 ra.393 rbp))))
       (assignment
        ((ra.393 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.220 r9)
         (c.118 r14)
         (tmp.394 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx ra.395 rbp)
         (rdx tmp.22 ra.395 rbp)
         (tmp.23 tmp.22 ra.395 rbp)
         (tmp.396 tmp.23 tmp.22 ra.395 rbp)
         (tmp.227 tmp.23 tmp.22 ra.395 rbp)
         ((tmp.23 tmp.22 ra.395 rbp)
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.22 ra.395 rbp))
         (rbp (tmp.227 tmp.396 tmp.23 tmp.22 c.117 ra.395 r15 rdi rsi rdx))
         (ra.395 (tmp.227 tmp.396 tmp.23 tmp.22 c.117 rbp rdi rsi rdx))
         (tmp.22 (tmp.227 tmp.396 tmp.23 ra.395 rbp rdx))
         (rsi (c.117 r15 rdi ra.395 rdx rbp))
         (rdi (r15 ra.395 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.395 rbp))
         (tmp.23 (tmp.227 tmp.396 tmp.22 ra.395 rbp))
         (tmp.396 (rbp ra.395 tmp.22 tmp.23))
         (tmp.227 (tmp.23 tmp.22 ra.395 rbp))))
       (assignment
        ((ra.395 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.227 r9)
         (c.117 r14)
         (tmp.396 r9))))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.397 rbp)
         (rsi rdx ra.397 rbp)
         (rdx tmp.24 ra.397 rbp)
         (tmp.25 tmp.24 ra.397 rbp)
         (tmp.398 tmp.25 tmp.24 ra.397 rbp)
         (tmp.234 tmp.25 tmp.24 ra.397 rbp)
         ((tmp.25 tmp.24 ra.397 rbp)
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.24 ra.397 rbp))
         (rbp (tmp.234 tmp.398 tmp.25 tmp.24 c.116 ra.397 r15 rdi rsi rdx))
         (ra.397 (tmp.234 tmp.398 tmp.25 tmp.24 c.116 rbp rdi rsi rdx))
         (tmp.24 (tmp.234 tmp.398 tmp.25 ra.397 rbp rdx))
         (rsi (c.116 r15 rdi ra.397 rdx rbp))
         (rdi (r15 ra.397 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.397 rbp))
         (tmp.25 (tmp.234 tmp.398 tmp.24 ra.397 rbp))
         (tmp.398 (rbp ra.397 tmp.24 tmp.25))
         (tmp.234 (tmp.25 tmp.24 ra.397 rbp))))
       (assignment
        ((ra.397 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.234 r9)
         (c.116 r14)
         (tmp.398 r9))))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.399 rbp)
         (rsi rdx ra.399 rbp)
         (rdx tmp.26 ra.399 rbp)
         (tmp.27 tmp.26 ra.399 rbp)
         (tmp.400 tmp.27 tmp.26 ra.399 rbp)
         (tmp.241 tmp.27 tmp.26 ra.399 rbp)
         ((tmp.27 tmp.26 ra.399 rbp)
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.26 ra.399 rbp))
         (rbp (tmp.241 tmp.400 tmp.27 tmp.26 c.115 ra.399 r15 rdi rsi rdx))
         (ra.399 (tmp.241 tmp.400 tmp.27 tmp.26 c.115 rbp rdi rsi rdx))
         (tmp.26 (tmp.241 tmp.400 tmp.27 ra.399 rbp rdx))
         (rsi (c.115 r15 rdi ra.399 rdx rbp))
         (rdi (r15 ra.399 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.399 rbp))
         (tmp.27 (tmp.241 tmp.400 tmp.26 ra.399 rbp))
         (tmp.400 (rbp ra.399 tmp.26 tmp.27))
         (tmp.241 (tmp.27 tmp.26 ra.399 rbp))))
       (assignment
        ((ra.399 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.241 r9)
         (c.115 r14)
         (tmp.400 r9))))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((locals ())
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi c.114 ra.401 rbp)
         (c.114 tmp.28 ra.401 rbp)
         (tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.402 tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.244 tmp.28 make-init-vector.1 ra.401 rbp)
         ((tmp.28 make-init-vector.1 ra.401 rbp)
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.401 rbp))
         (rbp
          (tmp.244
           tmp.402
           make-init-vector.1
           tmp.28
           c.114
           ra.401
           r15
           rdi
           rsi
           rdx))
         (ra.401
          (tmp.244 tmp.402 make-init-vector.1 tmp.28 c.114 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.244 tmp.402 rbp ra.401 tmp.28 rdx))
         (rsi (c.114 r15 rdi ra.401 rdx rbp))
         (rdi (r15 ra.401 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (tmp.28 rsi ra.401 rbp))
         (tmp.28 (tmp.244 tmp.402 make-init-vector.1 c.114 ra.401 rbp))
         (tmp.402 (rbp ra.401 make-init-vector.1 tmp.28))
         (tmp.244 (tmp.28 make-init-vector.1 ra.401 rbp))))
       (assignment
        ((ra.401 r15)
         (tmp.28 r14)
         (make-init-vector.1 r13)
         (tmp.244 r9)
         (c.114 r13)
         (tmp.402 r9))))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((locals ())
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.29 ra.403 rbp)
         (tmp.404 tmp.29 ra.403 rbp)
         (tmp.247 tmp.29 ra.403 rbp)
         ((tmp.29 ra.403 rbp)
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.113 r15 rdi ra.403 rbp))
         (rbp (tmp.247 tmp.404 tmp.29 c.113 ra.403 r15 rdi rsi))
         (ra.403 (tmp.247 tmp.404 tmp.29 c.113 rbp rdi rsi))
         (rdi (r15 ra.403 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.403 rbp))
         (tmp.29 (tmp.247 tmp.404 ra.403 rbp))
         (tmp.404 (rbp ra.403 tmp.29))
         (tmp.247 (tmp.29 ra.403 rbp))))
       (assignment
        ((ra.403 r15) (tmp.29 r14) (tmp.247 r13) (c.113 r14) (tmp.404 r13))))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.405 rbp)
         (rsi rdx rcx c.112 ra.405 rbp)
         (rdx rcx c.112 tmp.30 ra.405 rbp)
         (rcx c.112 tmp.31 tmp.30 ra.405 rbp)
         (c.112 tmp.31 tmp.32 tmp.30 ra.405 rbp)
         (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.406 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.253 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         ((tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp))
         (rbp
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           ra.405
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.405
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.30
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           c.112
           ra.405
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.253 tmp.406 rbp ra.405 tmp.30 tmp.32 tmp.31 rcx r8))
         (tmp.32
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           c.112
           tmp.31
           tmp.30
           ra.405
           rbp
           r8))
         (rcx
          (tmp.31
           c.112
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.30
           ra.405
           r8
           rbp))
         (rdx (c.112 r15 rdi rsi tmp.30 ra.405 rcx r8 rbp))
         (rsi (c.112 r15 rdi ra.405 rdx rcx r8 rbp))
         (rdi (r15 ra.405 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.112 (tmp.32 tmp.31 tmp.30 rsi rdx rcx ra.405 rbp))
         (tmp.31
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           rcx
           c.112
           tmp.30
           ra.405
           rbp))
         (tmp.406 (rbp ra.405 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31))
         (tmp.253 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp))))
       (assignment
        ((ra.405 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.32 r9)
         (unsafe-vector-set!.2 rdi)
         (c.112 r8)
         (tmp.253 r8)
         (tmp.406 r8))))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.407 rbp)
         (rsi rdx c.111 ra.407 rbp)
         (rdx c.111 tmp.33 ra.407 rbp)
         (c.111 tmp.34 tmp.33 ra.407 rbp)
         (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.408 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.259 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         ((tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.33 ra.407 rbp))
         (rbp
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           ra.407
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.407
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.33
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           c.111
           ra.407
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.259 tmp.408 rbp ra.407 tmp.33 tmp.34 rcx))
         (rdx (c.111 r15 rdi rsi tmp.33 ra.407 rcx rbp))
         (rsi (c.111 r15 rdi ra.407 rdx rcx rbp))
         (rdi (r15 ra.407 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.111 (tmp.34 tmp.33 rsi rdx ra.407 rbp))
         (tmp.34 (tmp.259 tmp.408 unsafe-vector-ref.3 c.111 tmp.33 ra.407 rbp))
         (tmp.408 (rbp ra.407 tmp.33 unsafe-vector-ref.3 tmp.34))
         (tmp.259 (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp))))
       (assignment
        ((ra.407 r15)
         (tmp.33 r14)
         (tmp.34 r13)
         (unsafe-vector-ref.3 r9)
         (c.111 r9)
         (tmp.259 r8)
         (tmp.408 r8))))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((locals ())
       (undead-out
        ((rdi rsi ra.409 rbp)
         (rsi ra.409 rbp)
         (tmp.35 ra.409 rbp)
         (tmp.410 tmp.35 ra.409 rbp)
         (tmp.262 tmp.35 ra.409 rbp)
         ((tmp.35 ra.409 rbp)
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.110 r15 rdi ra.409 rbp))
         (rbp (tmp.262 tmp.410 tmp.35 c.110 ra.409 r15 rdi rsi))
         (ra.409 (tmp.262 tmp.410 tmp.35 c.110 rbp rdi rsi))
         (rdi (r15 ra.409 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.110 (rsi ra.409 rbp))
         (tmp.35 (tmp.262 tmp.410 ra.409 rbp))
         (tmp.410 (rbp ra.409 tmp.35))
         (tmp.262 (tmp.35 ra.409 rbp))))
       (assignment
        ((ra.409 r15) (tmp.35 r14) (tmp.262 r13) (c.110 r14) (tmp.410 r13))))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((locals ())
       (undead-out
        ((rdi rsi ra.411 rbp)
         (rsi ra.411 rbp)
         (tmp.36 ra.411 rbp)
         (tmp.412 tmp.36 ra.411 rbp)
         (tmp.265 tmp.36 ra.411 rbp)
         ((tmp.36 ra.411 rbp)
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.109 r15 rdi ra.411 rbp))
         (rbp (tmp.265 tmp.412 tmp.36 c.109 ra.411 r15 rdi rsi))
         (ra.411 (tmp.265 tmp.412 tmp.36 c.109 rbp rdi rsi))
         (rdi (r15 ra.411 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.109 (rsi ra.411 rbp))
         (tmp.36 (tmp.265 tmp.412 ra.411 rbp))
         (tmp.412 (rbp ra.411 tmp.36))
         (tmp.265 (tmp.36 ra.411 rbp))))
       (assignment
        ((ra.411 r15) (tmp.36 r14) (tmp.265 r13) (c.109 r14) (tmp.412 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((locals ())
       (undead-out
        ((rdi rsi ra.413 rbp)
         (rsi ra.413 rbp)
         (tmp.37 ra.413 rbp)
         (tmp.414 tmp.37 ra.413 rbp)
         (tmp.268 tmp.37 ra.413 rbp)
         ((tmp.37 ra.413 rbp)
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.108 r15 rdi ra.413 rbp))
         (rbp (tmp.268 tmp.414 tmp.37 c.108 ra.413 r15 rdi rsi))
         (ra.413 (tmp.268 tmp.414 tmp.37 c.108 rbp rdi rsi))
         (rdi (r15 ra.413 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.413 rbp))
         (tmp.37 (tmp.268 tmp.414 ra.413 rbp))
         (tmp.414 (rbp ra.413 tmp.37))
         (tmp.268 (tmp.37 ra.413 rbp))))
       (assignment
        ((ra.413 r15) (tmp.37 r14) (tmp.268 r13) (c.108 r14) (tmp.414 r13))))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((locals ())
       (undead-out
        ((rdi rsi ra.415 rbp)
         (rsi ra.415 rbp)
         (tmp.38 ra.415 rbp)
         (tmp.416 ra.415 rbp)
         (tmp.270 ra.415 rbp)
         ((ra.415 rbp)
          ((ra.415 rax rbp) (rax rbp))
          ((ra.415 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.415 rbp))
         (rbp (tmp.270 tmp.416 tmp.38 c.107 ra.415 rax))
         (ra.415 (tmp.270 tmp.416 tmp.38 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.415))
         (rdi (ra.415))
         (c.107 (rsi ra.415 rbp))
         (tmp.38 (ra.415 rbp))
         (tmp.416 (rbp ra.415))
         (tmp.270 (ra.415 rbp))))
       (assignment
        ((ra.415 r15) (c.107 r14) (tmp.270 r14) (tmp.38 r14) (tmp.416 r14))))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((locals ())
       (undead-out
        ((rdi rsi ra.417 rbp)
         (rsi ra.417 rbp)
         (tmp.39 ra.417 rbp)
         (tmp.418 ra.417 rbp)
         (tmp.272 ra.417 rbp)
         ((ra.417 rbp)
          ((ra.417 rax rbp) (rax rbp))
          ((ra.417 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.417 rbp))
         (rbp (tmp.272 tmp.418 tmp.39 c.106 ra.417 rax))
         (ra.417 (tmp.272 tmp.418 tmp.39 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.417))
         (rdi (ra.417))
         (c.106 (rsi ra.417 rbp))
         (tmp.39 (ra.417 rbp))
         (tmp.418 (rbp ra.417))
         (tmp.272 (ra.417 rbp))))
       (assignment
        ((ra.417 r15) (c.106 r14) (tmp.272 r14) (tmp.39 r14) (tmp.418 r14))))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((locals ())
       (undead-out
        ((rdi rsi ra.419 rbp)
         (rsi ra.419 rbp)
         (tmp.40 ra.419 rbp)
         (tmp.420 ra.419 rbp)
         (tmp.274 ra.419 rbp)
         ((ra.419 rbp)
          ((ra.419 rax rbp) (rax rbp))
          ((ra.419 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.419 rbp))
         (rbp (tmp.274 tmp.420 tmp.40 c.105 ra.419 rax))
         (ra.419 (tmp.274 tmp.420 tmp.40 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.419))
         (rdi (ra.419))
         (c.105 (rsi ra.419 rbp))
         (tmp.40 (ra.419 rbp))
         (tmp.420 (rbp ra.419))
         (tmp.274 (ra.419 rbp))))
       (assignment
        ((ra.419 r15) (c.105 r14) (tmp.274 r14) (tmp.40 r14) (tmp.420 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((locals ())
       (undead-out
        ((rdi rsi ra.421 rbp)
         (rsi ra.421 rbp)
         (tmp.41 ra.421 rbp)
         (tmp.422 ra.421 rbp)
         (tmp.276 ra.421 rbp)
         ((ra.421 rbp)
          ((ra.421 rax rbp) (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.421 rbp))
         (rbp (tmp.276 tmp.422 tmp.41 c.104 ra.421 rax))
         (ra.421 (tmp.276 tmp.422 tmp.41 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.421))
         (rdi (ra.421))
         (c.104 (rsi ra.421 rbp))
         (tmp.41 (ra.421 rbp))
         (tmp.422 (rbp ra.421))
         (tmp.276 (ra.421 rbp))))
       (assignment
        ((ra.421 r15) (c.104 r14) (tmp.276 r14) (tmp.41 r14) (tmp.422 r14))))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((locals ())
       (undead-out
        ((rdi rsi ra.423 rbp)
         (rsi ra.423 rbp)
         (tmp.42 ra.423 rbp)
         (tmp.424 ra.423 rbp)
         (tmp.278 ra.423 rbp)
         ((ra.423 rbp)
          ((ra.423 rax rbp) (rax rbp))
          ((ra.423 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.423 rbp))
         (rbp (tmp.278 tmp.424 tmp.42 c.103 ra.423 rax))
         (ra.423 (tmp.278 tmp.424 tmp.42 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.423))
         (rdi (ra.423))
         (c.103 (rsi ra.423 rbp))
         (tmp.42 (ra.423 rbp))
         (tmp.424 (rbp ra.423))
         (tmp.278 (ra.423 rbp))))
       (assignment
        ((ra.423 r15) (c.103 r14) (tmp.278 r14) (tmp.42 r14) (tmp.424 r14))))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((locals ())
       (undead-out
        ((rdi rsi ra.425 rbp)
         (rsi ra.425 rbp)
         (tmp.43 ra.425 rbp)
         (tmp.426 ra.425 rbp)
         (tmp.280 ra.425 rbp)
         ((ra.425 rbp)
          ((ra.425 rax rbp) (rax rbp))
          ((ra.425 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.280 tmp.426 tmp.43 c.102 ra.425 rax))
         (ra.425 (tmp.280 tmp.426 tmp.43 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.425))
         (rdi (ra.425))
         (c.102 (rsi ra.425 rbp))
         (tmp.43 (ra.425 rbp))
         (tmp.426 (rbp ra.425))
         (tmp.280 (ra.425 rbp))))
       (assignment
        ((ra.425 r15) (c.102 r14) (tmp.280 r14) (tmp.43 r14) (tmp.426 r14))))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((locals ())
       (undead-out
        ((rdi rsi ra.427 rbp)
         (rsi ra.427 rbp)
         (tmp.44 ra.427 rbp)
         (tmp.428 ra.427 rbp)
         (tmp.282 ra.427 rbp)
         ((ra.427 rbp)
          ((ra.427 rax rbp) (rax rbp))
          ((ra.427 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.427 rbp))
         (rbp (tmp.282 tmp.428 tmp.44 c.101 ra.427 rax))
         (ra.427 (tmp.282 tmp.428 tmp.44 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.427))
         (rdi (ra.427))
         (c.101 (rsi ra.427 rbp))
         (tmp.44 (ra.427 rbp))
         (tmp.428 (rbp ra.427))
         (tmp.282 (ra.427 rbp))))
       (assignment
        ((ra.427 r15) (c.101 r14) (tmp.282 r14) (tmp.44 r14) (tmp.428 r14))))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((locals ())
       (undead-out
        ((rdi rsi ra.429 rbp)
         (rsi ra.429 rbp)
         (tmp.45 ra.429 rbp)
         (tmp.430 ra.429 rbp)
         (tmp.284 ra.429 rbp)
         ((ra.429 rbp)
          ((ra.429 rax rbp) (rax rbp))
          ((ra.429 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.429 rbp))
         (rbp (tmp.284 tmp.430 tmp.45 c.100 ra.429 rax))
         (ra.429 (tmp.284 tmp.430 tmp.45 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.429))
         (rdi (ra.429))
         (c.100 (rsi ra.429 rbp))
         (tmp.45 (ra.429 rbp))
         (tmp.430 (rbp ra.429))
         (tmp.284 (ra.429 rbp))))
       (assignment
        ((ra.429 r15) (c.100 r14) (tmp.284 r14) (tmp.45 r14) (tmp.430 r14))))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((locals ())
       (undead-out
        ((rdi rsi ra.431 rbp)
         (rsi ra.431 rbp)
         (tmp.46 ra.431 rbp)
         (tmp.432 ra.431 rbp)
         (tmp.286 ra.431 rbp)
         ((ra.431 rbp)
          ((ra.431 rax rbp) (rax rbp))
          ((ra.431 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.431 rbp))
         (rbp (tmp.286 tmp.432 tmp.46 c.99 ra.431 rax))
         (ra.431 (tmp.286 tmp.432 tmp.46 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.431))
         (rdi (ra.431))
         (c.99 (rsi ra.431 rbp))
         (tmp.46 (ra.431 rbp))
         (tmp.432 (rbp ra.431))
         (tmp.286 (ra.431 rbp))))
       (assignment
        ((ra.431 r15) (c.99 r14) (tmp.286 r14) (tmp.46 r14) (tmp.432 r14))))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((locals ())
       (undead-out
        ((rdi rsi ra.433 rbp)
         (rsi ra.433 rbp)
         (tmp.47 ra.433 rbp)
         ((ra.433 rbp)
          ((ra.433 rax rbp) (rax rbp))
          ((ra.433 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.433 rbp))
         (rbp (tmp.47 c.98 ra.433 rax))
         (ra.433 (tmp.47 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.433))
         (rdi (ra.433))
         (c.98 (rsi ra.433 rbp))
         (tmp.47 (ra.433 rbp))))
       (assignment ((ra.433 r15) (c.98 r14) (tmp.47 r14))))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((locals ())
       (undead-out
        ((rdi rsi rdx r12 ra.434 rbp)
         (rsi rdx r12 ra.434 rbp)
         (rdx r12 ra.434 rbp tmp.48)
         (r12 tmp.49 ra.434 rbp tmp.48)
         (r12 tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.435 tmp.49 ra.434 rbp tmp.48)
         (tmp.49 ra.434 rbp tmp.48 tmp.143)
         (rbp ra.434 tmp.49 tmp.143)
         (tmp.143 ra.434 rbp)
         (ra.434 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.434
          (rax tmp.143 tmp.435 tmp.288 tmp.49 tmp.48 c.97 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.143 tmp.435 r12 tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (r12 (rbp tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (rdx (tmp.48 c.97 ra.434))
         (rsi (c.97 ra.434))
         (rdi (ra.434))
         (c.97 (rsi rdx r12 ra.434 rbp))
         (tmp.48 (tmp.143 tmp.435 tmp.288 tmp.49 rdx r12 ra.434 rbp))
         (tmp.49 (tmp.143 tmp.435 tmp.288 r12 ra.434 rbp tmp.48))
         (tmp.288 (r12 tmp.49 ra.434 rbp tmp.48))
         (tmp.435 (tmp.48 rbp ra.434 tmp.49))
         (tmp.143 (tmp.49 ra.434 rbp tmp.48))
         (rax (ra.434 rbp))))
       (assignment
        ((ra.434 r15)
         (tmp.48 r14)
         (tmp.49 r13)
         (c.97 r14)
         (tmp.288 r9)
         (tmp.435 r9)
         (tmp.143 r9))))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.436 rbp)
         (rsi rdx ra.436 rbp)
         (rdx tmp.50 ra.436 rbp)
         (tmp.50 tmp.51 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.51 tmp.50 c.96 ra.436 rax))
         (ra.436 (tmp.51 tmp.50 c.96 rdi rsi rdx rbp rax))
         (rdx (tmp.50 c.96 ra.436))
         (rsi (c.96 ra.436))
         (rdi (ra.436))
         (c.96 (rsi rdx ra.436 rbp))
         (tmp.50 (tmp.51 rdx ra.436 rbp))
         (tmp.51 (tmp.50 ra.436 rbp))))
       (assignment ((ra.436 r15) (tmp.50 r14) (c.96 r14) (tmp.51 r13))))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((locals ())
       (undead-out
        ((rdi rsi r12 rbp ra.437)
         (rsi c.95 r12 rbp ra.437)
         (c.95 r12 rbp ra.437 tmp.78)
         (r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.438 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.440 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.291 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.441 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.292 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.442 rbp ra.437 vector-init-loop.80 tmp.78)
         (rbp ra.437 vector-init-loop.80 tmp.78 tmp.144)
         (tmp.144 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.78 vector-init-loop.80 ra.437 rcx rbp)
         (tmp.78 vector-init-loop.80 ra.437 rdx rcx rbp)
         (vector-init-loop.80 ra.437 rsi rdx rcx rbp)
         (ra.437 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (conflicts
        ((ra.437
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           r12
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (r12
          (rbp
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (rsi (r15 rdi vector-init-loop.80 rdx rcx rbp c.95 ra.437))
         (rdi (r15 rsi rdx rcx rbp ra.437))
         (c.95 (tmp.78 rsi r12 rbp ra.437))
         (tmp.78
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           c.95
           r12
           rbp
           ra.437))
         (vector-init-loop.80
          (rsi
           rdx
           rcx
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           tmp.78
           ra.437
           rbp
           r12))
         (tmp.438 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.290 (tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.439 (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.440 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.291 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.441 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.292 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.534 (tmp.293 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.293 (r12 tmp.534 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.442 (tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.144 (rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.79 (tmp.126 tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.126 (tmp.79 tmp.78 ra.437 rbp))
         (rcx (r15 rdi rsi rdx tmp.78 vector-init-loop.80 ra.437 rbp))
         (rdx (r15 rdi rsi tmp.78 vector-init-loop.80 ra.437 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment
        ((ra.437 r15)
         (tmp.78 r14)
         (vector-init-loop.80 r13)
         (tmp.290 r9)
         (tmp.439 r8)
         (tmp.534 r9)
         (tmp.293 r8)
         (c.95 r13)
         (tmp.438 r9)
         (tmp.440 r9)
         (tmp.291 r9)
         (tmp.441 r9)
         (tmp.292 r9)
         (tmp.79 r9)
         (tmp.442 r9)
         (tmp.144 r9)
         (tmp.126 r13))))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.443 rbp)
         (rsi rdx rcx c.94 ra.443 rbp)
         (rdx rcx c.94 len.81 ra.443 rbp)
         (rcx c.94 len.81 i.83 ra.443 rbp)
         (c.94 vec.82 len.81 i.83 ra.443 rbp)
         (vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
         ((vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.80 len.81 i.83 ra.443 rbp))
         (rbp
          (vector-init-loop.80
           vec.82
           i.83
           len.81
           c.94
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.443
          (vector-init-loop.80 vec.82 i.83 len.81 c.94 rbp rdi rsi rdx rcx r8))
         (i.83 (vector-init-loop.80 vec.82 c.94 len.81 ra.443 rbp rdx rcx r8))
         (len.81 (vector-init-loop.80 vec.82 i.83 rdx c.94 ra.443 rbp rcx r8))
         (vector-init-loop.80 (rbp ra.443 i.83 len.81 vec.82 r8))
         (rcx (c.94 r15 rdi rsi rdx len.81 i.83 ra.443 r8 rbp))
         (rdx (len.81 c.94 r15 rdi rsi i.83 ra.443 rcx r8 rbp))
         (rsi (c.94 r15 rdi ra.443 rdx rcx r8 rbp))
         (rdi (r15 ra.443 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.94 (vec.82 i.83 len.81 rsi rdx rcx ra.443 rbp))
         (vec.82 (vector-init-loop.80 c.94 len.81 i.83 ra.443 rbp))))
       (assignment
        ((ra.443 r15)
         (len.81 r14)
         (i.83 r13)
         (c.94 r9)
         (vec.82 r8)
         (vector-init-loop.80 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.444 rbp)
         (rsi rdx rcx ra.444 rbp)
         (rdx rcx tmp.89 ra.444 rbp)
         (rcx tmp.89 tmp.90 ra.444 rbp)
         (tmp.89 tmp.91 tmp.90 ra.444 rbp)
         (tmp.307 tmp.89 tmp.91 tmp.90 ra.444 rbp)
         ((tmp.89 tmp.91 tmp.90 ra.444 rbp)
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (tmp.89 c.93 r15 rdi rsi rdx tmp.91 tmp.90 ra.444 rbp))
         (rbp (tmp.307 tmp.91 tmp.90 tmp.89 c.93 ra.444 r15 rdi rsi rdx rcx))
         (ra.444 (tmp.307 tmp.91 tmp.90 tmp.89 c.93 rbp rdi rsi rdx rcx))
         (tmp.90 (tmp.307 tmp.91 tmp.89 ra.444 rbp rdx rcx))
         (tmp.91 (tmp.307 tmp.89 tmp.90 ra.444 rbp rcx))
         (rdx (tmp.89 c.93 r15 rdi rsi tmp.90 ra.444 rcx rbp))
         (rsi (c.93 r15 rdi ra.444 rdx rcx rbp))
         (rdi (r15 ra.444 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.93 (rsi rdx rcx ra.444 rbp))
         (tmp.89 (tmp.307 tmp.91 tmp.90 rdx rcx ra.444 rbp))
         (tmp.307 (rbp ra.444 tmp.90 tmp.91 tmp.89))))
       (assignment
        ((ra.444 r15)
         (tmp.89 r14)
         (tmp.90 r13)
         (tmp.91 r9)
         (tmp.307 r8)
         (c.93 r14))))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.86 ra.445 rbp)
         (tmp.86 tmp.87 ra.445 rbp)
         (tmp.315 tmp.86 tmp.87 ra.445 rbp)
         ((tmp.86 tmp.87 ra.445 rbp)
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (tmp.86 c.92 r15 rdi rsi tmp.87 ra.445 rbp))
         (rbp (tmp.315 tmp.87 tmp.86 c.92 ra.445 r15 rdi rsi rdx))
         (ra.445 (tmp.315 tmp.87 tmp.86 c.92 rbp rdi rsi rdx))
         (tmp.87 (tmp.315 tmp.86 ra.445 rbp rdx))
         (rsi (c.92 r15 rdi ra.445 rdx rbp))
         (rdi (r15 ra.445 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.92 (rsi rdx ra.445 rbp))
         (tmp.86 (tmp.315 tmp.87 rdx ra.445 rbp))
         (tmp.315 (rbp ra.445 tmp.87 tmp.86))))
       (assignment
        ((ra.445 r15) (tmp.86 r14) (tmp.87 r13) (tmp.315 r9) (c.92 r14))))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.309 ra.446 rbp)
         (rdx tmp.309 tmp.87 ra.446 rbp)
         (tmp.309 tmp.86 tmp.87 ra.446 rbp)
         ((tmp.86 tmp.87 ra.446 rbp)
          ((tmp.86 tmp.87 ra.446 rbp)
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.446 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.446 rbp))
         (rbp (tmp.86 tmp.87 tmp.309 ra.446 r15 rdi rsi rdx rax))
         (ra.446 (tmp.86 tmp.87 tmp.309 rbp rdi rsi rdx rax))
         (rdx (tmp.309 r15 rdi rsi tmp.87 ra.446 rbp))
         (tmp.87 (tmp.86 tmp.309 ra.446 rbp rdx))
         (rsi (tmp.309 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.309 (tmp.86 tmp.87 rsi rdx ra.446 rbp))
         (tmp.86 (tmp.309 tmp.87 ra.446 rbp))))
       (assignment ((ra.446 r15) (tmp.309 r14) (tmp.87 r13) (tmp.86 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.447 rbp)
         (rsi rdx tmp.311 ra.447 rbp)
         (rdx tmp.311 tmp.87 ra.447 rbp)
         (tmp.311 tmp.87 tmp.86 ra.447 rbp)
         ((tmp.87 tmp.86 ra.447 rbp)
          ((tmp.448 tmp.86 ra.447 rbp)
           (tmp.312 tmp.86 ra.447 rbp)
           (tmp.449 tmp.86 ra.447 rbp)
           (tmp.313 tmp.86 ra.447 rbp)
           (tmp.450 tmp.86 ra.447 rbp)
           (tmp.314 tmp.86 ra.447 rbp)
           (ra.447 rax rbp)
           (rax rbp))
          ((ra.447 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.447 rbp))
         (rbp
          (tmp.86
           tmp.87
           tmp.311
           ra.447
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (ra.447
          (tmp.86
           tmp.87
           tmp.311
           rdi
           rsi
           rdx
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (tmp.448 (rbp ra.447 tmp.86))
         (tmp.86
          (tmp.311
           tmp.87
           ra.447
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448))
         (tmp.312 (tmp.86 ra.447 rbp))
         (tmp.449 (rbp ra.447 tmp.86))
         (tmp.313 (tmp.86 ra.447 rbp))
         (tmp.450 (rbp ra.447 tmp.86))
         (tmp.314 (tmp.86 ra.447 rbp))
         (rdx (tmp.87 tmp.311 ra.447))
         (rsi (tmp.311 ra.447))
         (rdi (ra.447))
         (tmp.311 (tmp.86 tmp.87 rsi rdx ra.447 rbp))
         (tmp.87 (tmp.86 rdx tmp.311 ra.447 rbp))))
       (assignment
        ((ra.447 r15)
         (tmp.86 r14)
         (tmp.311 r13)
         (tmp.87 r9)
         (tmp.448 r13)
         (tmp.312 r13)
         (tmp.449 r13)
         (tmp.313 r13)
         (tmp.450 r13)
         (tmp.314 r13))))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.451 rbp)
         (rsi rdx rcx tmp.301 ra.451 rbp)
         (rdx rcx tmp.301 tmp.90 ra.451 rbp)
         (rcx tmp.301 tmp.91 tmp.90 ra.451 rbp)
         (tmp.301 tmp.91 tmp.89 tmp.90 ra.451 rbp)
         ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
          ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.89 tmp.91 tmp.90 tmp.301 ra.451 r15 rdi rsi rdx rcx rax))
         (ra.451 (tmp.89 tmp.91 tmp.90 tmp.301 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.91 tmp.301 r15 rdi rsi rdx tmp.89 tmp.90 ra.451 rbp))
         (tmp.90 (tmp.89 tmp.91 tmp.301 ra.451 rbp rdx rcx))
         (tmp.89 (tmp.301 tmp.91 tmp.90 ra.451 rbp rcx))
         (rdx (tmp.301 r15 rdi rsi tmp.90 ra.451 rcx rbp))
         (rsi (tmp.301 r15 rdi ra.451 rdx rcx rbp))
         (rdi (r15 ra.451 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.301 (tmp.89 tmp.91 tmp.90 rsi rdx rcx ra.451 rbp))
         (tmp.91 (tmp.89 rcx tmp.301 tmp.90 ra.451 rbp))))
       (assignment
        ((ra.451 r15) (tmp.301 r14) (tmp.90 r13) (tmp.91 r9) (tmp.89 r8))))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx rbp ra.452)
         (rsi rdx rcx tmp.303 rbp ra.452)
         (rdx rcx tmp.303 tmp.90 rbp ra.452)
         (rcx tmp.303 tmp.90 rbp ra.452 tmp.89)
         (tmp.303 tmp.90 rbp ra.452 tmp.91 tmp.89)
         ((tmp.90 rbp ra.452 tmp.91 tmp.89)
          ((tmp.453 rbp ra.452 tmp.91 tmp.89)
           (tmp.304 rbp ra.452 tmp.91 tmp.89)
           (tmp.454 rbp ra.452 tmp.91 tmp.89)
           (tmp.305 rbp ra.452 tmp.91 tmp.89)
           (tmp.455 rbp ra.452 tmp.91 tmp.89)
           (rbp ra.452 tmp.91 tmp.306 tmp.89)
           (ra.452 rbp)
           (ra.452 rax rbp)
           (rax rbp))
          ((ra.452 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (ra.452
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (tmp.453 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.91
          (tmp.303
           tmp.90
           rbp
           ra.452
           tmp.89
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.89
          (tmp.91
           rcx
           tmp.303
           tmp.90
           rbp
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.304 (rbp ra.452 tmp.91 tmp.89))
         (tmp.454 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.305 (rbp ra.452 tmp.91 tmp.89))
         (tmp.455 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.306 (rbp ra.452 tmp.91 tmp.89))
         (rcx (tmp.89 tmp.90 tmp.303 ra.452))
         (rdx (tmp.90 tmp.303 ra.452))
         (rsi (tmp.303 ra.452))
         (rdi (ra.452))
         (tmp.303 (tmp.91 tmp.89 tmp.90 rsi rdx rcx rbp ra.452))
         (tmp.90 (tmp.91 tmp.89 rdx rcx tmp.303 rbp ra.452))))
       (assignment
        ((ra.452 r15)
         (tmp.89 r14)
         (tmp.91 r13)
         (tmp.303 r9)
         (tmp.90 r8)
         (tmp.453 r9)
         (tmp.304 r9)
         (tmp.454 r9)
         (tmp.305 r9)
         (tmp.455 r9)
         (tmp.306 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.456 rbp)
         (rsi rdx rcx r8 tmp.295 ra.456 rbp)
         (rdx rcx r8 tmp.295 i.83 ra.456 rbp)
         (rcx r8 tmp.295 i.83 len.81 ra.456 rbp)
         (r8 tmp.295 i.83 len.81 vector-init-loop.80 ra.456 rbp)
         (tmp.295 i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
         ((i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
          ((ra.456 rax rbp) (rax rbp))
          ((tmp.457 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.296 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.458 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.297 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.459 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (rbp ra.456 vector-init-loop.80 len.81 i.83 tmp.298 vec.82)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.460 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (vec.82 tmp.299 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.299 len.81 vector-init-loop.80 ra.456 rcx rbp)
           (len.81 vector-init-loop.80 ra.456 rdx rcx rbp)
           (vector-init-loop.80 ra.456 rsi rdx rcx rbp)
           (ra.456 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((tmp.457 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (rbp
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           ra.456
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (ra.456
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vector-init-loop.80
          (vec.82
           r8
           tmp.295
           i.83
           len.81
           ra.456
           rbp
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (len.81
          (vec.82
           vector-init-loop.80
           r8
           tmp.295
           i.83
           ra.456
           rbp
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (i.83
          (vec.82
           vector-init-loop.80
           len.81
           rdx
           rcx
           r8
           tmp.295
           ra.456
           rbp
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vec.82
          (tmp.295
           i.83
           len.81
           vector-init-loop.80
           ra.456
           rbp
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (tmp.296 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.458 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.297 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.459 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.298 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.125 (i.83 vec.82 len.81 ra.456 rbp))
         (tmp.460 (rbp ra.456 vector-init-loop.80 len.81 vec.82))
         (tmp.299 (rcx vec.82 len.81 vector-init-loop.80 ra.456 rbp))
         (rcx
          (i.83
           tmp.295
           r15
           rdi
           rsi
           rdx
           tmp.299
           len.81
           vector-init-loop.80
           ra.456
           rbp))
         (rdx
          (i.83 tmp.295 r15 rdi rsi len.81 vector-init-loop.80 ra.456 rcx rbp))
         (rsi (tmp.295 r15 rdi vector-init-loop.80 ra.456 rdx rcx rbp))
         (rdi (r15 ra.456 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.456 rbp))
         (r8 (vector-init-loop.80 len.81 i.83 tmp.295 ra.456))
         (tmp.295
          (vec.82 vector-init-loop.80 len.81 i.83 rsi rdx rcx r8 ra.456 rbp))))
       (assignment
        ((ra.456 r15)
         (len.81 r14)
         (vector-init-loop.80 r13)
         (i.83 r9)
         (vec.82 r8)
         (tmp.295 rdi)
         (tmp.299 r9)
         (tmp.298 rdi)
         (tmp.459 rdi)
         (tmp.297 rdi)
         (tmp.458 rdi)
         (tmp.296 rdi)
         (tmp.457 rdi)
         (tmp.460 r9)
         (tmp.125 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((locals ())
       (undead-out
        ((rdi rsi ra.461 rbp)
         (rsi tmp.267 ra.461 rbp)
         (tmp.267 tmp.37 ra.461 rbp)
         ((tmp.37 ra.461 rbp)
          ((ra.461 rax rbp) (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.461 rbp))
         (rbp (tmp.37 tmp.267 ra.461 rax))
         (ra.461 (tmp.37 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.461))
         (rdi (ra.461))
         (tmp.267 (tmp.37 rsi ra.461 rbp))
         (tmp.37 (tmp.267 ra.461 rbp))))
       (assignment ((ra.461 r15) (tmp.267 r14) (tmp.37 r13))))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((locals ())
       (undead-out
        ((rdi rsi ra.462 rbp)
         (rsi tmp.264 ra.462 rbp)
         (tmp.264 tmp.36 ra.462 rbp)
         ((tmp.36 ra.462 rbp)
          ((ra.462 rax rbp) (rax rbp))
          ((ra.462 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.462 rbp))
         (rbp (tmp.36 tmp.264 ra.462 rax))
         (ra.462 (tmp.36 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.462))
         (rdi (ra.462))
         (tmp.264 (tmp.36 rsi ra.462 rbp))
         (tmp.36 (tmp.264 ra.462 rbp))))
       (assignment ((ra.462 r15) (tmp.264 r14) (tmp.36 r13))))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((locals ())
       (undead-out
        ((rdi rsi ra.463 rbp)
         (rsi tmp.261 ra.463 rbp)
         (tmp.261 tmp.35 ra.463 rbp)
         ((tmp.35 ra.463 rbp)
          ((ra.463 rax rbp) (rax rbp))
          ((ra.463 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.463 rbp))
         (rbp (tmp.35 tmp.261 ra.463 rax))
         (ra.463 (tmp.35 tmp.261 rdi rsi rbp rax))
         (rsi (tmp.261 ra.463))
         (rdi (ra.463))
         (tmp.261 (tmp.35 rsi ra.463 rbp))
         (tmp.35 (tmp.261 ra.463 rbp))))
       (assignment ((ra.463 r15) (tmp.261 r14) (tmp.35 r13))))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.464 rbp)
         (rsi rdx rcx tmp.255 ra.464 rbp)
         (rdx rcx tmp.255 tmp.33 ra.464 rbp)
         (rcx tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp)
         (tmp.255 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
         ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
          ((tmp.465 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           (tmp.258 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.464 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.464 rbp))
         (rbp
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           ra.464
           tmp.258
           tmp.465
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.464
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           rbp
           tmp.258
           tmp.465
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.33
           tmp.255
           r15
           rdi
           rsi
           rdx
           tmp.34
           unsafe-vector-ref.3
           ra.464
           rbp))
         (unsafe-vector-ref.3
          (tmp.34 tmp.255 tmp.33 ra.464 rbp tmp.258 tmp.465 rdx rcx))
         (tmp.34
          (tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp tmp.258 tmp.465 rcx))
         (rdx (tmp.33 tmp.255 r15 rdi rsi unsafe-vector-ref.3 ra.464 rcx rbp))
         (rsi (tmp.255 r15 rdi ra.464 rdx rcx rbp))
         (rdi (r15 ra.464 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.465 (rbp ra.464 unsafe-vector-ref.3 tmp.34 tmp.33))
         (tmp.33
          (tmp.34
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.255
           ra.464
           rbp
           tmp.258
           tmp.465))
         (tmp.258 (tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp))
         (tmp.255 (tmp.34 unsafe-vector-ref.3 tmp.33 rsi rdx rcx ra.464 rbp))))
       (assignment
        ((ra.464 r15)
         (tmp.33 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.34 r9)
         (tmp.255 r8)
         (tmp.258 r8)
         (tmp.465 r8))))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.466 rbp)
         (rsi rdx rcx tmp.257 ra.466 rbp)
         (rdx rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp)
         (rcx tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp)
         (tmp.257 tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
         ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
          ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
           (tmp.33 unsafe-vector-ref.3 ra.466 rdx rbp)
           (unsafe-vector-ref.3 ra.466 rsi rdx rbp)
           (ra.466 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.466 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           ra.466
           r15
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (ra.466
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (tmp.127 (tmp.34 tmp.33 ra.466 rbp))
         (tmp.33 (tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp rdx tmp.127))
         (tmp.34 (tmp.33 rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp tmp.127))
         (rdx (tmp.257 r15 rdi rsi tmp.33 unsafe-vector-ref.3 ra.466 rbp))
         (unsafe-vector-ref.3 (tmp.33 tmp.34 rcx tmp.257 ra.466 rbp rsi rdx))
         (rsi (tmp.257 r15 rdi unsafe-vector-ref.3 ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.34 unsafe-vector-ref.3 tmp.257 ra.466))
         (tmp.257 (tmp.33 tmp.34 unsafe-vector-ref.3 rsi rdx rcx ra.466 rbp))))
       (assignment
        ((ra.466 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.257 r13)
         (tmp.34 r9)
         (tmp.33 r8)
         (tmp.127 r14))))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.467 rbp)
         (rsi rdx rcx r8 tmp.249 ra.467 rbp)
         (rdx rcx r8 tmp.249 tmp.30 ra.467 rbp)
         (rcx r8 tmp.249 tmp.30 unsafe-vector-set!.2 ra.467 rbp)
         (r8 tmp.249 tmp.30 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         (tmp.249 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
          ((tmp.468 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           (tmp.252 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.467 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.467 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           ra.467
           tmp.252
           tmp.468
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.467
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           rbp
           tmp.252
           tmp.468
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp))
         (unsafe-vector-set!.2
          (tmp.31 tmp.32 tmp.249 tmp.30 ra.467 rbp tmp.252 tmp.468 rdx rcx r8))
         (tmp.32
          (tmp.31
           tmp.249
           tmp.30
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           rcx
           r8))
         (tmp.31
          (tmp.249
           tmp.30
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           r8))
         (rcx
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-set!.2
           ra.467
           r8
           rbp))
         (rdx
          (tmp.30 tmp.249 r15 rdi rsi unsafe-vector-set!.2 ra.467 rcx r8 rbp))
         (rsi (tmp.249 r15 rdi ra.467 rdx rcx r8 rbp))
         (rdi (r15 ra.467 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.468 (rbp ra.467 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30))
         (tmp.30
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.249
           ra.467
           rbp
           tmp.252
           tmp.468))
         (tmp.252 (tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp))
         (tmp.249
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           rsi
           rdx
           rcx
           r8
           ra.467
           rbp))))
       (assignment
        ((ra.467 r15)
         (tmp.30 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.32 r9)
         (tmp.249 rdi)
         (tmp.31 rsi)
         (tmp.252 r8)
         (tmp.468 r8))))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.469 rbp)
         (rsi rdx rcx r8 tmp.251 ra.469 rbp)
         (rdx rcx r8 tmp.251 unsafe-vector-set!.2 ra.469 rbp)
         (rcx r8 tmp.251 tmp.32 unsafe-vector-set!.2 ra.469 rbp)
         (r8 tmp.251 tmp.32 tmp.31 unsafe-vector-set!.2 ra.469 rbp)
         (tmp.251 tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
         ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
          ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
           (tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp)
           (tmp.30 unsafe-vector-set!.2 ra.469 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.469 rsi rdx rcx rbp)
           (ra.469 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.469 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.469 rbp))
         (rbp
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           ra.469
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (ra.469
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (tmp.128 (tmp.32 tmp.31 tmp.30 ra.469 rbp))
         (tmp.30
          (tmp.251
           tmp.32
           tmp.31
           unsafe-vector-set!.2
           ra.469
           rbp
           rdx
           rcx
           tmp.128))
         (tmp.31
          (tmp.30
           r8
           tmp.251
           tmp.32
           unsafe-vector-set!.2
           ra.469
           rbp
           rcx
           tmp.128))
         (tmp.32
          (tmp.30
           tmp.31
           rcx
           r8
           tmp.251
           unsafe-vector-set!.2
           ra.469
           rbp
           tmp.128))
         (rcx
          (tmp.32
           tmp.251
           r15
           rdi
           rsi
           rdx
           tmp.31
           tmp.30
           unsafe-vector-set!.2
           ra.469
           rbp))
         (unsafe-vector-set!.2
          (tmp.30 tmp.31 tmp.32 r8 tmp.251 ra.469 rbp rsi rdx rcx))
         (rdx (tmp.251 r15 rdi rsi tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp))
         (rsi (tmp.251 r15 rdi unsafe-vector-set!.2 ra.469 rdx rcx rbp))
         (rdi (r15 ra.469 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.251 ra.469))
         (tmp.251
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.469
           rbp))))
       (assignment
        ((ra.469 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.251 r13)
         (tmp.32 r9)
         (tmp.31 rdi)
         (tmp.30 r8)
         (tmp.128 r14))))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((locals ())
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.246 ra.470 rbp)
         (tmp.246 tmp.29 ra.470 rbp)
         ((tmp.29 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.29 tmp.246 ra.470 rax))
         (ra.470 (tmp.29 tmp.246 rdi rsi rbp rax))
         (rsi (tmp.246 ra.470))
         (rdi (ra.470))
         (tmp.246 (tmp.29 rsi ra.470 rbp))
         (tmp.29 (tmp.246 ra.470 rbp))))
       (assignment ((ra.470 r15) (tmp.246 r14) (tmp.29 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.471 rbp)
         (rsi rdx tmp.243 ra.471 rbp)
         (rdx tmp.243 make-init-vector.1 ra.471 rbp)
         (tmp.243 tmp.28 make-init-vector.1 ra.471 rbp)
         ((tmp.28 make-init-vector.1 ra.471 rbp)
          ((tmp.28 make-init-vector.1 ra.471 rbp)
           (make-init-vector.1 ra.471 rsi rbp)
           (ra.471 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.471 rbp))
         (rbp
          (tmp.28 make-init-vector.1 tmp.243 ra.471 r15 rdi rsi tmp.129 rax))
         (ra.471
          (tmp.28 make-init-vector.1 tmp.243 rdx rbp rdi rsi tmp.129 rax))
         (tmp.129 (tmp.28 ra.471 rbp))
         (tmp.28 (tmp.243 make-init-vector.1 ra.471 rbp tmp.129))
         (rsi (tmp.243 r15 rdi make-init-vector.1 ra.471 rbp))
         (make-init-vector.1 (tmp.28 rdx tmp.243 ra.471 rbp rsi))
         (rdi (r15 ra.471 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.243 ra.471))
         (tmp.243 (tmp.28 make-init-vector.1 rsi rdx ra.471 rbp))))
       (assignment
        ((ra.471 r15)
         (make-init-vector.1 r14)
         (tmp.243 r13)
         (tmp.28 r9)
         (tmp.129 r14))))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.472 rbp)
         (rsi rdx tmp.236 ra.472 rbp)
         (rdx tmp.236 tmp.26 ra.472 rbp)
         (tmp.236 tmp.27 tmp.26 ra.472 rbp)
         ((tmp.27 tmp.26 ra.472 rbp)
          ((tmp.473 tmp.27 tmp.26 ra.472 rbp)
           (tmp.240 tmp.27 tmp.26 ra.472 rbp)
           ((tmp.27 tmp.26 ra.472 rbp)
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.472 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.472 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.236 ra.472 tmp.240 tmp.473 r15 rdi rsi rdx rax))
         (ra.472 (tmp.27 tmp.26 tmp.236 rbp tmp.240 tmp.473 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.26 ra.472 rbp))
         (tmp.26 (tmp.27 tmp.236 ra.472 rbp tmp.240 tmp.473 rdx))
         (rsi (tmp.236 r15 rdi ra.472 rdx rbp))
         (rdi (r15 ra.472 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.473 (rbp ra.472 tmp.26 tmp.27))
         (tmp.27 (tmp.236 tmp.26 ra.472 rbp tmp.240 tmp.473))
         (tmp.240 (tmp.27 tmp.26 ra.472 rbp))
         (tmp.236 (tmp.27 tmp.26 rsi rdx ra.472 rbp))))
       (assignment
        ((ra.472 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.473 r9))))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.474 rbp)
         (rsi rdx tmp.238 ra.474 rbp)
         (rdx tmp.238 tmp.26 ra.474 rbp)
         (tmp.238 tmp.26 tmp.27 ra.474 rbp)
         ((tmp.26 tmp.27 ra.474 rbp)
          ((ra.474 rbp)
           ((ra.474 rax rbp) (rax rbp))
           ((ra.474 rax rbp) (rax rbp)))
          ((ra.474 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.474 rbp))
         (rbp (tmp.27 tmp.26 tmp.238 ra.474 rax))
         (ra.474 (tmp.27 tmp.26 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.238 ra.474))
         (rsi (tmp.238 ra.474))
         (rdi (ra.474))
         (tmp.238 (tmp.27 tmp.26 rsi rdx ra.474 rbp))
         (tmp.26 (tmp.27 rdx tmp.238 ra.474 rbp))
         (tmp.27 (tmp.238 tmp.26 ra.474 rbp))))
       (assignment ((ra.474 r15) (tmp.238 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.475 rbp)
         (rsi rdx tmp.229 ra.475 rbp)
         (rdx tmp.229 tmp.24 ra.475 rbp)
         (tmp.229 tmp.25 tmp.24 ra.475 rbp)
         ((tmp.25 tmp.24 ra.475 rbp)
          ((tmp.476 tmp.25 tmp.24 ra.475 rbp)
           (tmp.233 tmp.25 tmp.24 ra.475 rbp)
           ((tmp.25 tmp.24 ra.475 rbp)
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.475 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.229 ra.475 tmp.233 tmp.476 r15 rdi rsi rdx rax))
         (ra.475 (tmp.25 tmp.24 tmp.229 rbp tmp.233 tmp.476 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.24 ra.475 rbp))
         (tmp.24 (tmp.25 tmp.229 ra.475 rbp tmp.233 tmp.476 rdx))
         (rsi (tmp.229 r15 rdi ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.476 (rbp ra.475 tmp.24 tmp.25))
         (tmp.25 (tmp.229 tmp.24 ra.475 rbp tmp.233 tmp.476))
         (tmp.233 (tmp.25 tmp.24 ra.475 rbp))
         (tmp.229 (tmp.25 tmp.24 rsi rdx ra.475 rbp))))
       (assignment
        ((ra.475 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.476 r9))))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.477 rbp)
         (rsi rdx tmp.231 ra.477 rbp)
         (rdx tmp.231 tmp.24 ra.477 rbp)
         (tmp.231 tmp.24 tmp.25 ra.477 rbp)
         ((tmp.24 tmp.25 ra.477 rbp)
          ((ra.477 rbp)
           ((ra.477 rax rbp) (rax rbp))
           ((ra.477 rax rbp) (rax rbp)))
          ((ra.477 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.477 rbp))
         (rbp (tmp.25 tmp.24 tmp.231 ra.477 rax))
         (ra.477 (tmp.25 tmp.24 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.231 ra.477))
         (rsi (tmp.231 ra.477))
         (rdi (ra.477))
         (tmp.231 (tmp.25 tmp.24 rsi rdx ra.477 rbp))
         (tmp.24 (tmp.25 rdx tmp.231 ra.477 rbp))
         (tmp.25 (tmp.231 tmp.24 ra.477 rbp))))
       (assignment ((ra.477 r15) (tmp.231 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.478 rbp)
         (rsi rdx tmp.222 ra.478 rbp)
         (rdx tmp.222 tmp.22 ra.478 rbp)
         (tmp.222 tmp.23 tmp.22 ra.478 rbp)
         ((tmp.23 tmp.22 ra.478 rbp)
          ((tmp.479 tmp.23 tmp.22 ra.478 rbp)
           (tmp.226 tmp.23 tmp.22 ra.478 rbp)
           ((tmp.23 tmp.22 ra.478 rbp)
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.478 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.222 ra.478 tmp.226 tmp.479 r15 rdi rsi rdx rax))
         (ra.478 (tmp.23 tmp.22 tmp.222 rbp tmp.226 tmp.479 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.22 ra.478 rbp))
         (tmp.22 (tmp.23 tmp.222 ra.478 rbp tmp.226 tmp.479 rdx))
         (rsi (tmp.222 r15 rdi ra.478 rdx rbp))
         (rdi (r15 ra.478 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.479 (rbp ra.478 tmp.22 tmp.23))
         (tmp.23 (tmp.222 tmp.22 ra.478 rbp tmp.226 tmp.479))
         (tmp.226 (tmp.23 tmp.22 ra.478 rbp))
         (tmp.222 (tmp.23 tmp.22 rsi rdx ra.478 rbp))))
       (assignment
        ((ra.478 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.479 r9))))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.224 ra.480 rbp)
         (rdx tmp.224 tmp.22 ra.480 rbp)
         (tmp.224 tmp.22 tmp.23 ra.480 rbp)
         ((tmp.22 tmp.23 ra.480 rbp)
          ((ra.480 rbp)
           ((ra.480 rax rbp) (rax rbp))
           ((ra.480 rax rbp) (rax rbp)))
          ((ra.480 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.480 rbp))
         (rbp (tmp.23 tmp.22 tmp.224 ra.480 rax))
         (ra.480 (tmp.23 tmp.22 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.224 ra.480))
         (rsi (tmp.224 ra.480))
         (rdi (ra.480))
         (tmp.224 (tmp.23 tmp.22 rsi rdx ra.480 rbp))
         (tmp.22 (tmp.23 rdx tmp.224 ra.480 rbp))
         (tmp.23 (tmp.224 tmp.22 ra.480 rbp))))
       (assignment ((ra.480 r15) (tmp.224 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.215 ra.481 rbp)
         (rdx tmp.215 tmp.20 ra.481 rbp)
         (tmp.215 tmp.21 tmp.20 ra.481 rbp)
         ((tmp.21 tmp.20 ra.481 rbp)
          ((tmp.482 tmp.21 tmp.20 ra.481 rbp)
           (tmp.219 tmp.21 tmp.20 ra.481 rbp)
           ((tmp.21 tmp.20 ra.481 rbp)
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.215 ra.481 tmp.219 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.21 tmp.20 tmp.215 rbp tmp.219 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.215 r15 rdi rsi tmp.20 ra.481 rbp))
         (tmp.20 (tmp.21 tmp.215 ra.481 rbp tmp.219 tmp.482 rdx))
         (rsi (tmp.215 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.20 tmp.21))
         (tmp.21 (tmp.215 tmp.20 ra.481 rbp tmp.219 tmp.482))
         (tmp.219 (tmp.21 tmp.20 ra.481 rbp))
         (tmp.215 (tmp.21 tmp.20 rsi rdx ra.481 rbp))))
       (assignment
        ((ra.481 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.215 r9)
         (tmp.219 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.217 ra.483 rbp)
         (rdx tmp.217 tmp.20 ra.483 rbp)
         (tmp.217 tmp.20 tmp.21 ra.483 rbp)
         ((tmp.20 tmp.21 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.21 tmp.20 tmp.217 ra.483 rax))
         (ra.483 (tmp.21 tmp.20 tmp.217 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.217 ra.483))
         (rsi (tmp.217 ra.483))
         (rdi (ra.483))
         (tmp.217 (tmp.21 tmp.20 rsi rdx ra.483 rbp))
         (tmp.20 (tmp.21 rdx tmp.217 ra.483 rbp))
         (tmp.21 (tmp.217 tmp.20 ra.483 rbp))))
       (assignment ((ra.483 r15) (tmp.217 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.209 ra.484 rbp)
         (rdx tmp.209 tmp.18 ra.484 rbp)
         (tmp.209 tmp.19 tmp.18 ra.484 rbp)
         ((tmp.19 tmp.18 ra.484 rbp)
          ((tmp.485 tmp.19 tmp.18 ra.484 rbp)
           (tmp.212 tmp.19 tmp.18 ra.484 rbp)
           ((tmp.19 tmp.18 ra.484 rbp)
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.209 ra.484 tmp.212 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.19 tmp.18 tmp.209 rbp tmp.212 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.209 r15 rdi rsi tmp.18 ra.484 rbp))
         (tmp.18 (tmp.19 tmp.209 ra.484 rbp tmp.212 tmp.485 rdx))
         (rsi (tmp.209 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.18 tmp.19))
         (tmp.19 (tmp.209 tmp.18 ra.484 rbp tmp.212 tmp.485))
         (tmp.212 (tmp.19 tmp.18 ra.484 rbp))
         (tmp.209 (tmp.19 tmp.18 rsi rdx ra.484 rbp))))
       (assignment
        ((ra.484 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.209 r9)
         (tmp.212 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.211 ra.486 rbp)
         (rdx tmp.211 tmp.18 ra.486 rbp)
         (tmp.211 tmp.19 tmp.18 ra.486 rbp)
         ((tmp.19 tmp.18 ra.486 rbp)
          ((tmp.487 ra.486 rbp) (ra.486 rax rbp) (rax rbp))
          ((ra.486 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.19 tmp.18 tmp.211 ra.486 tmp.487 rax))
         (ra.486 (tmp.19 tmp.18 tmp.211 rdi rsi rdx rbp tmp.487 rax))
         (tmp.487 (rbp ra.486))
         (rdx (tmp.18 tmp.211 ra.486))
         (rsi (tmp.211 ra.486))
         (rdi (ra.486))
         (tmp.211 (tmp.19 tmp.18 rsi rdx ra.486 rbp))
         (tmp.18 (tmp.19 rdx tmp.211 ra.486 rbp))
         (tmp.19 (tmp.211 tmp.18 ra.486 rbp))))
       (assignment
        ((ra.486 r15) (tmp.211 r14) (tmp.18 r13) (tmp.19 r9) (tmp.487 r14))))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.488 rbp)
         (rsi rdx tmp.203 ra.488 rbp)
         (rdx tmp.203 tmp.16 ra.488 rbp)
         (tmp.203 tmp.17 tmp.16 ra.488 rbp)
         ((tmp.17 tmp.16 ra.488 rbp)
          ((tmp.489 tmp.17 tmp.16 ra.488 rbp)
           (tmp.206 tmp.17 tmp.16 ra.488 rbp)
           ((tmp.17 tmp.16 ra.488 rbp)
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.488 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.488 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.203 ra.488 tmp.206 tmp.489 r15 rdi rsi rdx rax))
         (ra.488 (tmp.17 tmp.16 tmp.203 rbp tmp.206 tmp.489 rdi rsi rdx rax))
         (rdx (tmp.203 r15 rdi rsi tmp.16 ra.488 rbp))
         (tmp.16 (tmp.17 tmp.203 ra.488 rbp tmp.206 tmp.489 rdx))
         (rsi (tmp.203 r15 rdi ra.488 rdx rbp))
         (rdi (r15 ra.488 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.489 (rbp ra.488 tmp.16 tmp.17))
         (tmp.17 (tmp.203 tmp.16 ra.488 rbp tmp.206 tmp.489))
         (tmp.206 (tmp.17 tmp.16 ra.488 rbp))
         (tmp.203 (tmp.17 tmp.16 rsi rdx ra.488 rbp))))
       (assignment
        ((ra.488 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.203 r9)
         (tmp.206 r9)
         (tmp.489 r9))))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.205 ra.490 rbp)
         (rdx tmp.205 tmp.16 ra.490 rbp)
         (tmp.205 tmp.17 tmp.16 ra.490 rbp)
         ((tmp.17 tmp.16 ra.490 rbp)
          ((tmp.491 ra.490 rbp) (ra.490 rax rbp) (rax rbp))
          ((ra.490 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.490 rbp))
         (rbp (tmp.17 tmp.16 tmp.205 ra.490 tmp.491 rax))
         (ra.490 (tmp.17 tmp.16 tmp.205 rdi rsi rdx rbp tmp.491 rax))
         (tmp.491 (rbp ra.490))
         (rdx (tmp.16 tmp.205 ra.490))
         (rsi (tmp.205 ra.490))
         (rdi (ra.490))
         (tmp.205 (tmp.17 tmp.16 rsi rdx ra.490 rbp))
         (tmp.16 (tmp.17 rdx tmp.205 ra.490 rbp))
         (tmp.17 (tmp.205 tmp.16 ra.490 rbp))))
       (assignment
        ((ra.490 r15) (tmp.205 r14) (tmp.16 r13) (tmp.17 r9) (tmp.491 r14))))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.196 ra.492 rbp)
         (rdx tmp.196 tmp.14 ra.492 rbp)
         (tmp.196 tmp.14 tmp.15 ra.492 rbp)
         ((tmp.14 tmp.15 ra.492 rbp)
          ((tmp.493 tmp.14 tmp.15 ra.492 rbp)
           (tmp.200 tmp.14 tmp.15 ra.492 rbp)
           ((tmp.14 tmp.15 ra.492 rbp)
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.492 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.492 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.196 ra.492 tmp.200 tmp.493 r15 rdi rsi rdx rax))
         (ra.492 (tmp.15 tmp.14 tmp.196 rbp tmp.200 tmp.493 rdi rsi rdx rax))
         (rdx (tmp.14 tmp.196 r15 rdi rsi tmp.15 ra.492 rbp))
         (tmp.15 (tmp.196 tmp.14 ra.492 rbp tmp.200 tmp.493 rdx))
         (rsi (tmp.196 r15 rdi ra.492 rdx rbp))
         (rdi (r15 ra.492 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.493 (rbp ra.492 tmp.15 tmp.14))
         (tmp.14 (tmp.15 rdx tmp.196 ra.492 rbp tmp.200 tmp.493))
         (tmp.200 (tmp.14 tmp.15 ra.492 rbp))
         (tmp.196 (tmp.15 tmp.14 rsi rdx ra.492 rbp))))
       (assignment
        ((ra.492 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.196 r9)
         (tmp.200 r9)
         (tmp.493 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.494 rbp)
         (rsi rdx tmp.198 ra.494 rbp)
         (rdx tmp.198 tmp.15 ra.494 rbp)
         (tmp.198 tmp.15 tmp.14 ra.494 rbp)
         ((tmp.15 tmp.14 ra.494 rbp)
          ((tmp.495 tmp.14 ra.494 rbp)
           (tmp.199 tmp.14 ra.494 rbp)
           (tmp.496 ra.494 rbp)
           (ra.494 rax rbp)
           (rax rbp))
          ((ra.494 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.494 rbp))
         (rbp (tmp.14 tmp.15 tmp.198 ra.494 tmp.496 tmp.199 tmp.495 rax))
         (ra.494
          (tmp.14 tmp.15 tmp.198 rdi rsi rdx rbp tmp.496 tmp.199 tmp.495 rax))
         (tmp.495 (rbp ra.494 tmp.14))
         (tmp.14 (tmp.198 tmp.15 ra.494 rbp tmp.199 tmp.495))
         (tmp.199 (tmp.14 ra.494 rbp))
         (tmp.496 (rbp ra.494))
         (rdx (tmp.15 tmp.198 ra.494))
         (rsi (tmp.198 ra.494))
         (rdi (ra.494))
         (tmp.198 (tmp.14 tmp.15 rsi rdx ra.494 rbp))
         (tmp.15 (tmp.14 rdx tmp.198 ra.494 rbp))))
       (assignment
        ((ra.494 r15)
         (tmp.14 r14)
         (tmp.198 r13)
         (tmp.15 r9)
         (tmp.495 r13)
         (tmp.199 r13)
         (tmp.496 r14))))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.497 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.183 ra.497 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.183 tmp.142 ra.497 rbp)
         (rcx r8 r9 fv0 fv1 tmp.183 l.10 tmp.142 ra.497 rbp)
         (r8 r9 fv0 fv1 tmp.183 cdr.64 l.10 tmp.142 ra.497 rbp)
         (r9 fv0 fv1 tmp.183 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv0 fv1 tmp.183 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv1 tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (tmp.183 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
          ((tmp.189 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))))
          ((l.10 cons.76 f.9 cdr.64 ra.497 r9 rbp)
           (cons.76 f.9 cdr.64 ra.497 r8 r9 rbp)
           (f.9 cdr.64 ra.497 rcx r8 r9 rbp)
           (cdr.64 ra.497 rdx rcx r8 r9 rbp)
           (ra.497 rsi rdx rcx r8 r9 rbp)
           (ra.497 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (conflicts
        ((r9
          (tmp.183
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.497
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           ra.497
           tmp.189
           fv0
           fv1
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.497
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           rbp
           tmp.189
           fv0
           fv1
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           tmp.183
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           tmp.183
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv1
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           tmp.183
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           tmp.183
           tmp.142
           ra.497
           rbp
           tmp.189
           rcx
           r8
           fv0
           fv1
           r9))
         (r8
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.497
           r9
           rbp))
         (rcx
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.497
           r8
           r9
           rbp))
         (rdx
          (tmp.183 tmp.142 fv1 fv0 r15 rdi rsi cdr.64 ra.497 rcx r8 r9 rbp))
         (rsi (tmp.183 fv1 fv0 r15 rdi ra.497 rdx rcx r8 r9 rbp))
         (rdi (fv1 fv0 r15 ra.497 rsi rdx rcx r8 r9 rbp))
         (r15 (fv1 fv0 rdi rsi rdx rcx r8 r9 rbp))
         (fv1
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.183
           ra.497
           rbp
           tmp.189
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (map.5
          (car.63
           f.9
           tmp.183
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1))
         (fv0
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           fv1
           rbp))
         (tmp.189 (rbp ra.497 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (car.63
          (tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp tmp.189))
         (tmp.183
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.497
           rbp))))
       (assignment
        ((ra.497 r15)
         (cdr.64 r14)
         (tmp.142 r13)
         (tmp.183 rdi)
         (l.10 rsi)
         (f.9 rdx)
         (cons.76 rcx)
         (map.5 r9)
         (car.63 r8)
         (tmp.189 rdi))))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.498 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.185 ra.498 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.185 tmp.142 ra.498 rbp)
         (rcx r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 ra.498 rbp)
         (r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 cdr.64 ra.498 rbp)
         (r9 fv0 fv1 tmp.185 tmp.142 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv0 fv1 tmp.185 tmp.142 map.5 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv1 tmp.185 tmp.142 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         (tmp.185 tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         ((tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
          ((car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           (car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((car.63 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.186 tmp.187 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((f.9 tmp.186 rsi rbp)
             (tmp.186 rdi rsi rbp)
             (tmp.186 rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (map.5 l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 rbp)
           (l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 tmp.188 ra.498 r8 r9 rbp)
           (f.9 cdr.64 tmp.188 ra.498 rcx r8 r9 rbp)
           (cdr.64 tmp.188 ra.498 rdx rcx r8 r9 rbp)
           (tmp.188 ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp))
          ((l.10 cons.76 f.9 cdr.64 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 ra.498 r8 r9 rbp)
           (f.9 cdr.64 ra.498 rcx r8 r9 rbp)
           (cdr.64 ra.498 rdx rcx r8 r9 rbp)
           (ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (conflicts
        ((r9
          (tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           ra.498
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.498
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           fv0
           fv1
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           fv1
           tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           rsi
           tmp.187
           rax
           tmp.136
           tmp.186
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           rcx
           r8
           fv0
           fv1
           tmp.185
           tmp.142
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r9))
         (r8
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.498
           r9
           rbp))
         (rcx
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.498
           r8
           r9
           rbp))
         (rdx
          (tmp.142 tmp.185 tmp.188 r15 rdi rsi cdr.64 ra.498 rcx r8 r9 rbp))
         (rsi
          (tmp.185
           tmp.188
           f.9
           tmp.186
           car.63
           r15
           rdi
           ra.498
           rdx
           rcx
           r8
           r9
           rbp))
         (rdi (tmp.186 r15 ra.498 rsi rdx rcx r8 r9 rbp))
         (r15 (tmp.186 rdi rsi rdx rcx r8 r9 rbp))
         (tmp.186
          (r15
           rdi
           rsi
           tmp.187
           rax
           tmp.136
           rbp
           ra.498
           cdr.64
           f.9
           cons.76
           l.10
           map.5
           car.63))
         (car.63
          (tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp
           rsi
           tmp.186))
         (map.5
          (car.63
           f.9
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186))
         (tmp.136 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (rax (rbp ra.498 cdr.64 f.9 cons.76 l.10 map.5 tmp.186))
         (tmp.187 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (tmp.188 (rsi rdx rcx r8 r9 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (fv1 (f.9 map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (fv0 (map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (tmp.185
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.498
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.185
           ra.498
           rbp))))
       (assignment
        ((ra.498 fv2)
         (cdr.64 fv3)
         (f.9 fv0)
         (cons.76 fv4)
         (l.10 fv5)
         (map.5 fv6)
         (tmp.186 fv1)
         (tmp.185 r15)
         (tmp.142 r14)
         (tmp.188 r15)
         (car.63 r13)
         (tmp.136 r15)
         (tmp.187 r15))))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.187 rax)
            (set! rbp (+ rbp 56))
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 ra.499 rbp)
         (rsi rdx rcx r8 r9 tmp.180 ra.499 rbp)
         (rdx rcx r8 r9 cdr.64 tmp.180 ra.499 rbp)
         (rcx r8 r9 cdr.64 f.9 tmp.180 ra.499 rbp)
         (r8 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp)
         (r9 cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         ((rax map.5 f.9 tmp.180 cons.76 ra.499 rbp)
          ((cdr.64 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (map.5 f.9 tmp.181 tmp.180 cons.76 ra.499 rbp)
         ((rax tmp.180 cons.76 ra.499 rbp)
          ((f.9 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.182 tmp.180 cons.76 ra.499 rbp)
         (tmp.180 cons.76 ra.499 rdx rbp)
         (cons.76 ra.499 rsi rdx rbp)
         (ra.499 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.499
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           rbp))
         (rbp
          (tmp.182
           rdx
           tmp.181
           r15
           rdi
           rsi
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           ra.499))
         (r9 (l.10 cons.76 f.9 cdr.64 tmp.180 ra.499))
         (r8 (cons.76 f.9 cdr.64 tmp.180 ra.499))
         (rcx (f.9 cdr.64 tmp.180 ra.499))
         (rdx (cons.76 r15 rdi rsi f.9 map.5 rbp cdr.64 tmp.180 ra.499))
         (rsi (cons.76 map.5 rdx r15 rdi cdr.64 rbp tmp.180 ra.499))
         (rdi (rdx r15 rsi rbp ra.499))
         (tmp.180
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           rsi
           rdx
           rcx
           r8
           r9
           ra.499
           rbp))
         (cdr.64
          (rsi
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           rdx
           rcx
           r8
           r9
           tmp.180
           ra.499
           rbp))
         (f.9
          (rdx
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           rcx
           r8
           r9
           cdr.64
           tmp.180
           ra.499
           rbp))
         (cons.76
          (rsi
           rdx
           tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           r8
           r9
           cdr.64
           f.9
           tmp.180
           ra.499
           rbp))
         (l.10
          (tmp.138 tmp.137 map.5 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp))
         (map.5
          (rsi
           rdx
           tmp.181
           rax
           tmp.138
           cdr.64
           l.10
           f.9
           tmp.180
           cons.76
           ra.499
           rbp))
         (tmp.137 (cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.138 (l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (rax (rbp ra.499 cons.76 tmp.180 f.9 map.5))
         (r15 (rdx rdi rsi rbp))
         (tmp.181 (map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.182 (tmp.180 cons.76 ra.499 rbp))))
       (assignment
        ((ra.499 fv0)
         (cons.76 fv1)
         (tmp.180 fv2)
         (f.9 fv3)
         (map.5 fv4)
         (cdr.64 r15)
         (l.10 r14)
         (tmp.137 r13)
         (tmp.138 r15)
         (tmp.181 r15)
         (tmp.182 r15))))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (set! rbp (+ rbp 40))
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.181 rax)
        (set! rbp (+ rbp 40))
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )

  (parameterize ([current-pass-list
                  (list
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((new-frames ())
       (locals
        (tmp.316
         tmp.350
         tmp.145
         unsafe-vector-ref.3
         tmp.317
         tmp.351
         tmp.146
         unsafe-vector-set!.2
         tmp.318
         tmp.352
         tmp.147
         vector-init-loop.80
         tmp.319
         tmp.353
         tmp.148
         make-init-vector.1
         tmp.320
         tmp.354
         tmp.149
         eq?.77
         tmp.321
         tmp.355
         tmp.150
         cons.76
         tmp.322
         tmp.356
         tmp.151
         not.75
         tmp.323
         tmp.357
         tmp.152
         vector?.74
         tmp.324
         tmp.358
         tmp.153
         procedure?.73
         tmp.325
         tmp.359
         tmp.154
         pair?.72
         tmp.326
         tmp.360
         tmp.155
         error?.71
         tmp.327
         tmp.361
         tmp.156
         ascii-char?.70
         tmp.328
         tmp.362
         tmp.157
         void?.69
         tmp.329
         tmp.363
         tmp.158
         empty?.68
         tmp.330
         tmp.364
         tmp.159
         boolean?.67
         tmp.331
         tmp.365
         tmp.160
         fixnum?.66
         tmp.332
         tmp.366
         tmp.161
         procedure-arity.65
         tmp.333
         tmp.367
         tmp.162
         cdr.64
         tmp.334
         tmp.368
         tmp.163
         car.63
         tmp.335
         tmp.369
         tmp.164
         vector-ref.62
         tmp.336
         tmp.370
         tmp.165
         vector-set!.61
         tmp.337
         tmp.371
         tmp.166
         vector-length.60
         tmp.338
         tmp.372
         tmp.167
         make-vector.59
         tmp.339
         tmp.373
         tmp.168
         >=.58
         tmp.340
         tmp.374
         tmp.169
         >.57
         tmp.341
         tmp.375
         tmp.170
         <=.56
         tmp.342
         tmp.376
         tmp.171
         <.55
         tmp.343
         tmp.377
         tmp.172
         |-.54|
         tmp.344
         tmp.378
         tmp.173
         |+.53|
         tmp.345
         tmp.379
         tmp.174
         *.52
         tmp.346
         tmp.380
         tmp.175
         zeros.4
         tmp.347
         tmp.381
         tmp.176
         tmp.348
         tmp.382
         tmp.177
         tmp.140
         listofZero.12
         tmp.141
         ones.13))
       (undead-out
        ((r12 rbp ra.349)
         (r12 tmp.316 rbp ra.349)
         (tmp.316 r12 rbp ra.349)
         (tmp.350 r12 rbp ra.349)
         (r12 rbp ra.349 tmp.145)
         (ra.349 rbp r12 tmp.145)
         (tmp.145 r12 rbp ra.349)
         (r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.317 rbp ra.349 unsafe-vector-ref.3)
         (tmp.317 r12 rbp ra.349 unsafe-vector-ref.3)
         (tmp.351 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 rbp ra.349 unsafe-vector-ref.3 tmp.146)
         (unsafe-vector-ref.3 ra.349 rbp r12 tmp.146)
         (tmp.146 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.318 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.318 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.352 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3 tmp.147)
         (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12 tmp.147)
         (tmp.147 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.319
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.319
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.353
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.148)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          r12
          tmp.148)
         (tmp.148
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.320
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.320
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.354
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.149)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.321
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.321
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.355
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.150)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.322
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.322
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.356
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.151)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.357
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.152)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.358
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.153)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.359
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.154)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.360
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.155)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.156)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.157)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.158)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.159)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.160)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.161)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.162)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.163)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.164)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.165)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.337
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.337
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.371
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.166)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.338
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.338
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.372
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.167)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.339
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.339
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.373
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.168)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.374
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.169)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.375
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.170)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.376
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.171)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.377
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.172)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.173)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          |-.54|
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.379
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.174)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          tmp.174)
         (tmp.174
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          vector-init-loop.80
          make-init-vector.1)
         (vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62)
         (make-vector.59
          make-init-vector.1
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59)
         (r12 |-.54| eq?.77 |+.53| ra.349 rbp empty?.68 car.63 cdr.64 cons.76)
         (r12
          tmp.346
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.346
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.380
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          tmp.175)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.175)
         (tmp.175
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          tmp.347
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.347
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.381
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4
          tmp.176)
         (zeros.4
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.176)
         (tmp.176
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (r12
          tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.382
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4
          tmp.177)
         (zeros.4
          cons.76
          map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          tmp.177)
         (tmp.177
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          |-.54|
          zeros.4)
         (eq?.77
          cons.76
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          zeros.4)
         (cons.76
          inc.6
          |+.53|
          zeros.4
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5)
         (car.63 empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (cons.76 inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 car.63 map.5)
         (empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 map.5)
         (rbp ra.349 map.5 zeros.4 |+.53| inc.6)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         ((rax map.5 inc.6 ra.349 rbp)
          ((zeros.4 rdx rbp)
           (zeros.4 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         ((rax ra.349 rbp)
          ((inc.6 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (ones.13 ra.349 rbp)
         (ra.349 rax rbp)
         (rax rbp)))
       (call-undead (map.5 inc.6 ra.349))
       (conflicts
        ((ra.349
          (ones.13
           tmp.141
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           tmp.316
           r12
           rbp))
         (rbp
          (ones.13
           tmp.141
           listofZero.12
           r15
           rdi
           rsi
           rdx
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           r12
           tmp.316
           ra.349))
         (r12
          (tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           rbp
           tmp.316
           ra.349))
         (tmp.316 (r12 rbp ra.349))
         (tmp.350 (ra.349 rbp r12))
         (tmp.145 (r12 rbp ra.349))
         (unsafe-vector-ref.3
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           r12
           rbp
           ra.349))
         (tmp.317 (r12 rbp ra.349 unsafe-vector-ref.3))
         (tmp.351 (unsafe-vector-ref.3 ra.349 rbp r12))
         (tmp.146 (r12 rbp ra.349 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           r12
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.318 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (tmp.352 (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12))
         (tmp.147 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (vector-init-loop.80
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.319
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.353
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.148
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (make-init-vector.1
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.320
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.354
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (eq?.77
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.321
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.355
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cons.76
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.322
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.356
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (not.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.357
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.358
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.359
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (pair?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.360
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (error?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.361
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (ascii-char?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.362
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (void?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.363
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (empty?.68
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.364
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (boolean?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.365
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (fixnum?.66
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.366
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure-arity.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.367
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cdr.64
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.368
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (car.63
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.369
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector-ref.62
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.370
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-set!.61
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.337
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.371
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-length.60
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.338
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.372
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (make-vector.59
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.339
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.373
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>=.58
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.374
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>.57
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.375
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<=.56
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.376
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<.55
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.377
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|-.54|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.378
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           |-.54|
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|+.53|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.379
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1))
         (tmp.174
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (*.52
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.346
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.380
          (cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.175
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (zeros.4
          (rsi
           rdx
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.347
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.381
          (zeros.4
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.176
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (map.5
          (rsi
           rdx
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.348
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.382
          (zeros.4
           cons.76
           map.5
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|))
         (tmp.177
          (|-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (inc.6
          (rdx
           tmp.141
           listofZero.12
           rax
           tmp.140
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.140 (map.5 inc.6 ra.349 rbp))
         (rax (rbp ra.349 inc.6 map.5))
         (rdx (inc.6 map.5 r15 rdi rsi zeros.4 rbp))
         (rsi (map.5 r15 rdi zeros.4 rdx rbp))
         (rdi (r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (listofZero.12 (tmp.141 map.5 inc.6 ra.349 rbp))
         (tmp.141 (inc.6 listofZero.12 ra.349 rbp))
         (ones.13 (ra.349 rbp))))
       (assignment ((ra.349 fv0) (inc.6 fv1) (map.5 fv2))))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((new-frames ())
       (locals (ra.383 c.124 x.11 |+.53| tmp.139))
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi c.124 ra.383 rbp)
         (c.124 x.11 ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rdx rbp)
         (|+.53| ra.383 rsi rdx rbp)
         (ra.383 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.383 (rdx tmp.139 |+.53| x.11 c.124 rdi rsi rbp))
         (rbp (r15 rdi rsi rdx tmp.139 |+.53| x.11 c.124 ra.383))
         (rsi (r15 rdi |+.53| rdx rbp c.124 ra.383))
         (rdi (r15 rsi rdx rbp ra.383))
         (c.124 (x.11 rsi ra.383 rbp))
         (x.11 (rdx tmp.139 |+.53| c.124 ra.383 rbp))
         (|+.53| (rsi rdx rbp ra.383 x.11))
         (tmp.139 (x.11 ra.383 rbp))
         (rdx (r15 rdi rsi x.11 |+.53| ra.383 rbp))
         (r15 (rdi rsi rdx rbp))))
       (assignment ()))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((new-frames ())
       (locals
        (tmp.385 tmp.135 tmp.190 tmp.142 tmp.179 c.123 empty?.68 tmp.134))
       (undead-out
        ((rdi rsi rdx ra.384 rbp)
         (rsi rdx c.123 ra.384 rbp)
         (rdx c.123 f.9 ra.384 rbp)
         (c.123 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 car.63 l.10 ra.384 rbp)
         (c.123 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((rax cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((empty?.68 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.179 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((ra.384 rax rbp) (rax rbp))
          ((car.63 f.9 map.5 cons.76 cdr.64 l.10 ra.384 rbp)
           (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.385 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.190 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))))))
       (call-undead (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384))
       (conflicts
        ((fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           rbp))
         (rbp
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           ra.384
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (ra.384
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           rbp
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (tmp.142
          (tmp.190
           tmp.385
           car.63
           map.5
           cons.76
           cdr.64
           l.10
           ra.384
           rbp
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (l.10
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           c.123
           f.9
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rcx
           r8
           r9
           fv0
           fv1))
         (cdr.64
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           rbp
           ra.384
           l.10
           f.9
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r8
           r9
           fv0
           fv1))
         (cons.76
          (tmp.179
           rax
           tmp.134
           empty?.68
           rbp
           ra.384
           l.10
           car.63
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           r9
           fv0
           fv1))
         (map.5
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           rbp
           ra.384
           l.10
           f.9
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           fv0
           fv1))
         (f.9
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           rdx
           c.123
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.135
           fv1))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           rbp))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           fv0
           rbp))
         (r8 (r15 rdi rsi rdx rcx cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp))
         (rdx (f.9 c.123 r15 rdi rsi tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp))
         (rsi (empty?.68 c.123 r15 rdi ra.384 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (tmp.135 (car.63 f.9 map.5 cdr.64 l.10 ra.384 rbp))
         (car.63
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           rbp
           ra.384
           l.10
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135))
         (tmp.385 (rbp ra.384 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (tmp.190 (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp))
         (rax (l.10 car.63 f.9 map.5 cons.76 cdr.64 ra.384 rbp))
         (c.123 (cons.76 car.63 map.5 cdr.64 l.10 f.9 rsi rdx ra.384 rbp))
         (empty?.68 (rsi rbp ra.384 l.10 car.63 f.9 map.5 cons.76 cdr.64))
         (tmp.134 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp))
         (tmp.179 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp))))
       (assignment
        ((ra.384 fv2)
         (l.10 fv3)
         (car.63 fv0)
         (f.9 fv4)
         (map.5 fv5)
         (cons.76 fv6)
         (cdr.64 fv7))))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((new-frames ())
       (locals (tmp.194 tmp.133 tmp.132 tmp.131 tmp.192 c.122 eq?.77 tmp.130))
       (undead-out
        ((rdi rsi rdx ra.386 rbp)
         (rsi rdx c.122 ra.386 rbp)
         (rdx c.122 n.7 ra.386 rbp)
         (c.122 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (c.122 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((rax zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((n.7 eq?.77 rdx rbp)
           (eq?.77 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.192 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((ra.386 rax rbp) (rax rbp))
          ((|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           (|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           ((rax cons.76 l.8 zeros.4 ra.386 rbp)
            ((n.7 |-.54| rdx rbp)
             (|-.54| rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           ((rax tmp.193 zeros.4 ra.386 rbp)
            ((cons.76 rdx rbp)
             (cons.76 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.194 tmp.193 zeros.4 ra.386 rbp)
           (tmp.193 zeros.4 ra.386 rdx rbp)
           (zeros.4 ra.386 rsi rdx rbp)
           (ra.386 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead (tmp.193 zeros.4 cons.76 n.7 |-.54| l.8 ra.386))
       (conflicts
        ((tmp.131 (|-.54| n.7 cons.76 l.8 ra.386 rbp))
         (rbp
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           ra.386
           tmp.194
           tmp.133
           tmp.193
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           tmp.131))
         (ra.386
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           rbp
           rdi
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (l.8
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           c.122
           n.7
           ra.386
           rbp
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (cons.76
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           rbp
           ra.386
           l.8
           n.7
           c.122
           rsi
           rdx
           tmp.193
           rax
           tmp.132
           tmp.131))
         (n.7
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           c.122
           ra.386
           rbp
           rdx
           tmp.132
           tmp.131))
         (|-.54|
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           rbp
           ra.386
           l.8
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.131))
         (tmp.132 (n.7 cons.76 l.8 zeros.4 ra.386 rbp))
         (zeros.4
          (tmp.192
           tmp.130
           eq?.77
           rbp
           ra.386
           l.8
           |-.54|
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132))
         (rax (|-.54| n.7 tmp.193 rbp ra.386 zeros.4 l.8 cons.76))
         (rdx
          (eq?.77
           c.122
           tmp.193
           zeros.4
           ra.386
           cons.76
           r15
           rdi
           rsi
           n.7
           |-.54|
           rbp))
         (rsi (eq?.77 c.122 zeros.4 ra.386 cons.76 r15 rdi |-.54| rdx rbp))
         (rdi (ra.386 r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.193 (rdx tmp.194 rax tmp.133 cons.76 l.8 zeros.4 ra.386 rbp))
         (tmp.133 (l.8 tmp.193 zeros.4 ra.386 rbp))
         (tmp.194 (tmp.193 zeros.4 ra.386 rbp))
         (c.122 (zeros.4 |-.54| cons.76 l.8 n.7 rsi rdx ra.386 rbp))
         (eq?.77 (rsi rdx rbp ra.386 l.8 |-.54| n.7 cons.76 zeros.4))
         (tmp.130 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp))
         (tmp.192 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp))))
       (assignment
        ((ra.386 fv0)
         (l.8 fv1)
         (|-.54| fv2)
         (n.7 fv3)
         (cons.76 fv4)
         (zeros.4 fv5)
         (tmp.193 fv2))))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((new-frames ())
       (locals (tmp.15 tmp.14 ra.387 tmp.201 c.121 tmp.388))
       (undead-out
        ((rdi rsi rdx ra.387 rbp)
         (rsi rdx ra.387 rbp)
         (rdx tmp.14 ra.387 rbp)
         (tmp.15 tmp.14 ra.387 rbp)
         (tmp.388 tmp.15 tmp.14 ra.387 rbp)
         (tmp.201 tmp.15 tmp.14 ra.387 rbp)
         ((tmp.15 tmp.14 ra.387 rbp)
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.14 ra.387 rbp))
         (rbp (tmp.201 tmp.388 tmp.15 tmp.14 c.121 ra.387 r15 rdi rsi rdx))
         (ra.387 (tmp.201 tmp.388 tmp.15 tmp.14 c.121 rbp rdi rsi rdx))
         (tmp.14 (tmp.201 tmp.388 tmp.15 ra.387 rbp rdx))
         (rsi (c.121 r15 rdi ra.387 rdx rbp))
         (rdi (r15 ra.387 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.387 rbp))
         (tmp.15 (tmp.201 tmp.388 tmp.14 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.14 tmp.15))
         (tmp.201 (tmp.15 tmp.14 ra.387 rbp))))
       (assignment ()))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((new-frames ())
       (locals (tmp.17 tmp.16 ra.389 tmp.207 c.120 tmp.390))
       (undead-out
        ((rdi rsi rdx ra.389 rbp)
         (rsi rdx ra.389 rbp)
         (rdx tmp.16 ra.389 rbp)
         (tmp.17 tmp.16 ra.389 rbp)
         (tmp.390 tmp.17 tmp.16 ra.389 rbp)
         (tmp.207 tmp.17 tmp.16 ra.389 rbp)
         ((tmp.17 tmp.16 ra.389 rbp)
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.16 ra.389 rbp))
         (rbp (tmp.207 tmp.390 tmp.17 tmp.16 c.120 ra.389 r15 rdi rsi rdx))
         (ra.389 (tmp.207 tmp.390 tmp.17 tmp.16 c.120 rbp rdi rsi rdx))
         (tmp.16 (tmp.207 tmp.390 tmp.17 ra.389 rbp rdx))
         (rsi (c.120 r15 rdi ra.389 rdx rbp))
         (rdi (r15 ra.389 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.389 rbp))
         (tmp.17 (tmp.207 tmp.390 tmp.16 ra.389 rbp))
         (tmp.390 (rbp ra.389 tmp.16 tmp.17))
         (tmp.207 (tmp.17 tmp.16 ra.389 rbp))))
       (assignment ()))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((new-frames ())
       (locals (tmp.19 tmp.18 ra.391 tmp.213 c.119 tmp.392))
       (undead-out
        ((rdi rsi rdx ra.391 rbp)
         (rsi rdx ra.391 rbp)
         (rdx tmp.18 ra.391 rbp)
         (tmp.19 tmp.18 ra.391 rbp)
         (tmp.392 tmp.19 tmp.18 ra.391 rbp)
         (tmp.213 tmp.19 tmp.18 ra.391 rbp)
         ((tmp.19 tmp.18 ra.391 rbp)
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.18 ra.391 rbp))
         (rbp (tmp.213 tmp.392 tmp.19 tmp.18 c.119 ra.391 r15 rdi rsi rdx))
         (ra.391 (tmp.213 tmp.392 tmp.19 tmp.18 c.119 rbp rdi rsi rdx))
         (tmp.18 (tmp.213 tmp.392 tmp.19 ra.391 rbp rdx))
         (rsi (c.119 r15 rdi ra.391 rdx rbp))
         (rdi (r15 ra.391 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.391 rbp))
         (tmp.19 (tmp.213 tmp.392 tmp.18 ra.391 rbp))
         (tmp.392 (rbp ra.391 tmp.18 tmp.19))
         (tmp.213 (tmp.19 tmp.18 ra.391 rbp))))
       (assignment ()))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.393 tmp.220 c.118 tmp.394))
       (undead-out
        ((rdi rsi rdx ra.393 rbp)
         (rsi rdx ra.393 rbp)
         (rdx tmp.20 ra.393 rbp)
         (tmp.21 tmp.20 ra.393 rbp)
         (tmp.394 tmp.21 tmp.20 ra.393 rbp)
         (tmp.220 tmp.21 tmp.20 ra.393 rbp)
         ((tmp.21 tmp.20 ra.393 rbp)
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.20 ra.393 rbp))
         (rbp (tmp.220 tmp.394 tmp.21 tmp.20 c.118 ra.393 r15 rdi rsi rdx))
         (ra.393 (tmp.220 tmp.394 tmp.21 tmp.20 c.118 rbp rdi rsi rdx))
         (tmp.20 (tmp.220 tmp.394 tmp.21 ra.393 rbp rdx))
         (rsi (c.118 r15 rdi ra.393 rdx rbp))
         (rdi (r15 ra.393 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.393 rbp))
         (tmp.21 (tmp.220 tmp.394 tmp.20 ra.393 rbp))
         (tmp.394 (rbp ra.393 tmp.20 tmp.21))
         (tmp.220 (tmp.21 tmp.20 ra.393 rbp))))
       (assignment ()))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.395 tmp.227 c.117 tmp.396))
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx ra.395 rbp)
         (rdx tmp.22 ra.395 rbp)
         (tmp.23 tmp.22 ra.395 rbp)
         (tmp.396 tmp.23 tmp.22 ra.395 rbp)
         (tmp.227 tmp.23 tmp.22 ra.395 rbp)
         ((tmp.23 tmp.22 ra.395 rbp)
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.22 ra.395 rbp))
         (rbp (tmp.227 tmp.396 tmp.23 tmp.22 c.117 ra.395 r15 rdi rsi rdx))
         (ra.395 (tmp.227 tmp.396 tmp.23 tmp.22 c.117 rbp rdi rsi rdx))
         (tmp.22 (tmp.227 tmp.396 tmp.23 ra.395 rbp rdx))
         (rsi (c.117 r15 rdi ra.395 rdx rbp))
         (rdi (r15 ra.395 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.395 rbp))
         (tmp.23 (tmp.227 tmp.396 tmp.22 ra.395 rbp))
         (tmp.396 (rbp ra.395 tmp.22 tmp.23))
         (tmp.227 (tmp.23 tmp.22 ra.395 rbp))))
       (assignment ()))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.397 tmp.234 c.116 tmp.398))
       (undead-out
        ((rdi rsi rdx ra.397 rbp)
         (rsi rdx ra.397 rbp)
         (rdx tmp.24 ra.397 rbp)
         (tmp.25 tmp.24 ra.397 rbp)
         (tmp.398 tmp.25 tmp.24 ra.397 rbp)
         (tmp.234 tmp.25 tmp.24 ra.397 rbp)
         ((tmp.25 tmp.24 ra.397 rbp)
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.24 ra.397 rbp))
         (rbp (tmp.234 tmp.398 tmp.25 tmp.24 c.116 ra.397 r15 rdi rsi rdx))
         (ra.397 (tmp.234 tmp.398 tmp.25 tmp.24 c.116 rbp rdi rsi rdx))
         (tmp.24 (tmp.234 tmp.398 tmp.25 ra.397 rbp rdx))
         (rsi (c.116 r15 rdi ra.397 rdx rbp))
         (rdi (r15 ra.397 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.397 rbp))
         (tmp.25 (tmp.234 tmp.398 tmp.24 ra.397 rbp))
         (tmp.398 (rbp ra.397 tmp.24 tmp.25))
         (tmp.234 (tmp.25 tmp.24 ra.397 rbp))))
       (assignment ()))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((new-frames ())
       (locals (tmp.27 tmp.26 ra.399 tmp.241 c.115 tmp.400))
       (undead-out
        ((rdi rsi rdx ra.399 rbp)
         (rsi rdx ra.399 rbp)
         (rdx tmp.26 ra.399 rbp)
         (tmp.27 tmp.26 ra.399 rbp)
         (tmp.400 tmp.27 tmp.26 ra.399 rbp)
         (tmp.241 tmp.27 tmp.26 ra.399 rbp)
         ((tmp.27 tmp.26 ra.399 rbp)
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.26 ra.399 rbp))
         (rbp (tmp.241 tmp.400 tmp.27 tmp.26 c.115 ra.399 r15 rdi rsi rdx))
         (ra.399 (tmp.241 tmp.400 tmp.27 tmp.26 c.115 rbp rdi rsi rdx))
         (tmp.26 (tmp.241 tmp.400 tmp.27 ra.399 rbp rdx))
         (rsi (c.115 r15 rdi ra.399 rdx rbp))
         (rdi (r15 ra.399 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.399 rbp))
         (tmp.27 (tmp.241 tmp.400 tmp.26 ra.399 rbp))
         (tmp.400 (rbp ra.399 tmp.26 tmp.27))
         (tmp.241 (tmp.27 tmp.26 ra.399 rbp))))
       (assignment ()))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((new-frames ())
       (locals (tmp.28 make-init-vector.1 ra.401 tmp.244 c.114 tmp.402))
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi c.114 ra.401 rbp)
         (c.114 tmp.28 ra.401 rbp)
         (tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.402 tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.244 tmp.28 make-init-vector.1 ra.401 rbp)
         ((tmp.28 make-init-vector.1 ra.401 rbp)
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.401 rbp))
         (rbp
          (tmp.244
           tmp.402
           make-init-vector.1
           tmp.28
           c.114
           ra.401
           r15
           rdi
           rsi
           rdx))
         (ra.401
          (tmp.244 tmp.402 make-init-vector.1 tmp.28 c.114 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.244 tmp.402 rbp ra.401 tmp.28 rdx))
         (rsi (c.114 r15 rdi ra.401 rdx rbp))
         (rdi (r15 ra.401 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (tmp.28 rsi ra.401 rbp))
         (tmp.28 (tmp.244 tmp.402 make-init-vector.1 c.114 ra.401 rbp))
         (tmp.402 (rbp ra.401 make-init-vector.1 tmp.28))
         (tmp.244 (tmp.28 make-init-vector.1 ra.401 rbp))))
       (assignment ()))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((new-frames ())
       (locals (tmp.29 ra.403 tmp.247 c.113 tmp.404))
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.29 ra.403 rbp)
         (tmp.404 tmp.29 ra.403 rbp)
         (tmp.247 tmp.29 ra.403 rbp)
         ((tmp.29 ra.403 rbp)
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.113 r15 rdi ra.403 rbp))
         (rbp (tmp.247 tmp.404 tmp.29 c.113 ra.403 r15 rdi rsi))
         (ra.403 (tmp.247 tmp.404 tmp.29 c.113 rbp rdi rsi))
         (rdi (r15 ra.403 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.403 rbp))
         (tmp.29 (tmp.247 tmp.404 ra.403 rbp))
         (tmp.404 (rbp ra.403 tmp.29))
         (tmp.247 (tmp.29 ra.403 rbp))))
       (assignment ()))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((new-frames ())
       (locals
        (tmp.31
         tmp.32
         unsafe-vector-set!.2
         tmp.30
         ra.405
         tmp.253
         c.112
         tmp.406))
       (undead-out
        ((rdi rsi rdx rcx ra.405 rbp)
         (rsi rdx rcx c.112 ra.405 rbp)
         (rdx rcx c.112 tmp.30 ra.405 rbp)
         (rcx c.112 tmp.31 tmp.30 ra.405 rbp)
         (c.112 tmp.31 tmp.32 tmp.30 ra.405 rbp)
         (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.406 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.253 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         ((tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp))
         (rbp
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           ra.405
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.405
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.30
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           c.112
           ra.405
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.253 tmp.406 rbp ra.405 tmp.30 tmp.32 tmp.31 rcx r8))
         (tmp.32
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           c.112
           tmp.31
           tmp.30
           ra.405
           rbp
           r8))
         (rcx
          (tmp.31
           c.112
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.30
           ra.405
           r8
           rbp))
         (rdx (c.112 r15 rdi rsi tmp.30 ra.405 rcx r8 rbp))
         (rsi (c.112 r15 rdi ra.405 rdx rcx r8 rbp))
         (rdi (r15 ra.405 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.112 (tmp.32 tmp.31 tmp.30 rsi rdx rcx ra.405 rbp))
         (tmp.31
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           rcx
           c.112
           tmp.30
           ra.405
           rbp))
         (tmp.406 (rbp ra.405 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31))
         (tmp.253 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp))))
       (assignment ()))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((new-frames ())
       (locals
        (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 tmp.259 c.111 tmp.408))
       (undead-out
        ((rdi rsi rdx ra.407 rbp)
         (rsi rdx c.111 ra.407 rbp)
         (rdx c.111 tmp.33 ra.407 rbp)
         (c.111 tmp.34 tmp.33 ra.407 rbp)
         (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.408 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.259 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         ((tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.33 ra.407 rbp))
         (rbp
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           ra.407
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.407
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.33
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           c.111
           ra.407
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.259 tmp.408 rbp ra.407 tmp.33 tmp.34 rcx))
         (rdx (c.111 r15 rdi rsi tmp.33 ra.407 rcx rbp))
         (rsi (c.111 r15 rdi ra.407 rdx rcx rbp))
         (rdi (r15 ra.407 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.111 (tmp.34 tmp.33 rsi rdx ra.407 rbp))
         (tmp.34 (tmp.259 tmp.408 unsafe-vector-ref.3 c.111 tmp.33 ra.407 rbp))
         (tmp.408 (rbp ra.407 tmp.33 unsafe-vector-ref.3 tmp.34))
         (tmp.259 (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp))))
       (assignment ()))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((new-frames ())
       (locals (tmp.35 ra.409 tmp.262 c.110 tmp.410))
       (undead-out
        ((rdi rsi ra.409 rbp)
         (rsi ra.409 rbp)
         (tmp.35 ra.409 rbp)
         (tmp.410 tmp.35 ra.409 rbp)
         (tmp.262 tmp.35 ra.409 rbp)
         ((tmp.35 ra.409 rbp)
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.110 r15 rdi ra.409 rbp))
         (rbp (tmp.262 tmp.410 tmp.35 c.110 ra.409 r15 rdi rsi))
         (ra.409 (tmp.262 tmp.410 tmp.35 c.110 rbp rdi rsi))
         (rdi (r15 ra.409 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.110 (rsi ra.409 rbp))
         (tmp.35 (tmp.262 tmp.410 ra.409 rbp))
         (tmp.410 (rbp ra.409 tmp.35))
         (tmp.262 (tmp.35 ra.409 rbp))))
       (assignment ()))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((new-frames ())
       (locals (tmp.36 ra.411 tmp.265 c.109 tmp.412))
       (undead-out
        ((rdi rsi ra.411 rbp)
         (rsi ra.411 rbp)
         (tmp.36 ra.411 rbp)
         (tmp.412 tmp.36 ra.411 rbp)
         (tmp.265 tmp.36 ra.411 rbp)
         ((tmp.36 ra.411 rbp)
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.109 r15 rdi ra.411 rbp))
         (rbp (tmp.265 tmp.412 tmp.36 c.109 ra.411 r15 rdi rsi))
         (ra.411 (tmp.265 tmp.412 tmp.36 c.109 rbp rdi rsi))
         (rdi (r15 ra.411 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.109 (rsi ra.411 rbp))
         (tmp.36 (tmp.265 tmp.412 ra.411 rbp))
         (tmp.412 (rbp ra.411 tmp.36))
         (tmp.265 (tmp.36 ra.411 rbp))))
       (assignment ()))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((new-frames ())
       (locals (tmp.37 ra.413 tmp.268 c.108 tmp.414))
       (undead-out
        ((rdi rsi ra.413 rbp)
         (rsi ra.413 rbp)
         (tmp.37 ra.413 rbp)
         (tmp.414 tmp.37 ra.413 rbp)
         (tmp.268 tmp.37 ra.413 rbp)
         ((tmp.37 ra.413 rbp)
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.108 r15 rdi ra.413 rbp))
         (rbp (tmp.268 tmp.414 tmp.37 c.108 ra.413 r15 rdi rsi))
         (ra.413 (tmp.268 tmp.414 tmp.37 c.108 rbp rdi rsi))
         (rdi (r15 ra.413 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.413 rbp))
         (tmp.37 (tmp.268 tmp.414 ra.413 rbp))
         (tmp.414 (rbp ra.413 tmp.37))
         (tmp.268 (tmp.37 ra.413 rbp))))
       (assignment ()))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((new-frames ())
       (locals (tmp.270 ra.415 c.107 tmp.38 tmp.416))
       (undead-out
        ((rdi rsi ra.415 rbp)
         (rsi ra.415 rbp)
         (tmp.38 ra.415 rbp)
         (tmp.416 ra.415 rbp)
         (tmp.270 ra.415 rbp)
         ((ra.415 rbp)
          ((ra.415 rax rbp) (rax rbp))
          ((ra.415 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.415 rbp))
         (rbp (tmp.270 tmp.416 tmp.38 c.107 ra.415 rax))
         (ra.415 (tmp.270 tmp.416 tmp.38 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.415))
         (rdi (ra.415))
         (c.107 (rsi ra.415 rbp))
         (tmp.38 (ra.415 rbp))
         (tmp.416 (rbp ra.415))
         (tmp.270 (ra.415 rbp))))
       (assignment ()))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((new-frames ())
       (locals (tmp.272 ra.417 c.106 tmp.39 tmp.418))
       (undead-out
        ((rdi rsi ra.417 rbp)
         (rsi ra.417 rbp)
         (tmp.39 ra.417 rbp)
         (tmp.418 ra.417 rbp)
         (tmp.272 ra.417 rbp)
         ((ra.417 rbp)
          ((ra.417 rax rbp) (rax rbp))
          ((ra.417 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.417 rbp))
         (rbp (tmp.272 tmp.418 tmp.39 c.106 ra.417 rax))
         (ra.417 (tmp.272 tmp.418 tmp.39 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.417))
         (rdi (ra.417))
         (c.106 (rsi ra.417 rbp))
         (tmp.39 (ra.417 rbp))
         (tmp.418 (rbp ra.417))
         (tmp.272 (ra.417 rbp))))
       (assignment ()))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((new-frames ())
       (locals (tmp.274 ra.419 c.105 tmp.40 tmp.420))
       (undead-out
        ((rdi rsi ra.419 rbp)
         (rsi ra.419 rbp)
         (tmp.40 ra.419 rbp)
         (tmp.420 ra.419 rbp)
         (tmp.274 ra.419 rbp)
         ((ra.419 rbp)
          ((ra.419 rax rbp) (rax rbp))
          ((ra.419 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.419 rbp))
         (rbp (tmp.274 tmp.420 tmp.40 c.105 ra.419 rax))
         (ra.419 (tmp.274 tmp.420 tmp.40 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.419))
         (rdi (ra.419))
         (c.105 (rsi ra.419 rbp))
         (tmp.40 (ra.419 rbp))
         (tmp.420 (rbp ra.419))
         (tmp.274 (ra.419 rbp))))
       (assignment ()))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((new-frames ())
       (locals (tmp.276 ra.421 c.104 tmp.41 tmp.422))
       (undead-out
        ((rdi rsi ra.421 rbp)
         (rsi ra.421 rbp)
         (tmp.41 ra.421 rbp)
         (tmp.422 ra.421 rbp)
         (tmp.276 ra.421 rbp)
         ((ra.421 rbp)
          ((ra.421 rax rbp) (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.421 rbp))
         (rbp (tmp.276 tmp.422 tmp.41 c.104 ra.421 rax))
         (ra.421 (tmp.276 tmp.422 tmp.41 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.421))
         (rdi (ra.421))
         (c.104 (rsi ra.421 rbp))
         (tmp.41 (ra.421 rbp))
         (tmp.422 (rbp ra.421))
         (tmp.276 (ra.421 rbp))))
       (assignment ()))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((new-frames ())
       (locals (tmp.278 ra.423 c.103 tmp.42 tmp.424))
       (undead-out
        ((rdi rsi ra.423 rbp)
         (rsi ra.423 rbp)
         (tmp.42 ra.423 rbp)
         (tmp.424 ra.423 rbp)
         (tmp.278 ra.423 rbp)
         ((ra.423 rbp)
          ((ra.423 rax rbp) (rax rbp))
          ((ra.423 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.423 rbp))
         (rbp (tmp.278 tmp.424 tmp.42 c.103 ra.423 rax))
         (ra.423 (tmp.278 tmp.424 tmp.42 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.423))
         (rdi (ra.423))
         (c.103 (rsi ra.423 rbp))
         (tmp.42 (ra.423 rbp))
         (tmp.424 (rbp ra.423))
         (tmp.278 (ra.423 rbp))))
       (assignment ()))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((new-frames ())
       (locals (tmp.280 ra.425 c.102 tmp.43 tmp.426))
       (undead-out
        ((rdi rsi ra.425 rbp)
         (rsi ra.425 rbp)
         (tmp.43 ra.425 rbp)
         (tmp.426 ra.425 rbp)
         (tmp.280 ra.425 rbp)
         ((ra.425 rbp)
          ((ra.425 rax rbp) (rax rbp))
          ((ra.425 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.280 tmp.426 tmp.43 c.102 ra.425 rax))
         (ra.425 (tmp.280 tmp.426 tmp.43 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.425))
         (rdi (ra.425))
         (c.102 (rsi ra.425 rbp))
         (tmp.43 (ra.425 rbp))
         (tmp.426 (rbp ra.425))
         (tmp.280 (ra.425 rbp))))
       (assignment ()))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((new-frames ())
       (locals (tmp.282 ra.427 c.101 tmp.44 tmp.428))
       (undead-out
        ((rdi rsi ra.427 rbp)
         (rsi ra.427 rbp)
         (tmp.44 ra.427 rbp)
         (tmp.428 ra.427 rbp)
         (tmp.282 ra.427 rbp)
         ((ra.427 rbp)
          ((ra.427 rax rbp) (rax rbp))
          ((ra.427 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.427 rbp))
         (rbp (tmp.282 tmp.428 tmp.44 c.101 ra.427 rax))
         (ra.427 (tmp.282 tmp.428 tmp.44 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.427))
         (rdi (ra.427))
         (c.101 (rsi ra.427 rbp))
         (tmp.44 (ra.427 rbp))
         (tmp.428 (rbp ra.427))
         (tmp.282 (ra.427 rbp))))
       (assignment ()))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((new-frames ())
       (locals (tmp.284 ra.429 c.100 tmp.45 tmp.430))
       (undead-out
        ((rdi rsi ra.429 rbp)
         (rsi ra.429 rbp)
         (tmp.45 ra.429 rbp)
         (tmp.430 ra.429 rbp)
         (tmp.284 ra.429 rbp)
         ((ra.429 rbp)
          ((ra.429 rax rbp) (rax rbp))
          ((ra.429 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.429 rbp))
         (rbp (tmp.284 tmp.430 tmp.45 c.100 ra.429 rax))
         (ra.429 (tmp.284 tmp.430 tmp.45 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.429))
         (rdi (ra.429))
         (c.100 (rsi ra.429 rbp))
         (tmp.45 (ra.429 rbp))
         (tmp.430 (rbp ra.429))
         (tmp.284 (ra.429 rbp))))
       (assignment ()))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((new-frames ())
       (locals (tmp.286 ra.431 c.99 tmp.46 tmp.432))
       (undead-out
        ((rdi rsi ra.431 rbp)
         (rsi ra.431 rbp)
         (tmp.46 ra.431 rbp)
         (tmp.432 ra.431 rbp)
         (tmp.286 ra.431 rbp)
         ((ra.431 rbp)
          ((ra.431 rax rbp) (rax rbp))
          ((ra.431 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.431 rbp))
         (rbp (tmp.286 tmp.432 tmp.46 c.99 ra.431 rax))
         (ra.431 (tmp.286 tmp.432 tmp.46 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.431))
         (rdi (ra.431))
         (c.99 (rsi ra.431 rbp))
         (tmp.46 (ra.431 rbp))
         (tmp.432 (rbp ra.431))
         (tmp.286 (ra.431 rbp))))
       (assignment ()))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((new-frames ())
       (locals (tmp.47 ra.433 c.98))
       (undead-out
        ((rdi rsi ra.433 rbp)
         (rsi ra.433 rbp)
         (tmp.47 ra.433 rbp)
         ((ra.433 rbp)
          ((ra.433 rax rbp) (rax rbp))
          ((ra.433 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.433 rbp))
         (rbp (tmp.47 c.98 ra.433 rax))
         (ra.433 (tmp.47 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.433))
         (rdi (ra.433))
         (c.98 (rsi ra.433 rbp))
         (tmp.47 (ra.433 rbp))))
       (assignment ()))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((new-frames ())
       (locals (ra.434 c.97 tmp.48 tmp.49 tmp.288 tmp.435 tmp.143))
       (undead-out
        ((rdi rsi rdx r12 ra.434 rbp)
         (rsi rdx r12 ra.434 rbp)
         (rdx r12 ra.434 rbp tmp.48)
         (r12 tmp.49 ra.434 rbp tmp.48)
         (r12 tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.435 tmp.49 ra.434 rbp tmp.48)
         (tmp.49 ra.434 rbp tmp.48 tmp.143)
         (rbp ra.434 tmp.49 tmp.143)
         (tmp.143 ra.434 rbp)
         (ra.434 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.434
          (rax tmp.143 tmp.435 tmp.288 tmp.49 tmp.48 c.97 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.143 tmp.435 r12 tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (r12 (rbp tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (rdx (tmp.48 c.97 ra.434))
         (rsi (c.97 ra.434))
         (rdi (ra.434))
         (c.97 (rsi rdx r12 ra.434 rbp))
         (tmp.48 (tmp.143 tmp.435 tmp.288 tmp.49 rdx r12 ra.434 rbp))
         (tmp.49 (tmp.143 tmp.435 tmp.288 r12 ra.434 rbp tmp.48))
         (tmp.288 (r12 tmp.49 ra.434 rbp tmp.48))
         (tmp.435 (tmp.48 rbp ra.434 tmp.49))
         (tmp.143 (tmp.49 ra.434 rbp tmp.48))
         (rax (ra.434 rbp))))
       (assignment ()))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((new-frames ())
       (locals (tmp.50 tmp.51 ra.436 c.96))
       (undead-out
        ((rdi rsi rdx ra.436 rbp)
         (rsi rdx ra.436 rbp)
         (rdx tmp.50 ra.436 rbp)
         (tmp.50 tmp.51 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.51 tmp.50 c.96 ra.436 rax))
         (ra.436 (tmp.51 tmp.50 c.96 rdi rsi rdx rbp rax))
         (rdx (tmp.50 c.96 ra.436))
         (rsi (c.96 ra.436))
         (rdi (ra.436))
         (c.96 (rsi rdx ra.436 rbp))
         (tmp.50 (tmp.51 rdx ra.436 rbp))
         (tmp.51 (tmp.50 ra.436 rbp))))
       (assignment ()))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (ra.437
         c.95
         tmp.78
         vector-init-loop.80
         tmp.438
         tmp.290
         tmp.439
         tmp.440
         tmp.291
         tmp.441
         tmp.292
         tmp.534
         tmp.293
         tmp.442
         tmp.144
         tmp.79
         tmp.126))
       (undead-out
        ((rdi rsi r12 rbp ra.437)
         (rsi c.95 r12 rbp ra.437)
         (c.95 r12 rbp ra.437 tmp.78)
         (r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.438 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.440 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.291 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.441 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.292 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.442 rbp ra.437 vector-init-loop.80 tmp.78)
         (rbp ra.437 vector-init-loop.80 tmp.78 tmp.144)
         (tmp.144 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.78 vector-init-loop.80 ra.437 rcx rbp)
         (tmp.78 vector-init-loop.80 ra.437 rdx rcx rbp)
         (vector-init-loop.80 ra.437 rsi rdx rcx rbp)
         (ra.437 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.437
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           r12
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (r12
          (rbp
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (rsi (r15 rdi vector-init-loop.80 rdx rcx rbp c.95 ra.437))
         (rdi (r15 rsi rdx rcx rbp ra.437))
         (c.95 (tmp.78 rsi r12 rbp ra.437))
         (tmp.78
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           c.95
           r12
           rbp
           ra.437))
         (vector-init-loop.80
          (rsi
           rdx
           rcx
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           tmp.78
           ra.437
           rbp
           r12))
         (tmp.438 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.290 (tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.439 (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.440 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.291 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.441 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.292 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.534 (tmp.293 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.293 (r12 tmp.534 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.442 (tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.144 (rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.79 (tmp.126 tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.126 (tmp.79 tmp.78 ra.437 rbp))
         (rcx (r15 rdi rsi rdx tmp.78 vector-init-loop.80 ra.437 rbp))
         (rdx (r15 rdi rsi tmp.78 vector-init-loop.80 ra.437 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment ()))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((new-frames ())
       (locals (vec.82 vector-init-loop.80 len.81 i.83 ra.443 c.94))
       (undead-out
        ((rdi rsi rdx rcx ra.443 rbp)
         (rsi rdx rcx c.94 ra.443 rbp)
         (rdx rcx c.94 len.81 ra.443 rbp)
         (rcx c.94 len.81 i.83 ra.443 rbp)
         (c.94 vec.82 len.81 i.83 ra.443 rbp)
         (vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
         ((vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.80 len.81 i.83 ra.443 rbp))
         (rbp
          (vector-init-loop.80
           vec.82
           i.83
           len.81
           c.94
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.443
          (vector-init-loop.80 vec.82 i.83 len.81 c.94 rbp rdi rsi rdx rcx r8))
         (i.83 (vector-init-loop.80 vec.82 c.94 len.81 ra.443 rbp rdx rcx r8))
         (len.81 (vector-init-loop.80 vec.82 i.83 rdx c.94 ra.443 rbp rcx r8))
         (vector-init-loop.80 (rbp ra.443 i.83 len.81 vec.82 r8))
         (rcx (c.94 r15 rdi rsi rdx len.81 i.83 ra.443 r8 rbp))
         (rdx (len.81 c.94 r15 rdi rsi i.83 ra.443 rcx r8 rbp))
         (rsi (c.94 r15 rdi ra.443 rdx rcx r8 rbp))
         (rdi (r15 ra.443 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.94 (vec.82 i.83 len.81 rsi rdx rcx ra.443 rbp))
         (vec.82 (vector-init-loop.80 c.94 len.81 i.83 ra.443 rbp))))
       (assignment ()))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (tmp.89 tmp.91 tmp.90 ra.444 tmp.307 c.93))
       (undead-out
        ((rdi rsi rdx rcx ra.444 rbp)
         (rsi rdx rcx ra.444 rbp)
         (rdx rcx tmp.89 ra.444 rbp)
         (rcx tmp.89 tmp.90 ra.444 rbp)
         (tmp.89 tmp.91 tmp.90 ra.444 rbp)
         (tmp.307 tmp.89 tmp.91 tmp.90 ra.444 rbp)
         ((tmp.89 tmp.91 tmp.90 ra.444 rbp)
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.89 c.93 r15 rdi rsi rdx tmp.91 tmp.90 ra.444 rbp))
         (rbp (tmp.307 tmp.91 tmp.90 tmp.89 c.93 ra.444 r15 rdi rsi rdx rcx))
         (ra.444 (tmp.307 tmp.91 tmp.90 tmp.89 c.93 rbp rdi rsi rdx rcx))
         (tmp.90 (tmp.307 tmp.91 tmp.89 ra.444 rbp rdx rcx))
         (tmp.91 (tmp.307 tmp.89 tmp.90 ra.444 rbp rcx))
         (rdx (tmp.89 c.93 r15 rdi rsi tmp.90 ra.444 rcx rbp))
         (rsi (c.93 r15 rdi ra.444 rdx rcx rbp))
         (rdi (r15 ra.444 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.93 (rsi rdx rcx ra.444 rbp))
         (tmp.89 (tmp.307 tmp.91 tmp.90 rdx rcx ra.444 rbp))
         (tmp.307 (rbp ra.444 tmp.90 tmp.91 tmp.89))))
       (assignment ()))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (tmp.86 tmp.87 ra.445 tmp.315 c.92))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.86 ra.445 rbp)
         (tmp.86 tmp.87 ra.445 rbp)
         (tmp.315 tmp.86 tmp.87 ra.445 rbp)
         ((tmp.86 tmp.87 ra.445 rbp)
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.86 c.92 r15 rdi rsi tmp.87 ra.445 rbp))
         (rbp (tmp.315 tmp.87 tmp.86 c.92 ra.445 r15 rdi rsi rdx))
         (ra.445 (tmp.315 tmp.87 tmp.86 c.92 rbp rdi rsi rdx))
         (tmp.87 (tmp.315 tmp.86 ra.445 rbp rdx))
         (rsi (c.92 r15 rdi ra.445 rdx rbp))
         (rdi (r15 ra.445 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.92 (rsi rdx ra.445 rbp))
         (tmp.86 (tmp.315 tmp.87 rdx ra.445 rbp))
         (tmp.315 (rbp ra.445 tmp.87 tmp.86))))
       (assignment ()))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((new-frames ())
       (locals (tmp.86 tmp.87 ra.446 tmp.309))
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.309 ra.446 rbp)
         (rdx tmp.309 tmp.87 ra.446 rbp)
         (tmp.309 tmp.86 tmp.87 ra.446 rbp)
         ((tmp.86 tmp.87 ra.446 rbp)
          ((tmp.86 tmp.87 ra.446 rbp)
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.446 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.446 rbp))
         (rbp (tmp.86 tmp.87 tmp.309 ra.446 r15 rdi rsi rdx rax))
         (ra.446 (tmp.86 tmp.87 tmp.309 rbp rdi rsi rdx rax))
         (rdx (tmp.309 r15 rdi rsi tmp.87 ra.446 rbp))
         (tmp.87 (tmp.86 tmp.309 ra.446 rbp rdx))
         (rsi (tmp.309 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.309 (tmp.86 tmp.87 rsi rdx ra.446 rbp))
         (tmp.86 (tmp.309 tmp.87 ra.446 rbp))))
       (assignment ()))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((new-frames ())
       (locals
        (tmp.87
         tmp.448
         tmp.312
         tmp.449
         tmp.313
         tmp.450
         tmp.314
         tmp.86
         tmp.311
         ra.447))
       (undead-out
        ((rdi rsi rdx ra.447 rbp)
         (rsi rdx tmp.311 ra.447 rbp)
         (rdx tmp.311 tmp.87 ra.447 rbp)
         (tmp.311 tmp.87 tmp.86 ra.447 rbp)
         ((tmp.87 tmp.86 ra.447 rbp)
          ((tmp.448 tmp.86 ra.447 rbp)
           (tmp.312 tmp.86 ra.447 rbp)
           (tmp.449 tmp.86 ra.447 rbp)
           (tmp.313 tmp.86 ra.447 rbp)
           (tmp.450 tmp.86 ra.447 rbp)
           (tmp.314 tmp.86 ra.447 rbp)
           (ra.447 rax rbp)
           (rax rbp))
          ((ra.447 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.447 rbp))
         (rbp
          (tmp.86
           tmp.87
           tmp.311
           ra.447
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (ra.447
          (tmp.86
           tmp.87
           tmp.311
           rdi
           rsi
           rdx
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (tmp.448 (rbp ra.447 tmp.86))
         (tmp.86
          (tmp.311
           tmp.87
           ra.447
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448))
         (tmp.312 (tmp.86 ra.447 rbp))
         (tmp.449 (rbp ra.447 tmp.86))
         (tmp.313 (tmp.86 ra.447 rbp))
         (tmp.450 (rbp ra.447 tmp.86))
         (tmp.314 (tmp.86 ra.447 rbp))
         (rdx (tmp.87 tmp.311 ra.447))
         (rsi (tmp.311 ra.447))
         (rdi (ra.447))
         (tmp.311 (tmp.86 tmp.87 rsi rdx ra.447 rbp))
         (tmp.87 (tmp.86 rdx tmp.311 ra.447 rbp))))
       (assignment ()))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((new-frames ())
       (locals (tmp.91 tmp.89 tmp.90 ra.451 tmp.301))
       (undead-out
        ((rdi rsi rdx rcx ra.451 rbp)
         (rsi rdx rcx tmp.301 ra.451 rbp)
         (rdx rcx tmp.301 tmp.90 ra.451 rbp)
         (rcx tmp.301 tmp.91 tmp.90 ra.451 rbp)
         (tmp.301 tmp.91 tmp.89 tmp.90 ra.451 rbp)
         ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
          ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.89 tmp.91 tmp.90 tmp.301 ra.451 r15 rdi rsi rdx rcx rax))
         (ra.451 (tmp.89 tmp.91 tmp.90 tmp.301 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.91 tmp.301 r15 rdi rsi rdx tmp.89 tmp.90 ra.451 rbp))
         (tmp.90 (tmp.89 tmp.91 tmp.301 ra.451 rbp rdx rcx))
         (tmp.89 (tmp.301 tmp.91 tmp.90 ra.451 rbp rcx))
         (rdx (tmp.301 r15 rdi rsi tmp.90 ra.451 rcx rbp))
         (rsi (tmp.301 r15 rdi ra.451 rdx rcx rbp))
         (rdi (r15 ra.451 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.301 (tmp.89 tmp.91 tmp.90 rsi rdx rcx ra.451 rbp))
         (tmp.91 (tmp.89 rcx tmp.301 tmp.90 ra.451 rbp))))
       (assignment ()))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((new-frames ())
       (locals
        (tmp.90
         tmp.453
         tmp.304
         tmp.454
         tmp.305
         tmp.455
         tmp.306
         tmp.91
         tmp.89
         tmp.303
         ra.452))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.452)
         (rsi rdx rcx tmp.303 rbp ra.452)
         (rdx rcx tmp.303 tmp.90 rbp ra.452)
         (rcx tmp.303 tmp.90 rbp ra.452 tmp.89)
         (tmp.303 tmp.90 rbp ra.452 tmp.91 tmp.89)
         ((tmp.90 rbp ra.452 tmp.91 tmp.89)
          ((tmp.453 rbp ra.452 tmp.91 tmp.89)
           (tmp.304 rbp ra.452 tmp.91 tmp.89)
           (tmp.454 rbp ra.452 tmp.91 tmp.89)
           (tmp.305 rbp ra.452 tmp.91 tmp.89)
           (tmp.455 rbp ra.452 tmp.91 tmp.89)
           (rbp ra.452 tmp.91 tmp.306 tmp.89)
           (ra.452 rbp)
           (ra.452 rax rbp)
           (rax rbp))
          ((ra.452 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (ra.452
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (tmp.453 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.91
          (tmp.303
           tmp.90
           rbp
           ra.452
           tmp.89
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.89
          (tmp.91
           rcx
           tmp.303
           tmp.90
           rbp
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.304 (rbp ra.452 tmp.91 tmp.89))
         (tmp.454 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.305 (rbp ra.452 tmp.91 tmp.89))
         (tmp.455 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.306 (rbp ra.452 tmp.91 tmp.89))
         (rcx (tmp.89 tmp.90 tmp.303 ra.452))
         (rdx (tmp.90 tmp.303 ra.452))
         (rsi (tmp.303 ra.452))
         (rdi (ra.452))
         (tmp.303 (tmp.91 tmp.89 tmp.90 rsi rdx rcx rbp ra.452))
         (tmp.90 (tmp.91 tmp.89 rdx rcx tmp.303 rbp ra.452))))
       (assignment ()))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((new-frames ())
       (locals
        (vec.82
         ra.456
         len.81
         tmp.299
         tmp.460
         tmp.125
         vector-init-loop.80
         tmp.298
         tmp.459
         tmp.297
         tmp.458
         tmp.296
         tmp.457
         i.83
         tmp.295))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.456 rbp)
         (rsi rdx rcx r8 tmp.295 ra.456 rbp)
         (rdx rcx r8 tmp.295 i.83 ra.456 rbp)
         (rcx r8 tmp.295 i.83 len.81 ra.456 rbp)
         (r8 tmp.295 i.83 len.81 vector-init-loop.80 ra.456 rbp)
         (tmp.295 i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
         ((i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
          ((ra.456 rax rbp) (rax rbp))
          ((tmp.457 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.296 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.458 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.297 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.459 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (rbp ra.456 vector-init-loop.80 len.81 i.83 tmp.298 vec.82)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.460 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (vec.82 tmp.299 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.299 len.81 vector-init-loop.80 ra.456 rcx rbp)
           (len.81 vector-init-loop.80 ra.456 rdx rcx rbp)
           (vector-init-loop.80 ra.456 rsi rdx rcx rbp)
           (ra.456 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.457 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (rbp
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           ra.456
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (ra.456
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vector-init-loop.80
          (vec.82
           r8
           tmp.295
           i.83
           len.81
           ra.456
           rbp
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (len.81
          (vec.82
           vector-init-loop.80
           r8
           tmp.295
           i.83
           ra.456
           rbp
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (i.83
          (vec.82
           vector-init-loop.80
           len.81
           rdx
           rcx
           r8
           tmp.295
           ra.456
           rbp
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vec.82
          (tmp.295
           i.83
           len.81
           vector-init-loop.80
           ra.456
           rbp
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (tmp.296 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.458 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.297 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.459 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.298 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.125 (i.83 vec.82 len.81 ra.456 rbp))
         (tmp.460 (rbp ra.456 vector-init-loop.80 len.81 vec.82))
         (tmp.299 (rcx vec.82 len.81 vector-init-loop.80 ra.456 rbp))
         (rcx
          (i.83
           tmp.295
           r15
           rdi
           rsi
           rdx
           tmp.299
           len.81
           vector-init-loop.80
           ra.456
           rbp))
         (rdx
          (i.83 tmp.295 r15 rdi rsi len.81 vector-init-loop.80 ra.456 rcx rbp))
         (rsi (tmp.295 r15 rdi vector-init-loop.80 ra.456 rdx rcx rbp))
         (rdi (r15 ra.456 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.456 rbp))
         (r8 (vector-init-loop.80 len.81 i.83 tmp.295 ra.456))
         (tmp.295
          (vec.82 vector-init-loop.80 len.81 i.83 rsi rdx rcx r8 ra.456 rbp))))
       (assignment ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((new-frames ())
       (locals (tmp.37 tmp.267 ra.461))
       (undead-out
        ((rdi rsi ra.461 rbp)
         (rsi tmp.267 ra.461 rbp)
         (tmp.267 tmp.37 ra.461 rbp)
         ((tmp.37 ra.461 rbp)
          ((ra.461 rax rbp) (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp (tmp.37 tmp.267 ra.461 rax))
         (ra.461 (tmp.37 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.461))
         (rdi (ra.461))
         (tmp.267 (tmp.37 rsi ra.461 rbp))
         (tmp.37 (tmp.267 ra.461 rbp))))
       (assignment ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((new-frames ())
       (locals (tmp.36 tmp.264 ra.462))
       (undead-out
        ((rdi rsi ra.462 rbp)
         (rsi tmp.264 ra.462 rbp)
         (tmp.264 tmp.36 ra.462 rbp)
         ((tmp.36 ra.462 rbp)
          ((ra.462 rax rbp) (rax rbp))
          ((ra.462 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.462 rbp))
         (rbp (tmp.36 tmp.264 ra.462 rax))
         (ra.462 (tmp.36 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.462))
         (rdi (ra.462))
         (tmp.264 (tmp.36 rsi ra.462 rbp))
         (tmp.36 (tmp.264 ra.462 rbp))))
       (assignment ()))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((new-frames ())
       (locals (tmp.35 tmp.261 ra.463))
       (undead-out
        ((rdi rsi ra.463 rbp)
         (rsi tmp.261 ra.463 rbp)
         (tmp.261 tmp.35 ra.463 rbp)
         ((tmp.35 ra.463 rbp)
          ((ra.463 rax rbp) (rax rbp))
          ((ra.463 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.463 rbp))
         (rbp (tmp.35 tmp.261 ra.463 rax))
         (ra.463 (tmp.35 tmp.261 rdi rsi rbp rax))
         (rsi (tmp.261 ra.463))
         (rdi (ra.463))
         (tmp.261 (tmp.35 rsi ra.463 rbp))
         (tmp.35 (tmp.261 ra.463 rbp))))
       (assignment ()))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((new-frames ())
       (locals
        (tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 tmp.258 tmp.465 tmp.255))
       (undead-out
        ((rdi rsi rdx rcx ra.464 rbp)
         (rsi rdx rcx tmp.255 ra.464 rbp)
         (rdx rcx tmp.255 tmp.33 ra.464 rbp)
         (rcx tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp)
         (tmp.255 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
         ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
          ((tmp.465 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           (tmp.258 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.464 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.464 rbp))
         (rbp
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           ra.464
           tmp.258
           tmp.465
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.464
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           rbp
           tmp.258
           tmp.465
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.33
           tmp.255
           r15
           rdi
           rsi
           rdx
           tmp.34
           unsafe-vector-ref.3
           ra.464
           rbp))
         (unsafe-vector-ref.3
          (tmp.34 tmp.255 tmp.33 ra.464 rbp tmp.258 tmp.465 rdx rcx))
         (tmp.34
          (tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp tmp.258 tmp.465 rcx))
         (rdx (tmp.33 tmp.255 r15 rdi rsi unsafe-vector-ref.3 ra.464 rcx rbp))
         (rsi (tmp.255 r15 rdi ra.464 rdx rcx rbp))
         (rdi (r15 ra.464 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.465 (rbp ra.464 unsafe-vector-ref.3 tmp.34 tmp.33))
         (tmp.33
          (tmp.34
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.255
           ra.464
           rbp
           tmp.258
           tmp.465))
         (tmp.258 (tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp))
         (tmp.255 (tmp.34 unsafe-vector-ref.3 tmp.33 rsi rdx rcx ra.464 rbp))))
       (assignment ()))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((new-frames ())
       (locals (unsafe-vector-ref.3 tmp.127 tmp.34 tmp.33 ra.466 tmp.257))
       (undead-out
        ((rdi rsi rdx rcx ra.466 rbp)
         (rsi rdx rcx tmp.257 ra.466 rbp)
         (rdx rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp)
         (rcx tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp)
         (tmp.257 tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
         ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
          ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
           (tmp.33 unsafe-vector-ref.3 ra.466 rdx rbp)
           (unsafe-vector-ref.3 ra.466 rsi rdx rbp)
           (ra.466 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.466 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           ra.466
           r15
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (ra.466
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (tmp.127 (tmp.34 tmp.33 ra.466 rbp))
         (tmp.33 (tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp rdx tmp.127))
         (tmp.34 (tmp.33 rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp tmp.127))
         (rdx (tmp.257 r15 rdi rsi tmp.33 unsafe-vector-ref.3 ra.466 rbp))
         (unsafe-vector-ref.3 (tmp.33 tmp.34 rcx tmp.257 ra.466 rbp rsi rdx))
         (rsi (tmp.257 r15 rdi unsafe-vector-ref.3 ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.34 unsafe-vector-ref.3 tmp.257 ra.466))
         (tmp.257 (tmp.33 tmp.34 unsafe-vector-ref.3 rsi rdx rcx ra.466 rbp))))
       (assignment ()))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals
        (tmp.30
         tmp.31
         tmp.32
         unsafe-vector-set!.2
         ra.467
         tmp.252
         tmp.468
         tmp.249))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.467 rbp)
         (rsi rdx rcx r8 tmp.249 ra.467 rbp)
         (rdx rcx r8 tmp.249 tmp.30 ra.467 rbp)
         (rcx r8 tmp.249 tmp.30 unsafe-vector-set!.2 ra.467 rbp)
         (r8 tmp.249 tmp.30 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         (tmp.249 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
          ((tmp.468 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           (tmp.252 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.467 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.467 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           ra.467
           tmp.252
           tmp.468
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.467
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           rbp
           tmp.252
           tmp.468
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp))
         (unsafe-vector-set!.2
          (tmp.31 tmp.32 tmp.249 tmp.30 ra.467 rbp tmp.252 tmp.468 rdx rcx r8))
         (tmp.32
          (tmp.31
           tmp.249
           tmp.30
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           rcx
           r8))
         (tmp.31
          (tmp.249
           tmp.30
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           r8))
         (rcx
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-set!.2
           ra.467
           r8
           rbp))
         (rdx
          (tmp.30 tmp.249 r15 rdi rsi unsafe-vector-set!.2 ra.467 rcx r8 rbp))
         (rsi (tmp.249 r15 rdi ra.467 rdx rcx r8 rbp))
         (rdi (r15 ra.467 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.468 (rbp ra.467 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30))
         (tmp.30
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.249
           ra.467
           rbp
           tmp.252
           tmp.468))
         (tmp.252 (tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp))
         (tmp.249
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           rsi
           rdx
           rcx
           r8
           ra.467
           rbp))))
       (assignment ()))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((new-frames ())
       (locals
        (unsafe-vector-set!.2 tmp.128 tmp.32 tmp.31 tmp.30 ra.469 tmp.251))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.469 rbp)
         (rsi rdx rcx r8 tmp.251 ra.469 rbp)
         (rdx rcx r8 tmp.251 unsafe-vector-set!.2 ra.469 rbp)
         (rcx r8 tmp.251 tmp.32 unsafe-vector-set!.2 ra.469 rbp)
         (r8 tmp.251 tmp.32 tmp.31 unsafe-vector-set!.2 ra.469 rbp)
         (tmp.251 tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
         ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
          ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
           (tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp)
           (tmp.30 unsafe-vector-set!.2 ra.469 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.469 rsi rdx rcx rbp)
           (ra.469 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.469 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.469 rbp))
         (rbp
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           ra.469
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (ra.469
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (tmp.128 (tmp.32 tmp.31 tmp.30 ra.469 rbp))
         (tmp.30
          (tmp.251
           tmp.32
           tmp.31
           unsafe-vector-set!.2
           ra.469
           rbp
           rdx
           rcx
           tmp.128))
         (tmp.31
          (tmp.30
           r8
           tmp.251
           tmp.32
           unsafe-vector-set!.2
           ra.469
           rbp
           rcx
           tmp.128))
         (tmp.32
          (tmp.30
           tmp.31
           rcx
           r8
           tmp.251
           unsafe-vector-set!.2
           ra.469
           rbp
           tmp.128))
         (rcx
          (tmp.32
           tmp.251
           r15
           rdi
           rsi
           rdx
           tmp.31
           tmp.30
           unsafe-vector-set!.2
           ra.469
           rbp))
         (unsafe-vector-set!.2
          (tmp.30 tmp.31 tmp.32 r8 tmp.251 ra.469 rbp rsi rdx rcx))
         (rdx (tmp.251 r15 rdi rsi tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp))
         (rsi (tmp.251 r15 rdi unsafe-vector-set!.2 ra.469 rdx rcx rbp))
         (rdi (r15 ra.469 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.251 ra.469))
         (tmp.251
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.469
           rbp))))
       (assignment ()))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals (tmp.29 tmp.246 ra.470))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.246 ra.470 rbp)
         (tmp.246 tmp.29 ra.470 rbp)
         ((tmp.29 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.29 tmp.246 ra.470 rax))
         (ra.470 (tmp.29 tmp.246 rdi rsi rbp rax))
         (rsi (tmp.246 ra.470))
         (rdi (ra.470))
         (tmp.246 (tmp.29 rsi ra.470 rbp))
         (tmp.29 (tmp.246 ra.470 rbp))))
       (assignment ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((new-frames ())
       (locals (make-init-vector.1 tmp.129 tmp.28 ra.471 tmp.243))
       (undead-out
        ((rdi rsi rdx ra.471 rbp)
         (rsi rdx tmp.243 ra.471 rbp)
         (rdx tmp.243 make-init-vector.1 ra.471 rbp)
         (tmp.243 tmp.28 make-init-vector.1 ra.471 rbp)
         ((tmp.28 make-init-vector.1 ra.471 rbp)
          ((tmp.28 make-init-vector.1 ra.471 rbp)
           (make-init-vector.1 ra.471 rsi rbp)
           (ra.471 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp
          (tmp.28 make-init-vector.1 tmp.243 ra.471 r15 rdi rsi tmp.129 rax))
         (ra.471
          (tmp.28 make-init-vector.1 tmp.243 rdx rbp rdi rsi tmp.129 rax))
         (tmp.129 (tmp.28 ra.471 rbp))
         (tmp.28 (tmp.243 make-init-vector.1 ra.471 rbp tmp.129))
         (rsi (tmp.243 r15 rdi make-init-vector.1 ra.471 rbp))
         (make-init-vector.1 (tmp.28 rdx tmp.243 ra.471 rbp rsi))
         (rdi (r15 ra.471 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.243 ra.471))
         (tmp.243 (tmp.28 make-init-vector.1 rsi rdx ra.471 rbp))))
       (assignment ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((new-frames ())
       (locals (tmp.27 tmp.26 ra.472 tmp.240 tmp.473 tmp.236))
       (undead-out
        ((rdi rsi rdx ra.472 rbp)
         (rsi rdx tmp.236 ra.472 rbp)
         (rdx tmp.236 tmp.26 ra.472 rbp)
         (tmp.236 tmp.27 tmp.26 ra.472 rbp)
         ((tmp.27 tmp.26 ra.472 rbp)
          ((tmp.473 tmp.27 tmp.26 ra.472 rbp)
           (tmp.240 tmp.27 tmp.26 ra.472 rbp)
           ((tmp.27 tmp.26 ra.472 rbp)
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.236 ra.472 tmp.240 tmp.473 r15 rdi rsi rdx rax))
         (ra.472 (tmp.27 tmp.26 tmp.236 rbp tmp.240 tmp.473 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.26 ra.472 rbp))
         (tmp.26 (tmp.27 tmp.236 ra.472 rbp tmp.240 tmp.473 rdx))
         (rsi (tmp.236 r15 rdi ra.472 rdx rbp))
         (rdi (r15 ra.472 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.473 (rbp ra.472 tmp.26 tmp.27))
         (tmp.27 (tmp.236 tmp.26 ra.472 rbp tmp.240 tmp.473))
         (tmp.240 (tmp.27 tmp.26 ra.472 rbp))
         (tmp.236 (tmp.27 tmp.26 rsi rdx ra.472 rbp))))
       (assignment ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals (tmp.26 tmp.27 tmp.238 ra.474))
       (undead-out
        ((rdi rsi rdx ra.474 rbp)
         (rsi rdx tmp.238 ra.474 rbp)
         (rdx tmp.238 tmp.26 ra.474 rbp)
         (tmp.238 tmp.26 tmp.27 ra.474 rbp)
         ((tmp.26 tmp.27 ra.474 rbp)
          ((ra.474 rbp)
           ((ra.474 rax rbp) (rax rbp))
           ((ra.474 rax rbp) (rax rbp)))
          ((ra.474 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.474 rbp))
         (rbp (tmp.27 tmp.26 tmp.238 ra.474 rax))
         (ra.474 (tmp.27 tmp.26 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.238 ra.474))
         (rsi (tmp.238 ra.474))
         (rdi (ra.474))
         (tmp.238 (tmp.27 tmp.26 rsi rdx ra.474 rbp))
         (tmp.26 (tmp.27 rdx tmp.238 ra.474 rbp))
         (tmp.27 (tmp.238 tmp.26 ra.474 rbp))))
       (assignment ()))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.475 tmp.233 tmp.476 tmp.229))
       (undead-out
        ((rdi rsi rdx ra.475 rbp)
         (rsi rdx tmp.229 ra.475 rbp)
         (rdx tmp.229 tmp.24 ra.475 rbp)
         (tmp.229 tmp.25 tmp.24 ra.475 rbp)
         ((tmp.25 tmp.24 ra.475 rbp)
          ((tmp.476 tmp.25 tmp.24 ra.475 rbp)
           (tmp.233 tmp.25 tmp.24 ra.475 rbp)
           ((tmp.25 tmp.24 ra.475 rbp)
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.229 ra.475 tmp.233 tmp.476 r15 rdi rsi rdx rax))
         (ra.475 (tmp.25 tmp.24 tmp.229 rbp tmp.233 tmp.476 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.24 ra.475 rbp))
         (tmp.24 (tmp.25 tmp.229 ra.475 rbp tmp.233 tmp.476 rdx))
         (rsi (tmp.229 r15 rdi ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.476 (rbp ra.475 tmp.24 tmp.25))
         (tmp.25 (tmp.229 tmp.24 ra.475 rbp tmp.233 tmp.476))
         (tmp.233 (tmp.25 tmp.24 ra.475 rbp))
         (tmp.229 (tmp.25 tmp.24 rsi rdx ra.475 rbp))))
       (assignment ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (tmp.24 tmp.25 tmp.231 ra.477))
       (undead-out
        ((rdi rsi rdx ra.477 rbp)
         (rsi rdx tmp.231 ra.477 rbp)
         (rdx tmp.231 tmp.24 ra.477 rbp)
         (tmp.231 tmp.24 tmp.25 ra.477 rbp)
         ((tmp.24 tmp.25 ra.477 rbp)
          ((ra.477 rbp)
           ((ra.477 rax rbp) (rax rbp))
           ((ra.477 rax rbp) (rax rbp)))
          ((ra.477 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.477 rbp))
         (rbp (tmp.25 tmp.24 tmp.231 ra.477 rax))
         (ra.477 (tmp.25 tmp.24 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.231 ra.477))
         (rsi (tmp.231 ra.477))
         (rdi (ra.477))
         (tmp.231 (tmp.25 tmp.24 rsi rdx ra.477 rbp))
         (tmp.24 (tmp.25 rdx tmp.231 ra.477 rbp))
         (tmp.25 (tmp.231 tmp.24 ra.477 rbp))))
       (assignment ()))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.478 tmp.226 tmp.479 tmp.222))
       (undead-out
        ((rdi rsi rdx ra.478 rbp)
         (rsi rdx tmp.222 ra.478 rbp)
         (rdx tmp.222 tmp.22 ra.478 rbp)
         (tmp.222 tmp.23 tmp.22 ra.478 rbp)
         ((tmp.23 tmp.22 ra.478 rbp)
          ((tmp.479 tmp.23 tmp.22 ra.478 rbp)
           (tmp.226 tmp.23 tmp.22 ra.478 rbp)
           ((tmp.23 tmp.22 ra.478 rbp)
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.222 ra.478 tmp.226 tmp.479 r15 rdi rsi rdx rax))
         (ra.478 (tmp.23 tmp.22 tmp.222 rbp tmp.226 tmp.479 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.22 ra.478 rbp))
         (tmp.22 (tmp.23 tmp.222 ra.478 rbp tmp.226 tmp.479 rdx))
         (rsi (tmp.222 r15 rdi ra.478 rdx rbp))
         (rdi (r15 ra.478 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.479 (rbp ra.478 tmp.22 tmp.23))
         (tmp.23 (tmp.222 tmp.22 ra.478 rbp tmp.226 tmp.479))
         (tmp.226 (tmp.23 tmp.22 ra.478 rbp))
         (tmp.222 (tmp.23 tmp.22 rsi rdx ra.478 rbp))))
       (assignment ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((new-frames ())
       (locals (tmp.22 tmp.23 tmp.224 ra.480))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.224 ra.480 rbp)
         (rdx tmp.224 tmp.22 ra.480 rbp)
         (tmp.224 tmp.22 tmp.23 ra.480 rbp)
         ((tmp.22 tmp.23 ra.480 rbp)
          ((ra.480 rbp)
           ((ra.480 rax rbp) (rax rbp))
           ((ra.480 rax rbp) (rax rbp)))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp (tmp.23 tmp.22 tmp.224 ra.480 rax))
         (ra.480 (tmp.23 tmp.22 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.224 ra.480))
         (rsi (tmp.224 ra.480))
         (rdi (ra.480))
         (tmp.224 (tmp.23 tmp.22 rsi rdx ra.480 rbp))
         (tmp.22 (tmp.23 rdx tmp.224 ra.480 rbp))
         (tmp.23 (tmp.224 tmp.22 ra.480 rbp))))
       (assignment ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.481 tmp.219 tmp.482 tmp.215))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.215 ra.481 rbp)
         (rdx tmp.215 tmp.20 ra.481 rbp)
         (tmp.215 tmp.21 tmp.20 ra.481 rbp)
         ((tmp.21 tmp.20 ra.481 rbp)
          ((tmp.482 tmp.21 tmp.20 ra.481 rbp)
           (tmp.219 tmp.21 tmp.20 ra.481 rbp)
           ((tmp.21 tmp.20 ra.481 rbp)
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.215 ra.481 tmp.219 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.21 tmp.20 tmp.215 rbp tmp.219 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.215 r15 rdi rsi tmp.20 ra.481 rbp))
         (tmp.20 (tmp.21 tmp.215 ra.481 rbp tmp.219 tmp.482 rdx))
         (rsi (tmp.215 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.20 tmp.21))
         (tmp.21 (tmp.215 tmp.20 ra.481 rbp tmp.219 tmp.482))
         (tmp.219 (tmp.21 tmp.20 ra.481 rbp))
         (tmp.215 (tmp.21 tmp.20 rsi rdx ra.481 rbp))))
       (assignment ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((new-frames ())
       (locals (tmp.20 tmp.21 tmp.217 ra.483))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.217 ra.483 rbp)
         (rdx tmp.217 tmp.20 ra.483 rbp)
         (tmp.217 tmp.20 tmp.21 ra.483 rbp)
         ((tmp.20 tmp.21 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.21 tmp.20 tmp.217 ra.483 rax))
         (ra.483 (tmp.21 tmp.20 tmp.217 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.217 ra.483))
         (rsi (tmp.217 ra.483))
         (rdi (ra.483))
         (tmp.217 (tmp.21 tmp.20 rsi rdx ra.483 rbp))
         (tmp.20 (tmp.21 rdx tmp.217 ra.483 rbp))
         (tmp.21 (tmp.217 tmp.20 ra.483 rbp))))
       (assignment ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((new-frames ())
       (locals (tmp.19 tmp.18 ra.484 tmp.212 tmp.485 tmp.209))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.209 ra.484 rbp)
         (rdx tmp.209 tmp.18 ra.484 rbp)
         (tmp.209 tmp.19 tmp.18 ra.484 rbp)
         ((tmp.19 tmp.18 ra.484 rbp)
          ((tmp.485 tmp.19 tmp.18 ra.484 rbp)
           (tmp.212 tmp.19 tmp.18 ra.484 rbp)
           ((tmp.19 tmp.18 ra.484 rbp)
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.209 ra.484 tmp.212 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.19 tmp.18 tmp.209 rbp tmp.212 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.209 r15 rdi rsi tmp.18 ra.484 rbp))
         (tmp.18 (tmp.19 tmp.209 ra.484 rbp tmp.212 tmp.485 rdx))
         (rsi (tmp.209 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.18 tmp.19))
         (tmp.19 (tmp.209 tmp.18 ra.484 rbp tmp.212 tmp.485))
         (tmp.212 (tmp.19 tmp.18 ra.484 rbp))
         (tmp.209 (tmp.19 tmp.18 rsi rdx ra.484 rbp))))
       (assignment ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((new-frames ())
       (locals (tmp.19 tmp.18 tmp.487 tmp.211 ra.486))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.211 ra.486 rbp)
         (rdx tmp.211 tmp.18 ra.486 rbp)
         (tmp.211 tmp.19 tmp.18 ra.486 rbp)
         ((tmp.19 tmp.18 ra.486 rbp)
          ((tmp.487 ra.486 rbp) (ra.486 rax rbp) (rax rbp))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.19 tmp.18 tmp.211 ra.486 tmp.487 rax))
         (ra.486 (tmp.19 tmp.18 tmp.211 rdi rsi rdx rbp tmp.487 rax))
         (tmp.487 (rbp ra.486))
         (rdx (tmp.18 tmp.211 ra.486))
         (rsi (tmp.211 ra.486))
         (rdi (ra.486))
         (tmp.211 (tmp.19 tmp.18 rsi rdx ra.486 rbp))
         (tmp.18 (tmp.19 rdx tmp.211 ra.486 rbp))
         (tmp.19 (tmp.211 tmp.18 ra.486 rbp))))
       (assignment ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (tmp.17 tmp.16 ra.488 tmp.206 tmp.489 tmp.203))
       (undead-out
        ((rdi rsi rdx ra.488 rbp)
         (rsi rdx tmp.203 ra.488 rbp)
         (rdx tmp.203 tmp.16 ra.488 rbp)
         (tmp.203 tmp.17 tmp.16 ra.488 rbp)
         ((tmp.17 tmp.16 ra.488 rbp)
          ((tmp.489 tmp.17 tmp.16 ra.488 rbp)
           (tmp.206 tmp.17 tmp.16 ra.488 rbp)
           ((tmp.17 tmp.16 ra.488 rbp)
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.488 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.488 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.203 ra.488 tmp.206 tmp.489 r15 rdi rsi rdx rax))
         (ra.488 (tmp.17 tmp.16 tmp.203 rbp tmp.206 tmp.489 rdi rsi rdx rax))
         (rdx (tmp.203 r15 rdi rsi tmp.16 ra.488 rbp))
         (tmp.16 (tmp.17 tmp.203 ra.488 rbp tmp.206 tmp.489 rdx))
         (rsi (tmp.203 r15 rdi ra.488 rdx rbp))
         (rdi (r15 ra.488 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.489 (rbp ra.488 tmp.16 tmp.17))
         (tmp.17 (tmp.203 tmp.16 ra.488 rbp tmp.206 tmp.489))
         (tmp.206 (tmp.17 tmp.16 ra.488 rbp))
         (tmp.203 (tmp.17 tmp.16 rsi rdx ra.488 rbp))))
       (assignment ()))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((new-frames ())
       (locals (tmp.17 tmp.16 tmp.491 tmp.205 ra.490))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.205 ra.490 rbp)
         (rdx tmp.205 tmp.16 ra.490 rbp)
         (tmp.205 tmp.17 tmp.16 ra.490 rbp)
         ((tmp.17 tmp.16 ra.490 rbp)
          ((tmp.491 ra.490 rbp) (ra.490 rax rbp) (rax rbp))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp (tmp.17 tmp.16 tmp.205 ra.490 tmp.491 rax))
         (ra.490 (tmp.17 tmp.16 tmp.205 rdi rsi rdx rbp tmp.491 rax))
         (tmp.491 (rbp ra.490))
         (rdx (tmp.16 tmp.205 ra.490))
         (rsi (tmp.205 ra.490))
         (rdi (ra.490))
         (tmp.205 (tmp.17 tmp.16 rsi rdx ra.490 rbp))
         (tmp.16 (tmp.17 rdx tmp.205 ra.490 rbp))
         (tmp.17 (tmp.205 tmp.16 ra.490 rbp))))
       (assignment ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (tmp.14 tmp.15 ra.492 tmp.200 tmp.493 tmp.196))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.196 ra.492 rbp)
         (rdx tmp.196 tmp.14 ra.492 rbp)
         (tmp.196 tmp.14 tmp.15 ra.492 rbp)
         ((tmp.14 tmp.15 ra.492 rbp)
          ((tmp.493 tmp.14 tmp.15 ra.492 rbp)
           (tmp.200 tmp.14 tmp.15 ra.492 rbp)
           ((tmp.14 tmp.15 ra.492 rbp)
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.196 ra.492 tmp.200 tmp.493 r15 rdi rsi rdx rax))
         (ra.492 (tmp.15 tmp.14 tmp.196 rbp tmp.200 tmp.493 rdi rsi rdx rax))
         (rdx (tmp.14 tmp.196 r15 rdi rsi tmp.15 ra.492 rbp))
         (tmp.15 (tmp.196 tmp.14 ra.492 rbp tmp.200 tmp.493 rdx))
         (rsi (tmp.196 r15 rdi ra.492 rdx rbp))
         (rdi (r15 ra.492 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.493 (rbp ra.492 tmp.15 tmp.14))
         (tmp.14 (tmp.15 rdx tmp.196 ra.492 rbp tmp.200 tmp.493))
         (tmp.200 (tmp.14 tmp.15 ra.492 rbp))
         (tmp.196 (tmp.15 tmp.14 rsi rdx ra.492 rbp))))
       (assignment ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((new-frames ())
       (locals (tmp.15 tmp.495 tmp.199 tmp.14 tmp.496 tmp.198 ra.494))
       (undead-out
        ((rdi rsi rdx ra.494 rbp)
         (rsi rdx tmp.198 ra.494 rbp)
         (rdx tmp.198 tmp.15 ra.494 rbp)
         (tmp.198 tmp.15 tmp.14 ra.494 rbp)
         ((tmp.15 tmp.14 ra.494 rbp)
          ((tmp.495 tmp.14 ra.494 rbp)
           (tmp.199 tmp.14 ra.494 rbp)
           (tmp.496 ra.494 rbp)
           (ra.494 rax rbp)
           (rax rbp))
          ((ra.494 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.494 rbp))
         (rbp (tmp.14 tmp.15 tmp.198 ra.494 tmp.496 tmp.199 tmp.495 rax))
         (ra.494
          (tmp.14 tmp.15 tmp.198 rdi rsi rdx rbp tmp.496 tmp.199 tmp.495 rax))
         (tmp.495 (rbp ra.494 tmp.14))
         (tmp.14 (tmp.198 tmp.15 ra.494 rbp tmp.199 tmp.495))
         (tmp.199 (tmp.14 ra.494 rbp))
         (tmp.496 (rbp ra.494))
         (rdx (tmp.15 tmp.198 ra.494))
         (rsi (tmp.198 ra.494))
         (rdi (ra.494))
         (tmp.198 (tmp.14 tmp.15 rsi rdx ra.494 rbp))
         (tmp.15 (tmp.14 rdx tmp.198 ra.494 rbp))))
       (assignment ()))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((new-frames ())
       (locals
        (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 tmp.189 tmp.183))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.497 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.183 ra.497 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.183 tmp.142 ra.497 rbp)
         (rcx r8 r9 fv0 fv1 tmp.183 l.10 tmp.142 ra.497 rbp)
         (r8 r9 fv0 fv1 tmp.183 cdr.64 l.10 tmp.142 ra.497 rbp)
         (r9 fv0 fv1 tmp.183 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv0 fv1 tmp.183 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv1 tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (tmp.183 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
          ((tmp.189 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))))
          ((l.10 cons.76 f.9 cdr.64 ra.497 r9 rbp)
           (cons.76 f.9 cdr.64 ra.497 r8 r9 rbp)
           (f.9 cdr.64 ra.497 rcx r8 r9 rbp)
           (cdr.64 ra.497 rdx rcx r8 r9 rbp)
           (ra.497 rsi rdx rcx r8 r9 rbp)
           (ra.497 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r9
          (tmp.183
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.497
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           ra.497
           tmp.189
           fv0
           fv1
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.497
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           rbp
           tmp.189
           fv0
           fv1
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           tmp.183
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           tmp.183
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv1
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           tmp.183
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           tmp.183
           tmp.142
           ra.497
           rbp
           tmp.189
           rcx
           r8
           fv0
           fv1
           r9))
         (r8
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.497
           r9
           rbp))
         (rcx
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.497
           r8
           r9
           rbp))
         (rdx
          (tmp.183 tmp.142 fv1 fv0 r15 rdi rsi cdr.64 ra.497 rcx r8 r9 rbp))
         (rsi (tmp.183 fv1 fv0 r15 rdi ra.497 rdx rcx r8 r9 rbp))
         (rdi (fv1 fv0 r15 ra.497 rsi rdx rcx r8 r9 rbp))
         (r15 (fv1 fv0 rdi rsi rdx rcx r8 r9 rbp))
         (fv1
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.183
           ra.497
           rbp
           tmp.189
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (map.5
          (car.63
           f.9
           tmp.183
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1))
         (fv0
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           fv1
           rbp))
         (tmp.189 (rbp ra.497 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (car.63
          (tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp tmp.189))
         (tmp.183
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.497
           rbp))))
       (assignment ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((new-frames ())
       (locals (tmp.142 car.63 tmp.136 tmp.187 tmp.188 tmp.185))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.498 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.185 ra.498 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.185 tmp.142 ra.498 rbp)
         (rcx r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 ra.498 rbp)
         (r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 cdr.64 ra.498 rbp)
         (r9 fv0 fv1 tmp.185 tmp.142 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv0 fv1 tmp.185 tmp.142 map.5 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv1 tmp.185 tmp.142 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         (tmp.185 tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         ((tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
          ((car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           (car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((car.63 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.186 tmp.187 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((f.9 tmp.186 rsi rbp)
             (tmp.186 rdi rsi rbp)
             (tmp.186 rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (map.5 l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 rbp)
           (l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 tmp.188 ra.498 r8 r9 rbp)
           (f.9 cdr.64 tmp.188 ra.498 rcx r8 r9 rbp)
           (cdr.64 tmp.188 ra.498 rdx rcx r8 r9 rbp)
           (tmp.188 ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp))
          ((l.10 cons.76 f.9 cdr.64 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 ra.498 r8 r9 rbp)
           (f.9 cdr.64 ra.498 rcx r8 r9 rbp)
           (cdr.64 ra.498 rdx rcx r8 r9 rbp)
           (ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (call-undead (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498))
       (conflicts
        ((r9
          (tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           ra.498
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.498
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           fv0
           fv1
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           fv1
           tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           rsi
           tmp.187
           rax
           tmp.136
           tmp.186
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           rcx
           r8
           fv0
           fv1
           tmp.185
           tmp.142
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r9))
         (r8
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.498
           r9
           rbp))
         (rcx
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.498
           r8
           r9
           rbp))
         (rdx
          (tmp.142 tmp.185 tmp.188 r15 rdi rsi cdr.64 ra.498 rcx r8 r9 rbp))
         (rsi
          (tmp.185
           tmp.188
           f.9
           tmp.186
           car.63
           r15
           rdi
           ra.498
           rdx
           rcx
           r8
           r9
           rbp))
         (rdi (tmp.186 r15 ra.498 rsi rdx rcx r8 r9 rbp))
         (r15 (tmp.186 rdi rsi rdx rcx r8 r9 rbp))
         (tmp.186
          (r15
           rdi
           rsi
           tmp.187
           rax
           tmp.136
           rbp
           ra.498
           cdr.64
           f.9
           cons.76
           l.10
           map.5
           car.63))
         (car.63
          (tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp
           rsi
           tmp.186))
         (map.5
          (car.63
           f.9
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186))
         (tmp.136 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (rax (rbp ra.498 cdr.64 f.9 cons.76 l.10 map.5 tmp.186))
         (tmp.187 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (tmp.188 (rsi rdx rcx r8 r9 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (fv1 (f.9 map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (fv0 (map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (tmp.185
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.498
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.185
           ra.498
           rbp))))
       (assignment
        ((ra.498 fv2)
         (cdr.64 fv3)
         (f.9 fv0)
         (cons.76 fv4)
         (l.10 fv5)
         (map.5 fv6)
         (tmp.186 fv1))))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! tmp.187 rax)
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((new-frames ())
       (locals (cdr.64 l.10 tmp.137 tmp.138 tmp.181 tmp.182))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 ra.499 rbp)
         (rsi rdx rcx r8 r9 tmp.180 ra.499 rbp)
         (rdx rcx r8 r9 cdr.64 tmp.180 ra.499 rbp)
         (rcx r8 r9 cdr.64 f.9 tmp.180 ra.499 rbp)
         (r8 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp)
         (r9 cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         ((rax map.5 f.9 tmp.180 cons.76 ra.499 rbp)
          ((cdr.64 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (map.5 f.9 tmp.181 tmp.180 cons.76 ra.499 rbp)
         ((rax tmp.180 cons.76 ra.499 rbp)
          ((f.9 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.182 tmp.180 cons.76 ra.499 rbp)
         (tmp.180 cons.76 ra.499 rdx rbp)
         (cons.76 ra.499 rsi rdx rbp)
         (ra.499 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (map.5 f.9 tmp.180 cons.76 ra.499))
       (conflicts
        ((ra.499
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           rbp))
         (rbp
          (tmp.182
           rdx
           tmp.181
           r15
           rdi
           rsi
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           ra.499))
         (r9 (l.10 cons.76 f.9 cdr.64 tmp.180 ra.499))
         (r8 (cons.76 f.9 cdr.64 tmp.180 ra.499))
         (rcx (f.9 cdr.64 tmp.180 ra.499))
         (rdx (cons.76 r15 rdi rsi f.9 map.5 rbp cdr.64 tmp.180 ra.499))
         (rsi (cons.76 map.5 rdx r15 rdi cdr.64 rbp tmp.180 ra.499))
         (rdi (rdx r15 rsi rbp ra.499))
         (tmp.180
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           rsi
           rdx
           rcx
           r8
           r9
           ra.499
           rbp))
         (cdr.64
          (rsi
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           rdx
           rcx
           r8
           r9
           tmp.180
           ra.499
           rbp))
         (f.9
          (rdx
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           rcx
           r8
           r9
           cdr.64
           tmp.180
           ra.499
           rbp))
         (cons.76
          (rsi
           rdx
           tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           r8
           r9
           cdr.64
           f.9
           tmp.180
           ra.499
           rbp))
         (l.10
          (tmp.138 tmp.137 map.5 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp))
         (map.5
          (rsi
           rdx
           tmp.181
           rax
           tmp.138
           cdr.64
           l.10
           f.9
           tmp.180
           cons.76
           ra.499
           rbp))
         (tmp.137 (cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.138 (l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (rax (rbp ra.499 cons.76 tmp.180 f.9 map.5))
         (r15 (rdx rdi rsi rbp))
         (tmp.181 (map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.182 (tmp.180 cons.76 ra.499 rbp))))
       (assignment
        ((ra.499 fv0) (cons.76 fv1) (tmp.180 fv2) (f.9 fv3) (map.5 fv4))))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! tmp.181 rax)
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((new-frames ())
       (locals
        (ones.13
         tmp.141
         listofZero.12
         tmp.140
         inc.6
         tmp.177
         tmp.382
         tmp.348
         map.5
         tmp.176
         tmp.381
         tmp.347
         zeros.4
         tmp.175
         tmp.380
         tmp.346
         *.52
         tmp.174
         tmp.379
         tmp.345
         |+.53|
         tmp.173
         tmp.378
         tmp.344
         |-.54|
         tmp.172
         tmp.377
         tmp.343
         <.55
         tmp.171
         tmp.376
         tmp.342
         <=.56
         tmp.170
         tmp.375
         tmp.341
         >.57
         tmp.169
         tmp.374
         tmp.340
         >=.58
         tmp.168
         tmp.373
         tmp.339
         make-vector.59
         tmp.167
         tmp.372
         tmp.338
         vector-length.60
         tmp.166
         tmp.371
         tmp.337
         vector-set!.61
         tmp.165
         tmp.370
         tmp.336
         vector-ref.62
         tmp.164
         tmp.369
         tmp.335
         car.63
         tmp.163
         tmp.368
         tmp.334
         cdr.64
         tmp.162
         tmp.367
         tmp.333
         procedure-arity.65
         tmp.161
         tmp.366
         tmp.332
         fixnum?.66
         tmp.160
         tmp.365
         tmp.331
         boolean?.67
         tmp.159
         tmp.364
         tmp.330
         empty?.68
         tmp.158
         tmp.363
         tmp.329
         void?.69
         tmp.157
         tmp.362
         tmp.328
         ascii-char?.70
         tmp.156
         tmp.361
         tmp.327
         error?.71
         tmp.155
         tmp.360
         tmp.326
         pair?.72
         tmp.154
         tmp.359
         tmp.325
         procedure?.73
         tmp.153
         tmp.358
         tmp.324
         vector?.74
         tmp.152
         tmp.357
         tmp.323
         not.75
         tmp.151
         tmp.356
         tmp.322
         cons.76
         tmp.150
         tmp.355
         tmp.321
         eq?.77
         tmp.149
         tmp.354
         tmp.320
         make-init-vector.1
         tmp.148
         tmp.353
         tmp.319
         vector-init-loop.80
         tmp.147
         tmp.352
         tmp.318
         unsafe-vector-set!.2
         tmp.146
         tmp.351
         tmp.317
         unsafe-vector-ref.3
         tmp.145
         tmp.350
         tmp.316
         ra.349))
       (undead-out
        ((r12 rbp ra.349)
         (r12 tmp.316 rbp ra.349)
         (tmp.316 r12 rbp ra.349)
         (tmp.350 r12 rbp ra.349)
         (r12 rbp ra.349 tmp.145)
         (ra.349 rbp r12 tmp.145)
         (tmp.145 r12 rbp ra.349)
         (r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.317 rbp ra.349 unsafe-vector-ref.3)
         (tmp.317 r12 rbp ra.349 unsafe-vector-ref.3)
         (tmp.351 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 rbp ra.349 unsafe-vector-ref.3 tmp.146)
         (unsafe-vector-ref.3 ra.349 rbp r12 tmp.146)
         (tmp.146 r12 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 tmp.318 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.318 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (tmp.352 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3 tmp.147)
         (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12 tmp.147)
         (tmp.147 r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.319
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.319
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.353
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.148)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          r12
          tmp.148)
         (tmp.148
          r12
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.320
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.320
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.354
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.149)
         (vector-init-loop.80
          unsafe-vector-ref.3
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.321
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.321
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.355
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.150)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.322
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.322
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.356
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.151)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.357
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.152)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.358
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.153)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.359
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.154)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.360
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.155)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.156)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.157)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.158)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.159)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.160)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.161)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.162)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.163)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80
          tmp.164)
         (vector-init-loop.80
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.165)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.337
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.337
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.371
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.166)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.338
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.338
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.372
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.167)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.339
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.339
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.373
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.168)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.374
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.169)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.375
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.170)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.376
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.171)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.377
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.172)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.173)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          |-.54|
          eq?.77
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.345
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (tmp.379
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80
          tmp.174)
         (vector-init-loop.80
          vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          make-init-vector.1
          tmp.174)
         (tmp.174
          make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (make-init-vector.1
          vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62
          vector-init-loop.80)
         (vector-ref.62
          unsafe-vector-ref.3
          make-vector.59
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61
          vector-init-loop.80
          make-init-vector.1)
         (vector-set!.61
          unsafe-vector-set!.2
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59
          unsafe-vector-ref.3
          vector-ref.62)
         (make-vector.59
          make-init-vector.1
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          unsafe-vector-set!.2
          vector-set!.61)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          make-init-vector.1
          make-vector.59)
         (r12 |-.54| eq?.77 |+.53| ra.349 rbp empty?.68 car.63 cdr.64 cons.76)
         (r12
          tmp.346
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.346
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (tmp.380
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          tmp.175)
         (cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.175)
         (tmp.175
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          tmp.347
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.347
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (tmp.381
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4
          tmp.176)
         (zeros.4
          cons.76
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          r12
          tmp.176)
         (tmp.176
          r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          cons.76
          zeros.4)
         (r12
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (r12
          tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.348
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (tmp.382
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4
          tmp.177)
         (zeros.4
          cons.76
          map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          eq?.77
          |-.54|
          tmp.177)
         (tmp.177
          |-.54|
          eq?.77
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (|-.54|
          eq?.77
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          cons.76
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          |-.54|
          zeros.4)
         (eq?.77
          cons.76
          inc.6
          |+.53|
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5
          zeros.4)
         (map.5
          cdr.64
          car.63
          empty?.68
          rbp
          ra.349
          |+.53|
          inc.6
          cons.76
          eq?.77
          zeros.4)
         (cons.76
          inc.6
          |+.53|
          zeros.4
          ra.349
          rbp
          empty?.68
          car.63
          cdr.64
          map.5)
         (car.63 empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (cons.76 inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 car.63 map.5)
         (empty?.68 rbp ra.349 zeros.4 |+.53| inc.6 cons.76 map.5)
         (inc.6 |+.53| zeros.4 ra.349 rbp empty?.68 map.5)
         (rbp ra.349 map.5 zeros.4 |+.53| inc.6)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         (zeros.4 map.5 inc.6 ra.349 rbp)
         ((rax map.5 inc.6 ra.349 rbp)
          ((zeros.4 rdx rbp)
           (zeros.4 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         (map.5 inc.6 listofZero.12 ra.349 rbp)
         ((rax ra.349 rbp)
          ((inc.6 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (ones.13 ra.349 rbp)
         (ra.349 rax rbp)
         (rax rbp)))
       (call-undead (map.5 inc.6 ra.349))
       (conflicts
        ((ra.349
          (ones.13
           tmp.141
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           tmp.316
           r12
           rbp))
         (rbp
          (ones.13
           tmp.141
           listofZero.12
           r15
           rdi
           rsi
           rdx
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           r12
           tmp.316
           ra.349))
         (r12
          (tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           unsafe-vector-ref.3
           tmp.145
           tmp.350
           rbp
           tmp.316
           ra.349))
         (tmp.316 (r12 rbp ra.349))
         (tmp.350 (ra.349 rbp r12))
         (tmp.145 (r12 rbp ra.349))
         (unsafe-vector-ref.3
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           unsafe-vector-set!.2
           tmp.146
           tmp.351
           tmp.317
           r12
           rbp
           ra.349))
         (tmp.317 (r12 rbp ra.349 unsafe-vector-ref.3))
         (tmp.351 (unsafe-vector-ref.3 ra.349 rbp r12))
         (tmp.146 (r12 rbp ra.349 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           vector-init-loop.80
           tmp.147
           tmp.352
           tmp.318
           r12
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.318 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (tmp.352 (unsafe-vector-ref.3 ra.349 rbp unsafe-vector-set!.2 r12))
         (tmp.147 (r12 unsafe-vector-set!.2 rbp ra.349 unsafe-vector-ref.3))
         (vector-init-loop.80
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           make-init-vector.1
           tmp.148
           tmp.353
           tmp.319
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3))
         (tmp.319
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.353
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.148
          (r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (make-init-vector.1
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           eq?.77
           tmp.149
           tmp.354
           tmp.320
           r12
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.320
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.354
          (vector-init-loop.80
           unsafe-vector-ref.3
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (eq?.77
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           cons.76
           tmp.150
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.321
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.355
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cons.76
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           empty?.68
           tmp.158
           tmp.363
           tmp.329
           void?.69
           tmp.157
           tmp.362
           tmp.328
           ascii-char?.70
           tmp.156
           tmp.361
           tmp.327
           error?.71
           tmp.155
           tmp.360
           tmp.326
           pair?.72
           tmp.154
           tmp.359
           tmp.325
           procedure?.73
           tmp.153
           tmp.358
           tmp.324
           vector?.74
           tmp.152
           tmp.357
           tmp.323
           not.75
           tmp.151
           tmp.356
           tmp.322
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.322
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.356
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (not.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.357
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.358
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.359
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (pair?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.360
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (error?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.361
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (ascii-char?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.362
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (void?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.363
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (empty?.68
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           cdr.64
           tmp.162
           tmp.367
           tmp.333
           procedure-arity.65
           tmp.161
           tmp.366
           tmp.332
           fixnum?.66
           tmp.160
           tmp.365
           tmp.331
           boolean?.67
           tmp.159
           tmp.364
           tmp.330
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.364
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (boolean?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.365
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (fixnum?.66
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.366
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (procedure-arity.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.367
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (cdr.64
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           car.63
           tmp.163
           tmp.368
           tmp.334
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.368
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (car.63
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           vector-ref.62
           tmp.164
           tmp.369
           tmp.335
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.369
          (vector-init-loop.80
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (vector-ref.62
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           vector-set!.61
           tmp.165
           tmp.370
           tmp.336
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-init-loop.80))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.370
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-set!.61
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           make-vector.59
           tmp.167
           tmp.372
           tmp.338
           vector-length.60
           tmp.166
           tmp.371
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.337
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.371
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (vector-length.60
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.338
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.372
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (make-vector.59
          (*.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           |-.54|
           tmp.172
           tmp.377
           tmp.343
           <.55
           tmp.171
           tmp.376
           tmp.342
           <=.56
           tmp.170
           tmp.375
           tmp.341
           >.57
           tmp.169
           tmp.374
           tmp.340
           >=.58
           tmp.168
           tmp.373
           tmp.339
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.339
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.373
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>=.58
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.374
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (>.57
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.375
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<=.56
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.376
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (<.55
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.377
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|-.54|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           |+.53|
           tmp.173
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.378
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           |-.54|
           eq?.77
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (|+.53|
          (inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           zeros.4
           tmp.175
           tmp.380
           tmp.346
           *.52
           tmp.174
           tmp.379
           tmp.345
           r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.379
          (vector-init-loop.80
           vector-ref.62
           unsafe-vector-ref.3
           make-vector.59
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           unsafe-vector-set!.2
           vector-set!.61
           make-init-vector.1))
         (tmp.174
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (*.52
          (make-init-vector.1
           vector-set!.61
           unsafe-vector-set!.2
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12
           make-vector.59
           unsafe-vector-ref.3
           vector-ref.62
           vector-init-loop.80))
         (tmp.346
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.380
          (cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.175
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (zeros.4
          (rsi
           rdx
           inc.6
           tmp.177
           tmp.382
           tmp.348
           map.5
           tmp.176
           tmp.381
           tmp.347
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76))
         (tmp.347
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.381
          (zeros.4
           cons.76
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|
           r12))
         (tmp.176
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (map.5
          (rsi
           rdx
           listofZero.12
           rax
           tmp.140
           inc.6
           tmp.177
           tmp.382
           tmp.348
           r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           cons.76
           zeros.4))
         (tmp.348
          (r12
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.382
          (zeros.4
           cons.76
           map.5
           cdr.64
           car.63
           empty?.68
           rbp
           ra.349
           |+.53|
           eq?.77
           |-.54|))
         (tmp.177
          (|-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (inc.6
          (rdx
           tmp.141
           listofZero.12
           rax
           tmp.140
           |-.54|
           eq?.77
           |+.53|
           ra.349
           rbp
           empty?.68
           car.63
           cdr.64
           map.5
           cons.76
           zeros.4))
         (tmp.140 (map.5 inc.6 ra.349 rbp))
         (rax (rbp ra.349 inc.6 map.5))
         (rdx (inc.6 map.5 r15 rdi rsi zeros.4 rbp))
         (rsi (map.5 r15 rdi zeros.4 rdx rbp))
         (rdi (r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (listofZero.12 (tmp.141 map.5 inc.6 ra.349 rbp))
         (tmp.141 (inc.6 listofZero.12 ra.349 rbp))
         (ones.13 (ra.349 rbp)))))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((new-frames ())
       (locals (tmp.139 |+.53| x.11 c.124 ra.383))
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi c.124 ra.383 rbp)
         (c.124 x.11 ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rbp)
         (x.11 |+.53| ra.383 rdx rbp)
         (|+.53| ra.383 rsi rdx rbp)
         (ra.383 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.383 (rdx tmp.139 |+.53| x.11 c.124 rdi rsi rbp))
         (rbp (r15 rdi rsi rdx tmp.139 |+.53| x.11 c.124 ra.383))
         (rsi (r15 rdi |+.53| rdx rbp c.124 ra.383))
         (rdi (r15 rsi rdx rbp ra.383))
         (c.124 (x.11 rsi ra.383 rbp))
         (x.11 (rdx tmp.139 |+.53| c.124 ra.383 rbp))
         (|+.53| (rsi rdx rbp ra.383 x.11))
         (tmp.139 (x.11 ra.383 rbp))
         (rdx (r15 rdi rsi x.11 |+.53| ra.383 rbp))
         (r15 (rdi rsi rdx rbp)))))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((new-frames ())
       (locals
        (tmp.134
         empty?.68
         c.123
         tmp.179
         car.63
         f.9
         map.5
         cons.76
         cdr.64
         tmp.142
         ra.384
         tmp.190
         tmp.135
         tmp.385
         l.10))
       (undead-out
        ((rdi rsi rdx ra.384 rbp)
         (rsi rdx c.123 ra.384 rbp)
         (rdx c.123 f.9 ra.384 rbp)
         (c.123 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 l.10 ra.384 rbp)
         (c.123 cdr.64 map.5 f.9 car.63 l.10 ra.384 rbp)
         (c.123 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         (empty?.68 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((rax cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((empty?.68 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.179 cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
         ((cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)
          ((ra.384 rax rbp) (rax rbp))
          ((car.63 f.9 map.5 cons.76 cdr.64 l.10 ra.384 rbp)
           (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.385 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           (tmp.190 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.384 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.384 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))))))
       (call-undead (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384))
       (conflicts
        ((fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           rbp))
         (rbp
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           ra.384
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (ra.384
          (tmp.179
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           f.9
           c.123
           rbp
           rax
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (tmp.142
          (tmp.190
           tmp.385
           car.63
           map.5
           cons.76
           cdr.64
           l.10
           ra.384
           rbp
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (l.10
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           c.123
           f.9
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           rcx
           r8
           r9
           fv0
           fv1))
         (cdr.64
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           rbp
           ra.384
           l.10
           f.9
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           r8
           r9
           fv0
           fv1))
         (cons.76
          (tmp.179
           rax
           tmp.134
           empty?.68
           rbp
           ra.384
           l.10
           car.63
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           r9
           fv0
           fv1))
         (map.5
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           rbp
           ra.384
           l.10
           f.9
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135
           fv0
           fv1))
         (f.9
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           car.63
           map.5
           cdr.64
           l.10
           rdx
           c.123
           ra.384
           rbp
           tmp.190
           tmp.385
           tmp.135
           fv1))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           rbp))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.384
           fv1
           fv0
           rbp))
         (r8 (r15 rdi rsi rdx rcx cdr.64 l.10 tmp.142 ra.384 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx l.10 tmp.142 ra.384 r8 r9 fv1 fv0 rbp))
         (rdx (f.9 c.123 r15 rdi rsi tmp.142 ra.384 rcx r8 r9 fv1 fv0 rbp))
         (rsi (empty?.68 c.123 r15 rdi ra.384 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.384 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (tmp.135 (car.63 f.9 map.5 cdr.64 l.10 ra.384 rbp))
         (car.63
          (tmp.179
           rax
           tmp.134
           empty?.68
           cons.76
           rbp
           ra.384
           l.10
           f.9
           map.5
           cdr.64
           c.123
           tmp.190
           tmp.385
           tmp.142
           tmp.135))
         (tmp.385 (rbp ra.384 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (tmp.190 (car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.384 rbp))
         (rax (l.10 car.63 f.9 map.5 cons.76 cdr.64 ra.384 rbp))
         (c.123 (cons.76 car.63 map.5 cdr.64 l.10 f.9 rsi rdx ra.384 rbp))
         (empty?.68 (rsi rbp ra.384 l.10 car.63 f.9 map.5 cons.76 cdr.64))
         (tmp.134 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp))
         (tmp.179 (cdr.64 cons.76 map.5 f.9 car.63 l.10 ra.384 rbp)))))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((new-frames ())
       (locals
        (tmp.130
         eq?.77
         c.122
         tmp.192
         zeros.4
         tmp.131
         |-.54|
         tmp.132
         n.7
         tmp.193
         cons.76
         tmp.133
         tmp.194
         ra.386
         l.8))
       (undead-out
        ((rdi rsi rdx ra.386 rbp)
         (rsi rdx c.122 ra.386 rbp)
         (rdx c.122 n.7 ra.386 rbp)
         (c.122 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 l.8 ra.386 rbp)
         (c.122 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (c.122 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         (eq?.77 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((rax zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((n.7 eq?.77 rdx rbp)
           (eq?.77 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.192 zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
         ((zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)
          ((ra.386 rax rbp) (rax rbp))
          ((|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           (|-.54| n.7 cons.76 l.8 zeros.4 ra.386 rbp)
           ((rax cons.76 l.8 zeros.4 ra.386 rbp)
            ((n.7 |-.54| rdx rbp)
             (|-.54| rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           (cons.76 l.8 tmp.193 zeros.4 ra.386 rbp)
           ((rax tmp.193 zeros.4 ra.386 rbp)
            ((cons.76 rdx rbp)
             (cons.76 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.194 tmp.193 zeros.4 ra.386 rbp)
           (tmp.193 zeros.4 ra.386 rdx rbp)
           (zeros.4 ra.386 rsi rdx rbp)
           (ra.386 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead (tmp.193 zeros.4 cons.76 n.7 |-.54| l.8 ra.386))
       (conflicts
        ((tmp.131 (|-.54| n.7 cons.76 l.8 ra.386 rbp))
         (rbp
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           ra.386
           tmp.194
           tmp.133
           tmp.193
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           tmp.131))
         (ra.386
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           n.7
           c.122
           rbp
           rdi
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (l.8
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           c.122
           n.7
           ra.386
           rbp
           tmp.133
           tmp.193
           rax
           tmp.132
           tmp.131))
         (cons.76
          (tmp.192
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           rbp
           ra.386
           l.8
           n.7
           c.122
           rsi
           rdx
           tmp.193
           rax
           tmp.132
           tmp.131))
         (n.7
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           |-.54|
           cons.76
           l.8
           c.122
           ra.386
           rbp
           rdx
           tmp.132
           tmp.131))
         (|-.54|
          (tmp.192
           rax
           tmp.130
           eq?.77
           zeros.4
           rbp
           ra.386
           l.8
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.131))
         (tmp.132 (n.7 cons.76 l.8 zeros.4 ra.386 rbp))
         (zeros.4
          (tmp.192
           tmp.130
           eq?.77
           rbp
           ra.386
           l.8
           |-.54|
           n.7
           cons.76
           c.122
           rsi
           rdx
           tmp.194
           tmp.133
           tmp.193
           rax
           tmp.132))
         (rax (|-.54| n.7 tmp.193 rbp ra.386 zeros.4 l.8 cons.76))
         (rdx
          (eq?.77
           c.122
           tmp.193
           zeros.4
           ra.386
           cons.76
           r15
           rdi
           rsi
           n.7
           |-.54|
           rbp))
         (rsi (eq?.77 c.122 zeros.4 ra.386 cons.76 r15 rdi |-.54| rdx rbp))
         (rdi (ra.386 r15 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.193 (rdx tmp.194 rax tmp.133 cons.76 l.8 zeros.4 ra.386 rbp))
         (tmp.133 (l.8 tmp.193 zeros.4 ra.386 rbp))
         (tmp.194 (tmp.193 zeros.4 ra.386 rbp))
         (c.122 (zeros.4 |-.54| cons.76 l.8 n.7 rsi rdx ra.386 rbp))
         (eq?.77 (rsi rdx rbp ra.386 l.8 |-.54| n.7 cons.76 zeros.4))
         (tmp.130 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp))
         (tmp.192 (zeros.4 cons.76 n.7 |-.54| l.8 ra.386 rbp)))))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((new-frames ())
       (locals (tmp.388 c.121 tmp.201 ra.387 tmp.14 tmp.15))
       (undead-out
        ((rdi rsi rdx ra.387 rbp)
         (rsi rdx ra.387 rbp)
         (rdx tmp.14 ra.387 rbp)
         (tmp.15 tmp.14 ra.387 rbp)
         (tmp.388 tmp.15 tmp.14 ra.387 rbp)
         (tmp.201 tmp.15 tmp.14 ra.387 rbp)
         ((tmp.15 tmp.14 ra.387 rbp)
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.387 rdx rbp)
           (ra.387 rsi rdx rbp)
           (ra.387 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.14 ra.387 rbp))
         (rbp (tmp.201 tmp.388 tmp.15 tmp.14 c.121 ra.387 r15 rdi rsi rdx))
         (ra.387 (tmp.201 tmp.388 tmp.15 tmp.14 c.121 rbp rdi rsi rdx))
         (tmp.14 (tmp.201 tmp.388 tmp.15 ra.387 rbp rdx))
         (rsi (c.121 r15 rdi ra.387 rdx rbp))
         (rdi (r15 ra.387 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.387 rbp))
         (tmp.15 (tmp.201 tmp.388 tmp.14 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.14 tmp.15))
         (tmp.201 (tmp.15 tmp.14 ra.387 rbp)))))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((new-frames ())
       (locals (tmp.390 c.120 tmp.207 ra.389 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.389 rbp)
         (rsi rdx ra.389 rbp)
         (rdx tmp.16 ra.389 rbp)
         (tmp.17 tmp.16 ra.389 rbp)
         (tmp.390 tmp.17 tmp.16 ra.389 rbp)
         (tmp.207 tmp.17 tmp.16 ra.389 rbp)
         ((tmp.17 tmp.16 ra.389 rbp)
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.389 rdx rbp)
           (ra.389 rsi rdx rbp)
           (ra.389 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.16 ra.389 rbp))
         (rbp (tmp.207 tmp.390 tmp.17 tmp.16 c.120 ra.389 r15 rdi rsi rdx))
         (ra.389 (tmp.207 tmp.390 tmp.17 tmp.16 c.120 rbp rdi rsi rdx))
         (tmp.16 (tmp.207 tmp.390 tmp.17 ra.389 rbp rdx))
         (rsi (c.120 r15 rdi ra.389 rdx rbp))
         (rdi (r15 ra.389 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.389 rbp))
         (tmp.17 (tmp.207 tmp.390 tmp.16 ra.389 rbp))
         (tmp.390 (rbp ra.389 tmp.16 tmp.17))
         (tmp.207 (tmp.17 tmp.16 ra.389 rbp)))))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((new-frames ())
       (locals (tmp.392 c.119 tmp.213 ra.391 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.391 rbp)
         (rsi rdx ra.391 rbp)
         (rdx tmp.18 ra.391 rbp)
         (tmp.19 tmp.18 ra.391 rbp)
         (tmp.392 tmp.19 tmp.18 ra.391 rbp)
         (tmp.213 tmp.19 tmp.18 ra.391 rbp)
         ((tmp.19 tmp.18 ra.391 rbp)
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.391 rdx rbp)
           (ra.391 rsi rdx rbp)
           (ra.391 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.18 ra.391 rbp))
         (rbp (tmp.213 tmp.392 tmp.19 tmp.18 c.119 ra.391 r15 rdi rsi rdx))
         (ra.391 (tmp.213 tmp.392 tmp.19 tmp.18 c.119 rbp rdi rsi rdx))
         (tmp.18 (tmp.213 tmp.392 tmp.19 ra.391 rbp rdx))
         (rsi (c.119 r15 rdi ra.391 rdx rbp))
         (rdi (r15 ra.391 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.391 rbp))
         (tmp.19 (tmp.213 tmp.392 tmp.18 ra.391 rbp))
         (tmp.392 (rbp ra.391 tmp.18 tmp.19))
         (tmp.213 (tmp.19 tmp.18 ra.391 rbp)))))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((new-frames ())
       (locals (tmp.394 c.118 tmp.220 ra.393 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.393 rbp)
         (rsi rdx ra.393 rbp)
         (rdx tmp.20 ra.393 rbp)
         (tmp.21 tmp.20 ra.393 rbp)
         (tmp.394 tmp.21 tmp.20 ra.393 rbp)
         (tmp.220 tmp.21 tmp.20 ra.393 rbp)
         ((tmp.21 tmp.20 ra.393 rbp)
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.393 rdx rbp)
           (ra.393 rsi rdx rbp)
           (ra.393 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.20 ra.393 rbp))
         (rbp (tmp.220 tmp.394 tmp.21 tmp.20 c.118 ra.393 r15 rdi rsi rdx))
         (ra.393 (tmp.220 tmp.394 tmp.21 tmp.20 c.118 rbp rdi rsi rdx))
         (tmp.20 (tmp.220 tmp.394 tmp.21 ra.393 rbp rdx))
         (rsi (c.118 r15 rdi ra.393 rdx rbp))
         (rdi (r15 ra.393 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.393 rbp))
         (tmp.21 (tmp.220 tmp.394 tmp.20 ra.393 rbp))
         (tmp.394 (rbp ra.393 tmp.20 tmp.21))
         (tmp.220 (tmp.21 tmp.20 ra.393 rbp)))))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((new-frames ())
       (locals (tmp.396 c.117 tmp.227 ra.395 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx ra.395 rbp)
         (rdx tmp.22 ra.395 rbp)
         (tmp.23 tmp.22 ra.395 rbp)
         (tmp.396 tmp.23 tmp.22 ra.395 rbp)
         (tmp.227 tmp.23 tmp.22 ra.395 rbp)
         ((tmp.23 tmp.22 ra.395 rbp)
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.395 rdx rbp)
           (ra.395 rsi rdx rbp)
           (ra.395 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.22 ra.395 rbp))
         (rbp (tmp.227 tmp.396 tmp.23 tmp.22 c.117 ra.395 r15 rdi rsi rdx))
         (ra.395 (tmp.227 tmp.396 tmp.23 tmp.22 c.117 rbp rdi rsi rdx))
         (tmp.22 (tmp.227 tmp.396 tmp.23 ra.395 rbp rdx))
         (rsi (c.117 r15 rdi ra.395 rdx rbp))
         (rdi (r15 ra.395 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.395 rbp))
         (tmp.23 (tmp.227 tmp.396 tmp.22 ra.395 rbp))
         (tmp.396 (rbp ra.395 tmp.22 tmp.23))
         (tmp.227 (tmp.23 tmp.22 ra.395 rbp)))))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((new-frames ())
       (locals (tmp.398 c.116 tmp.234 ra.397 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.397 rbp)
         (rsi rdx ra.397 rbp)
         (rdx tmp.24 ra.397 rbp)
         (tmp.25 tmp.24 ra.397 rbp)
         (tmp.398 tmp.25 tmp.24 ra.397 rbp)
         (tmp.234 tmp.25 tmp.24 ra.397 rbp)
         ((tmp.25 tmp.24 ra.397 rbp)
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.397 rdx rbp)
           (ra.397 rsi rdx rbp)
           (ra.397 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.24 ra.397 rbp))
         (rbp (tmp.234 tmp.398 tmp.25 tmp.24 c.116 ra.397 r15 rdi rsi rdx))
         (ra.397 (tmp.234 tmp.398 tmp.25 tmp.24 c.116 rbp rdi rsi rdx))
         (tmp.24 (tmp.234 tmp.398 tmp.25 ra.397 rbp rdx))
         (rsi (c.116 r15 rdi ra.397 rdx rbp))
         (rdi (r15 ra.397 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.397 rbp))
         (tmp.25 (tmp.234 tmp.398 tmp.24 ra.397 rbp))
         (tmp.398 (rbp ra.397 tmp.24 tmp.25))
         (tmp.234 (tmp.25 tmp.24 ra.397 rbp)))))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((new-frames ())
       (locals (tmp.400 c.115 tmp.241 ra.399 tmp.26 tmp.27))
       (undead-out
        ((rdi rsi rdx ra.399 rbp)
         (rsi rdx ra.399 rbp)
         (rdx tmp.26 ra.399 rbp)
         (tmp.27 tmp.26 ra.399 rbp)
         (tmp.400 tmp.27 tmp.26 ra.399 rbp)
         (tmp.241 tmp.27 tmp.26 ra.399 rbp)
         ((tmp.27 tmp.26 ra.399 rbp)
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.399 rdx rbp)
           (ra.399 rsi rdx rbp)
           (ra.399 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.26 ra.399 rbp))
         (rbp (tmp.241 tmp.400 tmp.27 tmp.26 c.115 ra.399 r15 rdi rsi rdx))
         (ra.399 (tmp.241 tmp.400 tmp.27 tmp.26 c.115 rbp rdi rsi rdx))
         (tmp.26 (tmp.241 tmp.400 tmp.27 ra.399 rbp rdx))
         (rsi (c.115 r15 rdi ra.399 rdx rbp))
         (rdi (r15 ra.399 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.399 rbp))
         (tmp.27 (tmp.241 tmp.400 tmp.26 ra.399 rbp))
         (tmp.400 (rbp ra.399 tmp.26 tmp.27))
         (tmp.241 (tmp.27 tmp.26 ra.399 rbp)))))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((new-frames ())
       (locals (tmp.402 c.114 tmp.244 ra.401 make-init-vector.1 tmp.28))
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi c.114 ra.401 rbp)
         (c.114 tmp.28 ra.401 rbp)
         (tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.402 tmp.28 make-init-vector.1 ra.401 rbp)
         (tmp.244 tmp.28 make-init-vector.1 ra.401 rbp)
         ((tmp.28 make-init-vector.1 ra.401 rbp)
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.401 rdx rbp)
           (ra.401 rsi rdx rbp)
           (ra.401 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.401 rbp))
         (rbp
          (tmp.244
           tmp.402
           make-init-vector.1
           tmp.28
           c.114
           ra.401
           r15
           rdi
           rsi
           rdx))
         (ra.401
          (tmp.244 tmp.402 make-init-vector.1 tmp.28 c.114 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.244 tmp.402 rbp ra.401 tmp.28 rdx))
         (rsi (c.114 r15 rdi ra.401 rdx rbp))
         (rdi (r15 ra.401 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (tmp.28 rsi ra.401 rbp))
         (tmp.28 (tmp.244 tmp.402 make-init-vector.1 c.114 ra.401 rbp))
         (tmp.402 (rbp ra.401 make-init-vector.1 tmp.28))
         (tmp.244 (tmp.28 make-init-vector.1 ra.401 rbp)))))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((new-frames ())
       (locals (tmp.404 c.113 tmp.247 ra.403 tmp.29))
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.29 ra.403 rbp)
         (tmp.404 tmp.29 ra.403 rbp)
         (tmp.247 tmp.29 ra.403 rbp)
         ((tmp.29 ra.403 rbp)
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.403 rsi rbp)
           (ra.403 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.113 r15 rdi ra.403 rbp))
         (rbp (tmp.247 tmp.404 tmp.29 c.113 ra.403 r15 rdi rsi))
         (ra.403 (tmp.247 tmp.404 tmp.29 c.113 rbp rdi rsi))
         (rdi (r15 ra.403 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.403 rbp))
         (tmp.29 (tmp.247 tmp.404 ra.403 rbp))
         (tmp.404 (rbp ra.403 tmp.29))
         (tmp.247 (tmp.29 ra.403 rbp)))))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((new-frames ())
       (locals
        (tmp.406
         c.112
         tmp.253
         ra.405
         tmp.30
         unsafe-vector-set!.2
         tmp.32
         tmp.31))
       (undead-out
        ((rdi rsi rdx rcx ra.405 rbp)
         (rsi rdx rcx c.112 ra.405 rbp)
         (rdx rcx c.112 tmp.30 ra.405 rbp)
         (rcx c.112 tmp.31 tmp.30 ra.405 rbp)
         (c.112 tmp.31 tmp.32 tmp.30 ra.405 rbp)
         (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.406 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         (tmp.253 tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
         ((tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 r8 rbp)
           (unsafe-vector-set!.2 tmp.30 ra.405 rcx r8 rbp)
           (tmp.30 ra.405 rdx rcx r8 rbp)
           (ra.405 rsi rdx rcx r8 rbp)
           (ra.405 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp))
         (rbp
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           ra.405
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.405
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           tmp.30
           c.112
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.30
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           tmp.31
           c.112
           ra.405
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.253 tmp.406 rbp ra.405 tmp.30 tmp.32 tmp.31 rcx r8))
         (tmp.32
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           c.112
           tmp.31
           tmp.30
           ra.405
           rbp
           r8))
         (rcx
          (tmp.31
           c.112
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.30
           ra.405
           r8
           rbp))
         (rdx (c.112 r15 rdi rsi tmp.30 ra.405 rcx r8 rbp))
         (rsi (c.112 r15 rdi ra.405 rdx rcx r8 rbp))
         (rdi (r15 ra.405 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.112 (tmp.32 tmp.31 tmp.30 rsi rdx rcx ra.405 rbp))
         (tmp.31
          (tmp.253
           tmp.406
           unsafe-vector-set!.2
           tmp.32
           rcx
           c.112
           tmp.30
           ra.405
           rbp))
         (tmp.406 (rbp ra.405 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31))
         (tmp.253 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.30 ra.405 rbp)))))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((new-frames ())
       (locals
        (tmp.408 c.111 tmp.259 ra.407 tmp.33 unsafe-vector-ref.3 tmp.34))
       (undead-out
        ((rdi rsi rdx ra.407 rbp)
         (rsi rdx c.111 ra.407 rbp)
         (rdx c.111 tmp.33 ra.407 rbp)
         (c.111 tmp.34 tmp.33 ra.407 rbp)
         (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.408 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         (tmp.259 tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
         ((tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.33 ra.407 rcx rbp)
           (tmp.33 ra.407 rdx rcx rbp)
           (ra.407 rsi rdx rcx rbp)
           (ra.407 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.33 ra.407 rbp))
         (rbp
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           ra.407
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.407
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           tmp.33
           c.111
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.33
          (tmp.259
           tmp.408
           unsafe-vector-ref.3
           tmp.34
           c.111
           ra.407
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.259 tmp.408 rbp ra.407 tmp.33 tmp.34 rcx))
         (rdx (c.111 r15 rdi rsi tmp.33 ra.407 rcx rbp))
         (rsi (c.111 r15 rdi ra.407 rdx rcx rbp))
         (rdi (r15 ra.407 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.111 (tmp.34 tmp.33 rsi rdx ra.407 rbp))
         (tmp.34 (tmp.259 tmp.408 unsafe-vector-ref.3 c.111 tmp.33 ra.407 rbp))
         (tmp.408 (rbp ra.407 tmp.33 unsafe-vector-ref.3 tmp.34))
         (tmp.259 (tmp.34 unsafe-vector-ref.3 tmp.33 ra.407 rbp)))))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((new-frames ())
       (locals (tmp.410 c.110 tmp.262 ra.409 tmp.35))
       (undead-out
        ((rdi rsi ra.409 rbp)
         (rsi ra.409 rbp)
         (tmp.35 ra.409 rbp)
         (tmp.410 tmp.35 ra.409 rbp)
         (tmp.262 tmp.35 ra.409 rbp)
         ((tmp.35 ra.409 rbp)
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.409 rsi rbp)
           (ra.409 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.110 r15 rdi ra.409 rbp))
         (rbp (tmp.262 tmp.410 tmp.35 c.110 ra.409 r15 rdi rsi))
         (ra.409 (tmp.262 tmp.410 tmp.35 c.110 rbp rdi rsi))
         (rdi (r15 ra.409 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.110 (rsi ra.409 rbp))
         (tmp.35 (tmp.262 tmp.410 ra.409 rbp))
         (tmp.410 (rbp ra.409 tmp.35))
         (tmp.262 (tmp.35 ra.409 rbp)))))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((new-frames ())
       (locals (tmp.412 c.109 tmp.265 ra.411 tmp.36))
       (undead-out
        ((rdi rsi ra.411 rbp)
         (rsi ra.411 rbp)
         (tmp.36 ra.411 rbp)
         (tmp.412 tmp.36 ra.411 rbp)
         (tmp.265 tmp.36 ra.411 rbp)
         ((tmp.36 ra.411 rbp)
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.411 rsi rbp)
           (ra.411 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.109 r15 rdi ra.411 rbp))
         (rbp (tmp.265 tmp.412 tmp.36 c.109 ra.411 r15 rdi rsi))
         (ra.411 (tmp.265 tmp.412 tmp.36 c.109 rbp rdi rsi))
         (rdi (r15 ra.411 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.109 (rsi ra.411 rbp))
         (tmp.36 (tmp.265 tmp.412 ra.411 rbp))
         (tmp.412 (rbp ra.411 tmp.36))
         (tmp.265 (tmp.36 ra.411 rbp)))))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((new-frames ())
       (locals (tmp.414 c.108 tmp.268 ra.413 tmp.37))
       (undead-out
        ((rdi rsi ra.413 rbp)
         (rsi ra.413 rbp)
         (tmp.37 ra.413 rbp)
         (tmp.414 tmp.37 ra.413 rbp)
         (tmp.268 tmp.37 ra.413 rbp)
         ((tmp.37 ra.413 rbp)
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.413 rsi rbp)
           (ra.413 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.108 r15 rdi ra.413 rbp))
         (rbp (tmp.268 tmp.414 tmp.37 c.108 ra.413 r15 rdi rsi))
         (ra.413 (tmp.268 tmp.414 tmp.37 c.108 rbp rdi rsi))
         (rdi (r15 ra.413 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.413 rbp))
         (tmp.37 (tmp.268 tmp.414 ra.413 rbp))
         (tmp.414 (rbp ra.413 tmp.37))
         (tmp.268 (tmp.37 ra.413 rbp)))))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((new-frames ())
       (locals (tmp.416 tmp.38 c.107 ra.415 tmp.270))
       (undead-out
        ((rdi rsi ra.415 rbp)
         (rsi ra.415 rbp)
         (tmp.38 ra.415 rbp)
         (tmp.416 ra.415 rbp)
         (tmp.270 ra.415 rbp)
         ((ra.415 rbp)
          ((ra.415 rax rbp) (rax rbp))
          ((ra.415 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.415 rbp))
         (rbp (tmp.270 tmp.416 tmp.38 c.107 ra.415 rax))
         (ra.415 (tmp.270 tmp.416 tmp.38 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.415))
         (rdi (ra.415))
         (c.107 (rsi ra.415 rbp))
         (tmp.38 (ra.415 rbp))
         (tmp.416 (rbp ra.415))
         (tmp.270 (ra.415 rbp)))))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((new-frames ())
       (locals (tmp.418 tmp.39 c.106 ra.417 tmp.272))
       (undead-out
        ((rdi rsi ra.417 rbp)
         (rsi ra.417 rbp)
         (tmp.39 ra.417 rbp)
         (tmp.418 ra.417 rbp)
         (tmp.272 ra.417 rbp)
         ((ra.417 rbp)
          ((ra.417 rax rbp) (rax rbp))
          ((ra.417 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.417 rbp))
         (rbp (tmp.272 tmp.418 tmp.39 c.106 ra.417 rax))
         (ra.417 (tmp.272 tmp.418 tmp.39 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.417))
         (rdi (ra.417))
         (c.106 (rsi ra.417 rbp))
         (tmp.39 (ra.417 rbp))
         (tmp.418 (rbp ra.417))
         (tmp.272 (ra.417 rbp)))))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((new-frames ())
       (locals (tmp.420 tmp.40 c.105 ra.419 tmp.274))
       (undead-out
        ((rdi rsi ra.419 rbp)
         (rsi ra.419 rbp)
         (tmp.40 ra.419 rbp)
         (tmp.420 ra.419 rbp)
         (tmp.274 ra.419 rbp)
         ((ra.419 rbp)
          ((ra.419 rax rbp) (rax rbp))
          ((ra.419 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.419 rbp))
         (rbp (tmp.274 tmp.420 tmp.40 c.105 ra.419 rax))
         (ra.419 (tmp.274 tmp.420 tmp.40 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.419))
         (rdi (ra.419))
         (c.105 (rsi ra.419 rbp))
         (tmp.40 (ra.419 rbp))
         (tmp.420 (rbp ra.419))
         (tmp.274 (ra.419 rbp)))))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((new-frames ())
       (locals (tmp.422 tmp.41 c.104 ra.421 tmp.276))
       (undead-out
        ((rdi rsi ra.421 rbp)
         (rsi ra.421 rbp)
         (tmp.41 ra.421 rbp)
         (tmp.422 ra.421 rbp)
         (tmp.276 ra.421 rbp)
         ((ra.421 rbp)
          ((ra.421 rax rbp) (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.421 rbp))
         (rbp (tmp.276 tmp.422 tmp.41 c.104 ra.421 rax))
         (ra.421 (tmp.276 tmp.422 tmp.41 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.421))
         (rdi (ra.421))
         (c.104 (rsi ra.421 rbp))
         (tmp.41 (ra.421 rbp))
         (tmp.422 (rbp ra.421))
         (tmp.276 (ra.421 rbp)))))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((new-frames ())
       (locals (tmp.424 tmp.42 c.103 ra.423 tmp.278))
       (undead-out
        ((rdi rsi ra.423 rbp)
         (rsi ra.423 rbp)
         (tmp.42 ra.423 rbp)
         (tmp.424 ra.423 rbp)
         (tmp.278 ra.423 rbp)
         ((ra.423 rbp)
          ((ra.423 rax rbp) (rax rbp))
          ((ra.423 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.423 rbp))
         (rbp (tmp.278 tmp.424 tmp.42 c.103 ra.423 rax))
         (ra.423 (tmp.278 tmp.424 tmp.42 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.423))
         (rdi (ra.423))
         (c.103 (rsi ra.423 rbp))
         (tmp.42 (ra.423 rbp))
         (tmp.424 (rbp ra.423))
         (tmp.278 (ra.423 rbp)))))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((new-frames ())
       (locals (tmp.426 tmp.43 c.102 ra.425 tmp.280))
       (undead-out
        ((rdi rsi ra.425 rbp)
         (rsi ra.425 rbp)
         (tmp.43 ra.425 rbp)
         (tmp.426 ra.425 rbp)
         (tmp.280 ra.425 rbp)
         ((ra.425 rbp)
          ((ra.425 rax rbp) (rax rbp))
          ((ra.425 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.280 tmp.426 tmp.43 c.102 ra.425 rax))
         (ra.425 (tmp.280 tmp.426 tmp.43 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.425))
         (rdi (ra.425))
         (c.102 (rsi ra.425 rbp))
         (tmp.43 (ra.425 rbp))
         (tmp.426 (rbp ra.425))
         (tmp.280 (ra.425 rbp)))))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((new-frames ())
       (locals (tmp.428 tmp.44 c.101 ra.427 tmp.282))
       (undead-out
        ((rdi rsi ra.427 rbp)
         (rsi ra.427 rbp)
         (tmp.44 ra.427 rbp)
         (tmp.428 ra.427 rbp)
         (tmp.282 ra.427 rbp)
         ((ra.427 rbp)
          ((ra.427 rax rbp) (rax rbp))
          ((ra.427 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.427 rbp))
         (rbp (tmp.282 tmp.428 tmp.44 c.101 ra.427 rax))
         (ra.427 (tmp.282 tmp.428 tmp.44 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.427))
         (rdi (ra.427))
         (c.101 (rsi ra.427 rbp))
         (tmp.44 (ra.427 rbp))
         (tmp.428 (rbp ra.427))
         (tmp.282 (ra.427 rbp)))))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((new-frames ())
       (locals (tmp.430 tmp.45 c.100 ra.429 tmp.284))
       (undead-out
        ((rdi rsi ra.429 rbp)
         (rsi ra.429 rbp)
         (tmp.45 ra.429 rbp)
         (tmp.430 ra.429 rbp)
         (tmp.284 ra.429 rbp)
         ((ra.429 rbp)
          ((ra.429 rax rbp) (rax rbp))
          ((ra.429 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.429 rbp))
         (rbp (tmp.284 tmp.430 tmp.45 c.100 ra.429 rax))
         (ra.429 (tmp.284 tmp.430 tmp.45 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.429))
         (rdi (ra.429))
         (c.100 (rsi ra.429 rbp))
         (tmp.45 (ra.429 rbp))
         (tmp.430 (rbp ra.429))
         (tmp.284 (ra.429 rbp)))))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((new-frames ())
       (locals (tmp.432 tmp.46 c.99 ra.431 tmp.286))
       (undead-out
        ((rdi rsi ra.431 rbp)
         (rsi ra.431 rbp)
         (tmp.46 ra.431 rbp)
         (tmp.432 ra.431 rbp)
         (tmp.286 ra.431 rbp)
         ((ra.431 rbp)
          ((ra.431 rax rbp) (rax rbp))
          ((ra.431 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.431 rbp))
         (rbp (tmp.286 tmp.432 tmp.46 c.99 ra.431 rax))
         (ra.431 (tmp.286 tmp.432 tmp.46 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.431))
         (rdi (ra.431))
         (c.99 (rsi ra.431 rbp))
         (tmp.46 (ra.431 rbp))
         (tmp.432 (rbp ra.431))
         (tmp.286 (ra.431 rbp)))))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((new-frames ())
       (locals (c.98 ra.433 tmp.47))
       (undead-out
        ((rdi rsi ra.433 rbp)
         (rsi ra.433 rbp)
         (tmp.47 ra.433 rbp)
         ((ra.433 rbp)
          ((ra.433 rax rbp) (rax rbp))
          ((ra.433 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.433 rbp))
         (rbp (tmp.47 c.98 ra.433 rax))
         (ra.433 (tmp.47 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.433))
         (rdi (ra.433))
         (c.98 (rsi ra.433 rbp))
         (tmp.47 (ra.433 rbp)))))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((new-frames ())
       (locals (tmp.143 tmp.435 tmp.288 tmp.49 tmp.48 c.97 ra.434))
       (undead-out
        ((rdi rsi rdx r12 ra.434 rbp)
         (rsi rdx r12 ra.434 rbp)
         (rdx r12 ra.434 rbp tmp.48)
         (r12 tmp.49 ra.434 rbp tmp.48)
         (r12 tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.288 tmp.49 ra.434 rbp tmp.48)
         (tmp.435 tmp.49 ra.434 rbp tmp.48)
         (tmp.49 ra.434 rbp tmp.48 tmp.143)
         (rbp ra.434 tmp.49 tmp.143)
         (tmp.143 ra.434 rbp)
         (ra.434 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.434
          (rax tmp.143 tmp.435 tmp.288 tmp.49 tmp.48 c.97 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.143 tmp.435 r12 tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (r12 (rbp tmp.288 tmp.49 tmp.48 c.97 ra.434))
         (rdx (tmp.48 c.97 ra.434))
         (rsi (c.97 ra.434))
         (rdi (ra.434))
         (c.97 (rsi rdx r12 ra.434 rbp))
         (tmp.48 (tmp.143 tmp.435 tmp.288 tmp.49 rdx r12 ra.434 rbp))
         (tmp.49 (tmp.143 tmp.435 tmp.288 r12 ra.434 rbp tmp.48))
         (tmp.288 (r12 tmp.49 ra.434 rbp tmp.48))
         (tmp.435 (tmp.48 rbp ra.434 tmp.49))
         (tmp.143 (tmp.49 ra.434 rbp tmp.48))
         (rax (ra.434 rbp)))))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((new-frames ())
       (locals (c.96 ra.436 tmp.51 tmp.50))
       (undead-out
        ((rdi rsi rdx ra.436 rbp)
         (rsi rdx ra.436 rbp)
         (rdx tmp.50 ra.436 rbp)
         (tmp.50 tmp.51 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.51 tmp.50 c.96 ra.436 rax))
         (ra.436 (tmp.51 tmp.50 c.96 rdi rsi rdx rbp rax))
         (rdx (tmp.50 c.96 ra.436))
         (rsi (c.96 ra.436))
         (rdi (ra.436))
         (c.96 (rsi rdx ra.436 rbp))
         (tmp.50 (tmp.51 rdx ra.436 rbp))
         (tmp.51 (tmp.50 ra.436 rbp)))))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (tmp.126
         tmp.79
         tmp.144
         tmp.442
         tmp.293
         tmp.534
         tmp.292
         tmp.441
         tmp.291
         tmp.440
         tmp.439
         tmp.290
         tmp.438
         vector-init-loop.80
         tmp.78
         c.95
         ra.437))
       (undead-out
        ((rdi rsi r12 rbp ra.437)
         (rsi c.95 r12 rbp ra.437)
         (c.95 r12 rbp ra.437 tmp.78)
         (r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.438 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.290 tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.440 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.291 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.441 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.292 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.534 r12 tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.293 rbp ra.437 vector-init-loop.80 tmp.78)
         (tmp.442 rbp ra.437 vector-init-loop.80 tmp.78)
         (rbp ra.437 vector-init-loop.80 tmp.78 tmp.144)
         (tmp.144 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.79 tmp.78 vector-init-loop.80 ra.437 rbp)
         (tmp.78 vector-init-loop.80 ra.437 rcx rbp)
         (tmp.78 vector-init-loop.80 ra.437 rdx rcx rbp)
         (vector-init-loop.80 ra.437 rsi rdx rcx rbp)
         (ra.437 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.437
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           r12
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (r12
          (rbp
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           tmp.78
           c.95
           ra.437))
         (rsi (r15 rdi vector-init-loop.80 rdx rcx rbp c.95 ra.437))
         (rdi (r15 rsi rdx rcx rbp ra.437))
         (c.95 (tmp.78 rsi r12 rbp ra.437))
         (tmp.78
          (rdx
           rcx
           tmp.126
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           vector-init-loop.80
           c.95
           r12
           rbp
           ra.437))
         (vector-init-loop.80
          (rsi
           rdx
           rcx
           tmp.79
           tmp.144
           tmp.442
           tmp.293
           tmp.534
           tmp.292
           tmp.441
           tmp.291
           tmp.440
           tmp.439
           tmp.290
           tmp.438
           tmp.78
           ra.437
           rbp
           r12))
         (tmp.438 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.290 (tmp.439 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.439 (tmp.290 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.440 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.291 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.441 (tmp.78 vector-init-loop.80 ra.437 rbp r12))
         (tmp.292 (r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.534 (tmp.293 r12 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.293 (r12 tmp.534 rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.442 (tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.144 (rbp ra.437 vector-init-loop.80 tmp.78))
         (tmp.79 (tmp.126 tmp.78 vector-init-loop.80 ra.437 rbp))
         (tmp.126 (tmp.79 tmp.78 ra.437 rbp))
         (rcx (r15 rdi rsi rdx tmp.78 vector-init-loop.80 ra.437 rbp))
         (rdx (r15 rdi rsi tmp.78 vector-init-loop.80 ra.437 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp)))))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((new-frames ())
       (locals (c.94 ra.443 i.83 len.81 vector-init-loop.80 vec.82))
       (undead-out
        ((rdi rsi rdx rcx ra.443 rbp)
         (rsi rdx rcx c.94 ra.443 rbp)
         (rdx rcx c.94 len.81 ra.443 rbp)
         (rcx c.94 len.81 i.83 ra.443 rbp)
         (c.94 vec.82 len.81 i.83 ra.443 rbp)
         (vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
         ((vec.82 vector-init-loop.80 len.81 i.83 ra.443 rbp)
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.80 len.81 i.83 ra.443 r8 rbp)
           (len.81 i.83 ra.443 rcx r8 rbp)
           (i.83 ra.443 rdx rcx r8 rbp)
           (ra.443 rsi rdx rcx r8 rbp)
           (ra.443 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.80 len.81 i.83 ra.443 rbp))
         (rbp
          (vector-init-loop.80
           vec.82
           i.83
           len.81
           c.94
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.443
          (vector-init-loop.80 vec.82 i.83 len.81 c.94 rbp rdi rsi rdx rcx r8))
         (i.83 (vector-init-loop.80 vec.82 c.94 len.81 ra.443 rbp rdx rcx r8))
         (len.81 (vector-init-loop.80 vec.82 i.83 rdx c.94 ra.443 rbp rcx r8))
         (vector-init-loop.80 (rbp ra.443 i.83 len.81 vec.82 r8))
         (rcx (c.94 r15 rdi rsi rdx len.81 i.83 ra.443 r8 rbp))
         (rdx (len.81 c.94 r15 rdi rsi i.83 ra.443 rcx r8 rbp))
         (rsi (c.94 r15 rdi ra.443 rdx rcx r8 rbp))
         (rdi (r15 ra.443 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.94 (vec.82 i.83 len.81 rsi rdx rcx ra.443 rbp))
         (vec.82 (vector-init-loop.80 c.94 len.81 i.83 ra.443 rbp)))))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (c.93 tmp.307 ra.444 tmp.90 tmp.91 tmp.89))
       (undead-out
        ((rdi rsi rdx rcx ra.444 rbp)
         (rsi rdx rcx ra.444 rbp)
         (rdx rcx tmp.89 ra.444 rbp)
         (rcx tmp.89 tmp.90 ra.444 rbp)
         (tmp.89 tmp.91 tmp.90 ra.444 rbp)
         (tmp.307 tmp.89 tmp.91 tmp.90 ra.444 rbp)
         ((tmp.89 tmp.91 tmp.90 ra.444 rbp)
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.91 tmp.90 ra.444 rcx rbp)
           (tmp.90 ra.444 rdx rcx rbp)
           (ra.444 rsi rdx rcx rbp)
           (ra.444 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.89 c.93 r15 rdi rsi rdx tmp.91 tmp.90 ra.444 rbp))
         (rbp (tmp.307 tmp.91 tmp.90 tmp.89 c.93 ra.444 r15 rdi rsi rdx rcx))
         (ra.444 (tmp.307 tmp.91 tmp.90 tmp.89 c.93 rbp rdi rsi rdx rcx))
         (tmp.90 (tmp.307 tmp.91 tmp.89 ra.444 rbp rdx rcx))
         (tmp.91 (tmp.307 tmp.89 tmp.90 ra.444 rbp rcx))
         (rdx (tmp.89 c.93 r15 rdi rsi tmp.90 ra.444 rcx rbp))
         (rsi (c.93 r15 rdi ra.444 rdx rcx rbp))
         (rdi (r15 ra.444 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.93 (rsi rdx rcx ra.444 rbp))
         (tmp.89 (tmp.307 tmp.91 tmp.90 rdx rcx ra.444 rbp))
         (tmp.307 (rbp ra.444 tmp.90 tmp.91 tmp.89)))))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (c.92 tmp.315 ra.445 tmp.87 tmp.86))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.86 ra.445 rbp)
         (tmp.86 tmp.87 ra.445 rbp)
         (tmp.315 tmp.86 tmp.87 ra.445 rbp)
         ((tmp.86 tmp.87 ra.445 rbp)
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.87 ra.445 rdx rbp)
           (ra.445 rsi rdx rbp)
           (ra.445 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.86 c.92 r15 rdi rsi tmp.87 ra.445 rbp))
         (rbp (tmp.315 tmp.87 tmp.86 c.92 ra.445 r15 rdi rsi rdx))
         (ra.445 (tmp.315 tmp.87 tmp.86 c.92 rbp rdi rsi rdx))
         (tmp.87 (tmp.315 tmp.86 ra.445 rbp rdx))
         (rsi (c.92 r15 rdi ra.445 rdx rbp))
         (rdi (r15 ra.445 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.92 (rsi rdx ra.445 rbp))
         (tmp.86 (tmp.315 tmp.87 rdx ra.445 rbp))
         (tmp.315 (rbp ra.445 tmp.87 tmp.86)))))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((new-frames ())
       (locals (tmp.309 ra.446 tmp.87 tmp.86))
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.309 ra.446 rbp)
         (rdx tmp.309 tmp.87 ra.446 rbp)
         (tmp.309 tmp.86 tmp.87 ra.446 rbp)
         ((tmp.86 tmp.87 ra.446 rbp)
          ((tmp.86 tmp.87 ra.446 rbp)
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.87 ra.446 rdx rbp)
            (ra.446 rsi rdx rbp)
            (ra.446 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.446 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.446 rbp))
         (rbp (tmp.86 tmp.87 tmp.309 ra.446 r15 rdi rsi rdx rax))
         (ra.446 (tmp.86 tmp.87 tmp.309 rbp rdi rsi rdx rax))
         (rdx (tmp.309 r15 rdi rsi tmp.87 ra.446 rbp))
         (tmp.87 (tmp.86 tmp.309 ra.446 rbp rdx))
         (rsi (tmp.309 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.309 (tmp.86 tmp.87 rsi rdx ra.446 rbp))
         (tmp.86 (tmp.309 tmp.87 ra.446 rbp)))))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((new-frames ())
       (locals
        (ra.447
         tmp.311
         tmp.86
         tmp.314
         tmp.450
         tmp.313
         tmp.449
         tmp.312
         tmp.448
         tmp.87))
       (undead-out
        ((rdi rsi rdx ra.447 rbp)
         (rsi rdx tmp.311 ra.447 rbp)
         (rdx tmp.311 tmp.87 ra.447 rbp)
         (tmp.311 tmp.87 tmp.86 ra.447 rbp)
         ((tmp.87 tmp.86 ra.447 rbp)
          ((tmp.448 tmp.86 ra.447 rbp)
           (tmp.312 tmp.86 ra.447 rbp)
           (tmp.449 tmp.86 ra.447 rbp)
           (tmp.313 tmp.86 ra.447 rbp)
           (tmp.450 tmp.86 ra.447 rbp)
           (tmp.314 tmp.86 ra.447 rbp)
           (ra.447 rax rbp)
           (rax rbp))
          ((ra.447 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.447 rbp))
         (rbp
          (tmp.86
           tmp.87
           tmp.311
           ra.447
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (ra.447
          (tmp.86
           tmp.87
           tmp.311
           rdi
           rsi
           rdx
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448
           rax))
         (tmp.448 (rbp ra.447 tmp.86))
         (tmp.86
          (tmp.311
           tmp.87
           ra.447
           rbp
           tmp.314
           tmp.450
           tmp.313
           tmp.449
           tmp.312
           tmp.448))
         (tmp.312 (tmp.86 ra.447 rbp))
         (tmp.449 (rbp ra.447 tmp.86))
         (tmp.313 (tmp.86 ra.447 rbp))
         (tmp.450 (rbp ra.447 tmp.86))
         (tmp.314 (tmp.86 ra.447 rbp))
         (rdx (tmp.87 tmp.311 ra.447))
         (rsi (tmp.311 ra.447))
         (rdi (ra.447))
         (tmp.311 (tmp.86 tmp.87 rsi rdx ra.447 rbp))
         (tmp.87 (tmp.86 rdx tmp.311 ra.447 rbp)))))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((new-frames ())
       (locals (tmp.301 ra.451 tmp.90 tmp.89 tmp.91))
       (undead-out
        ((rdi rsi rdx rcx ra.451 rbp)
         (rsi rdx rcx tmp.301 ra.451 rbp)
         (rdx rcx tmp.301 tmp.90 ra.451 rbp)
         (rcx tmp.301 tmp.91 tmp.90 ra.451 rbp)
         (tmp.301 tmp.91 tmp.89 tmp.90 ra.451 rbp)
         ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
          ((tmp.91 tmp.89 tmp.90 ra.451 rbp)
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.89 tmp.90 ra.451 rcx rbp)
            (tmp.90 ra.451 rdx rcx rbp)
            (ra.451 rsi rdx rcx rbp)
            (ra.451 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.89 tmp.91 tmp.90 tmp.301 ra.451 r15 rdi rsi rdx rcx rax))
         (ra.451 (tmp.89 tmp.91 tmp.90 tmp.301 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.91 tmp.301 r15 rdi rsi rdx tmp.89 tmp.90 ra.451 rbp))
         (tmp.90 (tmp.89 tmp.91 tmp.301 ra.451 rbp rdx rcx))
         (tmp.89 (tmp.301 tmp.91 tmp.90 ra.451 rbp rcx))
         (rdx (tmp.301 r15 rdi rsi tmp.90 ra.451 rcx rbp))
         (rsi (tmp.301 r15 rdi ra.451 rdx rcx rbp))
         (rdi (r15 ra.451 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.301 (tmp.89 tmp.91 tmp.90 rsi rdx rcx ra.451 rbp))
         (tmp.91 (tmp.89 rcx tmp.301 tmp.90 ra.451 rbp)))))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((new-frames ())
       (locals
        (ra.452
         tmp.303
         tmp.89
         tmp.91
         tmp.306
         tmp.455
         tmp.305
         tmp.454
         tmp.304
         tmp.453
         tmp.90))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.452)
         (rsi rdx rcx tmp.303 rbp ra.452)
         (rdx rcx tmp.303 tmp.90 rbp ra.452)
         (rcx tmp.303 tmp.90 rbp ra.452 tmp.89)
         (tmp.303 tmp.90 rbp ra.452 tmp.91 tmp.89)
         ((tmp.90 rbp ra.452 tmp.91 tmp.89)
          ((tmp.453 rbp ra.452 tmp.91 tmp.89)
           (tmp.304 rbp ra.452 tmp.91 tmp.89)
           (tmp.454 rbp ra.452 tmp.91 tmp.89)
           (tmp.305 rbp ra.452 tmp.91 tmp.89)
           (tmp.455 rbp ra.452 tmp.91 tmp.89)
           (rbp ra.452 tmp.91 tmp.306 tmp.89)
           (ra.452 rbp)
           (ra.452 rax rbp)
           (rax rbp))
          ((ra.452 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (ra.452
          (tmp.91
           tmp.89
           tmp.90
           tmp.303
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453
           rax))
         (tmp.453 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.91
          (tmp.303
           tmp.90
           rbp
           ra.452
           tmp.89
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.89
          (tmp.91
           rcx
           tmp.303
           tmp.90
           rbp
           ra.452
           tmp.306
           tmp.455
           tmp.305
           tmp.454
           tmp.304
           tmp.453))
         (tmp.304 (rbp ra.452 tmp.91 tmp.89))
         (tmp.454 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.305 (rbp ra.452 tmp.91 tmp.89))
         (tmp.455 (tmp.89 tmp.91 ra.452 rbp))
         (tmp.306 (rbp ra.452 tmp.91 tmp.89))
         (rcx (tmp.89 tmp.90 tmp.303 ra.452))
         (rdx (tmp.90 tmp.303 ra.452))
         (rsi (tmp.303 ra.452))
         (rdi (ra.452))
         (tmp.303 (tmp.91 tmp.89 tmp.90 rsi rdx rcx rbp ra.452))
         (tmp.90 (tmp.91 tmp.89 rdx rcx tmp.303 rbp ra.452)))))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((new-frames ())
       (locals
        (tmp.295
         i.83
         tmp.457
         tmp.296
         tmp.458
         tmp.297
         tmp.459
         tmp.298
         vector-init-loop.80
         tmp.125
         tmp.460
         tmp.299
         len.81
         ra.456
         vec.82))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.456 rbp)
         (rsi rdx rcx r8 tmp.295 ra.456 rbp)
         (rdx rcx r8 tmp.295 i.83 ra.456 rbp)
         (rcx r8 tmp.295 i.83 len.81 ra.456 rbp)
         (r8 tmp.295 i.83 len.81 vector-init-loop.80 ra.456 rbp)
         (tmp.295 i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
         ((i.83 len.81 vector-init-loop.80 vec.82 ra.456 rbp)
          ((ra.456 rax rbp) (rax rbp))
          ((tmp.457 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.296 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.458 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.297 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (tmp.459 rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82)
           (rbp ra.456 vector-init-loop.80 len.81 i.83 tmp.298 vec.82)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (i.83 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.460 vec.82 len.81 vector-init-loop.80 ra.456 rbp)
           (vec.82 tmp.299 len.81 vector-init-loop.80 ra.456 rbp)
           (tmp.299 len.81 vector-init-loop.80 ra.456 rcx rbp)
           (len.81 vector-init-loop.80 ra.456 rdx rcx rbp)
           (vector-init-loop.80 ra.456 rsi rdx rcx rbp)
           (ra.456 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.457 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (rbp
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           ra.456
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (ra.456
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           tmp.295
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vector-init-loop.80
          (vec.82
           r8
           tmp.295
           i.83
           len.81
           ra.456
           rbp
           rsi
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (len.81
          (vec.82
           vector-init-loop.80
           r8
           tmp.295
           i.83
           ra.456
           rbp
           rdx
           rcx
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (i.83
          (vec.82
           vector-init-loop.80
           len.81
           rdx
           rcx
           r8
           tmp.295
           ra.456
           rbp
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (vec.82
          (tmp.295
           i.83
           len.81
           vector-init-loop.80
           ra.456
           rbp
           tmp.299
           tmp.460
           tmp.125
           tmp.298
           tmp.459
           tmp.297
           tmp.458
           tmp.296
           tmp.457))
         (tmp.296 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.458 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.297 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.459 (vec.82 i.83 len.81 vector-init-loop.80 ra.456 rbp))
         (tmp.298 (rbp ra.456 vector-init-loop.80 len.81 i.83 vec.82))
         (tmp.125 (i.83 vec.82 len.81 ra.456 rbp))
         (tmp.460 (rbp ra.456 vector-init-loop.80 len.81 vec.82))
         (tmp.299 (rcx vec.82 len.81 vector-init-loop.80 ra.456 rbp))
         (rcx
          (i.83
           tmp.295
           r15
           rdi
           rsi
           rdx
           tmp.299
           len.81
           vector-init-loop.80
           ra.456
           rbp))
         (rdx
          (i.83 tmp.295 r15 rdi rsi len.81 vector-init-loop.80 ra.456 rcx rbp))
         (rsi (tmp.295 r15 rdi vector-init-loop.80 ra.456 rdx rcx rbp))
         (rdi (r15 ra.456 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.456 rbp))
         (r8 (vector-init-loop.80 len.81 i.83 tmp.295 ra.456))
         (tmp.295
          (vec.82
           vector-init-loop.80
           len.81
           i.83
           rsi
           rdx
           rcx
           r8
           ra.456
           rbp)))))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((new-frames ())
       (locals (ra.461 tmp.267 tmp.37))
       (undead-out
        ((rdi rsi ra.461 rbp)
         (rsi tmp.267 ra.461 rbp)
         (tmp.267 tmp.37 ra.461 rbp)
         ((tmp.37 ra.461 rbp)
          ((ra.461 rax rbp) (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp (tmp.37 tmp.267 ra.461 rax))
         (ra.461 (tmp.37 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.461))
         (rdi (ra.461))
         (tmp.267 (tmp.37 rsi ra.461 rbp))
         (tmp.37 (tmp.267 ra.461 rbp)))))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((new-frames ())
       (locals (ra.462 tmp.264 tmp.36))
       (undead-out
        ((rdi rsi ra.462 rbp)
         (rsi tmp.264 ra.462 rbp)
         (tmp.264 tmp.36 ra.462 rbp)
         ((tmp.36 ra.462 rbp)
          ((ra.462 rax rbp) (rax rbp))
          ((ra.462 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.462 rbp))
         (rbp (tmp.36 tmp.264 ra.462 rax))
         (ra.462 (tmp.36 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.462))
         (rdi (ra.462))
         (tmp.264 (tmp.36 rsi ra.462 rbp))
         (tmp.36 (tmp.264 ra.462 rbp)))))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((new-frames ())
       (locals (ra.463 tmp.261 tmp.35))
       (undead-out
        ((rdi rsi ra.463 rbp)
         (rsi tmp.261 ra.463 rbp)
         (tmp.261 tmp.35 ra.463 rbp)
         ((tmp.35 ra.463 rbp)
          ((ra.463 rax rbp) (rax rbp))
          ((ra.463 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.463 rbp))
         (rbp (tmp.35 tmp.261 ra.463 rax))
         (ra.463 (tmp.35 tmp.261 rdi rsi rbp rax))
         (rsi (tmp.261 ra.463))
         (rdi (ra.463))
         (tmp.261 (tmp.35 rsi ra.463 rbp))
         (tmp.35 (tmp.261 ra.463 rbp)))))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((new-frames ())
       (locals
        (tmp.255 tmp.465 tmp.258 ra.464 unsafe-vector-ref.3 tmp.34 tmp.33))
       (undead-out
        ((rdi rsi rdx rcx ra.464 rbp)
         (rsi rdx rcx tmp.255 ra.464 rbp)
         (rdx rcx tmp.255 tmp.33 ra.464 rbp)
         (rcx tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp)
         (tmp.255 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
         ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
          ((tmp.465 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           (tmp.258 tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
           ((tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp)
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.34 unsafe-vector-ref.3 ra.464 rcx rbp)
             (unsafe-vector-ref.3 ra.464 rdx rcx rbp)
             (ra.464 rsi rdx rcx rbp)
             (ra.464 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.464 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.464 rbp))
         (rbp
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           ra.464
           tmp.258
           tmp.465
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.464
          (tmp.34
           unsafe-vector-ref.3
           tmp.33
           tmp.255
           rbp
           tmp.258
           tmp.465
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.33
           tmp.255
           r15
           rdi
           rsi
           rdx
           tmp.34
           unsafe-vector-ref.3
           ra.464
           rbp))
         (unsafe-vector-ref.3
          (tmp.34 tmp.255 tmp.33 ra.464 rbp tmp.258 tmp.465 rdx rcx))
         (tmp.34
          (tmp.255 tmp.33 unsafe-vector-ref.3 ra.464 rbp tmp.258 tmp.465 rcx))
         (rdx (tmp.33 tmp.255 r15 rdi rsi unsafe-vector-ref.3 ra.464 rcx rbp))
         (rsi (tmp.255 r15 rdi ra.464 rdx rcx rbp))
         (rdi (r15 ra.464 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.465 (rbp ra.464 unsafe-vector-ref.3 tmp.34 tmp.33))
         (tmp.33
          (tmp.34
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.255
           ra.464
           rbp
           tmp.258
           tmp.465))
         (tmp.258 (tmp.33 tmp.34 unsafe-vector-ref.3 ra.464 rbp))
         (tmp.255
          (tmp.34 unsafe-vector-ref.3 tmp.33 rsi rdx rcx ra.464 rbp)))))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((new-frames ())
       (locals (tmp.257 ra.466 tmp.33 tmp.34 tmp.127 unsafe-vector-ref.3))
       (undead-out
        ((rdi rsi rdx rcx ra.466 rbp)
         (rsi rdx rcx tmp.257 ra.466 rbp)
         (rdx rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp)
         (rcx tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp)
         (tmp.257 tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
         ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
          ((tmp.34 tmp.33 unsafe-vector-ref.3 ra.466 rbp)
           (tmp.33 unsafe-vector-ref.3 ra.466 rdx rbp)
           (unsafe-vector-ref.3 ra.466 rsi rdx rbp)
           (ra.466 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.466 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           ra.466
           r15
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (ra.466
          (tmp.33
           tmp.34
           unsafe-vector-ref.3
           tmp.257
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.127
           rax))
         (tmp.127 (tmp.34 tmp.33 ra.466 rbp))
         (tmp.33 (tmp.257 tmp.34 unsafe-vector-ref.3 ra.466 rbp rdx tmp.127))
         (tmp.34 (tmp.33 rcx tmp.257 unsafe-vector-ref.3 ra.466 rbp tmp.127))
         (rdx (tmp.257 r15 rdi rsi tmp.33 unsafe-vector-ref.3 ra.466 rbp))
         (unsafe-vector-ref.3 (tmp.33 tmp.34 rcx tmp.257 ra.466 rbp rsi rdx))
         (rsi (tmp.257 r15 rdi unsafe-vector-ref.3 ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.34 unsafe-vector-ref.3 tmp.257 ra.466))
         (tmp.257
          (tmp.33 tmp.34 unsafe-vector-ref.3 rsi rdx rcx ra.466 rbp)))))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals
        (tmp.249
         tmp.468
         tmp.252
         ra.467
         unsafe-vector-set!.2
         tmp.32
         tmp.31
         tmp.30))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.467 rbp)
         (rsi rdx rcx r8 tmp.249 ra.467 rbp)
         (rdx rcx r8 tmp.249 tmp.30 ra.467 rbp)
         (rcx r8 tmp.249 tmp.30 unsafe-vector-set!.2 ra.467 rbp)
         (r8 tmp.249 tmp.30 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         (tmp.249 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
         ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
          ((tmp.468 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           (tmp.252 tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
           ((tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp)
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 r8 rbp)
             (tmp.32 unsafe-vector-set!.2 ra.467 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.467 rdx rcx r8 rbp)
             (ra.467 rsi rdx rcx r8 rbp)
             (ra.467 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.467 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.467 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           ra.467
           tmp.252
           tmp.468
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.467
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           tmp.249
           rbp
           tmp.252
           tmp.468
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp))
         (unsafe-vector-set!.2
          (tmp.31 tmp.32 tmp.249 tmp.30 ra.467 rbp tmp.252 tmp.468 rdx rcx r8))
         (tmp.32
          (tmp.31
           tmp.249
           tmp.30
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           rcx
           r8))
         (tmp.31
          (tmp.249
           tmp.30
           tmp.32
           unsafe-vector-set!.2
           ra.467
           rbp
           tmp.252
           tmp.468
           r8))
         (rcx
          (tmp.30
           tmp.249
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-set!.2
           ra.467
           r8
           rbp))
         (rdx
          (tmp.30 tmp.249 r15 rdi rsi unsafe-vector-set!.2 ra.467 rcx r8 rbp))
         (rsi (tmp.249 r15 rdi ra.467 rdx rcx r8 rbp))
         (rdi (r15 ra.467 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.468 (rbp ra.467 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30))
         (tmp.30
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.249
           ra.467
           rbp
           tmp.252
           tmp.468))
         (tmp.252 (tmp.30 tmp.31 tmp.32 unsafe-vector-set!.2 ra.467 rbp))
         (tmp.249
          (tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.30
           rsi
           rdx
           rcx
           r8
           ra.467
           rbp)))))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((new-frames ())
       (locals
        (tmp.251 ra.469 tmp.30 tmp.31 tmp.32 tmp.128 unsafe-vector-set!.2))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.469 rbp)
         (rsi rdx rcx r8 tmp.251 ra.469 rbp)
         (rdx rcx r8 tmp.251 unsafe-vector-set!.2 ra.469 rbp)
         (rcx r8 tmp.251 tmp.32 unsafe-vector-set!.2 ra.469 rbp)
         (r8 tmp.251 tmp.32 tmp.31 unsafe-vector-set!.2 ra.469 rbp)
         (tmp.251 tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
         ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
          ((tmp.32 tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rbp)
           (tmp.31 tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp)
           (tmp.30 unsafe-vector-set!.2 ra.469 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.469 rsi rdx rcx rbp)
           (ra.469 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.469 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.469 rbp))
         (rbp
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           ra.469
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (ra.469
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           tmp.251
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.128
           rax))
         (tmp.128 (tmp.32 tmp.31 tmp.30 ra.469 rbp))
         (tmp.30
          (tmp.251
           tmp.32
           tmp.31
           unsafe-vector-set!.2
           ra.469
           rbp
           rdx
           rcx
           tmp.128))
         (tmp.31
          (tmp.30
           r8
           tmp.251
           tmp.32
           unsafe-vector-set!.2
           ra.469
           rbp
           rcx
           tmp.128))
         (tmp.32
          (tmp.30
           tmp.31
           rcx
           r8
           tmp.251
           unsafe-vector-set!.2
           ra.469
           rbp
           tmp.128))
         (rcx
          (tmp.32
           tmp.251
           r15
           rdi
           rsi
           rdx
           tmp.31
           tmp.30
           unsafe-vector-set!.2
           ra.469
           rbp))
         (unsafe-vector-set!.2
          (tmp.30 tmp.31 tmp.32 r8 tmp.251 ra.469 rbp rsi rdx rcx))
         (rdx (tmp.251 r15 rdi rsi tmp.30 unsafe-vector-set!.2 ra.469 rcx rbp))
         (rsi (tmp.251 r15 rdi unsafe-vector-set!.2 ra.469 rdx rcx rbp))
         (rdi (r15 ra.469 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.31 tmp.32 unsafe-vector-set!.2 tmp.251 ra.469))
         (tmp.251
          (tmp.30
           tmp.31
           tmp.32
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.469
           rbp)))))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals (ra.470 tmp.246 tmp.29))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.246 ra.470 rbp)
         (tmp.246 tmp.29 ra.470 rbp)
         ((tmp.29 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.29 tmp.246 ra.470 rax))
         (ra.470 (tmp.29 tmp.246 rdi rsi rbp rax))
         (rsi (tmp.246 ra.470))
         (rdi (ra.470))
         (tmp.246 (tmp.29 rsi ra.470 rbp))
         (tmp.29 (tmp.246 ra.470 rbp)))))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((new-frames ())
       (locals (tmp.243 ra.471 tmp.28 tmp.129 make-init-vector.1))
       (undead-out
        ((rdi rsi rdx ra.471 rbp)
         (rsi rdx tmp.243 ra.471 rbp)
         (rdx tmp.243 make-init-vector.1 ra.471 rbp)
         (tmp.243 tmp.28 make-init-vector.1 ra.471 rbp)
         ((tmp.28 make-init-vector.1 ra.471 rbp)
          ((tmp.28 make-init-vector.1 ra.471 rbp)
           (make-init-vector.1 ra.471 rsi rbp)
           (ra.471 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp
          (tmp.28 make-init-vector.1 tmp.243 ra.471 r15 rdi rsi tmp.129 rax))
         (ra.471
          (tmp.28 make-init-vector.1 tmp.243 rdx rbp rdi rsi tmp.129 rax))
         (tmp.129 (tmp.28 ra.471 rbp))
         (tmp.28 (tmp.243 make-init-vector.1 ra.471 rbp tmp.129))
         (rsi (tmp.243 r15 rdi make-init-vector.1 ra.471 rbp))
         (make-init-vector.1 (tmp.28 rdx tmp.243 ra.471 rbp rsi))
         (rdi (r15 ra.471 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.243 ra.471))
         (tmp.243 (tmp.28 make-init-vector.1 rsi rdx ra.471 rbp)))))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((new-frames ())
       (locals (tmp.236 tmp.473 tmp.240 ra.472 tmp.26 tmp.27))
       (undead-out
        ((rdi rsi rdx ra.472 rbp)
         (rsi rdx tmp.236 ra.472 rbp)
         (rdx tmp.236 tmp.26 ra.472 rbp)
         (tmp.236 tmp.27 tmp.26 ra.472 rbp)
         ((tmp.27 tmp.26 ra.472 rbp)
          ((tmp.473 tmp.27 tmp.26 ra.472 rbp)
           (tmp.240 tmp.27 tmp.26 ra.472 rbp)
           ((tmp.27 tmp.26 ra.472 rbp)
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.472 rdx rbp)
             (ra.472 rsi rdx rbp)
             (ra.472 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.236 ra.472 tmp.240 tmp.473 r15 rdi rsi rdx rax))
         (ra.472 (tmp.27 tmp.26 tmp.236 rbp tmp.240 tmp.473 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.26 ra.472 rbp))
         (tmp.26 (tmp.27 tmp.236 ra.472 rbp tmp.240 tmp.473 rdx))
         (rsi (tmp.236 r15 rdi ra.472 rdx rbp))
         (rdi (r15 ra.472 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.473 (rbp ra.472 tmp.26 tmp.27))
         (tmp.27 (tmp.236 tmp.26 ra.472 rbp tmp.240 tmp.473))
         (tmp.240 (tmp.27 tmp.26 ra.472 rbp))
         (tmp.236 (tmp.27 tmp.26 rsi rdx ra.472 rbp)))))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals (ra.474 tmp.238 tmp.27 tmp.26))
       (undead-out
        ((rdi rsi rdx ra.474 rbp)
         (rsi rdx tmp.238 ra.474 rbp)
         (rdx tmp.238 tmp.26 ra.474 rbp)
         (tmp.238 tmp.26 tmp.27 ra.474 rbp)
         ((tmp.26 tmp.27 ra.474 rbp)
          ((ra.474 rbp)
           ((ra.474 rax rbp) (rax rbp))
           ((ra.474 rax rbp) (rax rbp)))
          ((ra.474 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.474 rbp))
         (rbp (tmp.27 tmp.26 tmp.238 ra.474 rax))
         (ra.474 (tmp.27 tmp.26 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.238 ra.474))
         (rsi (tmp.238 ra.474))
         (rdi (ra.474))
         (tmp.238 (tmp.27 tmp.26 rsi rdx ra.474 rbp))
         (tmp.26 (tmp.27 rdx tmp.238 ra.474 rbp))
         (tmp.27 (tmp.238 tmp.26 ra.474 rbp)))))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((new-frames ())
       (locals (tmp.229 tmp.476 tmp.233 ra.475 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.475 rbp)
         (rsi rdx tmp.229 ra.475 rbp)
         (rdx tmp.229 tmp.24 ra.475 rbp)
         (tmp.229 tmp.25 tmp.24 ra.475 rbp)
         ((tmp.25 tmp.24 ra.475 rbp)
          ((tmp.476 tmp.25 tmp.24 ra.475 rbp)
           (tmp.233 tmp.25 tmp.24 ra.475 rbp)
           ((tmp.25 tmp.24 ra.475 rbp)
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.475 rdx rbp)
             (ra.475 rsi rdx rbp)
             (ra.475 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.229 ra.475 tmp.233 tmp.476 r15 rdi rsi rdx rax))
         (ra.475 (tmp.25 tmp.24 tmp.229 rbp tmp.233 tmp.476 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.24 ra.475 rbp))
         (tmp.24 (tmp.25 tmp.229 ra.475 rbp tmp.233 tmp.476 rdx))
         (rsi (tmp.229 r15 rdi ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.476 (rbp ra.475 tmp.24 tmp.25))
         (tmp.25 (tmp.229 tmp.24 ra.475 rbp tmp.233 tmp.476))
         (tmp.233 (tmp.25 tmp.24 ra.475 rbp))
         (tmp.229 (tmp.25 tmp.24 rsi rdx ra.475 rbp)))))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (ra.477 tmp.231 tmp.25 tmp.24))
       (undead-out
        ((rdi rsi rdx ra.477 rbp)
         (rsi rdx tmp.231 ra.477 rbp)
         (rdx tmp.231 tmp.24 ra.477 rbp)
         (tmp.231 tmp.24 tmp.25 ra.477 rbp)
         ((tmp.24 tmp.25 ra.477 rbp)
          ((ra.477 rbp)
           ((ra.477 rax rbp) (rax rbp))
           ((ra.477 rax rbp) (rax rbp)))
          ((ra.477 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.477 rbp))
         (rbp (tmp.25 tmp.24 tmp.231 ra.477 rax))
         (ra.477 (tmp.25 tmp.24 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.231 ra.477))
         (rsi (tmp.231 ra.477))
         (rdi (ra.477))
         (tmp.231 (tmp.25 tmp.24 rsi rdx ra.477 rbp))
         (tmp.24 (tmp.25 rdx tmp.231 ra.477 rbp))
         (tmp.25 (tmp.231 tmp.24 ra.477 rbp)))))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((new-frames ())
       (locals (tmp.222 tmp.479 tmp.226 ra.478 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.478 rbp)
         (rsi rdx tmp.222 ra.478 rbp)
         (rdx tmp.222 tmp.22 ra.478 rbp)
         (tmp.222 tmp.23 tmp.22 ra.478 rbp)
         ((tmp.23 tmp.22 ra.478 rbp)
          ((tmp.479 tmp.23 tmp.22 ra.478 rbp)
           (tmp.226 tmp.23 tmp.22 ra.478 rbp)
           ((tmp.23 tmp.22 ra.478 rbp)
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.478 rdx rbp)
             (ra.478 rsi rdx rbp)
             (ra.478 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.222 ra.478 tmp.226 tmp.479 r15 rdi rsi rdx rax))
         (ra.478 (tmp.23 tmp.22 tmp.222 rbp tmp.226 tmp.479 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.22 ra.478 rbp))
         (tmp.22 (tmp.23 tmp.222 ra.478 rbp tmp.226 tmp.479 rdx))
         (rsi (tmp.222 r15 rdi ra.478 rdx rbp))
         (rdi (r15 ra.478 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.479 (rbp ra.478 tmp.22 tmp.23))
         (tmp.23 (tmp.222 tmp.22 ra.478 rbp tmp.226 tmp.479))
         (tmp.226 (tmp.23 tmp.22 ra.478 rbp))
         (tmp.222 (tmp.23 tmp.22 rsi rdx ra.478 rbp)))))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((new-frames ())
       (locals (ra.480 tmp.224 tmp.23 tmp.22))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.224 ra.480 rbp)
         (rdx tmp.224 tmp.22 ra.480 rbp)
         (tmp.224 tmp.22 tmp.23 ra.480 rbp)
         ((tmp.22 tmp.23 ra.480 rbp)
          ((ra.480 rbp)
           ((ra.480 rax rbp) (rax rbp))
           ((ra.480 rax rbp) (rax rbp)))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp (tmp.23 tmp.22 tmp.224 ra.480 rax))
         (ra.480 (tmp.23 tmp.22 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.224 ra.480))
         (rsi (tmp.224 ra.480))
         (rdi (ra.480))
         (tmp.224 (tmp.23 tmp.22 rsi rdx ra.480 rbp))
         (tmp.22 (tmp.23 rdx tmp.224 ra.480 rbp))
         (tmp.23 (tmp.224 tmp.22 ra.480 rbp)))))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((new-frames ())
       (locals (tmp.215 tmp.482 tmp.219 ra.481 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.215 ra.481 rbp)
         (rdx tmp.215 tmp.20 ra.481 rbp)
         (tmp.215 tmp.21 tmp.20 ra.481 rbp)
         ((tmp.21 tmp.20 ra.481 rbp)
          ((tmp.482 tmp.21 tmp.20 ra.481 rbp)
           (tmp.219 tmp.21 tmp.20 ra.481 rbp)
           ((tmp.21 tmp.20 ra.481 rbp)
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.215 ra.481 tmp.219 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.21 tmp.20 tmp.215 rbp tmp.219 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.215 r15 rdi rsi tmp.20 ra.481 rbp))
         (tmp.20 (tmp.21 tmp.215 ra.481 rbp tmp.219 tmp.482 rdx))
         (rsi (tmp.215 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.20 tmp.21))
         (tmp.21 (tmp.215 tmp.20 ra.481 rbp tmp.219 tmp.482))
         (tmp.219 (tmp.21 tmp.20 ra.481 rbp))
         (tmp.215 (tmp.21 tmp.20 rsi rdx ra.481 rbp)))))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((new-frames ())
       (locals (ra.483 tmp.217 tmp.21 tmp.20))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.217 ra.483 rbp)
         (rdx tmp.217 tmp.20 ra.483 rbp)
         (tmp.217 tmp.20 tmp.21 ra.483 rbp)
         ((tmp.20 tmp.21 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.21 tmp.20 tmp.217 ra.483 rax))
         (ra.483 (tmp.21 tmp.20 tmp.217 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.217 ra.483))
         (rsi (tmp.217 ra.483))
         (rdi (ra.483))
         (tmp.217 (tmp.21 tmp.20 rsi rdx ra.483 rbp))
         (tmp.20 (tmp.21 rdx tmp.217 ra.483 rbp))
         (tmp.21 (tmp.217 tmp.20 ra.483 rbp)))))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((new-frames ())
       (locals (tmp.209 tmp.485 tmp.212 ra.484 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.209 ra.484 rbp)
         (rdx tmp.209 tmp.18 ra.484 rbp)
         (tmp.209 tmp.19 tmp.18 ra.484 rbp)
         ((tmp.19 tmp.18 ra.484 rbp)
          ((tmp.485 tmp.19 tmp.18 ra.484 rbp)
           (tmp.212 tmp.19 tmp.18 ra.484 rbp)
           ((tmp.19 tmp.18 ra.484 rbp)
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.209 ra.484 tmp.212 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.19 tmp.18 tmp.209 rbp tmp.212 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.209 r15 rdi rsi tmp.18 ra.484 rbp))
         (tmp.18 (tmp.19 tmp.209 ra.484 rbp tmp.212 tmp.485 rdx))
         (rsi (tmp.209 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.18 tmp.19))
         (tmp.19 (tmp.209 tmp.18 ra.484 rbp tmp.212 tmp.485))
         (tmp.212 (tmp.19 tmp.18 ra.484 rbp))
         (tmp.209 (tmp.19 tmp.18 rsi rdx ra.484 rbp)))))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((new-frames ())
       (locals (ra.486 tmp.211 tmp.487 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.211 ra.486 rbp)
         (rdx tmp.211 tmp.18 ra.486 rbp)
         (tmp.211 tmp.19 tmp.18 ra.486 rbp)
         ((tmp.19 tmp.18 ra.486 rbp)
          ((tmp.487 ra.486 rbp) (ra.486 rax rbp) (rax rbp))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.19 tmp.18 tmp.211 ra.486 tmp.487 rax))
         (ra.486 (tmp.19 tmp.18 tmp.211 rdi rsi rdx rbp tmp.487 rax))
         (tmp.487 (rbp ra.486))
         (rdx (tmp.18 tmp.211 ra.486))
         (rsi (tmp.211 ra.486))
         (rdi (ra.486))
         (tmp.211 (tmp.19 tmp.18 rsi rdx ra.486 rbp))
         (tmp.18 (tmp.19 rdx tmp.211 ra.486 rbp))
         (tmp.19 (tmp.211 tmp.18 ra.486 rbp)))))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (tmp.203 tmp.489 tmp.206 ra.488 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.488 rbp)
         (rsi rdx tmp.203 ra.488 rbp)
         (rdx tmp.203 tmp.16 ra.488 rbp)
         (tmp.203 tmp.17 tmp.16 ra.488 rbp)
         ((tmp.17 tmp.16 ra.488 rbp)
          ((tmp.489 tmp.17 tmp.16 ra.488 rbp)
           (tmp.206 tmp.17 tmp.16 ra.488 rbp)
           ((tmp.17 tmp.16 ra.488 rbp)
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.488 rdx rbp)
             (ra.488 rsi rdx rbp)
             (ra.488 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.488 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.488 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.203 ra.488 tmp.206 tmp.489 r15 rdi rsi rdx rax))
         (ra.488 (tmp.17 tmp.16 tmp.203 rbp tmp.206 tmp.489 rdi rsi rdx rax))
         (rdx (tmp.203 r15 rdi rsi tmp.16 ra.488 rbp))
         (tmp.16 (tmp.17 tmp.203 ra.488 rbp tmp.206 tmp.489 rdx))
         (rsi (tmp.203 r15 rdi ra.488 rdx rbp))
         (rdi (r15 ra.488 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.489 (rbp ra.488 tmp.16 tmp.17))
         (tmp.17 (tmp.203 tmp.16 ra.488 rbp tmp.206 tmp.489))
         (tmp.206 (tmp.17 tmp.16 ra.488 rbp))
         (tmp.203 (tmp.17 tmp.16 rsi rdx ra.488 rbp)))))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((new-frames ())
       (locals (ra.490 tmp.205 tmp.491 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.205 ra.490 rbp)
         (rdx tmp.205 tmp.16 ra.490 rbp)
         (tmp.205 tmp.17 tmp.16 ra.490 rbp)
         ((tmp.17 tmp.16 ra.490 rbp)
          ((tmp.491 ra.490 rbp) (ra.490 rax rbp) (rax rbp))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp (tmp.17 tmp.16 tmp.205 ra.490 tmp.491 rax))
         (ra.490 (tmp.17 tmp.16 tmp.205 rdi rsi rdx rbp tmp.491 rax))
         (tmp.491 (rbp ra.490))
         (rdx (tmp.16 tmp.205 ra.490))
         (rsi (tmp.205 ra.490))
         (rdi (ra.490))
         (tmp.205 (tmp.17 tmp.16 rsi rdx ra.490 rbp))
         (tmp.16 (tmp.17 rdx tmp.205 ra.490 rbp))
         (tmp.17 (tmp.205 tmp.16 ra.490 rbp)))))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (tmp.196 tmp.493 tmp.200 ra.492 tmp.15 tmp.14))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.196 ra.492 rbp)
         (rdx tmp.196 tmp.14 ra.492 rbp)
         (tmp.196 tmp.14 tmp.15 ra.492 rbp)
         ((tmp.14 tmp.15 ra.492 rbp)
          ((tmp.493 tmp.14 tmp.15 ra.492 rbp)
           (tmp.200 tmp.14 tmp.15 ra.492 rbp)
           ((tmp.14 tmp.15 ra.492 rbp)
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.15 ra.492 rdx rbp)
             (ra.492 rsi rdx rbp)
             (ra.492 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.196 ra.492 tmp.200 tmp.493 r15 rdi rsi rdx rax))
         (ra.492 (tmp.15 tmp.14 tmp.196 rbp tmp.200 tmp.493 rdi rsi rdx rax))
         (rdx (tmp.14 tmp.196 r15 rdi rsi tmp.15 ra.492 rbp))
         (tmp.15 (tmp.196 tmp.14 ra.492 rbp tmp.200 tmp.493 rdx))
         (rsi (tmp.196 r15 rdi ra.492 rdx rbp))
         (rdi (r15 ra.492 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.493 (rbp ra.492 tmp.15 tmp.14))
         (tmp.14 (tmp.15 rdx tmp.196 ra.492 rbp tmp.200 tmp.493))
         (tmp.200 (tmp.14 tmp.15 ra.492 rbp))
         (tmp.196 (tmp.15 tmp.14 rsi rdx ra.492 rbp)))))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((new-frames ())
       (locals (ra.494 tmp.198 tmp.496 tmp.14 tmp.199 tmp.495 tmp.15))
       (undead-out
        ((rdi rsi rdx ra.494 rbp)
         (rsi rdx tmp.198 ra.494 rbp)
         (rdx tmp.198 tmp.15 ra.494 rbp)
         (tmp.198 tmp.15 tmp.14 ra.494 rbp)
         ((tmp.15 tmp.14 ra.494 rbp)
          ((tmp.495 tmp.14 ra.494 rbp)
           (tmp.199 tmp.14 ra.494 rbp)
           (tmp.496 ra.494 rbp)
           (ra.494 rax rbp)
           (rax rbp))
          ((ra.494 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.494 rbp))
         (rbp (tmp.14 tmp.15 tmp.198 ra.494 tmp.496 tmp.199 tmp.495 rax))
         (ra.494
          (tmp.14 tmp.15 tmp.198 rdi rsi rdx rbp tmp.496 tmp.199 tmp.495 rax))
         (tmp.495 (rbp ra.494 tmp.14))
         (tmp.14 (tmp.198 tmp.15 ra.494 rbp tmp.199 tmp.495))
         (tmp.199 (tmp.14 ra.494 rbp))
         (tmp.496 (rbp ra.494))
         (rdx (tmp.15 tmp.198 ra.494))
         (rsi (tmp.198 ra.494))
         (rdi (ra.494))
         (tmp.198 (tmp.14 tmp.15 rsi rdx ra.494 rbp))
         (tmp.15 (tmp.14 rdx tmp.198 ra.494 rbp)))))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((new-frames ())
       (locals
        (tmp.183 tmp.189 ra.497 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.497 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.183 ra.497 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.183 tmp.142 ra.497 rbp)
         (rcx r8 r9 fv0 fv1 tmp.183 l.10 tmp.142 ra.497 rbp)
         (r8 r9 fv0 fv1 tmp.183 cdr.64 l.10 tmp.142 ra.497 rbp)
         (r9 fv0 fv1 tmp.183 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv0 fv1 tmp.183 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (fv1 tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         (tmp.183 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
         ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
          ((tmp.189 car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
           ((car.63 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp)
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))
            ((f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 rbp)
             (map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 fv1 fv0 rbp)
             (cons.76 cdr.64 l.10 tmp.142 ra.497 r9 fv1 fv0 rbp)
             (cdr.64 l.10 tmp.142 ra.497 r8 r9 fv1 fv0 rbp)
             (l.10 tmp.142 ra.497 rcx r8 r9 fv1 fv0 rbp)
             (tmp.142 ra.497 rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (ra.497 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
             (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp))))
          ((l.10 cons.76 f.9 cdr.64 ra.497 r9 rbp)
           (cons.76 f.9 cdr.64 ra.497 r8 r9 rbp)
           (f.9 cdr.64 ra.497 rcx r8 r9 rbp)
           (cdr.64 ra.497 rdx rcx r8 r9 rbp)
           (ra.497 rsi rdx rcx r8 r9 rbp)
           (ra.497 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r9
          (tmp.183
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.497
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           ra.497
           tmp.189
           fv0
           fv1
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.497
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.183
           rbp
           tmp.189
           fv0
           fv1
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           tmp.183
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           tmp.183
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv1
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           tmp.183
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           tmp.183
           tmp.142
           ra.497
           rbp
           tmp.189
           rcx
           r8
           fv0
           fv1
           r9))
         (r8
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.497
           r9
           rbp))
         (rcx
          (tmp.183
           l.10
           tmp.142
           fv1
           fv0
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.497
           r8
           r9
           rbp))
         (rdx
          (tmp.183 tmp.142 fv1 fv0 r15 rdi rsi cdr.64 ra.497 rcx r8 r9 rbp))
         (rsi (tmp.183 fv1 fv0 r15 rdi ra.497 rdx rcx r8 r9 rbp))
         (rdi (fv1 fv0 r15 ra.497 rsi rdx rcx r8 r9 rbp))
         (r15 (fv1 fv0 rdi rsi rdx rcx r8 r9 rbp))
         (fv1
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.183
           ra.497
           rbp
           tmp.189
           rdx
           rcx
           r8
           r9
           fv0
           fv1))
         (map.5
          (car.63
           f.9
           tmp.183
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           rbp
           tmp.189
           fv0
           fv1))
         (fv0
          (tmp.183
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           ra.497
           fv1
           rbp))
         (tmp.189 (rbp ra.497 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63))
         (car.63
          (tmp.183 f.9 map.5 cons.76 cdr.64 l.10 tmp.142 ra.497 rbp tmp.189))
         (tmp.183
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.497
           rbp)))))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((new-frames ())
       (locals
        (tmp.185
         ra.498
         cdr.64
         cons.76
         map.5
         tmp.188
         f.9
         tmp.187
         l.10
         tmp.136
         car.63
         tmp.186
         tmp.142))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.498 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 tmp.185 ra.498 rbp)
         (rdx rcx r8 r9 fv0 fv1 tmp.185 tmp.142 ra.498 rbp)
         (rcx r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 ra.498 rbp)
         (r8 r9 fv0 fv1 tmp.185 tmp.142 l.10 cdr.64 ra.498 rbp)
         (r9 fv0 fv1 tmp.185 tmp.142 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv0 fv1 tmp.185 tmp.142 map.5 l.10 cons.76 cdr.64 ra.498 rbp)
         (fv1 tmp.185 tmp.142 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         (tmp.185 tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
         ((tmp.142 car.63 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
          ((car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           (car.63 tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((car.63 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.186 tmp.187 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
           ((rax map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp)
            ((f.9 tmp.186 rsi rbp)
             (tmp.186 rdi rsi rbp)
             (tmp.186 rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (map.5 l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 rbp)
           (l.10 cons.76 f.9 cdr.64 tmp.188 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 tmp.188 ra.498 r8 r9 rbp)
           (f.9 cdr.64 tmp.188 ra.498 rcx r8 r9 rbp)
           (cdr.64 tmp.188 ra.498 rdx rcx r8 r9 rbp)
           (tmp.188 ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp))
          ((l.10 cons.76 f.9 cdr.64 ra.498 r9 rbp)
           (cons.76 f.9 cdr.64 ra.498 r8 r9 rbp)
           (f.9 cdr.64 ra.498 rcx r8 r9 rbp)
           (cdr.64 ra.498 rdx rcx r8 r9 rbp)
           (ra.498 rsi rdx rcx r8 r9 rbp)
           (ra.498 rdi rsi rdx rcx r8 r9 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)
           (rdi rsi rdx rcx r8 r9 r15 rbp)))))
       (call-undead (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498))
       (conflicts
        ((r9
          (tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp))
         (rbp
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           ra.498
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (ra.498
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           tmp.185
           fv0
           fv1
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdi
           rsi
           rdx
           rcx
           r8
           r9))
         (cdr.64
          (car.63
           f.9
           map.5
           cons.76
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           rdx
           rcx
           r8
           r9))
         (f.9
          (car.63
           fv1
           tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           rsi
           tmp.187
           rax
           tmp.136
           tmp.186
           rcx
           r8
           r9))
         (cons.76
          (car.63
           f.9
           map.5
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r8
           r9))
         (l.10
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           rcx
           r8
           fv0
           fv1
           tmp.185
           tmp.142
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186
           r9))
         (r8
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           rcx
           cons.76
           f.9
           cdr.64
           ra.498
           r9
           rbp))
         (rcx
          (l.10
           tmp.142
           tmp.185
           tmp.188
           r15
           rdi
           rsi
           rdx
           f.9
           cdr.64
           ra.498
           r8
           r9
           rbp))
         (rdx
          (tmp.142 tmp.185 tmp.188 r15 rdi rsi cdr.64 ra.498 rcx r8 r9 rbp))
         (rsi
          (tmp.185
           tmp.188
           f.9
           tmp.186
           car.63
           r15
           rdi
           ra.498
           rdx
           rcx
           r8
           r9
           rbp))
         (rdi (tmp.186 r15 ra.498 rsi rdx rcx r8 r9 rbp))
         (r15 (tmp.186 rdi rsi rdx rcx r8 r9 rbp))
         (tmp.186
          (r15
           rdi
           rsi
           tmp.187
           rax
           tmp.136
           rbp
           ra.498
           cdr.64
           f.9
           cons.76
           l.10
           map.5
           car.63))
         (car.63
          (tmp.185
           tmp.142
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           ra.498
           rbp
           rsi
           tmp.186))
         (map.5
          (car.63
           f.9
           fv0
           fv1
           tmp.185
           tmp.142
           l.10
           cons.76
           cdr.64
           ra.498
           rbp
           tmp.188
           tmp.187
           rax
           tmp.136
           tmp.186))
         (tmp.136 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (rax (rbp ra.498 cdr.64 f.9 cons.76 l.10 map.5 tmp.186))
         (tmp.187 (tmp.186 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (tmp.188 (rsi rdx rcx r8 r9 map.5 l.10 cons.76 f.9 cdr.64 ra.498 rbp))
         (fv1 (f.9 map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (fv0 (map.5 cons.76 cdr.64 l.10 tmp.142 tmp.185 ra.498))
         (tmp.185
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           tmp.142
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.498
           rbp))
         (tmp.142
          (car.63
           f.9
           map.5
           cons.76
           cdr.64
           l.10
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.185
           ra.498
           rbp)))))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! tmp.187 rax)
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((new-frames ())
       (locals
        (tmp.182
         tmp.181
         tmp.138
         tmp.137
         map.5
         l.10
         cons.76
         f.9
         cdr.64
         tmp.180
         ra.499))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 ra.499 rbp)
         (rsi rdx rcx r8 r9 tmp.180 ra.499 rbp)
         (rdx rcx r8 r9 cdr.64 tmp.180 ra.499 rbp)
         (rcx r8 r9 cdr.64 f.9 tmp.180 ra.499 rbp)
         (r8 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp)
         (r9 cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         (cdr.64 l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp)
         ((rax map.5 f.9 tmp.180 cons.76 ra.499 rbp)
          ((cdr.64 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (map.5 f.9 tmp.181 tmp.180 cons.76 ra.499 rbp)
         ((rax tmp.180 cons.76 ra.499 rbp)
          ((f.9 map.5 rdx rbp)
           (map.5 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.182 tmp.180 cons.76 ra.499 rbp)
         (tmp.180 cons.76 ra.499 rdx rbp)
         (cons.76 ra.499 rsi rdx rbp)
         (ra.499 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (map.5 f.9 tmp.180 cons.76 ra.499))
       (conflicts
        ((ra.499
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           rbp))
         (rbp
          (tmp.182
           rdx
           tmp.181
           r15
           rdi
           rsi
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           tmp.180
           ra.499))
         (r9 (l.10 cons.76 f.9 cdr.64 tmp.180 ra.499))
         (r8 (cons.76 f.9 cdr.64 tmp.180 ra.499))
         (rcx (f.9 cdr.64 tmp.180 ra.499))
         (rdx (cons.76 r15 rdi rsi f.9 map.5 rbp cdr.64 tmp.180 ra.499))
         (rsi (cons.76 map.5 rdx r15 rdi cdr.64 rbp tmp.180 ra.499))
         (rdi (rdx r15 rsi rbp ra.499))
         (tmp.180
          (tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           cdr.64
           rsi
           rdx
           rcx
           r8
           r9
           ra.499
           rbp))
         (cdr.64
          (rsi
           tmp.137
           map.5
           l.10
           cons.76
           f.9
           rdx
           rcx
           r8
           r9
           tmp.180
           ra.499
           rbp))
         (f.9
          (rdx
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           cons.76
           rcx
           r8
           r9
           cdr.64
           tmp.180
           ra.499
           rbp))
         (cons.76
          (rsi
           rdx
           tmp.182
           tmp.181
           rax
           tmp.138
           tmp.137
           map.5
           l.10
           r8
           r9
           cdr.64
           f.9
           tmp.180
           ra.499
           rbp))
         (l.10
          (tmp.138 tmp.137 map.5 r9 cdr.64 f.9 tmp.180 cons.76 ra.499 rbp))
         (map.5
          (rsi
           rdx
           tmp.181
           rax
           tmp.138
           cdr.64
           l.10
           f.9
           tmp.180
           cons.76
           ra.499
           rbp))
         (tmp.137 (cdr.64 l.10 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.138 (l.10 map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (rax (rbp ra.499 cons.76 tmp.180 f.9 map.5))
         (r15 (rdx rdi rsi rbp))
         (tmp.181 (map.5 f.9 tmp.180 cons.76 ra.499 rbp))
         (tmp.182 (tmp.180 cons.76 ra.499 rbp)))))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! tmp.181 rax)
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )

(parameterize ([current-pass-list
                  (list
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((new-frames ())
       (locals
        (ones.13
         tmp.141
         listofZero.12
         tmp.140
         inc.6
         tmp.177
         tmp.382
         tmp.348
         map.5
         tmp.176
         tmp.381
         tmp.347
         zeros.4
         tmp.175
         tmp.380
         tmp.346
         *.52
         tmp.174
         tmp.379
         tmp.345
         |+.53|
         tmp.173
         tmp.378
         tmp.344
         |-.54|
         tmp.172
         tmp.377
         tmp.343
         <.55
         tmp.171
         tmp.376
         tmp.342
         <=.56
         tmp.170
         tmp.375
         tmp.341
         >.57
         tmp.169
         tmp.374
         tmp.340
         >=.58
         tmp.168
         tmp.373
         tmp.339
         make-vector.59
         tmp.167
         tmp.372
         tmp.338
         vector-length.60
         tmp.166
         tmp.371
         tmp.337
         vector-set!.61
         tmp.165
         tmp.370
         tmp.336
         vector-ref.62
         tmp.164
         tmp.369
         tmp.335
         car.63
         tmp.163
         tmp.368
         tmp.334
         cdr.64
         tmp.162
         tmp.367
         tmp.333
         procedure-arity.65
         tmp.161
         tmp.366
         tmp.332
         fixnum?.66
         tmp.160
         tmp.365
         tmp.331
         boolean?.67
         tmp.159
         tmp.364
         tmp.330
         empty?.68
         tmp.158
         tmp.363
         tmp.329
         void?.69
         tmp.157
         tmp.362
         tmp.328
         ascii-char?.70
         tmp.156
         tmp.361
         tmp.327
         error?.71
         tmp.155
         tmp.360
         tmp.326
         pair?.72
         tmp.154
         tmp.359
         tmp.325
         procedure?.73
         tmp.153
         tmp.358
         tmp.324
         vector?.74
         tmp.152
         tmp.357
         tmp.323
         not.75
         tmp.151
         tmp.356
         tmp.322
         cons.76
         tmp.150
         tmp.355
         tmp.321
         eq?.77
         tmp.149
         tmp.354
         tmp.320
         make-init-vector.1
         tmp.148
         tmp.353
         tmp.319
         vector-init-loop.80
         tmp.147
         tmp.352
         tmp.318
         unsafe-vector-set!.2
         tmp.146
         tmp.351
         tmp.317
         unsafe-vector-ref.3
         tmp.145
         tmp.350
         tmp.316
         ra.349)))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((new-frames ()) (locals (tmp.139 |+.53| x.11 c.124 ra.383)))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((new-frames ())
       (locals
        (tmp.134
         empty?.68
         c.123
         tmp.179
         car.63
         f.9
         map.5
         cons.76
         cdr.64
         tmp.142
         ra.384
         tmp.190
         tmp.135
         tmp.385
         l.10)))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((new-frames ())
       (locals
        (tmp.130
         eq?.77
         c.122
         tmp.192
         zeros.4
         tmp.131
         |-.54|
         tmp.132
         n.7
         tmp.193
         cons.76
         tmp.133
         tmp.194
         ra.386
         l.8)))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((new-frames ()) (locals (tmp.388 c.121 tmp.201 ra.387 tmp.14 tmp.15)))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((new-frames ()) (locals (tmp.390 c.120 tmp.207 ra.389 tmp.16 tmp.17)))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((new-frames ()) (locals (tmp.392 c.119 tmp.213 ra.391 tmp.18 tmp.19)))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((new-frames ()) (locals (tmp.394 c.118 tmp.220 ra.393 tmp.20 tmp.21)))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((new-frames ()) (locals (tmp.396 c.117 tmp.227 ra.395 tmp.22 tmp.23)))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((new-frames ()) (locals (tmp.398 c.116 tmp.234 ra.397 tmp.24 tmp.25)))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((new-frames ()) (locals (tmp.400 c.115 tmp.241 ra.399 tmp.26 tmp.27)))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((new-frames ())
       (locals (tmp.402 c.114 tmp.244 ra.401 make-init-vector.1 tmp.28)))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((new-frames ()) (locals (tmp.404 c.113 tmp.247 ra.403 tmp.29)))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((new-frames ())
       (locals
        (tmp.406
         c.112
         tmp.253
         ra.405
         tmp.30
         unsafe-vector-set!.2
         tmp.32
         tmp.31)))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((new-frames ())
       (locals
        (tmp.408 c.111 tmp.259 ra.407 tmp.33 unsafe-vector-ref.3 tmp.34)))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((new-frames ()) (locals (tmp.410 c.110 tmp.262 ra.409 tmp.35)))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((new-frames ()) (locals (tmp.412 c.109 tmp.265 ra.411 tmp.36)))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((new-frames ()) (locals (tmp.414 c.108 tmp.268 ra.413 tmp.37)))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((new-frames ()) (locals (tmp.416 tmp.38 c.107 ra.415 tmp.270)))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((new-frames ()) (locals (tmp.418 tmp.39 c.106 ra.417 tmp.272)))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((new-frames ()) (locals (tmp.420 tmp.40 c.105 ra.419 tmp.274)))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((new-frames ()) (locals (tmp.422 tmp.41 c.104 ra.421 tmp.276)))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((new-frames ()) (locals (tmp.424 tmp.42 c.103 ra.423 tmp.278)))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((new-frames ()) (locals (tmp.426 tmp.43 c.102 ra.425 tmp.280)))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((new-frames ()) (locals (tmp.428 tmp.44 c.101 ra.427 tmp.282)))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((new-frames ()) (locals (tmp.430 tmp.45 c.100 ra.429 tmp.284)))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((new-frames ()) (locals (tmp.432 tmp.46 c.99 ra.431 tmp.286)))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((new-frames ()) (locals (c.98 ra.433 tmp.47)))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((new-frames ())
       (locals (tmp.143 tmp.435 tmp.288 tmp.49 tmp.48 c.97 ra.434)))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((new-frames ()) (locals (c.96 ra.436 tmp.51 tmp.50)))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (tmp.126
         tmp.79
         tmp.144
         tmp.442
         tmp.293
         tmp.534
         tmp.292
         tmp.441
         tmp.291
         tmp.440
         tmp.439
         tmp.290
         tmp.438
         vector-init-loop.80
         tmp.78
         c.95
         ra.437)))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((new-frames ())
       (locals (c.94 ra.443 i.83 len.81 vector-init-loop.80 vec.82)))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()) (locals (c.93 tmp.307 ra.444 tmp.90 tmp.91 tmp.89)))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()) (locals (c.92 tmp.315 ra.445 tmp.87 tmp.86)))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((new-frames ()) (locals (tmp.309 ra.446 tmp.87 tmp.86)))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((new-frames ())
       (locals
        (ra.447
         tmp.311
         tmp.86
         tmp.314
         tmp.450
         tmp.313
         tmp.449
         tmp.312
         tmp.448
         tmp.87)))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((new-frames ()) (locals (tmp.301 ra.451 tmp.90 tmp.89 tmp.91)))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((new-frames ())
       (locals
        (ra.452
         tmp.303
         tmp.89
         tmp.91
         tmp.306
         tmp.455
         tmp.305
         tmp.454
         tmp.304
         tmp.453
         tmp.90)))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((new-frames ())
       (locals
        (tmp.295
         i.83
         tmp.457
         tmp.296
         tmp.458
         tmp.297
         tmp.459
         tmp.298
         vector-init-loop.80
         tmp.125
         tmp.460
         tmp.299
         len.81
         ra.456
         vec.82)))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((new-frames ()) (locals (ra.461 tmp.267 tmp.37)))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((new-frames ()) (locals (ra.462 tmp.264 tmp.36)))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((new-frames ()) (locals (ra.463 tmp.261 tmp.35)))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((new-frames ())
       (locals
        (tmp.255 tmp.465 tmp.258 ra.464 unsafe-vector-ref.3 tmp.34 tmp.33)))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((new-frames ())
       (locals (tmp.257 ra.466 tmp.33 tmp.34 tmp.127 unsafe-vector-ref.3)))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals
        (tmp.249
         tmp.468
         tmp.252
         ra.467
         unsafe-vector-set!.2
         tmp.32
         tmp.31
         tmp.30)))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((new-frames ())
       (locals
        (tmp.251 ra.469 tmp.30 tmp.31 tmp.32 tmp.128 unsafe-vector-set!.2)))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((new-frames ()) (locals (ra.470 tmp.246 tmp.29)))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((new-frames ())
       (locals (tmp.243 ra.471 tmp.28 tmp.129 make-init-vector.1)))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((new-frames ()) (locals (tmp.236 tmp.473 tmp.240 ra.472 tmp.26 tmp.27)))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((new-frames ()) (locals (ra.474 tmp.238 tmp.27 tmp.26)))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((new-frames ()) (locals (tmp.229 tmp.476 tmp.233 ra.475 tmp.24 tmp.25)))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((new-frames ()) (locals (ra.477 tmp.231 tmp.25 tmp.24)))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((new-frames ()) (locals (tmp.222 tmp.479 tmp.226 ra.478 tmp.22 tmp.23)))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((new-frames ()) (locals (ra.480 tmp.224 tmp.23 tmp.22)))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((new-frames ()) (locals (tmp.215 tmp.482 tmp.219 ra.481 tmp.20 tmp.21)))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((new-frames ()) (locals (ra.483 tmp.217 tmp.21 tmp.20)))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((new-frames ()) (locals (tmp.209 tmp.485 tmp.212 ra.484 tmp.18 tmp.19)))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((new-frames ()) (locals (ra.486 tmp.211 tmp.487 tmp.18 tmp.19)))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((new-frames ()) (locals (tmp.203 tmp.489 tmp.206 ra.488 tmp.16 tmp.17)))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((new-frames ()) (locals (ra.490 tmp.205 tmp.491 tmp.16 tmp.17)))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((new-frames ()) (locals (tmp.196 tmp.493 tmp.200 ra.492 tmp.15 tmp.14)))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((new-frames ())
       (locals (ra.494 tmp.198 tmp.496 tmp.14 tmp.199 tmp.495 tmp.15)))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((new-frames ())
       (locals
        (tmp.183 tmp.189 ra.497 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63)))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((new-frames ())
       (locals
        (tmp.185
         ra.498
         cdr.64
         cons.76
         map.5
         tmp.188
         f.9
         tmp.187
         l.10
         tmp.136
         car.63
         tmp.186
         tmp.142)))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! tmp.187 rax)
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((new-frames ())
       (locals
        (tmp.182
         tmp.181
         tmp.138
         tmp.137
         map.5
         l.10
         cons.76
         f.9
         cdr.64
         tmp.180
         ra.499)))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! tmp.181 rax)
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     )'(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))



(parameterize ([current-pass-list
                  (list
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((new-frames ()))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 r12)
        (set! r12 (+ r12 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 r12)
        (set! r12 (+ r12 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 r12)
        (set! r12 (+ r12 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 r12)
        (set! r12 (+ r12 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 r12)
        (set! r12 (+ r12 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 r12)
        (set! r12 (+ r12 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 r12)
        (set! r12 (+ r12 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((new-frames ()))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((new-frames ()))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((new-frames ()))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((new-frames ()))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((new-frames ()))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((new-frames ()))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((new-frames ()))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((new-frames ()))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((new-frames ()))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((new-frames ()))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((new-frames ()))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((new-frames ()))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((new-frames ()))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((new-frames ()))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((new-frames ()))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((new-frames ()))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((new-frames ()))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((new-frames ()))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((new-frames ()))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((new-frames ()))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((new-frames ()))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((new-frames ()))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((new-frames ()))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((new-frames ()))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((new-frames ()))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((new-frames ()))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((new-frames ()))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((new-frames ()))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 r12)
        (set! r12 (+ r12 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((new-frames ()))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ()))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.534 tmp.292)
        (set! tmp.293 r12)
        (set! r12 (+ r12 tmp.534))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((new-frames ()))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((new-frames ()))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((new-frames ()))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((new-frames ()))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((new-frames ()))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((new-frames ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((new-frames ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((new-frames ()))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((new-frames ()))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((new-frames ()))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((new-frames ()))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((new-frames ()))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((new-frames ()))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((new-frames ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((new-frames ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((new-frames ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((new-frames ()))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((new-frames ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((new-frames ()))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((new-frames ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((new-frames ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((new-frames ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((new-frames ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((new-frames ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((new-frames ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((new-frames ()))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((new-frames ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((new-frames ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((new-frames ()))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((new-frames ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((new-frames ()))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! tmp.187 rax)
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((new-frames ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! tmp.181 rax)
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     )'(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))



(parameterize ([current-pass-list
                  (list
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.111
      ((new-frames ()))
      (begin
        (set! ra.349 r15)
        (set! tmp.316 (alloc 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.145 tmp.350)
        (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.145 6 16)
        (set! unsafe-vector-ref.3 tmp.145)
        (set! tmp.317 (alloc 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.146 tmp.351)
        (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.146 6 24)
        (set! unsafe-vector-set!.2 tmp.146)
        (set! tmp.318 (alloc 24))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.147 tmp.352)
        (mset! tmp.147 -2 L.vector-init-loop.80.3)
        (mset! tmp.147 6 24)
        (set! vector-init-loop.80 tmp.147)
        (set! tmp.319 (alloc 24))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.148 tmp.353)
        (mset! tmp.148 -2 L.make-init-vector.1.4)
        (mset! tmp.148 6 8)
        (set! make-init-vector.1 tmp.148)
        (set! tmp.320 (alloc 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.149 tmp.354)
        (mset! tmp.149 -2 L.eq?.77.5)
        (mset! tmp.149 6 16)
        (set! eq?.77 tmp.149)
        (set! tmp.321 (alloc 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.150 tmp.355)
        (mset! tmp.150 -2 L.cons.76.6)
        (mset! tmp.150 6 16)
        (set! cons.76 tmp.150)
        (set! tmp.322 (alloc 16))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.151 tmp.356)
        (mset! tmp.151 -2 L.not.75.7)
        (mset! tmp.151 6 8)
        (set! not.75 tmp.151)
        (set! tmp.323 (alloc 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.152 tmp.357)
        (mset! tmp.152 -2 L.vector?.74.8)
        (mset! tmp.152 6 8)
        (set! vector?.74 tmp.152)
        (set! tmp.324 (alloc 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.153 tmp.358)
        (mset! tmp.153 -2 L.procedure?.73.9)
        (mset! tmp.153 6 8)
        (set! procedure?.73 tmp.153)
        (set! tmp.325 (alloc 16))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.154 tmp.359)
        (mset! tmp.154 -2 L.pair?.72.10)
        (mset! tmp.154 6 8)
        (set! pair?.72 tmp.154)
        (set! tmp.326 (alloc 16))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.155 tmp.360)
        (mset! tmp.155 -2 L.error?.71.11)
        (mset! tmp.155 6 8)
        (set! error?.71 tmp.155)
        (set! tmp.327 (alloc 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.156 tmp.361)
        (mset! tmp.156 -2 L.ascii-char?.70.12)
        (mset! tmp.156 6 8)
        (set! ascii-char?.70 tmp.156)
        (set! tmp.328 (alloc 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.157 tmp.362)
        (mset! tmp.157 -2 L.void?.69.13)
        (mset! tmp.157 6 8)
        (set! void?.69 tmp.157)
        (set! tmp.329 (alloc 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.158 tmp.363)
        (mset! tmp.158 -2 L.empty?.68.14)
        (mset! tmp.158 6 8)
        (set! empty?.68 tmp.158)
        (set! tmp.330 (alloc 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.159 tmp.364)
        (mset! tmp.159 -2 L.boolean?.67.15)
        (mset! tmp.159 6 8)
        (set! boolean?.67 tmp.159)
        (set! tmp.331 (alloc 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.160 tmp.365)
        (mset! tmp.160 -2 L.fixnum?.66.16)
        (mset! tmp.160 6 8)
        (set! fixnum?.66 tmp.160)
        (set! tmp.332 (alloc 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.161 tmp.366)
        (mset! tmp.161 -2 L.procedure-arity.65.17)
        (mset! tmp.161 6 8)
        (set! procedure-arity.65 tmp.161)
        (set! tmp.333 (alloc 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.162 tmp.367)
        (mset! tmp.162 -2 L.cdr.64.18)
        (mset! tmp.162 6 8)
        (set! cdr.64 tmp.162)
        (set! tmp.334 (alloc 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.163 tmp.368)
        (mset! tmp.163 -2 L.car.63.19)
        (mset! tmp.163 6 8)
        (set! car.63 tmp.163)
        (set! tmp.335 (alloc 24))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.164 tmp.369)
        (mset! tmp.164 -2 L.vector-ref.62.20)
        (mset! tmp.164 6 16)
        (set! vector-ref.62 tmp.164)
        (set! tmp.336 (alloc 24))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.165 tmp.370)
        (mset! tmp.165 -2 L.vector-set!.61.21)
        (mset! tmp.165 6 24)
        (set! vector-set!.61 tmp.165)
        (set! tmp.337 (alloc 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.166 tmp.371)
        (mset! tmp.166 -2 L.vector-length.60.22)
        (mset! tmp.166 6 8)
        (set! vector-length.60 tmp.166)
        (set! tmp.338 (alloc 24))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.167 tmp.372)
        (mset! tmp.167 -2 L.make-vector.59.23)
        (mset! tmp.167 6 8)
        (set! make-vector.59 tmp.167)
        (set! tmp.339 (alloc 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.168 tmp.373)
        (mset! tmp.168 -2 L.>=.58.24)
        (mset! tmp.168 6 16)
        (set! >=.58 tmp.168)
        (set! tmp.340 (alloc 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.169 tmp.374)
        (mset! tmp.169 -2 L.>.57.25)
        (mset! tmp.169 6 16)
        (set! >.57 tmp.169)
        (set! tmp.341 (alloc 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.170 tmp.375)
        (mset! tmp.170 -2 L.<=.56.26)
        (mset! tmp.170 6 16)
        (set! <=.56 tmp.170)
        (set! tmp.342 (alloc 16))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.171 tmp.376)
        (mset! tmp.171 -2 L.<.55.27)
        (mset! tmp.171 6 16)
        (set! <.55 tmp.171)
        (set! tmp.343 (alloc 16))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.172 tmp.377)
        (mset! tmp.172 -2 L.-.54.28)
        (mset! tmp.172 6 16)
        (set! |-.54| tmp.172)
        (set! tmp.344 (alloc 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.173 tmp.378)
        (mset! tmp.173 -2 L.+.53.29)
        (mset! tmp.173 6 16)
        (set! |+.53| tmp.173)
        (set! tmp.345 (alloc 16))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.174 tmp.379)
        (mset! tmp.174 -2 L.*.52.30)
        (mset! tmp.174 6 16)
        (set! *.52 tmp.174)
        (mset! vector-init-loop.80 14 vector-init-loop.80)
        (mset! make-init-vector.1 14 vector-init-loop.80)
        (mset! vector-ref.62 14 unsafe-vector-ref.3)
        (mset! vector-set!.61 14 unsafe-vector-set!.2)
        (mset! make-vector.59 14 make-init-vector.1)
        (set! tmp.346 (alloc 48))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.175 tmp.380)
        (mset! tmp.175 -2 L.zeros.4.31)
        (mset! tmp.175 6 16)
        (set! zeros.4 tmp.175)
        (set! tmp.347 (alloc 56))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.176 tmp.381)
        (mset! tmp.176 -2 L.map.5.32)
        (mset! tmp.176 6 16)
        (set! map.5 tmp.176)
        (set! tmp.348 (alloc 24))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.177 tmp.382)
        (mset! tmp.177 -2 L.inc.6.33)
        (mset! tmp.177 6 8)
        (set! inc.6 tmp.177)
        (mset! zeros.4 14 cons.76)
        (mset! zeros.4 22 |-.54|)
        (mset! zeros.4 30 zeros.4)
        (mset! zeros.4 38 eq?.77)
        (mset! map.5 14 cdr.64)
        (mset! map.5 22 map.5)
        (mset! map.5 30 car.63)
        (mset! map.5 38 cons.76)
        (mset! map.5 46 empty?.68)
        (mset! inc.6 14 |+.53|)
        (set! tmp.140 zeros.4)
        (return-point L.rp.112
          (begin
            (set! rdx 22)
            (set! rsi 256)
            (set! rdi zeros.4)
            (set! r15 L.rp.112)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))
        (set! listofZero.12 rax)
        (set! tmp.141 map.5)
        (return-point L.rp.113
          (begin
            (set! rdx listofZero.12)
            (set! rsi inc.6)
            (set! rdi map.5)
            (set! r15 L.rp.113)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! ones.13 rax)
        (set! rax ones.13)
        (jump ra.349 rbp rax)))
    (define L.inc.6.33
      ((new-frames ()))
      (begin
        (set! ra.383 r15)
        (set! c.124 rdi)
        (set! x.11 rsi)
        (set! |+.53| (mref c.124 14))
        (set! tmp.139 |+.53|)
        (set! rdx 8)
        (set! rsi x.11)
        (set! rdi |+.53|)
        (set! r15 ra.383)
        (jump L.+.53.29 rbp r15 rdx rsi rdi)))
    (define L.map.5.32
      ((new-frames ()))
      (begin
        (set! ra.384 r15)
        (set! c.123 rdi)
        (set! f.9 rsi)
        (set! l.10 rdx)
        (set! cdr.64 (mref c.123 14))
        (set! map.5 (mref c.123 22))
        (set! car.63 (mref c.123 30))
        (set! cons.76 (mref c.123 38))
        (set! empty?.68 (mref c.123 46))
        (set! tmp.134 empty?.68)
        (return-point L.rp.114
          (begin
            (set! rsi l.10)
            (set! rdi empty?.68)
            (set! r15 L.rp.114)
            (jump L.empty?.68.14 rbp r15 rsi rdi)))
        (set! tmp.179 rax)
        (if (neq? tmp.179 6)
          (begin (set! rax l.10) (jump ra.384 rbp rax))
          (begin
            (set! tmp.135 cons.76)
            (set! tmp.142 f.9)
            (set! tmp.385 (bitwise-and tmp.142 7))
            (set! tmp.190 tmp.385)
            (if (eq? tmp.190 2)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.384)
                (jump L.jp.38 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))))))
    (define L.zeros.4.31
      ((new-frames ()))
      (begin
        (set! ra.386 r15)
        (set! c.122 rdi)
        (set! n.7 rsi)
        (set! l.8 rdx)
        (set! cons.76 (mref c.122 14))
        (set! |-.54| (mref c.122 22))
        (set! zeros.4 (mref c.122 30))
        (set! eq?.77 (mref c.122 38))
        (set! tmp.130 eq?.77)
        (return-point L.rp.115
          (begin
            (set! rdx 0)
            (set! rsi n.7)
            (set! rdi eq?.77)
            (set! r15 L.rp.115)
            (jump L.eq?.77.5 rbp r15 rdx rsi rdi)))
        (set! tmp.192 rax)
        (if (neq? tmp.192 6)
          (begin (set! rax l.8) (jump ra.386 rbp rax))
          (begin
            (set! tmp.131 zeros.4)
            (set! tmp.132 |-.54|)
            (return-point L.rp.116
              (begin
                (set! rdx 8)
                (set! rsi n.7)
                (set! rdi |-.54|)
                (set! r15 L.rp.116)
                (jump L.-.54.28 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (set! tmp.133 cons.76)
            (return-point L.rp.117
              (begin
                (set! rdx l.8)
                (set! rsi 0)
                (set! rdi cons.76)
                (set! r15 L.rp.117)
                (jump L.cons.76.6 rbp r15 rdx rsi rdi)))
            (set! tmp.194 rax)
            (set! rdx tmp.194)
            (set! rsi tmp.193)
            (set! rdi zeros.4)
            (set! r15 ra.386)
            (jump L.zeros.4.31 rbp r15 rdx rsi rdi)))))
    (define L.*.52.30
      ((new-frames ()))
      (begin
        (set! ra.387 r15)
        (set! c.121 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.388 (bitwise-and tmp.15 7))
        (set! tmp.201 tmp.388)
        (if (eq? tmp.201 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.+.53.29
      ((new-frames ()))
      (begin
        (set! ra.389 r15)
        (set! c.120 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.390 (bitwise-and tmp.17 7))
        (set! tmp.207 tmp.390)
        (if (eq? tmp.207 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.389)
            (jump L.jp.47 rbp r15 rdx rsi rdi)))))
    (define L.-.54.28
      ((new-frames ()))
      (begin
        (set! ra.391 r15)
        (set! c.119 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.392 (bitwise-and tmp.19 7))
        (set! tmp.213 tmp.392)
        (if (eq? tmp.213 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.391)
            (jump L.jp.51 rbp r15 rdx rsi rdi)))))
    (define L.<.55.27
      ((new-frames ()))
      (begin
        (set! ra.393 r15)
        (set! c.118 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.394 (bitwise-and tmp.21 7))
        (set! tmp.220 tmp.394)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.393)
            (jump L.jp.56 rbp r15 rdx rsi rdi)))))
    (define L.<=.56.26
      ((new-frames ()))
      (begin
        (set! ra.395 r15)
        (set! c.117 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.396 (bitwise-and tmp.23 7))
        (set! tmp.227 tmp.396)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.395)
            (jump L.jp.61 rbp r15 rdx rsi rdi)))))
    (define L.>.57.25
      ((new-frames ()))
      (begin
        (set! ra.397 r15)
        (set! c.116 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.398 (bitwise-and tmp.25 7))
        (set! tmp.234 tmp.398)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.397)
            (jump L.jp.66 rbp r15 rdx rsi rdi)))))
    (define L.>=.58.24
      ((new-frames ()))
      (begin
        (set! ra.399 r15)
        (set! c.115 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.400 (bitwise-and tmp.27 7))
        (set! tmp.241 tmp.400)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.399)
            (jump L.jp.71 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.59.23
      ((new-frames ()))
      (begin
        (set! ra.401 r15)
        (set! c.114 rdi)
        (set! tmp.28 rsi)
        (set! make-init-vector.1 (mref c.114 14))
        (set! tmp.402 (bitwise-and tmp.28 7))
        (set! tmp.244 tmp.402)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.28)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.401)
            (jump L.jp.73 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.60.22
      ((new-frames ()))
      (begin
        (set! ra.403 r15)
        (set! c.113 rdi)
        (set! tmp.29 rsi)
        (set! tmp.404 (bitwise-and tmp.29 7))
        (set! tmp.247 tmp.404)
        (if (eq? tmp.247 3)
          (begin
            (set! rsi tmp.29)
            (set! rdi 14)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.29)
            (set! rdi 6)
            (set! r15 ra.403)
            (jump L.jp.75 rbp r15 rsi rdi)))))
    (define L.vector-set!.61.21
      ((new-frames ()))
      (begin
        (set! ra.405 r15)
        (set! c.112 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.32 rcx)
        (set! unsafe-vector-set!.2 (mref c.112 14))
        (set! tmp.406 (bitwise-and tmp.31 7))
        (set! tmp.253 tmp.406)
        (if (eq? tmp.253 0)
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.31)
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.405)
            (jump L.jp.79 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.62.20
      ((new-frames ()))
      (begin
        (set! ra.407 r15)
        (set! c.111 rdi)
        (set! tmp.33 rsi)
        (set! tmp.34 rdx)
        (set! unsafe-vector-ref.3 (mref c.111 14))
        (set! tmp.408 (bitwise-and tmp.34 7))
        (set! tmp.259 tmp.408)
        (if (eq? tmp.259 0)
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.34)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.407)
            (jump L.jp.83 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.63.19
      ((new-frames ()))
      (begin
        (set! ra.409 r15)
        (set! c.110 rdi)
        (set! tmp.35 rsi)
        (set! tmp.410 (bitwise-and tmp.35 7))
        (set! tmp.262 tmp.410)
        (if (eq? tmp.262 1)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.409)
            (jump L.jp.85 rbp r15 rsi rdi)))))
    (define L.cdr.64.18
      ((new-frames ()))
      (begin
        (set! ra.411 r15)
        (set! c.109 rdi)
        (set! tmp.36 rsi)
        (set! tmp.412 (bitwise-and tmp.36 7))
        (set! tmp.265 tmp.412)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.36)
            (set! rdi 14)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.36)
            (set! rdi 6)
            (set! r15 ra.411)
            (jump L.jp.87 rbp r15 rsi rdi)))))
    (define L.procedure-arity.65.17
      ((new-frames ()))
      (begin
        (set! ra.413 r15)
        (set! c.108 rdi)
        (set! tmp.37 rsi)
        (set! tmp.414 (bitwise-and tmp.37 7))
        (set! tmp.268 tmp.414)
        (if (eq? tmp.268 2)
          (begin
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.413)
            (jump L.jp.89 rbp r15 rsi rdi)))))
    (define L.fixnum?.66.16
      ((new-frames ()))
      (begin
        (set! ra.415 r15)
        (set! c.107 rdi)
        (set! tmp.38 rsi)
        (set! tmp.416 (bitwise-and tmp.38 7))
        (set! tmp.270 tmp.416)
        (if (eq? tmp.270 0)
          (begin (set! rax 14) (jump ra.415 rbp rax))
          (begin (set! rax 6) (jump ra.415 rbp rax)))))
    (define L.boolean?.67.15
      ((new-frames ()))
      (begin
        (set! ra.417 r15)
        (set! c.106 rdi)
        (set! tmp.39 rsi)
        (set! tmp.418 (bitwise-and tmp.39 247))
        (set! tmp.272 tmp.418)
        (if (eq? tmp.272 6)
          (begin (set! rax 14) (jump ra.417 rbp rax))
          (begin (set! rax 6) (jump ra.417 rbp rax)))))
    (define L.empty?.68.14
      ((new-frames ()))
      (begin
        (set! ra.419 r15)
        (set! c.105 rdi)
        (set! tmp.40 rsi)
        (set! tmp.420 (bitwise-and tmp.40 255))
        (set! tmp.274 tmp.420)
        (if (eq? tmp.274 22)
          (begin (set! rax 14) (jump ra.419 rbp rax))
          (begin (set! rax 6) (jump ra.419 rbp rax)))))
    (define L.void?.69.13
      ((new-frames ()))
      (begin
        (set! ra.421 r15)
        (set! c.104 rdi)
        (set! tmp.41 rsi)
        (set! tmp.422 (bitwise-and tmp.41 255))
        (set! tmp.276 tmp.422)
        (if (eq? tmp.276 30)
          (begin (set! rax 14) (jump ra.421 rbp rax))
          (begin (set! rax 6) (jump ra.421 rbp rax)))))
    (define L.ascii-char?.70.12
      ((new-frames ()))
      (begin
        (set! ra.423 r15)
        (set! c.103 rdi)
        (set! tmp.42 rsi)
        (set! tmp.424 (bitwise-and tmp.42 255))
        (set! tmp.278 tmp.424)
        (if (eq? tmp.278 46)
          (begin (set! rax 14) (jump ra.423 rbp rax))
          (begin (set! rax 6) (jump ra.423 rbp rax)))))
    (define L.error?.71.11
      ((new-frames ()))
      (begin
        (set! ra.425 r15)
        (set! c.102 rdi)
        (set! tmp.43 rsi)
        (set! tmp.426 (bitwise-and tmp.43 255))
        (set! tmp.280 tmp.426)
        (if (eq? tmp.280 62)
          (begin (set! rax 14) (jump ra.425 rbp rax))
          (begin (set! rax 6) (jump ra.425 rbp rax)))))
    (define L.pair?.72.10
      ((new-frames ()))
      (begin
        (set! ra.427 r15)
        (set! c.101 rdi)
        (set! tmp.44 rsi)
        (set! tmp.428 (bitwise-and tmp.44 7))
        (set! tmp.282 tmp.428)
        (if (eq? tmp.282 1)
          (begin (set! rax 14) (jump ra.427 rbp rax))
          (begin (set! rax 6) (jump ra.427 rbp rax)))))
    (define L.procedure?.73.9
      ((new-frames ()))
      (begin
        (set! ra.429 r15)
        (set! c.100 rdi)
        (set! tmp.45 rsi)
        (set! tmp.430 (bitwise-and tmp.45 7))
        (set! tmp.284 tmp.430)
        (if (eq? tmp.284 2)
          (begin (set! rax 14) (jump ra.429 rbp rax))
          (begin (set! rax 6) (jump ra.429 rbp rax)))))
    (define L.vector?.74.8
      ((new-frames ()))
      (begin
        (set! ra.431 r15)
        (set! c.99 rdi)
        (set! tmp.46 rsi)
        (set! tmp.432 (bitwise-and tmp.46 7))
        (set! tmp.286 tmp.432)
        (if (eq? tmp.286 3)
          (begin (set! rax 14) (jump ra.431 rbp rax))
          (begin (set! rax 6) (jump ra.431 rbp rax)))))
    (define L.not.75.7
      ((new-frames ()))
      (begin
        (set! ra.433 r15)
        (set! c.98 rdi)
        (set! tmp.47 rsi)
        (if (neq? tmp.47 6)
          (begin (set! rax 6) (jump ra.433 rbp rax))
          (begin (set! rax 14) (jump ra.433 rbp rax)))))
    (define L.cons.76.6
      ((new-frames ()))
      (begin
        (set! ra.434 r15)
        (set! c.97 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (set! tmp.288 (alloc 16))
        (set! tmp.435 (+ tmp.288 1))
        (set! tmp.143 tmp.435)
        (mset! tmp.143 -1 tmp.48)
        (mset! tmp.143 7 tmp.49)
        (set! rax tmp.143)
        (jump ra.434 rbp rax)))
    (define L.eq?.77.5
      ((new-frames ()))
      (begin
        (set! ra.436 r15)
        (set! c.96 rdi)
        (set! tmp.50 rsi)
        (set! tmp.51 rdx)
        (if (eq? tmp.50 tmp.51)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ()))
      (begin
        (set! ra.437 r15)
        (set! c.95 rdi)
        (set! tmp.78 rsi)
        (set! vector-init-loop.80 (mref c.95 14))
        (set! tmp.438 (arithmetic-shift-right tmp.78 3))
        (set! tmp.290 tmp.438)
        (set! tmp.439 1)
        (set! tmp.440 (+ tmp.439 tmp.290))
        (set! tmp.291 tmp.440)
        (set! tmp.441 (* tmp.291 8))
        (set! tmp.292 tmp.441)
        (set! tmp.293 (alloc tmp.292))
        (set! tmp.442 (+ tmp.293 3))
        (set! tmp.144 tmp.442)
        (mset! tmp.144 -3 tmp.78)
        (set! tmp.79 tmp.144)
        (set! tmp.126 vector-init-loop.80)
        (set! rcx tmp.79)
        (set! rdx 0)
        (set! rsi tmp.78)
        (set! rdi vector-init-loop.80)
        (set! r15 ra.437)
        (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.80.3
      ((new-frames ()))
      (begin
        (set! ra.443 r15)
        (set! c.94 rdi)
        (set! len.81 rsi)
        (set! i.83 rdx)
        (set! vec.82 rcx)
        (set! vector-init-loop.80 (mref c.94 14))
        (if (eq? len.81 i.83)
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 14)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.82)
            (set! rcx vector-init-loop.80)
            (set! rdx len.81)
            (set! rsi i.83)
            (set! rdi 6)
            (set! r15 ra.443)
            (jump L.jp.102 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()))
      (begin
        (set! ra.444 r15)
        (set! c.93 rdi)
        (set! tmp.89 rsi)
        (set! tmp.90 rdx)
        (set! tmp.91 rcx)
        (set! tmp.307 (mref tmp.89 -3))
        (if (< tmp.90 tmp.307)
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 14)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.89)
            (set! rdx tmp.91)
            (set! rsi tmp.90)
            (set! rdi 6)
            (set! r15 ra.444)
            (jump L.jp.106 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()))
      (begin
        (set! ra.445 r15)
        (set! c.92 rdi)
        (set! tmp.86 rsi)
        (set! tmp.87 rdx)
        (set! tmp.315 (mref tmp.86 -3))
        (if (< tmp.87 tmp.315)
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 14)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.86)
            (set! rsi tmp.87)
            (set! rdi 6)
            (set! r15 ra.445)
            (jump L.jp.110 rbp r15 rdx rsi rdi)))))
    (define L.jp.110
      ((new-frames ()))
      (begin
        (set! ra.446 r15)
        (set! tmp.309 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 14)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.86)
              (set! rsi tmp.87)
              (set! rdi 6)
              (set! r15 ra.446)
              (jump L.jp.109 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.446 rbp rax)))))
    (define L.jp.109
      ((new-frames ()))
      (begin
        (set! ra.447 r15)
        (set! tmp.311 rdi)
        (set! tmp.87 rsi)
        (set! tmp.86 rdx)
        (if (neq? tmp.311 6)
          (begin
            (set! tmp.448 (arithmetic-shift-right tmp.87 3))
            (set! tmp.312 tmp.448)
            (set! tmp.449 (* tmp.312 8))
            (set! tmp.313 tmp.449)
            (set! tmp.450 (+ tmp.313 5))
            (set! tmp.314 tmp.450)
            (set! rax (mref tmp.86 tmp.314))
            (jump ra.447 rbp rax))
          (begin (set! rax 2622) (jump ra.447 rbp rax)))))
    (define L.jp.106
      ((new-frames ()))
      (begin
        (set! ra.451 r15)
        (set! tmp.301 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 14)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.91)
              (set! rdx tmp.89)
              (set! rsi tmp.90)
              (set! rdi 6)
              (set! r15 ra.451)
              (jump L.jp.105 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.451 rbp rax)))))
    (define L.jp.105
      ((new-frames ()))
      (begin
        (set! ra.452 r15)
        (set! tmp.303 rdi)
        (set! tmp.90 rsi)
        (set! tmp.89 rdx)
        (set! tmp.91 rcx)
        (if (neq? tmp.303 6)
          (begin
            (set! tmp.453 (arithmetic-shift-right tmp.90 3))
            (set! tmp.304 tmp.453)
            (set! tmp.454 (* tmp.304 8))
            (set! tmp.305 tmp.454)
            (set! tmp.455 (+ tmp.305 5))
            (set! tmp.306 tmp.455)
            (mset! tmp.89 tmp.306 tmp.91)
            (set! rax 30)
            (jump ra.452 rbp rax))
          (begin (set! rax 2366) (jump ra.452 rbp rax)))))
    (define L.jp.102
      ((new-frames ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.295 rdi)
        (set! i.83 rsi)
        (set! len.81 rdx)
        (set! vector-init-loop.80 rcx)
        (set! vec.82 r8)
        (if (neq? tmp.295 6)
          (begin (set! rax vec.82) (jump ra.456 rbp rax))
          (begin
            (set! tmp.457 (arithmetic-shift-right i.83 3))
            (set! tmp.296 tmp.457)
            (set! tmp.458 (* tmp.296 8))
            (set! tmp.297 tmp.458)
            (set! tmp.459 (+ tmp.297 5))
            (set! tmp.298 tmp.459)
            (mset! vec.82 tmp.298 0)
            (set! tmp.125 vector-init-loop.80)
            (set! tmp.460 (+ i.83 8))
            (set! tmp.299 tmp.460)
            (set! rcx vec.82)
            (set! rdx tmp.299)
            (set! rsi len.81)
            (set! rdi vector-init-loop.80)
            (set! r15 ra.456)
            (jump L.vector-init-loop.80.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.89
      ((new-frames ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.267 rdi)
        (set! tmp.37 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.37 6)) (jump ra.461 rbp rax))
          (begin (set! rax 3390) (jump ra.461 rbp rax)))))
    (define L.jp.87
      ((new-frames ()))
      (begin
        (set! ra.462 r15)
        (set! tmp.264 rdi)
        (set! tmp.36 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.36 7)) (jump ra.462 rbp rax))
          (begin (set! rax 3134) (jump ra.462 rbp rax)))))
    (define L.jp.85
      ((new-frames ()))
      (begin
        (set! ra.463 r15)
        (set! tmp.261 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.261 6)
          (begin (set! rax (mref tmp.35 -1)) (jump ra.463 rbp rax))
          (begin (set! rax 2878) (jump ra.463 rbp rax)))))
    (define L.jp.83
      ((new-frames ()))
      (begin
        (set! ra.464 r15)
        (set! tmp.255 rdi)
        (set! tmp.33 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.34 rcx)
        (if (neq? tmp.255 6)
          (begin
            (set! tmp.465 (bitwise-and tmp.33 7))
            (set! tmp.258 tmp.465)
            (if (eq? tmp.258 3)
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.33)
                (set! rdx tmp.34)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.464)
                (jump L.jp.82 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.464 rbp rax)))))
    (define L.jp.82
      ((new-frames ()))
      (begin
        (set! ra.466 r15)
        (set! tmp.257 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.34 rdx)
        (set! tmp.33 rcx)
        (if (neq? tmp.257 6)
          (begin
            (set! tmp.127 unsafe-vector-ref.3)
            (set! rdx tmp.34)
            (set! rsi tmp.33)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.466)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.466 rbp rax)))))
    (define L.jp.79
      ((new-frames ()))
      (begin
        (set! ra.467 r15)
        (set! tmp.249 rdi)
        (set! tmp.30 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.32 rcx)
        (set! tmp.31 r8)
        (if (neq? tmp.249 6)
          (begin
            (set! tmp.468 (bitwise-and tmp.30 7))
            (set! tmp.252 tmp.468)
            (if (eq? tmp.252 3)
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.30)
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.467)
                (jump L.jp.78 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.467 rbp rax)))))
    (define L.jp.78
      ((new-frames ()))
      (begin
        (set! ra.469 r15)
        (set! tmp.251 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (set! tmp.30 r8)
        (if (neq? tmp.251 6)
          (begin
            (set! tmp.128 unsafe-vector-set!.2)
            (set! rcx tmp.32)
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.469)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.469 rbp rax)))))
    (define L.jp.75
      ((new-frames ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.246 rdi)
        (set! tmp.29 rsi)
        (if (neq? tmp.246 6)
          (begin (set! rax (mref tmp.29 -3)) (jump ra.470 rbp rax))
          (begin (set! rax 2110) (jump ra.470 rbp rax)))))
    (define L.jp.73
      ((new-frames ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.243 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.28 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.129 make-init-vector.1)
            (set! rsi tmp.28)
            (set! rdi make-init-vector.1)
            (set! r15 ra.471)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.471 rbp rax)))))
    (define L.jp.71
      ((new-frames ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.236 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.473 (bitwise-and tmp.26 7))
            (set! tmp.240 tmp.473)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.472)
                (jump L.jp.70 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.472 rbp rax)))))
    (define L.jp.70
      ((new-frames ()))
      (begin
        (set! ra.474 r15)
        (set! tmp.238 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.238 6)
          (if (>= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.474 rbp rax))
            (begin (set! rax 6) (jump ra.474 rbp rax)))
          (begin (set! rax 1598) (jump ra.474 rbp rax)))))
    (define L.jp.66
      ((new-frames ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.229 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.476 (bitwise-and tmp.24 7))
            (set! tmp.233 tmp.476)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.475)
                (jump L.jp.65 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.475 rbp rax)))))
    (define L.jp.65
      ((new-frames ()))
      (begin
        (set! ra.477 r15)
        (set! tmp.231 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.231 6)
          (if (> tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.477 rbp rax))
            (begin (set! rax 6) (jump ra.477 rbp rax)))
          (begin (set! rax 1342) (jump ra.477 rbp rax)))))
    (define L.jp.61
      ((new-frames ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.222 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.479 (bitwise-and tmp.22 7))
            (set! tmp.226 tmp.479)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.478)
                (jump L.jp.60 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.478 rbp rax)))))
    (define L.jp.60
      ((new-frames ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.224 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.224 6)
          (if (<= tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.480 rbp rax))
            (begin (set! rax 6) (jump ra.480 rbp rax)))
          (begin (set! rax 1086) (jump ra.480 rbp rax)))))
    (define L.jp.56
      ((new-frames ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.215 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.215 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.20 7))
            (set! tmp.219 tmp.482)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.55 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.481 rbp rax)))))
    (define L.jp.55
      ((new-frames ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.217 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.217 6)
          (if (< tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 830) (jump ra.483 rbp rax)))))
    (define L.jp.51
      ((new-frames ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.209 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.209 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.18 7))
            (set! tmp.212 tmp.485)
            (if (eq? tmp.212 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.50 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.484 rbp rax)))))
    (define L.jp.50
      ((new-frames ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.211 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.211 6)
          (begin
            (set! tmp.487 (- tmp.18 tmp.19))
            (set! rax tmp.487)
            (jump ra.486 rbp rax))
          (begin (set! rax 574) (jump ra.486 rbp rax)))))
    (define L.jp.47
      ((new-frames ()))
      (begin
        (set! ra.488 r15)
        (set! tmp.203 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.489 (bitwise-and tmp.16 7))
            (set! tmp.206 tmp.489)
            (if (eq? tmp.206 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.488)
                (jump L.jp.46 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.488 rbp rax)))))
    (define L.jp.46
      ((new-frames ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.205 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.491 (+ tmp.16 tmp.17))
            (set! rax tmp.491)
            (jump ra.490 rbp rax))
          (begin (set! rax 318) (jump ra.490 rbp rax)))))
    (define L.jp.43
      ((new-frames ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.196 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.196 6)
          (begin
            (set! tmp.493 (bitwise-and tmp.14 7))
            (set! tmp.200 tmp.493)
            (if (eq? tmp.200 0)
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 14)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.14)
                (set! rsi tmp.15)
                (set! rdi 6)
                (set! r15 ra.492)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.492 rbp rax)))))
    (define L.jp.42
      ((new-frames ()))
      (begin
        (set! ra.494 r15)
        (set! tmp.198 rdi)
        (set! tmp.15 rsi)
        (set! tmp.14 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.495 (arithmetic-shift-right tmp.15 3))
            (set! tmp.199 tmp.495)
            (set! tmp.496 (* tmp.14 tmp.199))
            (set! rax tmp.496)
            (jump ra.494 rbp rax))
          (begin (set! rax 62) (jump ra.494 rbp rax)))))
    (define L.jp.38
      ((new-frames ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.183 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.183 6)
          (begin
            (set! tmp.189 (mref tmp.142 6))
            (if (eq? tmp.189 8)
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))
              (begin
                (set! fv1 car.63)
                (set! fv0 f.9)
                (set! r9 map.5)
                (set! r8 cons.76)
                (set! rcx cdr.64)
                (set! rdx l.10)
                (set! rsi tmp.142)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.37 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi))))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 11070)
            (set! r15 ra.497)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.37
      ((new-frames ()))
      (begin
        (set! ra.498 r15)
        (set! tmp.185 rdi)
        (set! tmp.142 rsi)
        (set! l.10 rdx)
        (set! cdr.64 rcx)
        (set! cons.76 r8)
        (set! map.5 r9)
        (set! f.9 fv0)
        (set! car.63 fv1)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.186 (mref tmp.142 -2))
            (set! tmp.136 car.63)
            (return-point L.rp.118
              (begin
                (set! rsi l.10)
                (set! rdi car.63)
                (set! r15 L.rp.118)
                (jump L.car.63.19 rbp r15 rsi rdi)))
            (set! tmp.187 rax)
            (return-point L.rp.119
              (begin
                (set! rsi tmp.187)
                (set! rdi f.9)
                (set! r15 L.rp.119)
                (jump tmp.186 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi tmp.188)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi))
          (begin
            (set! r9 map.5)
            (set! r8 l.10)
            (set! rcx cons.76)
            (set! rdx f.9)
            (set! rsi cdr.64)
            (set! rdi 10814)
            (set! r15 ra.498)
            (jump L.jp.35 rbp r15 r9 r8 rcx rdx rsi rdi)))))
    (define L.jp.35
      ((new-frames ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.180 rdi)
        (set! cdr.64 rsi)
        (set! f.9 rdx)
        (set! cons.76 rcx)
        (set! l.10 r8)
        (set! map.5 r9)
        (set! tmp.137 map.5)
        (set! tmp.138 cdr.64)
        (return-point L.rp.120
          (begin
            (set! rsi l.10)
            (set! rdi cdr.64)
            (set! r15 L.rp.120)
            (jump L.cdr.64.18 rbp r15 rsi rdi)))
        (set! tmp.181 rax)
        (return-point L.rp.121
          (begin
            (set! rdx tmp.181)
            (set! rsi f.9)
            (set! rdi map.5)
            (set! r15 L.rp.121)
            (jump L.map.5.32 rbp r15 rdx rsi rdi)))
        (set! tmp.182 rax)
        (set! rdx tmp.182)
        (set! rsi tmp.180)
        (set! rdi cons.76)
        (set! r15 ra.499)
        (jump L.cons.76.6 rbp r15 rdx rsi rdi))))
     )'(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))


(parameterize ([current-pass-list
                  (list
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.inc.6.33
      (lambda (c.124 x.11)
        (let ((|+.53| (mref c.124 14)))
          (let ((tmp.139 |+.53|)) (apply L.+.53.29 |+.53| x.11 8)))))
    (define L.map.5.32
      (lambda (c.123 f.9 l.10)
        (let ((cdr.64 (mref c.123 14)))
          (let ((map.5 (mref c.123 22)))
            (let ((car.63 (mref c.123 30)))
              (let ((cons.76 (mref c.123 38)))
                (let ((empty?.68 (mref c.123 46)))
                  (let ((tmp.134 empty?.68))
                    (let ((tmp.179 (apply L.empty?.68.14 empty?.68 l.10)))
                      (if (neq? tmp.179 6)
                        l.10
                        (let ((tmp.135 cons.76))
                          (let ((tmp.142 f.9))
                            (let ((tmp.190 (bitwise-and tmp.142 7)))
                              (if (eq? tmp.190 2)
                                (apply
                                 L.jp.38
                                 14
                                 tmp.142
                                 l.10
                                 cdr.64
                                 cons.76
                                 map.5
                                 f.9
                                 car.63)
                                (apply
                                 L.jp.38
                                 6
                                 tmp.142
                                 l.10
                                 cdr.64
                                 cons.76
                                 map.5
                                 f.9
                                 car.63)))))))))))))))
    (define L.zeros.4.31
      (lambda (c.122 n.7 l.8)
        (let ((cons.76 (mref c.122 14)))
          (let ((|-.54| (mref c.122 22)))
            (let ((zeros.4 (mref c.122 30)))
              (let ((eq?.77 (mref c.122 38)))
                (let ((tmp.130 eq?.77))
                  (let ((tmp.192 (apply L.eq?.77.5 eq?.77 n.7 0)))
                    (if (neq? tmp.192 6)
                      l.8
                      (let ((tmp.131 zeros.4))
                        (let ((tmp.132 |-.54|))
                          (let ((tmp.193 (apply L.-.54.28 |-.54| n.7 8)))
                            (let ((tmp.133 cons.76))
                              (let ((tmp.194
                                     (apply L.cons.76.6 cons.76 0 l.8)))
                                (apply
                                 L.zeros.4.31
                                 zeros.4
                                 tmp.193
                                 tmp.194)))))))))))))))
    (define L.*.52.30
      (lambda (c.121 tmp.14 tmp.15)
        (let ((tmp.201 (bitwise-and tmp.15 7)))
          (if (eq? tmp.201 0)
            (apply L.jp.43 14 tmp.14 tmp.15)
            (apply L.jp.43 6 tmp.14 tmp.15)))))
    (define L.+.53.29
      (lambda (c.120 tmp.16 tmp.17)
        (let ((tmp.207 (bitwise-and tmp.17 7)))
          (if (eq? tmp.207 0)
            (apply L.jp.47 14 tmp.16 tmp.17)
            (apply L.jp.47 6 tmp.16 tmp.17)))))
    (define L.-.54.28
      (lambda (c.119 tmp.18 tmp.19)
        (let ((tmp.213 (bitwise-and tmp.19 7)))
          (if (eq? tmp.213 0)
            (apply L.jp.51 14 tmp.18 tmp.19)
            (apply L.jp.51 6 tmp.18 tmp.19)))))
    (define L.<.55.27
      (lambda (c.118 tmp.20 tmp.21)
        (let ((tmp.220 (bitwise-and tmp.21 7)))
          (if (eq? tmp.220 0)
            (apply L.jp.56 14 tmp.20 tmp.21)
            (apply L.jp.56 6 tmp.20 tmp.21)))))
    (define L.<=.56.26
      (lambda (c.117 tmp.22 tmp.23)
        (let ((tmp.227 (bitwise-and tmp.23 7)))
          (if (eq? tmp.227 0)
            (apply L.jp.61 14 tmp.22 tmp.23)
            (apply L.jp.61 6 tmp.22 tmp.23)))))
    (define L.>.57.25
      (lambda (c.116 tmp.24 tmp.25)
        (let ((tmp.234 (bitwise-and tmp.25 7)))
          (if (eq? tmp.234 0)
            (apply L.jp.66 14 tmp.24 tmp.25)
            (apply L.jp.66 6 tmp.24 tmp.25)))))
    (define L.>=.58.24
      (lambda (c.115 tmp.26 tmp.27)
        (let ((tmp.241 (bitwise-and tmp.27 7)))
          (if (eq? tmp.241 0)
            (apply L.jp.71 14 tmp.26 tmp.27)
            (apply L.jp.71 6 tmp.26 tmp.27)))))
    (define L.make-vector.59.23
      (lambda (c.114 tmp.28)
        (let ((make-init-vector.1 (mref c.114 14)))
          (let ((tmp.244 (bitwise-and tmp.28 7)))
            (if (eq? tmp.244 0)
              (apply L.jp.73 14 make-init-vector.1 tmp.28)
              (apply L.jp.73 6 make-init-vector.1 tmp.28))))))
    (define L.vector-length.60.22
      (lambda (c.113 tmp.29)
        (let ((tmp.247 (bitwise-and tmp.29 7)))
          (if (eq? tmp.247 3)
            (apply L.jp.75 14 tmp.29)
            (apply L.jp.75 6 tmp.29)))))
    (define L.vector-set!.61.21
      (lambda (c.112 tmp.30 tmp.31 tmp.32)
        (let ((unsafe-vector-set!.2 (mref c.112 14)))
          (let ((tmp.253 (bitwise-and tmp.31 7)))
            (if (eq? tmp.253 0)
              (apply L.jp.79 14 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31)
              (apply L.jp.79 6 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31))))))
    (define L.vector-ref.62.20
      (lambda (c.111 tmp.33 tmp.34)
        (let ((unsafe-vector-ref.3 (mref c.111 14)))
          (let ((tmp.259 (bitwise-and tmp.34 7)))
            (if (eq? tmp.259 0)
              (apply L.jp.83 14 tmp.33 unsafe-vector-ref.3 tmp.34)
              (apply L.jp.83 6 tmp.33 unsafe-vector-ref.3 tmp.34))))))
    (define L.car.63.19
      (lambda (c.110 tmp.35)
        (let ((tmp.262 (bitwise-and tmp.35 7)))
          (if (eq? tmp.262 1)
            (apply L.jp.85 14 tmp.35)
            (apply L.jp.85 6 tmp.35)))))
    (define L.cdr.64.18
      (lambda (c.109 tmp.36)
        (let ((tmp.265 (bitwise-and tmp.36 7)))
          (if (eq? tmp.265 1)
            (apply L.jp.87 14 tmp.36)
            (apply L.jp.87 6 tmp.36)))))
    (define L.procedure-arity.65.17
      (lambda (c.108 tmp.37)
        (let ((tmp.268 (bitwise-and tmp.37 7)))
          (if (eq? tmp.268 2)
            (apply L.jp.89 14 tmp.37)
            (apply L.jp.89 6 tmp.37)))))
    (define L.fixnum?.66.16
      (lambda (c.107 tmp.38)
        (let ((tmp.270 (bitwise-and tmp.38 7))) (if (eq? tmp.270 0) 14 6))))
    (define L.boolean?.67.15
      (lambda (c.106 tmp.39)
        (let ((tmp.272 (bitwise-and tmp.39 247))) (if (eq? tmp.272 6) 14 6))))
    (define L.empty?.68.14
      (lambda (c.105 tmp.40)
        (let ((tmp.274 (bitwise-and tmp.40 255))) (if (eq? tmp.274 22) 14 6))))
    (define L.void?.69.13
      (lambda (c.104 tmp.41)
        (let ((tmp.276 (bitwise-and tmp.41 255))) (if (eq? tmp.276 30) 14 6))))
    (define L.ascii-char?.70.12
      (lambda (c.103 tmp.42)
        (let ((tmp.278 (bitwise-and tmp.42 255))) (if (eq? tmp.278 46) 14 6))))
    (define L.error?.71.11
      (lambda (c.102 tmp.43)
        (let ((tmp.280 (bitwise-and tmp.43 255))) (if (eq? tmp.280 62) 14 6))))
    (define L.pair?.72.10
      (lambda (c.101 tmp.44)
        (let ((tmp.282 (bitwise-and tmp.44 7))) (if (eq? tmp.282 1) 14 6))))
    (define L.procedure?.73.9
      (lambda (c.100 tmp.45)
        (let ((tmp.284 (bitwise-and tmp.45 7))) (if (eq? tmp.284 2) 14 6))))
    (define L.vector?.74.8
      (lambda (c.99 tmp.46)
        (let ((tmp.286 (bitwise-and tmp.46 7))) (if (eq? tmp.286 3) 14 6))))
    (define L.not.75.7 (lambda (c.98 tmp.47) (if (neq? tmp.47 6) 6 14)))
    (define L.cons.76.6
      (lambda (c.97 tmp.48 tmp.49)
        (let ((tmp.288 (alloc 16)))
          (let ((tmp.143 (+ tmp.288 1)))
            (begin
              (mset! tmp.143 -1 tmp.48)
              (mset! tmp.143 7 tmp.49)
              tmp.143)))))
    (define L.eq?.77.5
      (lambda (c.96 tmp.50 tmp.51) (if (eq? tmp.50 tmp.51) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.95 tmp.78)
        (let ((vector-init-loop.80 (mref c.95 14)))
          (let ((tmp.290 (arithmetic-shift-right tmp.78 3)))
            (let ((tmp.291 (+ 1 tmp.290)))
              (let ((tmp.292 (* tmp.291 8)))
                (let ((tmp.293 (alloc tmp.292)))
                  (let ((tmp.144 (+ tmp.293 3)))
                    (begin
                      (mset! tmp.144 -3 tmp.78)
                      (let ((tmp.79 tmp.144))
                        (let ((tmp.126 vector-init-loop.80))
                          (apply
                           L.vector-init-loop.80.3
                           vector-init-loop.80
                           tmp.78
                           0
                           tmp.79))))))))))))
    (define L.vector-init-loop.80.3
      (lambda (c.94 len.81 i.83 vec.82)
        (let ((vector-init-loop.80 (mref c.94 14)))
          (if (eq? len.81 i.83)
            (apply L.jp.102 14 i.83 len.81 vector-init-loop.80 vec.82)
            (apply L.jp.102 6 i.83 len.81 vector-init-loop.80 vec.82)))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.93 tmp.89 tmp.90 tmp.91)
        (let ((tmp.307 (mref tmp.89 -3)))
          (if (< tmp.90 tmp.307)
            (apply L.jp.106 14 tmp.90 tmp.91 tmp.89)
            (apply L.jp.106 6 tmp.90 tmp.91 tmp.89)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.92 tmp.86 tmp.87)
        (let ((tmp.315 (mref tmp.86 -3)))
          (if (< tmp.87 tmp.315)
            (apply L.jp.110 14 tmp.87 tmp.86)
            (apply L.jp.110 6 tmp.87 tmp.86)))))
    (define L.jp.110
      (lambda (tmp.309 tmp.87 tmp.86)
        (if (neq? tmp.309 6)
          (if (>= tmp.87 0)
            (apply L.jp.109 14 tmp.87 tmp.86)
            (apply L.jp.109 6 tmp.87 tmp.86))
          2622)))
    (define L.jp.109
      (lambda (tmp.311 tmp.87 tmp.86)
        (if (neq? tmp.311 6)
          (let ((tmp.312 (arithmetic-shift-right tmp.87 3)))
            (let ((tmp.313 (* tmp.312 8)))
              (let ((tmp.314 (+ tmp.313 5))) (mref tmp.86 tmp.314))))
          2622)))
    (define L.jp.106
      (lambda (tmp.301 tmp.90 tmp.91 tmp.89)
        (if (neq? tmp.301 6)
          (if (>= tmp.90 0)
            (apply L.jp.105 14 tmp.90 tmp.89 tmp.91)
            (apply L.jp.105 6 tmp.90 tmp.89 tmp.91))
          2366)))
    (define L.jp.105
      (lambda (tmp.303 tmp.90 tmp.89 tmp.91)
        (if (neq? tmp.303 6)
          (let ((tmp.304 (arithmetic-shift-right tmp.90 3)))
            (let ((tmp.305 (* tmp.304 8)))
              (let ((tmp.306 (+ tmp.305 5)))
                (begin (mset! tmp.89 tmp.306 tmp.91) 30))))
          2366)))
    (define L.jp.102
      (lambda (tmp.295 i.83 len.81 vector-init-loop.80 vec.82)
        (if (neq? tmp.295 6)
          vec.82
          (let ((tmp.296 (arithmetic-shift-right i.83 3)))
            (let ((tmp.297 (* tmp.296 8)))
              (let ((tmp.298 (+ tmp.297 5)))
                (begin
                  (mset! vec.82 tmp.298 0)
                  (let ((tmp.125 vector-init-loop.80))
                    (let ((tmp.299 (+ i.83 8)))
                      (apply
                       L.vector-init-loop.80.3
                       vector-init-loop.80
                       len.81
                       tmp.299
                       vec.82))))))))))
    (define L.jp.89
      (lambda (tmp.267 tmp.37) (if (neq? tmp.267 6) (mref tmp.37 6) 3390)))
    (define L.jp.87
      (lambda (tmp.264 tmp.36) (if (neq? tmp.264 6) (mref tmp.36 7) 3134)))
    (define L.jp.85
      (lambda (tmp.261 tmp.35) (if (neq? tmp.261 6) (mref tmp.35 -1) 2878)))
    (define L.jp.83
      (lambda (tmp.255 tmp.33 unsafe-vector-ref.3 tmp.34)
        (if (neq? tmp.255 6)
          (let ((tmp.258 (bitwise-and tmp.33 7)))
            (if (eq? tmp.258 3)
              (apply L.jp.82 14 unsafe-vector-ref.3 tmp.34 tmp.33)
              (apply L.jp.82 6 unsafe-vector-ref.3 tmp.34 tmp.33)))
          2622)))
    (define L.jp.82
      (lambda (tmp.257 unsafe-vector-ref.3 tmp.34 tmp.33)
        (if (neq? tmp.257 6)
          (let ((tmp.127 unsafe-vector-ref.3))
            (apply L.unsafe-vector-ref.3.1 unsafe-vector-ref.3 tmp.33 tmp.34))
          2622)))
    (define L.jp.79
      (lambda (tmp.249 tmp.30 unsafe-vector-set!.2 tmp.32 tmp.31)
        (if (neq? tmp.249 6)
          (let ((tmp.252 (bitwise-and tmp.30 7)))
            (if (eq? tmp.252 3)
              (apply L.jp.78 14 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30)
              (apply L.jp.78 6 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30)))
          2366)))
    (define L.jp.78
      (lambda (tmp.251 unsafe-vector-set!.2 tmp.32 tmp.31 tmp.30)
        (if (neq? tmp.251 6)
          (let ((tmp.128 unsafe-vector-set!.2))
            (apply
             L.unsafe-vector-set!.2.2
             unsafe-vector-set!.2
             tmp.30
             tmp.31
             tmp.32))
          2366)))
    (define L.jp.75
      (lambda (tmp.246 tmp.29) (if (neq? tmp.246 6) (mref tmp.29 -3) 2110)))
    (define L.jp.73
      (lambda (tmp.243 make-init-vector.1 tmp.28)
        (if (neq? tmp.243 6)
          (let ((tmp.129 make-init-vector.1))
            (apply L.make-init-vector.1.4 make-init-vector.1 tmp.28))
          1854)))
    (define L.jp.71
      (lambda (tmp.236 tmp.26 tmp.27)
        (if (neq? tmp.236 6)
          (let ((tmp.240 (bitwise-and tmp.26 7)))
            (if (eq? tmp.240 0)
              (apply L.jp.70 14 tmp.26 tmp.27)
              (apply L.jp.70 6 tmp.26 tmp.27)))
          1598)))
    (define L.jp.70
      (lambda (tmp.238 tmp.26 tmp.27)
        (if (neq? tmp.238 6) (if (>= tmp.26 tmp.27) 14 6) 1598)))
    (define L.jp.66
      (lambda (tmp.229 tmp.24 tmp.25)
        (if (neq? tmp.229 6)
          (let ((tmp.233 (bitwise-and tmp.24 7)))
            (if (eq? tmp.233 0)
              (apply L.jp.65 14 tmp.24 tmp.25)
              (apply L.jp.65 6 tmp.24 tmp.25)))
          1342)))
    (define L.jp.65
      (lambda (tmp.231 tmp.24 tmp.25)
        (if (neq? tmp.231 6) (if (> tmp.24 tmp.25) 14 6) 1342)))
    (define L.jp.61
      (lambda (tmp.222 tmp.22 tmp.23)
        (if (neq? tmp.222 6)
          (let ((tmp.226 (bitwise-and tmp.22 7)))
            (if (eq? tmp.226 0)
              (apply L.jp.60 14 tmp.22 tmp.23)
              (apply L.jp.60 6 tmp.22 tmp.23)))
          1086)))
    (define L.jp.60
      (lambda (tmp.224 tmp.22 tmp.23)
        (if (neq? tmp.224 6) (if (<= tmp.22 tmp.23) 14 6) 1086)))
    (define L.jp.56
      (lambda (tmp.215 tmp.20 tmp.21)
        (if (neq? tmp.215 6)
          (let ((tmp.219 (bitwise-and tmp.20 7)))
            (if (eq? tmp.219 0)
              (apply L.jp.55 14 tmp.20 tmp.21)
              (apply L.jp.55 6 tmp.20 tmp.21)))
          830)))
    (define L.jp.55
      (lambda (tmp.217 tmp.20 tmp.21)
        (if (neq? tmp.217 6) (if (< tmp.20 tmp.21) 14 6) 830)))
    (define L.jp.51
      (lambda (tmp.209 tmp.18 tmp.19)
        (if (neq? tmp.209 6)
          (let ((tmp.212 (bitwise-and tmp.18 7)))
            (if (eq? tmp.212 0)
              (apply L.jp.50 14 tmp.18 tmp.19)
              (apply L.jp.50 6 tmp.18 tmp.19)))
          574)))
    (define L.jp.50
      (lambda (tmp.211 tmp.18 tmp.19)
        (if (neq? tmp.211 6) (- tmp.18 tmp.19) 574)))
    (define L.jp.47
      (lambda (tmp.203 tmp.16 tmp.17)
        (if (neq? tmp.203 6)
          (let ((tmp.206 (bitwise-and tmp.16 7)))
            (if (eq? tmp.206 0)
              (apply L.jp.46 14 tmp.16 tmp.17)
              (apply L.jp.46 6 tmp.16 tmp.17)))
          318)))
    (define L.jp.46
      (lambda (tmp.205 tmp.16 tmp.17)
        (if (neq? tmp.205 6) (+ tmp.16 tmp.17) 318)))
    (define L.jp.43
      (lambda (tmp.196 tmp.14 tmp.15)
        (if (neq? tmp.196 6)
          (let ((tmp.200 (bitwise-and tmp.14 7)))
            (if (eq? tmp.200 0)
              (apply L.jp.42 14 tmp.15 tmp.14)
              (apply L.jp.42 6 tmp.15 tmp.14)))
          62)))
    (define L.jp.42
      (lambda (tmp.198 tmp.15 tmp.14)
        (if (neq? tmp.198 6)
          (let ((tmp.199 (arithmetic-shift-right tmp.15 3)))
            (* tmp.14 tmp.199))
          62)))
    (define L.jp.38
      (lambda (tmp.183 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63)
        (if (neq? tmp.183 6)
          (let ((tmp.189 (mref tmp.142 6)))
            (if (eq? tmp.189 8)
              (apply L.jp.37 14 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63)
              (apply L.jp.37 6 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63)))
          (apply L.jp.35 11070 cdr.64 f.9 cons.76 l.10 map.5))))
    (define L.jp.37
      (lambda (tmp.185 tmp.142 l.10 cdr.64 cons.76 map.5 f.9 car.63)
        (if (neq? tmp.185 6)
          (let ((tmp.186 (mref tmp.142 -2)))
            (let ((tmp.136 car.63))
              (let ((tmp.187 (apply L.car.63.19 car.63 l.10)))
                (let ((tmp.188 (apply tmp.186 f.9 tmp.187)))
                  (apply L.jp.35 tmp.188 cdr.64 f.9 cons.76 l.10 map.5)))))
          (apply L.jp.35 10814 cdr.64 f.9 cons.76 l.10 map.5))))
    (define L.jp.35
      (lambda (tmp.180 cdr.64 f.9 cons.76 l.10 map.5)
        (let ((tmp.137 map.5))
          (let ((tmp.138 cdr.64))
            (let ((tmp.181 (apply L.cdr.64.18 cdr.64 l.10)))
              (let ((tmp.182 (apply L.map.5.32 map.5 f.9 tmp.181)))
                (apply L.cons.76.6 cons.76 tmp.180 tmp.182)))))))
    (let ((tmp.316 (alloc 16)))
      (let ((tmp.145 (+ tmp.316 2)))
        (begin
          (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
          (mset! tmp.145 6 16)
          (let ((unsafe-vector-ref.3 tmp.145))
            (let ((tmp.317 (alloc 16)))
              (let ((tmp.146 (+ tmp.317 2)))
                (begin
                  (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
                  (mset! tmp.146 6 24)
                  (let ((unsafe-vector-set!.2 tmp.146))
                    (let ((tmp.318 (alloc 24)))
                      (let ((tmp.147 (+ tmp.318 2)))
                        (begin
                          (mset! tmp.147 -2 L.vector-init-loop.80.3)
                          (mset! tmp.147 6 24)
                          (let ((vector-init-loop.80 tmp.147))
                            (let ((tmp.319 (alloc 24)))
                              (let ((tmp.148 (+ tmp.319 2)))
                                (begin
                                  (mset! tmp.148 -2 L.make-init-vector.1.4)
                                  (mset! tmp.148 6 8)
                                  (let ((make-init-vector.1 tmp.148))
                                    (let ((tmp.320 (alloc 16)))
                                      (let ((tmp.149 (+ tmp.320 2)))
                                        (begin
                                          (mset! tmp.149 -2 L.eq?.77.5)
                                          (mset! tmp.149 6 16)
                                          (let ((eq?.77 tmp.149))
                                            (let ((tmp.321 (alloc 16)))
                                              (let ((tmp.150 (+ tmp.321 2)))
                                                (begin
                                                  (mset!
                                                   tmp.150
                                                   -2
                                                   L.cons.76.6)
                                                  (mset! tmp.150 6 16)
                                                  (let ((cons.76 tmp.150))
                                                    (let ((tmp.322 (alloc 16)))
                                                      (let ((tmp.151
                                                             (+ tmp.322 2)))
                                                        (begin
                                                          (mset!
                                                           tmp.151
                                                           -2
                                                           L.not.75.7)
                                                          (mset! tmp.151 6 8)
                                                          (let ((not.75
                                                                 tmp.151))
                                                            (let ((tmp.323
                                                                   (alloc 16)))
                                                              (let ((tmp.152
                                                                     (+
                                                                      tmp.323
                                                                      2)))
                                                                (begin
                                                                  (mset!
                                                                   tmp.152
                                                                   -2
                                                                   L.vector?.74.8)
                                                                  (mset!
                                                                   tmp.152
                                                                   6
                                                                   8)
                                                                  (let ((vector?.74
                                                                         tmp.152))
                                                                    (let ((tmp.324
                                                                           (alloc
                                                                            16)))
                                                                      (let ((tmp.153
                                                                             (+
                                                                              tmp.324
                                                                              2)))
                                                                        (begin
                                                                          (mset!
                                                                           tmp.153
                                                                           -2
                                                                           L.procedure?.73.9)
                                                                          (mset!
                                                                           tmp.153
                                                                           6
                                                                           8)
                                                                          (let ((procedure?.73
                                                                                 tmp.153))
                                                                            (let ((tmp.325
                                                                                   (alloc
                                                                                    16)))
                                                                              (let ((tmp.154
                                                                                     (+
                                                                                      tmp.325
                                                                                      2)))
                                                                                (begin
                                                                                  (mset!
                                                                                   tmp.154
                                                                                   -2
                                                                                   L.pair?.72.10)
                                                                                  (mset!
                                                                                   tmp.154
                                                                                   6
                                                                                   8)
                                                                                  (let ((pair?.72
                                                                                         tmp.154))
                                                                                    (let ((tmp.326
                                                                                           (alloc
                                                                                            16)))
                                                                                      (let ((tmp.155
                                                                                             (+
                                                                                              tmp.326
                                                                                              2)))
                                                                                        (begin
                                                                                          (mset!
                                                                                           tmp.155
                                                                                           -2
                                                                                           L.error?.71.11)
                                                                                          (mset!
                                                                                           tmp.155
                                                                                           6
                                                                                           8)
                                                                                          (let ((error?.71
                                                                                                 tmp.155))
                                                                                            (let ((tmp.327
                                                                                                   (alloc
                                                                                                    16)))
                                                                                              (let ((tmp.156
                                                                                                     (+
                                                                                                      tmp.327
                                                                                                      2)))
                                                                                                (begin
                                                                                                  (mset!
                                                                                                   tmp.156
                                                                                                   -2
                                                                                                   L.ascii-char?.70.12)
                                                                                                  (mset!
                                                                                                   tmp.156
                                                                                                   6
                                                                                                   8)
                                                                                                  (let ((ascii-char?.70
                                                                                                         tmp.156))
                                                                                                    (let ((tmp.328
                                                                                                           (alloc
                                                                                                            16)))
                                                                                                      (let ((tmp.157
                                                                                                             (+
                                                                                                              tmp.328
                                                                                                              2)))
                                                                                                        (begin
                                                                                                          (mset!
                                                                                                           tmp.157
                                                                                                           -2
                                                                                                           L.void?.69.13)
                                                                                                          (mset!
                                                                                                           tmp.157
                                                                                                           6
                                                                                                           8)
                                                                                                          (let ((void?.69
                                                                                                                 tmp.157))
                                                                                                            (let ((tmp.329
                                                                                                                   (alloc
                                                                                                                    16)))
                                                                                                              (let ((tmp.158
                                                                                                                     (+
                                                                                                                      tmp.329
                                                                                                                      2)))
                                                                                                                (begin
                                                                                                                  (mset!
                                                                                                                   tmp.158
                                                                                                                   -2
                                                                                                                   L.empty?.68.14)
                                                                                                                  (mset!
                                                                                                                   tmp.158
                                                                                                                   6
                                                                                                                   8)
                                                                                                                  (let ((empty?.68
                                                                                                                         tmp.158))
                                                                                                                    (let ((tmp.330
                                                                                                                           (alloc
                                                                                                                            16)))
                                                                                                                      (let ((tmp.159
                                                                                                                             (+
                                                                                                                              tmp.330
                                                                                                                              2)))
                                                                                                                        (begin
                                                                                                                          (mset!
                                                                                                                           tmp.159
                                                                                                                           -2
                                                                                                                           L.boolean?.67.15)
                                                                                                                          (mset!
                                                                                                                           tmp.159
                                                                                                                           6
                                                                                                                           8)
                                                                                                                          (let ((boolean?.67
                                                                                                                                 tmp.159))
                                                                                                                            (let ((tmp.331
                                                                                                                                   (alloc
                                                                                                                                    16)))
                                                                                                                              (let ((tmp.160
                                                                                                                                     (+
                                                                                                                                      tmp.331
                                                                                                                                      2)))
                                                                                                                                (begin
                                                                                                                                  (mset!
                                                                                                                                   tmp.160
                                                                                                                                   -2
                                                                                                                                   L.fixnum?.66.16)
                                                                                                                                  (mset!
                                                                                                                                   tmp.160
                                                                                                                                   6
                                                                                                                                   8)
                                                                                                                                  (let ((fixnum?.66
                                                                                                                                         tmp.160))
                                                                                                                                    (let ((tmp.332
                                                                                                                                           (alloc
                                                                                                                                            16)))
                                                                                                                                      (let ((tmp.161
                                                                                                                                             (+
                                                                                                                                              tmp.332
                                                                                                                                              2)))
                                                                                                                                        (begin
                                                                                                                                          (mset!
                                                                                                                                           tmp.161
                                                                                                                                           -2
                                                                                                                                           L.procedure-arity.65.17)
                                                                                                                                          (mset!
                                                                                                                                           tmp.161
                                                                                                                                           6
                                                                                                                                           8)
                                                                                                                                          (let ((procedure-arity.65
                                                                                                                                                 tmp.161))
                                                                                                                                            (let ((tmp.333
                                                                                                                                                   (alloc
                                                                                                                                                    16)))
                                                                                                                                              (let ((tmp.162
                                                                                                                                                     (+
                                                                                                                                                      tmp.333
                                                                                                                                                      2)))
                                                                                                                                                (begin
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.162
                                                                                                                                                   -2
                                                                                                                                                   L.cdr.64.18)
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.162
                                                                                                                                                   6
                                                                                                                                                   8)
                                                                                                                                                  (let ((cdr.64
                                                                                                                                                         tmp.162))
                                                                                                                                                    (let ((tmp.334
                                                                                                                                                           (alloc
                                                                                                                                                            16)))
                                                                                                                                                      (let ((tmp.163
                                                                                                                                                             (+
                                                                                                                                                              tmp.334
                                                                                                                                                              2)))
                                                                                                                                                        (begin
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.163
                                                                                                                                                           -2
                                                                                                                                                           L.car.63.19)
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.163
                                                                                                                                                           6
                                                                                                                                                           8)
                                                                                                                                                          (let ((car.63
                                                                                                                                                                 tmp.163))
                                                                                                                                                            (let ((tmp.335
                                                                                                                                                                   (alloc
                                                                                                                                                                    24)))
                                                                                                                                                              (let ((tmp.164
                                                                                                                                                                     (+
                                                                                                                                                                      tmp.335
                                                                                                                                                                      2)))
                                                                                                                                                                (begin
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.164
                                                                                                                                                                   -2
                                                                                                                                                                   L.vector-ref.62.20)
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.164
                                                                                                                                                                   6
                                                                                                                                                                   16)
                                                                                                                                                                  (let ((vector-ref.62
                                                                                                                                                                         tmp.164))
                                                                                                                                                                    (let ((tmp.336
                                                                                                                                                                           (alloc
                                                                                                                                                                            24)))
                                                                                                                                                                      (let ((tmp.165
                                                                                                                                                                             (+
                                                                                                                                                                              tmp.336
                                                                                                                                                                              2)))
                                                                                                                                                                        (begin
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.165
                                                                                                                                                                           -2
                                                                                                                                                                           L.vector-set!.61.21)
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.165
                                                                                                                                                                           6
                                                                                                                                                                           24)
                                                                                                                                                                          (let ((vector-set!.61
                                                                                                                                                                                 tmp.165))
                                                                                                                                                                            (let ((tmp.337
                                                                                                                                                                                   (alloc
                                                                                                                                                                                    16)))
                                                                                                                                                                              (let ((tmp.166
                                                                                                                                                                                     (+
                                                                                                                                                                                      tmp.337
                                                                                                                                                                                      2)))
                                                                                                                                                                                (begin
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.166
                                                                                                                                                                                   -2
                                                                                                                                                                                   L.vector-length.60.22)
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.166
                                                                                                                                                                                   6
                                                                                                                                                                                   8)
                                                                                                                                                                                  (let ((vector-length.60
                                                                                                                                                                                         tmp.166))
                                                                                                                                                                                    (let ((tmp.338
                                                                                                                                                                                           (alloc
                                                                                                                                                                                            24)))
                                                                                                                                                                                      (let ((tmp.167
                                                                                                                                                                                             (+
                                                                                                                                                                                              tmp.338
                                                                                                                                                                                              2)))
                                                                                                                                                                                        (begin
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.167
                                                                                                                                                                                           -2
                                                                                                                                                                                           L.make-vector.59.23)
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.167
                                                                                                                                                                                           6
                                                                                                                                                                                           8)
                                                                                                                                                                                          (let ((make-vector.59
                                                                                                                                                                                                 tmp.167))
                                                                                                                                                                                            (let ((tmp.339
                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                    16)))
                                                                                                                                                                                              (let ((tmp.168
                                                                                                                                                                                                     (+
                                                                                                                                                                                                      tmp.339
                                                                                                                                                                                                      2)))
                                                                                                                                                                                                (begin
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.168
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   L.>=.58.24)
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.168
                                                                                                                                                                                                   6
                                                                                                                                                                                                   16)
                                                                                                                                                                                                  (let ((>=.58
                                                                                                                                                                                                         tmp.168))
                                                                                                                                                                                                    (let ((tmp.340
                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                            16)))
                                                                                                                                                                                                      (let ((tmp.169
                                                                                                                                                                                                             (+
                                                                                                                                                                                                              tmp.340
                                                                                                                                                                                                              2)))
                                                                                                                                                                                                        (begin
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.169
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           L.>.57.25)
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.169
                                                                                                                                                                                                           6
                                                                                                                                                                                                           16)
                                                                                                                                                                                                          (let ((>.57
                                                                                                                                                                                                                 tmp.169))
                                                                                                                                                                                                            (let ((tmp.341
                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                              (let ((tmp.170
                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                      tmp.341
                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.170
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   L.<=.56.26)
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.170
                                                                                                                                                                                                                   6
                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                  (let ((<=.56
                                                                                                                                                                                                                         tmp.170))
                                                                                                                                                                                                                    (let ((tmp.342
                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                      (let ((tmp.171
                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                              tmp.342
                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.171
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           L.<.55.27)
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.171
                                                                                                                                                                                                                           6
                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                          (let ((<.55
                                                                                                                                                                                                                                 tmp.171))
                                                                                                                                                                                                                            (let ((tmp.343
                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                              (let ((tmp.172
                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                      tmp.343
                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.172
                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                   L.-.54.28)
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.172
                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                  (let ((|-.54|
                                                                                                                                                                                                                                         tmp.172))
                                                                                                                                                                                                                                    (let ((tmp.344
                                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                                      (let ((tmp.173
                                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                                              tmp.344
                                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.173
                                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                                           L.+.53.29)
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.173
                                                                                                                                                                                                                                           6
                                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                                          (let ((|+.53|
                                                                                                                                                                                                                                                 tmp.173))
                                                                                                                                                                                                                                            (let ((tmp.345
                                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                                              (let ((tmp.174
                                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                                      tmp.345
                                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.174
                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                   L.*.52.30)
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.174
                                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                                  (let ((*.52
                                                                                                                                                                                                                                                         tmp.174))
                                                                                                                                                                                                                                                    (begin
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-init-loop.80
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.80)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-init-vector.1
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.80)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-ref.62
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-ref.3)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-set!.61
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-set!.2)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-vector.59
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       make-init-vector.1)
                                                                                                                                                                                                                                                      (let ((tmp.346
                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                              48)))
                                                                                                                                                                                                                                                        (let ((tmp.175
                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                tmp.346
                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.175
                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                             L.zeros.4.31)
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.175
                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                             16)
                                                                                                                                                                                                                                                            (let ((zeros.4
                                                                                                                                                                                                                                                                   tmp.175))
                                                                                                                                                                                                                                                              (let ((tmp.347
                                                                                                                                                                                                                                                                     (alloc
                                                                                                                                                                                                                                                                      56)))
                                                                                                                                                                                                                                                                (let ((tmp.176
                                                                                                                                                                                                                                                                       (+
                                                                                                                                                                                                                                                                        tmp.347
                                                                                                                                                                                                                                                                        2)))
                                                                                                                                                                                                                                                                  (begin
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.176
                                                                                                                                                                                                                                                                     -2
                                                                                                                                                                                                                                                                     L.map.5.32)
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.176
                                                                                                                                                                                                                                                                     6
                                                                                                                                                                                                                                                                     16)
                                                                                                                                                                                                                                                                    (let ((map.5
                                                                                                                                                                                                                                                                           tmp.176))
                                                                                                                                                                                                                                                                      (let ((tmp.348
                                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                                              24)))
                                                                                                                                                                                                                                                                        (let ((tmp.177
                                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                                tmp.348
                                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.177
                                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                                             L.inc.6.33)
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.177
                                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                                             8)
                                                                                                                                                                                                                                                                            (let ((inc.6
                                                                                                                                                                                                                                                                                   tmp.177))
                                                                                                                                                                                                                                                                              (begin
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 zeros.4
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 cons.76)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 zeros.4
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 |-.54|)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 zeros.4
                                                                                                                                                                                                                                                                                 30
                                                                                                                                                                                                                                                                                 zeros.4)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 zeros.4
                                                                                                                                                                                                                                                                                 38
                                                                                                                                                                                                                                                                                 eq?.77)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 map.5
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 cdr.64)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 map.5
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 map.5)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 map.5
                                                                                                                                                                                                                                                                                 30
                                                                                                                                                                                                                                                                                 car.63)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 map.5
                                                                                                                                                                                                                                                                                 38
                                                                                                                                                                                                                                                                                 cons.76)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 map.5
                                                                                                                                                                                                                                                                                 46
                                                                                                                                                                                                                                                                                 empty?.68)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 inc.6
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 |+.53|)
                                                                                                                                                                                                                                                                                (let ((tmp.140
                                                                                                                                                                                                                                                                                       zeros.4))
                                                                                                                                                                                                                                                                                  (let ((listofZero.12
                                                                                                                                                                                                                                                                                         (apply
                                                                                                                                                                                                                                                                                          L.zeros.4.31
                                                                                                                                                                                                                                                                                          zeros.4
                                                                                                                                                                                                                                                                                          256
                                                                                                                                                                                                                                                                                          22)))
                                                                                                                                                                                                                                                                                    (let ((tmp.141
                                                                                                                                                                                                                                                                                           map.5))
                                                                                                                                                                                                                                                                                      (let ((ones.13
                                                                                                                                                                                                                                                                                             (apply
                                                                                                                                                                                                                                                                                              L.map.5.32
                                                                                                                                                                                                                                                                                              map.5
                                                                                                                                                                                                                                                                                              inc.6
                                                                                                                                                                                                                                                                                              listofZero.12)))
                                                                                                                                                                                                                                                                                        ones.13)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

     )'(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))


  (parameterize ([current-pass-list
                  (list
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute  '(module
    (define L.inc.6.33
      (lambda (c.124 x.11)
        (let ((|+.53| (mref c.124 14)))
          (let ((tmp.139 |+.53|)) (apply L.+.53.29 |+.53| x.11 8)))))
    (define L.map.5.32
      (lambda (c.123 f.9 l.10)
        (let ((cdr.64 (mref c.123 14)))
          (let ((map.5 (mref c.123 22)))
            (let ((car.63 (mref c.123 30)))
              (let ((cons.76 (mref c.123 38)))
                (let ((empty?.68 (mref c.123 46)))
                  (if (neq?
                       (let ((tmp.134 empty?.68))
                         (apply L.empty?.68.14 empty?.68 l.10))
                       6)
                    l.10
                    (let ((tmp.135 cons.76))
                      (apply
                       L.cons.76.6
                       cons.76
                       (let ((tmp.142 f.9))
                         (if (neq? (if (eq? (bitwise-and tmp.142 7) 2) 14 6) 6)
                           (if (neq? (if (eq? (mref tmp.142 6) 8) 14 6) 6)
                             (apply
                              (mref tmp.142 -2)
                              f.9
                              (let ((tmp.136 car.63))
                                (apply L.car.63.19 car.63 l.10)))
                             10814)
                           11070))
                       (let ((tmp.137 map.5))
                         (apply
                          L.map.5.32
                          map.5
                          f.9
                          (let ((tmp.138 cdr.64))
                            (apply L.cdr.64.18 cdr.64 l.10))))))))))))))
    (define L.zeros.4.31
      (lambda (c.122 n.7 l.8)
        (let ((cons.76 (mref c.122 14)))
          (let ((|-.54| (mref c.122 22)))
            (let ((zeros.4 (mref c.122 30)))
              (let ((eq?.77 (mref c.122 38)))
                (if (neq?
                     (let ((tmp.130 eq?.77)) (apply L.eq?.77.5 eq?.77 n.7 0))
                     6)
                  l.8
                  (let ((tmp.131 zeros.4))
                    (apply
                     L.zeros.4.31
                     zeros.4
                     (let ((tmp.132 |-.54|)) (apply L.-.54.28 |-.54| n.7 8))
                     (let ((tmp.133 cons.76))
                       (apply L.cons.76.6 cons.76 0 l.8)))))))))))
    (define L.*.52.30
      (lambda (c.121 tmp.14 tmp.15)
        (if (neq? (if (eq? (bitwise-and tmp.15 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.14 7) 0) 14 6) 6)
            (* tmp.14 (arithmetic-shift-right tmp.15 3))
            62)
          62)))
    (define L.+.53.29
      (lambda (c.120 tmp.16 tmp.17)
        (if (neq? (if (eq? (bitwise-and tmp.17 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.16 7) 0) 14 6) 6)
            (+ tmp.16 tmp.17)
            318)
          318)))
    (define L.-.54.28
      (lambda (c.119 tmp.18 tmp.19)
        (if (neq? (if (eq? (bitwise-and tmp.19 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.18 7) 0) 14 6) 6)
            (- tmp.18 tmp.19)
            574)
          574)))
    (define L.<.55.27
      (lambda (c.118 tmp.20 tmp.21)
        (if (neq? (if (eq? (bitwise-and tmp.21 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.20 7) 0) 14 6) 6)
            (if (< tmp.20 tmp.21) 14 6)
            830)
          830)))
    (define L.<=.56.26
      (lambda (c.117 tmp.22 tmp.23)
        (if (neq? (if (eq? (bitwise-and tmp.23 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.22 7) 0) 14 6) 6)
            (if (<= tmp.22 tmp.23) 14 6)
            1086)
          1086)))
    (define L.>.57.25
      (lambda (c.116 tmp.24 tmp.25)
        (if (neq? (if (eq? (bitwise-and tmp.25 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.24 7) 0) 14 6) 6)
            (if (> tmp.24 tmp.25) 14 6)
            1342)
          1342)))
    (define L.>=.58.24
      (lambda (c.115 tmp.26 tmp.27)
        (if (neq? (if (eq? (bitwise-and tmp.27 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.26 7) 0) 14 6) 6)
            (if (>= tmp.26 tmp.27) 14 6)
            1598)
          1598)))
    (define L.make-vector.59.23
      (lambda (c.114 tmp.28)
        (let ((make-init-vector.1 (mref c.114 14)))
          (if (neq? (if (eq? (bitwise-and tmp.28 7) 0) 14 6) 6)
            (let ((tmp.129 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.28))
            1854))))
    (define L.vector-length.60.22
      (lambda (c.113 tmp.29)
        (if (neq? (if (eq? (bitwise-and tmp.29 7) 3) 14 6) 6)
          (mref tmp.29 -3)
          2110)))
    (define L.vector-set!.61.21
      (lambda (c.112 tmp.30 tmp.31 tmp.32)
        (let ((unsafe-vector-set!.2 (mref c.112 14)))
          (if (neq? (if (eq? (bitwise-and tmp.31 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.30 7) 3) 14 6) 6)
              (let ((tmp.128 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.30
                 tmp.31
                 tmp.32))
              2366)
            2366))))
    (define L.vector-ref.62.20
      (lambda (c.111 tmp.33 tmp.34)
        (let ((unsafe-vector-ref.3 (mref c.111 14)))
          (if (neq? (if (eq? (bitwise-and tmp.34 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.33 7) 3) 14 6) 6)
              (let ((tmp.127 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.33
                 tmp.34))
              2622)
            2622))))
    (define L.car.63.19
      (lambda (c.110 tmp.35)
        (if (neq? (if (eq? (bitwise-and tmp.35 7) 1) 14 6) 6)
          (mref tmp.35 -1)
          2878)))
    (define L.cdr.64.18
      (lambda (c.109 tmp.36)
        (if (neq? (if (eq? (bitwise-and tmp.36 7) 1) 14 6) 6)
          (mref tmp.36 7)
          3134)))
    (define L.procedure-arity.65.17
      (lambda (c.108 tmp.37)
        (if (neq? (if (eq? (bitwise-and tmp.37 7) 2) 14 6) 6)
          (mref tmp.37 6)
          3390)))
    (define L.fixnum?.66.16
      (lambda (c.107 tmp.38) (if (eq? (bitwise-and tmp.38 7) 0) 14 6)))
    (define L.boolean?.67.15
      (lambda (c.106 tmp.39) (if (eq? (bitwise-and tmp.39 247) 6) 14 6)))
    (define L.empty?.68.14
      (lambda (c.105 tmp.40) (if (eq? (bitwise-and tmp.40 255) 22) 14 6)))
    (define L.void?.69.13
      (lambda (c.104 tmp.41) (if (eq? (bitwise-and tmp.41 255) 30) 14 6)))
    (define L.ascii-char?.70.12
      (lambda (c.103 tmp.42) (if (eq? (bitwise-and tmp.42 255) 46) 14 6)))
    (define L.error?.71.11
      (lambda (c.102 tmp.43) (if (eq? (bitwise-and tmp.43 255) 62) 14 6)))
    (define L.pair?.72.10
      (lambda (c.101 tmp.44) (if (eq? (bitwise-and tmp.44 7) 1) 14 6)))
    (define L.procedure?.73.9
      (lambda (c.100 tmp.45) (if (eq? (bitwise-and tmp.45 7) 2) 14 6)))
    (define L.vector?.74.8
      (lambda (c.99 tmp.46) (if (eq? (bitwise-and tmp.46 7) 3) 14 6)))
    (define L.not.75.7 (lambda (c.98 tmp.47) (if (neq? tmp.47 6) 6 14)))
    (define L.cons.76.6
      (lambda (c.97 tmp.48 tmp.49)
        (let ((tmp.143 (+ (alloc 16) 1)))
          (begin (mset! tmp.143 -1 tmp.48) (mset! tmp.143 7 tmp.49) tmp.143))))
    (define L.eq?.77.5
      (lambda (c.96 tmp.50 tmp.51) (if (eq? tmp.50 tmp.51) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.95 tmp.78)
        (let ((vector-init-loop.80 (mref c.95 14)))
          (let ((tmp.79
                 (let ((tmp.144
                        (+
                         (alloc (* (+ 1 (arithmetic-shift-right tmp.78 3)) 8))
                         3)))
                   (begin (mset! tmp.144 -3 tmp.78) tmp.144))))
            (let ((tmp.126 vector-init-loop.80))
              (apply
               L.vector-init-loop.80.3
               vector-init-loop.80
               tmp.78
               0
               tmp.79))))))
    (define L.vector-init-loop.80.3
      (lambda (c.94 len.81 i.83 vec.82)
        (let ((vector-init-loop.80 (mref c.94 14)))
          (if (neq? (if (eq? len.81 i.83) 14 6) 6)
            vec.82
            (begin
              (mset! vec.82 (+ (* (arithmetic-shift-right i.83 3) 8) 5) 0)
              (let ((tmp.125 vector-init-loop.80))
                (apply
                 L.vector-init-loop.80.3
                 vector-init-loop.80
                 len.81
                 (+ i.83 8)
                 vec.82)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.93 tmp.89 tmp.90 tmp.91)
        (if (neq? (if (< tmp.90 (mref tmp.89 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.90 0) 14 6) 6)
            (begin
              (mset!
               tmp.89
               (+ (* (arithmetic-shift-right tmp.90 3) 8) 5)
               tmp.91)
              30)
            2366)
          2366)))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.92 tmp.86 tmp.87)
        (if (neq? (if (< tmp.87 (mref tmp.86 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.87 0) 14 6) 6)
            (mref tmp.86 (+ (* (arithmetic-shift-right tmp.87 3) 8) 5))
            2622)
          2622)))
    (let ((unsafe-vector-ref.3
           (let ((tmp.145 (+ (alloc 16) 2)))
             (begin
               (mset! tmp.145 -2 L.unsafe-vector-ref.3.1)
               (mset! tmp.145 6 16)
               tmp.145))))
      (let ((unsafe-vector-set!.2
             (let ((tmp.146 (+ (alloc 16) 2)))
               (begin
                 (mset! tmp.146 -2 L.unsafe-vector-set!.2.2)
                 (mset! tmp.146 6 24)
                 tmp.146))))
        (let ((vector-init-loop.80
               (let ((tmp.147 (+ (alloc 24) 2)))
                 (begin
                   (mset! tmp.147 -2 L.vector-init-loop.80.3)
                   (mset! tmp.147 6 24)
                   tmp.147))))
          (let ((make-init-vector.1
                 (let ((tmp.148 (+ (alloc 24) 2)))
                   (begin
                     (mset! tmp.148 -2 L.make-init-vector.1.4)
                     (mset! tmp.148 6 8)
                     tmp.148))))
            (let ((eq?.77
                   (let ((tmp.149 (+ (alloc 16) 2)))
                     (begin
                       (mset! tmp.149 -2 L.eq?.77.5)
                       (mset! tmp.149 6 16)
                       tmp.149))))
              (let ((cons.76
                     (let ((tmp.150 (+ (alloc 16) 2)))
                       (begin
                         (mset! tmp.150 -2 L.cons.76.6)
                         (mset! tmp.150 6 16)
                         tmp.150))))
                (let ((not.75
                       (let ((tmp.151 (+ (alloc 16) 2)))
                         (begin
                           (mset! tmp.151 -2 L.not.75.7)
                           (mset! tmp.151 6 8)
                           tmp.151))))
                  (let ((vector?.74
                         (let ((tmp.152 (+ (alloc 16) 2)))
                           (begin
                             (mset! tmp.152 -2 L.vector?.74.8)
                             (mset! tmp.152 6 8)
                             tmp.152))))
                    (let ((procedure?.73
                           (let ((tmp.153 (+ (alloc 16) 2)))
                             (begin
                               (mset! tmp.153 -2 L.procedure?.73.9)
                               (mset! tmp.153 6 8)
                               tmp.153))))
                      (let ((pair?.72
                             (let ((tmp.154 (+ (alloc 16) 2)))
                               (begin
                                 (mset! tmp.154 -2 L.pair?.72.10)
                                 (mset! tmp.154 6 8)
                                 tmp.154))))
                        (let ((error?.71
                               (let ((tmp.155 (+ (alloc 16) 2)))
                                 (begin
                                   (mset! tmp.155 -2 L.error?.71.11)
                                   (mset! tmp.155 6 8)
                                   tmp.155))))
                          (let ((ascii-char?.70
                                 (let ((tmp.156 (+ (alloc 16) 2)))
                                   (begin
                                     (mset! tmp.156 -2 L.ascii-char?.70.12)
                                     (mset! tmp.156 6 8)
                                     tmp.156))))
                            (let ((void?.69
                                   (let ((tmp.157 (+ (alloc 16) 2)))
                                     (begin
                                       (mset! tmp.157 -2 L.void?.69.13)
                                       (mset! tmp.157 6 8)
                                       tmp.157))))
                              (let ((empty?.68
                                     (let ((tmp.158 (+ (alloc 16) 2)))
                                       (begin
                                         (mset! tmp.158 -2 L.empty?.68.14)
                                         (mset! tmp.158 6 8)
                                         tmp.158))))
                                (let ((boolean?.67
                                       (let ((tmp.159 (+ (alloc 16) 2)))
                                         (begin
                                           (mset! tmp.159 -2 L.boolean?.67.15)
                                           (mset! tmp.159 6 8)
                                           tmp.159))))
                                  (let ((fixnum?.66
                                         (let ((tmp.160 (+ (alloc 16) 2)))
                                           (begin
                                             (mset! tmp.160 -2 L.fixnum?.66.16)
                                             (mset! tmp.160 6 8)
                                             tmp.160))))
                                    (let ((procedure-arity.65
                                           (let ((tmp.161 (+ (alloc 16) 2)))
                                             (begin
                                               (mset!
                                                tmp.161
                                                -2
                                                L.procedure-arity.65.17)
                                               (mset! tmp.161 6 8)
                                               tmp.161))))
                                      (let ((cdr.64
                                             (let ((tmp.162 (+ (alloc 16) 2)))
                                               (begin
                                                 (mset! tmp.162 -2 L.cdr.64.18)
                                                 (mset! tmp.162 6 8)
                                                 tmp.162))))
                                        (let ((car.63
                                               (let ((tmp.163
                                                      (+ (alloc 16) 2)))
                                                 (begin
                                                   (mset!
                                                    tmp.163
                                                    -2
                                                    L.car.63.19)
                                                   (mset! tmp.163 6 8)
                                                   tmp.163))))
                                          (let ((vector-ref.62
                                                 (let ((tmp.164
                                                        (+ (alloc 24) 2)))
                                                   (begin
                                                     (mset!
                                                      tmp.164
                                                      -2
                                                      L.vector-ref.62.20)
                                                     (mset! tmp.164 6 16)
                                                     tmp.164))))
                                            (let ((vector-set!.61
                                                   (let ((tmp.165
                                                          (+ (alloc 24) 2)))
                                                     (begin
                                                       (mset!
                                                        tmp.165
                                                        -2
                                                        L.vector-set!.61.21)
                                                       (mset! tmp.165 6 24)
                                                       tmp.165))))
                                              (let ((vector-length.60
                                                     (let ((tmp.166
                                                            (+ (alloc 16) 2)))
                                                       (begin
                                                         (mset!
                                                          tmp.166
                                                          -2
                                                          L.vector-length.60.22)
                                                         (mset! tmp.166 6 8)
                                                         tmp.166))))
                                                (let ((make-vector.59
                                                       (let ((tmp.167
                                                              (+
                                                               (alloc 24)
                                                               2)))
                                                         (begin
                                                           (mset!
                                                            tmp.167
                                                            -2
                                                            L.make-vector.59.23)
                                                           (mset! tmp.167 6 8)
                                                           tmp.167))))
                                                  (let ((>=.58
                                                         (let ((tmp.168
                                                                (+
                                                                 (alloc 16)
                                                                 2)))
                                                           (begin
                                                             (mset!
                                                              tmp.168
                                                              -2
                                                              L.>=.58.24)
                                                             (mset!
                                                              tmp.168
                                                              6
                                                              16)
                                                             tmp.168))))
                                                    (let ((>.57
                                                           (let ((tmp.169
                                                                  (+
                                                                   (alloc 16)
                                                                   2)))
                                                             (begin
                                                               (mset!
                                                                tmp.169
                                                                -2
                                                                L.>.57.25)
                                                               (mset!
                                                                tmp.169
                                                                6
                                                                16)
                                                               tmp.169))))
                                                      (let ((<=.56
                                                             (let ((tmp.170
                                                                    (+
                                                                     (alloc 16)
                                                                     2)))
                                                               (begin
                                                                 (mset!
                                                                  tmp.170
                                                                  -2
                                                                  L.<=.56.26)
                                                                 (mset!
                                                                  tmp.170
                                                                  6
                                                                  16)
                                                                 tmp.170))))
                                                        (let ((<.55
                                                               (let ((tmp.171
                                                                      (+
                                                                       (alloc
                                                                        16)
                                                                       2)))
                                                                 (begin
                                                                   (mset!
                                                                    tmp.171
                                                                    -2
                                                                    L.<.55.27)
                                                                   (mset!
                                                                    tmp.171
                                                                    6
                                                                    16)
                                                                   tmp.171))))
                                                          (let ((|-.54|
                                                                 (let ((tmp.172
                                                                        (+
                                                                         (alloc
                                                                          16)
                                                                         2)))
                                                                   (begin
                                                                     (mset!
                                                                      tmp.172
                                                                      -2
                                                                      L.-.54.28)
                                                                     (mset!
                                                                      tmp.172
                                                                      6
                                                                      16)
                                                                     tmp.172))))
                                                            (let ((|+.53|
                                                                   (let ((tmp.173
                                                                          (+
                                                                           (alloc
                                                                            16)
                                                                           2)))
                                                                     (begin
                                                                       (mset!
                                                                        tmp.173
                                                                        -2
                                                                        L.+.53.29)
                                                                       (mset!
                                                                        tmp.173
                                                                        6
                                                                        16)
                                                                       tmp.173))))
                                                              (let ((*.52
                                                                     (let ((tmp.174
                                                                            (+
                                                                             (alloc
                                                                              16)
                                                                             2)))
                                                                       (begin
                                                                         (mset!
                                                                          tmp.174
                                                                          -2
                                                                          L.*.52.30)
                                                                         (mset!
                                                                          tmp.174
                                                                          6
                                                                          16)
                                                                         tmp.174))))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-init-loop.80
                                                                     14
                                                                     vector-init-loop.80))
                                                                  (begin
                                                                    (mset!
                                                                     make-init-vector.1
                                                                     14
                                                                     vector-init-loop.80))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-ref.62
                                                                     14
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (mset!
                                                                     vector-set!.61
                                                                     14
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     make-vector.59
                                                                     14
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((zeros.4
                                                                         (let ((tmp.175
                                                                                (+
                                                                                 (alloc
                                                                                  48)
                                                                                 2)))
                                                                           (begin
                                                                             (mset!
                                                                              tmp.175
                                                                              -2
                                                                              L.zeros.4.31)
                                                                             (mset!
                                                                              tmp.175
                                                                              6
                                                                              16)
                                                                             tmp.175))))
                                                                    (let ((map.5
                                                                           (let ((tmp.176
                                                                                  (+
                                                                                   (alloc
                                                                                    56)
                                                                                   2)))
                                                                             (begin
                                                                               (mset!
                                                                                tmp.176
                                                                                -2
                                                                                L.map.5.32)
                                                                               (mset!
                                                                                tmp.176
                                                                                6
                                                                                16)
                                                                               tmp.176))))
                                                                      (let ((inc.6
                                                                             (let ((tmp.177
                                                                                    (+
                                                                                     (alloc
                                                                                      24)
                                                                                     2)))
                                                                               (begin
                                                                                 (mset!
                                                                                  tmp.177
                                                                                  -2
                                                                                  L.inc.6.33)
                                                                                 (mset!
                                                                                  tmp.177
                                                                                  6
                                                                                  8)
                                                                                 tmp.177))))
                                                                        (begin
                                                                          (begin
                                                                            (mset!
                                                                             zeros.4
                                                                             14
                                                                             cons.76)
                                                                            (mset!
                                                                             zeros.4
                                                                             22
                                                                             |-.54|)
                                                                            (mset!
                                                                             zeros.4
                                                                             30
                                                                             zeros.4)
                                                                            (mset!
                                                                             zeros.4
                                                                             38
                                                                             eq?.77))
                                                                          (begin
                                                                            (mset!
                                                                             map.5
                                                                             14
                                                                             cdr.64)
                                                                            (mset!
                                                                             map.5
                                                                             22
                                                                             map.5)
                                                                            (mset!
                                                                             map.5
                                                                             30
                                                                             car.63)
                                                                            (mset!
                                                                             map.5
                                                                             38
                                                                             cons.76)
                                                                            (mset!
                                                                             map.5
                                                                             46
                                                                             empty?.68))
                                                                          (begin
                                                                            (mset!
                                                                             inc.6
                                                                             14
                                                                             |+.53|))
                                                                          (let ((listofZero.12
                                                                                 (let ((tmp.140
                                                                                        zeros.4))
                                                                                   (apply
                                                                                    L.zeros.4.31
                                                                                    zeros.4
                                                                                    256
                                                                                    22))))
                                                                            (let ((ones.13
                                                                                   (let ((tmp.141
                                                                                          map.5))
                                                                                     (apply
                                                                                      L.map.5.32
                                                                                      map.5
                                                                                      inc.6
                                                                                      listofZero.12))))
                                                                              ones.13))))))))))))))))))))))))))))))))))))))  
      ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.inc.6.33
      (lambda (c.124 x.11)
        (let ((|+.53| (unsafe-procedure-ref c.124 0)))
          (let ((tmp.139 |+.53|)) (apply L.+.53.29 |+.53| x.11 1)))))
    (define L.map.5.32
      (lambda (c.123 f.9 l.10)
        (let ((cdr.64 (unsafe-procedure-ref c.123 0)))
          (let ((map.5 (unsafe-procedure-ref c.123 1)))
            (let ((car.63 (unsafe-procedure-ref c.123 2)))
              (let ((cons.76 (unsafe-procedure-ref c.123 3)))
                (let ((empty?.68 (unsafe-procedure-ref c.123 4)))
                  (if (let ((tmp.134 empty?.68))
                        (apply L.empty?.68.14 empty?.68 l.10))
                    l.10
                    (let ((tmp.135 cons.76))
                      (apply
                       L.cons.76.6
                       cons.76
                       (let ((tmp.142 f.9))
                         (if (procedure? tmp.142)
                           (if (eq? (unsafe-procedure-arity tmp.142) 1)
                             (apply
                              (unsafe-procedure-label tmp.142)
                              f.9
                              (let ((tmp.136 car.63))
                                (apply L.car.63.19 car.63 l.10)))
                             (error 42))
                           (error 43)))
                       (let ((tmp.137 map.5))
                         (apply
                          L.map.5.32
                          map.5
                          f.9
                          (let ((tmp.138 cdr.64))
                            (apply L.cdr.64.18 cdr.64 l.10))))))))))))))
    (define L.zeros.4.31
      (lambda (c.122 n.7 l.8)
        (let ((cons.76 (unsafe-procedure-ref c.122 0)))
          (let ((|-.54| (unsafe-procedure-ref c.122 1)))
            (let ((zeros.4 (unsafe-procedure-ref c.122 2)))
              (let ((eq?.77 (unsafe-procedure-ref c.122 3)))
                (if (let ((tmp.130 eq?.77)) (apply L.eq?.77.5 eq?.77 n.7 0))
                  l.8
                  (let ((tmp.131 zeros.4))
                    (apply
                     L.zeros.4.31
                     zeros.4
                     (let ((tmp.132 |-.54|)) (apply L.-.54.28 |-.54| n.7 1))
                     (let ((tmp.133 cons.76))
                       (apply L.cons.76.6 cons.76 0 l.8)))))))))))
    (define L.*.52.30
      (lambda (c.121 tmp.14 tmp.15)
        (if (fixnum? tmp.15)
          (if (fixnum? tmp.14) (unsafe-fx* tmp.14 tmp.15) (error 0))
          (error 0))))
    (define L.+.53.29
      (lambda (c.120 tmp.16 tmp.17)
        (if (fixnum? tmp.17)
          (if (fixnum? tmp.16) (unsafe-fx+ tmp.16 tmp.17) (error 1))
          (error 1))))
    (define L.-.54.28
      (lambda (c.119 tmp.18 tmp.19)
        (if (fixnum? tmp.19)
          (if (fixnum? tmp.18) (unsafe-fx- tmp.18 tmp.19) (error 2))
          (error 2))))
    (define L.<.55.27
      (lambda (c.118 tmp.20 tmp.21)
        (if (fixnum? tmp.21)
          (if (fixnum? tmp.20) (unsafe-fx< tmp.20 tmp.21) (error 3))
          (error 3))))
    (define L.<=.56.26
      (lambda (c.117 tmp.22 tmp.23)
        (if (fixnum? tmp.23)
          (if (fixnum? tmp.22) (unsafe-fx<= tmp.22 tmp.23) (error 4))
          (error 4))))
    (define L.>.57.25
      (lambda (c.116 tmp.24 tmp.25)
        (if (fixnum? tmp.25)
          (if (fixnum? tmp.24) (unsafe-fx> tmp.24 tmp.25) (error 5))
          (error 5))))
    (define L.>=.58.24
      (lambda (c.115 tmp.26 tmp.27)
        (if (fixnum? tmp.27)
          (if (fixnum? tmp.26) (unsafe-fx>= tmp.26 tmp.27) (error 6))
          (error 6))))
    (define L.make-vector.59.23
      (lambda (c.114 tmp.28)
        (let ((make-init-vector.1 (unsafe-procedure-ref c.114 0)))
          (if (fixnum? tmp.28)
            (let ((tmp.129 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.28))
            (error 7)))))
    (define L.vector-length.60.22
      (lambda (c.113 tmp.29)
        (if (vector? tmp.29) (unsafe-vector-length tmp.29) (error 8))))
    (define L.vector-set!.61.21
      (lambda (c.112 tmp.30 tmp.31 tmp.32)
        (let ((unsafe-vector-set!.2 (unsafe-procedure-ref c.112 0)))
          (if (fixnum? tmp.31)
            (if (vector? tmp.30)
              (let ((tmp.128 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.30
                 tmp.31
                 tmp.32))
              (error 9))
            (error 9)))))
    (define L.vector-ref.62.20
      (lambda (c.111 tmp.33 tmp.34)
        (let ((unsafe-vector-ref.3 (unsafe-procedure-ref c.111 0)))
          (if (fixnum? tmp.34)
            (if (vector? tmp.33)
              (let ((tmp.127 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.33
                 tmp.34))
              (error 10))
            (error 10)))))
    (define L.car.63.19
      (lambda (c.110 tmp.35)
        (if (pair? tmp.35) (unsafe-car tmp.35) (error 11))))
    (define L.cdr.64.18
      (lambda (c.109 tmp.36)
        (if (pair? tmp.36) (unsafe-cdr tmp.36) (error 12))))
    (define L.procedure-arity.65.17
      (lambda (c.108 tmp.37)
        (if (procedure? tmp.37) (unsafe-procedure-arity tmp.37) (error 13))))
    (define L.fixnum?.66.16 (lambda (c.107 tmp.38) (fixnum? tmp.38)))
    (define L.boolean?.67.15 (lambda (c.106 tmp.39) (boolean? tmp.39)))
    (define L.empty?.68.14 (lambda (c.105 tmp.40) (empty? tmp.40)))
    (define L.void?.69.13 (lambda (c.104 tmp.41) (void? tmp.41)))
    (define L.ascii-char?.70.12 (lambda (c.103 tmp.42) (ascii-char? tmp.42)))
    (define L.error?.71.11 (lambda (c.102 tmp.43) (error? tmp.43)))
    (define L.pair?.72.10 (lambda (c.101 tmp.44) (pair? tmp.44)))
    (define L.procedure?.73.9 (lambda (c.100 tmp.45) (procedure? tmp.45)))
    (define L.vector?.74.8 (lambda (c.99 tmp.46) (vector? tmp.46)))
    (define L.not.75.7 (lambda (c.98 tmp.47) (not tmp.47)))
    (define L.cons.76.6 (lambda (c.97 tmp.48 tmp.49) (cons tmp.48 tmp.49)))
    (define L.eq?.77.5 (lambda (c.96 tmp.50 tmp.51) (eq? tmp.50 tmp.51)))
    (define L.make-init-vector.1.4
      (lambda (c.95 tmp.78)
        (let ((vector-init-loop.80 (unsafe-procedure-ref c.95 0)))
          (let ((tmp.79 (unsafe-make-vector tmp.78)))
            (let ((tmp.126 vector-init-loop.80))
              (apply
               L.vector-init-loop.80.3
               vector-init-loop.80
               tmp.78
               0
               tmp.79))))))
    (define L.vector-init-loop.80.3
      (lambda (c.94 len.81 i.83 vec.82)
        (let ((vector-init-loop.80 (unsafe-procedure-ref c.94 0)))
          (if (eq? len.81 i.83)
            vec.82
            (begin
              (unsafe-vector-set! vec.82 i.83 0)
              (let ((tmp.125 vector-init-loop.80))
                (apply
                 L.vector-init-loop.80.3
                 vector-init-loop.80
                 len.81
                 (unsafe-fx+ i.83 1)
                 vec.82)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.93 tmp.89 tmp.90 tmp.91)
        (if (unsafe-fx< tmp.90 (unsafe-vector-length tmp.89))
          (if (unsafe-fx>= tmp.90 0)
            (begin (unsafe-vector-set! tmp.89 tmp.90 tmp.91) (void))
            (error 9))
          (error 9))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.92 tmp.86 tmp.87)
        (if (unsafe-fx< tmp.87 (unsafe-vector-length tmp.86))
          (if (unsafe-fx>= tmp.87 0)
            (unsafe-vector-ref tmp.86 tmp.87)
            (error 10))
          (error 10))))
    (let ((unsafe-vector-ref.3 (make-procedure L.unsafe-vector-ref.3.1 2 0)))
      (let ((unsafe-vector-set!.2
             (make-procedure L.unsafe-vector-set!.2.2 3 0)))
        (let ((vector-init-loop.80
               (make-procedure L.vector-init-loop.80.3 3 1)))
          (let ((make-init-vector.1
                 (make-procedure L.make-init-vector.1.4 1 1)))
            (let ((eq?.77 (make-procedure L.eq?.77.5 2 0)))
              (let ((cons.76 (make-procedure L.cons.76.6 2 0)))
                (let ((not.75 (make-procedure L.not.75.7 1 0)))
                  (let ((vector?.74 (make-procedure L.vector?.74.8 1 0)))
                    (let ((procedure?.73
                           (make-procedure L.procedure?.73.9 1 0)))
                      (let ((pair?.72 (make-procedure L.pair?.72.10 1 0)))
                        (let ((error?.71 (make-procedure L.error?.71.11 1 0)))
                          (let ((ascii-char?.70
                                 (make-procedure L.ascii-char?.70.12 1 0)))
                            (let ((void?.69
                                   (make-procedure L.void?.69.13 1 0)))
                              (let ((empty?.68
                                     (make-procedure L.empty?.68.14 1 0)))
                                (let ((boolean?.67
                                       (make-procedure L.boolean?.67.15 1 0)))
                                  (let ((fixnum?.66
                                         (make-procedure L.fixnum?.66.16 1 0)))
                                    (let ((procedure-arity.65
                                           (make-procedure
                                            L.procedure-arity.65.17
                                            1
                                            0)))
                                      (let ((cdr.64
                                             (make-procedure L.cdr.64.18 1 0)))
                                        (let ((car.63
                                               (make-procedure
                                                L.car.63.19
                                                1
                                                0)))
                                          (let ((vector-ref.62
                                                 (make-procedure
                                                  L.vector-ref.62.20
                                                  2
                                                  1)))
                                            (let ((vector-set!.61
                                                   (make-procedure
                                                    L.vector-set!.61.21
                                                    3
                                                    1)))
                                              (let ((vector-length.60
                                                     (make-procedure
                                                      L.vector-length.60.22
                                                      1
                                                      0)))
                                                (let ((make-vector.59
                                                       (make-procedure
                                                        L.make-vector.59.23
                                                        1
                                                        1)))
                                                  (let ((>=.58
                                                         (make-procedure
                                                          L.>=.58.24
                                                          2
                                                          0)))
                                                    (let ((>.57
                                                           (make-procedure
                                                            L.>.57.25
                                                            2
                                                            0)))
                                                      (let ((<=.56
                                                             (make-procedure
                                                              L.<=.56.26
                                                              2
                                                              0)))
                                                        (let ((<.55
                                                               (make-procedure
                                                                L.<.55.27
                                                                2
                                                                0)))
                                                          (let ((|-.54|
                                                                 (make-procedure
                                                                  L.-.54.28
                                                                  2
                                                                  0)))
                                                            (let ((|+.53|
                                                                   (make-procedure
                                                                    L.+.53.29
                                                                    2
                                                                    0)))
                                                              (let ((*.52
                                                                     (make-procedure
                                                                      L.*.52.30
                                                                      2
                                                                      0)))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-init-loop.80
                                                                     0
                                                                     vector-init-loop.80))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-init-vector.1
                                                                     0
                                                                     vector-init-loop.80))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-ref.62
                                                                     0
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-set!.61
                                                                     0
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-vector.59
                                                                     0
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((zeros.4
                                                                         (make-procedure
                                                                          L.zeros.4.31
                                                                          2
                                                                          4)))
                                                                    (let ((map.5
                                                                           (make-procedure
                                                                            L.map.5.32
                                                                            2
                                                                            5)))
                                                                      (let ((inc.6
                                                                             (make-procedure
                                                                              L.inc.6.33
                                                                              1
                                                                              1)))
                                                                        (begin
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             zeros.4
                                                                             0
                                                                             cons.76)
                                                                            (unsafe-procedure-set!
                                                                             zeros.4
                                                                             1
                                                                             |-.54|)
                                                                            (unsafe-procedure-set!
                                                                             zeros.4
                                                                             2
                                                                             zeros.4)
                                                                            (unsafe-procedure-set!
                                                                             zeros.4
                                                                             3
                                                                             eq?.77))
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             map.5
                                                                             0
                                                                             cdr.64)
                                                                            (unsafe-procedure-set!
                                                                             map.5
                                                                             1
                                                                             map.5)
                                                                            (unsafe-procedure-set!
                                                                             map.5
                                                                             2
                                                                             car.63)
                                                                            (unsafe-procedure-set!
                                                                             map.5
                                                                             3
                                                                             cons.76)
                                                                            (unsafe-procedure-set!
                                                                             map.5
                                                                             4
                                                                             empty?.68))
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             inc.6
                                                                             0
                                                                             |+.53|))
                                                                          (let ((listofZero.12
                                                                                 (let ((tmp.140
                                                                                        zeros.4))
                                                                                   (apply
                                                                                    L.zeros.4.31
                                                                                    zeros.4
                                                                                    32
                                                                                    ()))))
                                                                            (let ((ones.13
                                                                                   (let ((tmp.141
                                                                                          map.5))
                                                                                     (apply
                                                                                      L.map.5.32
                                                                                      map.5
                                                                                      inc.6
                                                                                      listofZero.12))))
                                                                              ones.13))))))))))))))))))))))))))))))))))))))
      ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.inc.6.33
      (lambda (c.124 x.11)
        (let ((|+.53| (closure-ref c.124 0)))
          (let ((tmp.139 |+.53|)) (unsafe-apply L.+.53.29 |+.53| x.11 1)))))
    (define L.map.5.32
      (lambda (c.123 f.9 l.10)
        (let ((cdr.64 (closure-ref c.123 0))
              (map.5 (closure-ref c.123 1))
              (car.63 (closure-ref c.123 2))
              (cons.76 (closure-ref c.123 3))
              (empty?.68 (closure-ref c.123 4)))
          (if (let ((tmp.134 empty?.68))
                (unsafe-apply L.empty?.68.14 empty?.68 l.10))
            l.10
            (let ((tmp.135 cons.76))
              (unsafe-apply
               L.cons.76.6
               cons.76
               (closure-apply
                f.9
                f.9
                (let ((tmp.136 car.63))
                  (unsafe-apply L.car.63.19 car.63 l.10)))
               (let ((tmp.137 map.5))
                 (unsafe-apply
                  L.map.5.32
                  map.5
                  f.9
                  (let ((tmp.138 cdr.64))
                    (unsafe-apply L.cdr.64.18 cdr.64 l.10))))))))))
    (define L.zeros.4.31
      (lambda (c.122 n.7 l.8)
        (let ((cons.76 (closure-ref c.122 0))
              (|-.54| (closure-ref c.122 1))
              (zeros.4 (closure-ref c.122 2))
              (eq?.77 (closure-ref c.122 3)))
          (if (let ((tmp.130 eq?.77)) (unsafe-apply L.eq?.77.5 eq?.77 n.7 0))
            l.8
            (let ((tmp.131 zeros.4))
              (unsafe-apply
               L.zeros.4.31
               zeros.4
               (let ((tmp.132 |-.54|)) (unsafe-apply L.-.54.28 |-.54| n.7 1))
               (let ((tmp.133 cons.76))
                 (unsafe-apply L.cons.76.6 cons.76 0 l.8))))))))
    (define L.*.52.30
      (lambda (c.121 tmp.14 tmp.15)
        (let ()
          (if (fixnum? tmp.15)
            (if (fixnum? tmp.14) (unsafe-fx* tmp.14 tmp.15) (error 0))
            (error 0)))))
    (define L.+.53.29
      (lambda (c.120 tmp.16 tmp.17)
        (let ()
          (if (fixnum? tmp.17)
            (if (fixnum? tmp.16) (unsafe-fx+ tmp.16 tmp.17) (error 1))
            (error 1)))))
    (define L.-.54.28
      (lambda (c.119 tmp.18 tmp.19)
        (let ()
          (if (fixnum? tmp.19)
            (if (fixnum? tmp.18) (unsafe-fx- tmp.18 tmp.19) (error 2))
            (error 2)))))
    (define L.<.55.27
      (lambda (c.118 tmp.20 tmp.21)
        (let ()
          (if (fixnum? tmp.21)
            (if (fixnum? tmp.20) (unsafe-fx< tmp.20 tmp.21) (error 3))
            (error 3)))))
    (define L.<=.56.26
      (lambda (c.117 tmp.22 tmp.23)
        (let ()
          (if (fixnum? tmp.23)
            (if (fixnum? tmp.22) (unsafe-fx<= tmp.22 tmp.23) (error 4))
            (error 4)))))
    (define L.>.57.25
      (lambda (c.116 tmp.24 tmp.25)
        (let ()
          (if (fixnum? tmp.25)
            (if (fixnum? tmp.24) (unsafe-fx> tmp.24 tmp.25) (error 5))
            (error 5)))))
    (define L.>=.58.24
      (lambda (c.115 tmp.26 tmp.27)
        (let ()
          (if (fixnum? tmp.27)
            (if (fixnum? tmp.26) (unsafe-fx>= tmp.26 tmp.27) (error 6))
            (error 6)))))
    (define L.make-vector.59.23
      (lambda (c.114 tmp.28)
        (let ((make-init-vector.1 (closure-ref c.114 0)))
          (if (fixnum? tmp.28)
            (let ((tmp.129 make-init-vector.1))
              (unsafe-apply L.make-init-vector.1.4 make-init-vector.1 tmp.28))
            (error 7)))))
    (define L.vector-length.60.22
      (lambda (c.113 tmp.29)
        (let ()
          (if (vector? tmp.29) (unsafe-vector-length tmp.29) (error 8)))))
    (define L.vector-set!.61.21
      (lambda (c.112 tmp.30 tmp.31 tmp.32)
        (let ((unsafe-vector-set!.2 (closure-ref c.112 0)))
          (if (fixnum? tmp.31)
            (if (vector? tmp.30)
              (let ((tmp.128 unsafe-vector-set!.2))
                (unsafe-apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.30
                 tmp.31
                 tmp.32))
              (error 9))
            (error 9)))))
    (define L.vector-ref.62.20
      (lambda (c.111 tmp.33 tmp.34)
        (let ((unsafe-vector-ref.3 (closure-ref c.111 0)))
          (if (fixnum? tmp.34)
            (if (vector? tmp.33)
              (let ((tmp.127 unsafe-vector-ref.3))
                (unsafe-apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.33
                 tmp.34))
              (error 10))
            (error 10)))))
    (define L.car.63.19
      (lambda (c.110 tmp.35)
        (let () (if (pair? tmp.35) (unsafe-car tmp.35) (error 11)))))
    (define L.cdr.64.18
      (lambda (c.109 tmp.36)
        (let () (if (pair? tmp.36) (unsafe-cdr tmp.36) (error 12)))))
    (define L.procedure-arity.65.17
      (lambda (c.108 tmp.37)
        (let ()
          (if (procedure? tmp.37)
            (unsafe-procedure-arity tmp.37)
            (error 13)))))
    (define L.fixnum?.66.16 (lambda (c.107 tmp.38) (let () (fixnum? tmp.38))))
    (define L.boolean?.67.15
      (lambda (c.106 tmp.39) (let () (boolean? tmp.39))))
    (define L.empty?.68.14 (lambda (c.105 tmp.40) (let () (empty? tmp.40))))
    (define L.void?.69.13 (lambda (c.104 tmp.41) (let () (void? tmp.41))))
    (define L.ascii-char?.70.12
      (lambda (c.103 tmp.42) (let () (ascii-char? tmp.42))))
    (define L.error?.71.11 (lambda (c.102 tmp.43) (let () (error? tmp.43))))
    (define L.pair?.72.10 (lambda (c.101 tmp.44) (let () (pair? tmp.44))))
    (define L.procedure?.73.9
      (lambda (c.100 tmp.45) (let () (procedure? tmp.45))))
    (define L.vector?.74.8 (lambda (c.99 tmp.46) (let () (vector? tmp.46))))
    (define L.not.75.7 (lambda (c.98 tmp.47) (let () (not tmp.47))))
    (define L.cons.76.6
      (lambda (c.97 tmp.48 tmp.49) (let () (cons tmp.48 tmp.49))))
    (define L.eq?.77.5
      (lambda (c.96 tmp.50 tmp.51) (let () (eq? tmp.50 tmp.51))))
    (define L.make-init-vector.1.4
      (lambda (c.95 tmp.78)
        (let ((vector-init-loop.80 (closure-ref c.95 0)))
          (let ((tmp.79 (unsafe-make-vector tmp.78)))
            (let ((tmp.126 vector-init-loop.80))
              (unsafe-apply
               L.vector-init-loop.80.3
               vector-init-loop.80
               tmp.78
               0
               tmp.79))))))
    (define L.vector-init-loop.80.3
      (lambda (c.94 len.81 i.83 vec.82)
        (let ((vector-init-loop.80 (closure-ref c.94 0)))
          (if (eq? len.81 i.83)
            vec.82
            (begin
              (unsafe-vector-set! vec.82 i.83 0)
              (let ((tmp.125 vector-init-loop.80))
                (unsafe-apply
                 L.vector-init-loop.80.3
                 vector-init-loop.80
                 len.81
                 (unsafe-fx+ i.83 1)
                 vec.82)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.93 tmp.89 tmp.90 tmp.91)
        (let ()
          (if (unsafe-fx< tmp.90 (unsafe-vector-length tmp.89))
            (if (unsafe-fx>= tmp.90 0)
              (begin (unsafe-vector-set! tmp.89 tmp.90 tmp.91) (void))
              (error 9))
            (error 9)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.92 tmp.86 tmp.87)
        (let ()
          (if (unsafe-fx< tmp.87 (unsafe-vector-length tmp.86))
            (if (unsafe-fx>= tmp.87 0)
              (unsafe-vector-ref tmp.86 tmp.87)
              (error 10))
            (error 10)))))
    (cletrec
     ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
      (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
      (vector-init-loop.80
       (make-closure L.vector-init-loop.80.3 3 vector-init-loop.80))
      (make-init-vector.1
       (make-closure L.make-init-vector.1.4 1 vector-init-loop.80))
      (eq?.77 (make-closure L.eq?.77.5 2))
      (cons.76 (make-closure L.cons.76.6 2))
      (not.75 (make-closure L.not.75.7 1))
      (vector?.74 (make-closure L.vector?.74.8 1))
      (procedure?.73 (make-closure L.procedure?.73.9 1))
      (pair?.72 (make-closure L.pair?.72.10 1))
      (error?.71 (make-closure L.error?.71.11 1))
      (ascii-char?.70 (make-closure L.ascii-char?.70.12 1))
      (void?.69 (make-closure L.void?.69.13 1))
      (empty?.68 (make-closure L.empty?.68.14 1))
      (boolean?.67 (make-closure L.boolean?.67.15 1))
      (fixnum?.66 (make-closure L.fixnum?.66.16 1))
      (procedure-arity.65 (make-closure L.procedure-arity.65.17 1))
      (cdr.64 (make-closure L.cdr.64.18 1))
      (car.63 (make-closure L.car.63.19 1))
      (vector-ref.62 (make-closure L.vector-ref.62.20 2 unsafe-vector-ref.3))
      (vector-set!.61
       (make-closure L.vector-set!.61.21 3 unsafe-vector-set!.2))
      (vector-length.60 (make-closure L.vector-length.60.22 1))
      (make-vector.59 (make-closure L.make-vector.59.23 1 make-init-vector.1))
      (>=.58 (make-closure L.>=.58.24 2))
      (>.57 (make-closure L.>.57.25 2))
      (<=.56 (make-closure L.<=.56.26 2))
      (<.55 (make-closure L.<.55.27 2))
      (|-.54| (make-closure L.-.54.28 2))
      (|+.53| (make-closure L.+.53.29 2))
      (*.52 (make-closure L.*.52.30 2)))
     (let ()
       (let ()
         (cletrec
          ((zeros.4
            (make-closure L.zeros.4.31 2 cons.76 |-.54| zeros.4 eq?.77))
           (map.5
            (make-closure L.map.5.32 2 cdr.64 map.5 car.63 cons.76 empty?.68))
           (inc.6 (make-closure L.inc.6.33 1 |+.53|)))
          (let ()
            (let ((listofZero.12
                   (let ((tmp.140 zeros.4))
                     (unsafe-apply L.zeros.4.31 zeros.4 32 ()))))
              (let ((ones.13
                     (let ((tmp.141 map.5))
                       (unsafe-apply L.map.5.32 map.5 inc.6 listofZero.12))))
                ones.13))))))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.92 tmp.86 tmp.87)
                (let ()
                  (if (unsafe-fx< tmp.87 (unsafe-vector-length tmp.86))
                    (if (unsafe-fx>= tmp.87 0)
                      (unsafe-vector-ref tmp.86 tmp.87)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.93 tmp.89 tmp.90 tmp.91)
                (let ()
                  (if (unsafe-fx< tmp.90 (unsafe-vector-length tmp.89))
                    (if (unsafe-fx>= tmp.90 0)
                      (begin (unsafe-vector-set! tmp.89 tmp.90 tmp.91) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.80.3
              (lambda (c.94 len.81 i.83 vec.82)
                (let ((vector-init-loop.80 (closure-ref c.94 0)))
                  (if (eq? len.81 i.83)
                    vec.82
                    (begin
                      (unsafe-vector-set! vec.82 i.83 0)
                      (let ((tmp.125 vector-init-loop.80))
                        (unsafe-apply
                         L.vector-init-loop.80.3
                         vector-init-loop.80
                         len.81
                         (unsafe-fx+ i.83 1)
                         vec.82)))))))
             (L.make-init-vector.1.4
              (lambda (c.95 tmp.78)
                (let ((vector-init-loop.80 (closure-ref c.95 0)))
                  (let ((tmp.79 (unsafe-make-vector tmp.78)))
                    (let ((tmp.126 vector-init-loop.80))
                      (unsafe-apply
                       L.vector-init-loop.80.3
                       vector-init-loop.80
                       tmp.78
                       0
                       tmp.79))))))
             (L.eq?.77.5
              (lambda (c.96 tmp.50 tmp.51) (let () (eq? tmp.50 tmp.51))))
             (L.cons.76.6
              (lambda (c.97 tmp.48 tmp.49) (let () (cons tmp.48 tmp.49))))
             (L.not.75.7 (lambda (c.98 tmp.47) (let () (not tmp.47))))
             (L.vector?.74.8 (lambda (c.99 tmp.46) (let () (vector? tmp.46))))
             (L.procedure?.73.9
              (lambda (c.100 tmp.45) (let () (procedure? tmp.45))))
             (L.pair?.72.10 (lambda (c.101 tmp.44) (let () (pair? tmp.44))))
             (L.error?.71.11 (lambda (c.102 tmp.43) (let () (error? tmp.43))))
             (L.ascii-char?.70.12
              (lambda (c.103 tmp.42) (let () (ascii-char? tmp.42))))
             (L.void?.69.13 (lambda (c.104 tmp.41) (let () (void? tmp.41))))
             (L.empty?.68.14 (lambda (c.105 tmp.40) (let () (empty? tmp.40))))
             (L.boolean?.67.15
              (lambda (c.106 tmp.39) (let () (boolean? tmp.39))))
             (L.fixnum?.66.16
              (lambda (c.107 tmp.38) (let () (fixnum? tmp.38))))
             (L.procedure-arity.65.17
              (lambda (c.108 tmp.37)
                (let ()
                  (if (procedure? tmp.37)
                    (unsafe-procedure-arity tmp.37)
                    (error 13)))))
             (L.cdr.64.18
              (lambda (c.109 tmp.36)
                (let () (if (pair? tmp.36) (unsafe-cdr tmp.36) (error 12)))))
             (L.car.63.19
              (lambda (c.110 tmp.35)
                (let () (if (pair? tmp.35) (unsafe-car tmp.35) (error 11)))))
             (L.vector-ref.62.20
              (lambda (c.111 tmp.33 tmp.34)
                (let ((unsafe-vector-ref.3 (closure-ref c.111 0)))
                  (if (fixnum? tmp.34)
                    (if (vector? tmp.33)
                      (let ((tmp.127 unsafe-vector-ref.3))
                        (unsafe-apply
                         L.unsafe-vector-ref.3.1
                         unsafe-vector-ref.3
                         tmp.33
                         tmp.34))
                      (error 10))
                    (error 10)))))
             (L.vector-set!.61.21
              (lambda (c.112 tmp.30 tmp.31 tmp.32)
                (let ((unsafe-vector-set!.2 (closure-ref c.112 0)))
                  (if (fixnum? tmp.31)
                    (if (vector? tmp.30)
                      (let ((tmp.128 unsafe-vector-set!.2))
                        (unsafe-apply
                         L.unsafe-vector-set!.2.2
                         unsafe-vector-set!.2
                         tmp.30
                         tmp.31
                         tmp.32))
                      (error 9))
                    (error 9)))))
             (L.vector-length.60.22
              (lambda (c.113 tmp.29)
                (let ()
                  (if (vector? tmp.29)
                    (unsafe-vector-length tmp.29)
                    (error 8)))))
             (L.make-vector.59.23
              (lambda (c.114 tmp.28)
                (let ((make-init-vector.1 (closure-ref c.114 0)))
                  (if (fixnum? tmp.28)
                    (let ((tmp.129 make-init-vector.1))
                      (unsafe-apply
                       L.make-init-vector.1.4
                       make-init-vector.1
                       tmp.28))
                    (error 7)))))
             (L.>=.58.24
              (lambda (c.115 tmp.26 tmp.27)
                (let ()
                  (if (fixnum? tmp.27)
                    (if (fixnum? tmp.26) (unsafe-fx>= tmp.26 tmp.27) (error 6))
                    (error 6)))))
             (L.>.57.25
              (lambda (c.116 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx> tmp.24 tmp.25) (error 5))
                    (error 5)))))
             (L.<=.56.26
              (lambda (c.117 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx<= tmp.22 tmp.23) (error 4))
                    (error 4)))))
             (L.<.55.27
              (lambda (c.118 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx< tmp.20 tmp.21) (error 3))
                    (error 3)))))
             (L.-.54.28
              (lambda (c.119 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx- tmp.18 tmp.19) (error 2))
                    (error 2)))))
             (L.+.53.29
              (lambda (c.120 tmp.16 tmp.17)
                (let ()
                  (if (fixnum? tmp.17)
                    (if (fixnum? tmp.16) (unsafe-fx+ tmp.16 tmp.17) (error 1))
                    (error 1)))))
             (L.*.52.30
              (lambda (c.121 tmp.14 tmp.15)
                (let ()
                  (if (fixnum? tmp.15)
                    (if (fixnum? tmp.14) (unsafe-fx* tmp.14 tmp.15) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.80
         (make-closure L.vector-init-loop.80.3 3 vector-init-loop.80))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.80))
        (eq?.77 (make-closure L.eq?.77.5 2))
        (cons.76 (make-closure L.cons.76.6 2))
        (not.75 (make-closure L.not.75.7 1))
        (vector?.74 (make-closure L.vector?.74.8 1))
        (procedure?.73 (make-closure L.procedure?.73.9 1))
        (pair?.72 (make-closure L.pair?.72.10 1))
        (error?.71 (make-closure L.error?.71.11 1))
        (ascii-char?.70 (make-closure L.ascii-char?.70.12 1))
        (void?.69 (make-closure L.void?.69.13 1))
        (empty?.68 (make-closure L.empty?.68.14 1))
        (boolean?.67 (make-closure L.boolean?.67.15 1))
        (fixnum?.66 (make-closure L.fixnum?.66.16 1))
        (procedure-arity.65 (make-closure L.procedure-arity.65.17 1))
        (cdr.64 (make-closure L.cdr.64.18 1))
        (car.63 (make-closure L.car.63.19 1))
        (vector-ref.62 (make-closure L.vector-ref.62.20 2 unsafe-vector-ref.3))
        (vector-set!.61
         (make-closure L.vector-set!.61.21 3 unsafe-vector-set!.2))
        (vector-length.60 (make-closure L.vector-length.60.22 1))
        (make-vector.59
         (make-closure L.make-vector.59.23 1 make-init-vector.1))
        (>=.58 (make-closure L.>=.58.24 2))
        (>.57 (make-closure L.>.57.25 2))
        (<=.56 (make-closure L.<=.56.26 2))
        (<.55 (make-closure L.<.55.27 2))
        (|-.54| (make-closure L.-.54.28 2))
        (|+.53| (make-closure L.+.53.29 2))
        (*.52 (make-closure L.*.52.30 2)))
       (let ()
         (let ()
           (letrec ((L.zeros.4.31
                     (lambda (c.122 n.7 l.8)
                       (let ((cons.76 (closure-ref c.122 0))
                             (|-.54| (closure-ref c.122 1))
                             (zeros.4 (closure-ref c.122 2))
                             (eq?.77 (closure-ref c.122 3)))
                         (if (let ((tmp.130 eq?.77))
                               (unsafe-apply L.eq?.77.5 eq?.77 n.7 0))
                           l.8
                           (let ((tmp.131 zeros.4))
                             (unsafe-apply
                              L.zeros.4.31
                              zeros.4
                              (let ((tmp.132 |-.54|))
                                (unsafe-apply L.-.54.28 |-.54| n.7 1))
                              (let ((tmp.133 cons.76))
                                (unsafe-apply L.cons.76.6 cons.76 0 l.8))))))))
                    (L.map.5.32
                     (lambda (c.123 f.9 l.10)
                       (let ((cdr.64 (closure-ref c.123 0))
                             (map.5 (closure-ref c.123 1))
                             (car.63 (closure-ref c.123 2))
                             (cons.76 (closure-ref c.123 3))
                             (empty?.68 (closure-ref c.123 4)))
                         (if (let ((tmp.134 empty?.68))
                               (unsafe-apply L.empty?.68.14 empty?.68 l.10))
                           l.10
                           (let ((tmp.135 cons.76))
                             (unsafe-apply
                              L.cons.76.6
                              cons.76
                              (closure-apply
                               f.9
                               f.9
                               (let ((tmp.136 car.63))
                                 (unsafe-apply L.car.63.19 car.63 l.10)))
                              (let ((tmp.137 map.5))
                                (unsafe-apply
                                 L.map.5.32
                                 map.5
                                 f.9
                                 (let ((tmp.138 cdr.64))
                                   (unsafe-apply
                                    L.cdr.64.18
                                    cdr.64
                                    l.10))))))))))
                    (L.inc.6.33
                     (lambda (c.124 x.11)
                       (let ((|+.53| (closure-ref c.124 0)))
                         (let ((tmp.139 |+.53|))
                           (unsafe-apply L.+.53.29 |+.53| x.11 1))))))
             (cletrec
              ((zeros.4
                (make-closure L.zeros.4.31 2 cons.76 |-.54| zeros.4 eq?.77))
               (map.5
                (make-closure
                 L.map.5.32
                 2
                 cdr.64
                 map.5
                 car.63
                 cons.76
                 empty?.68))
               (inc.6 (make-closure L.inc.6.33 1 |+.53|)))
              (let ()
                (let ((listofZero.12
                       (let ((tmp.140 zeros.4))
                         (unsafe-apply L.zeros.4.31 zeros.4 32 ()))))
                  (let ((ones.13
                         (let ((tmp.141 map.5))
                           (unsafe-apply
                            L.map.5.32
                            map.5
                            inc.6
                            listofZero.12))))
                    ones.13))))))))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.92 tmp.86 tmp.87)
                (let ()
                  (if (unsafe-fx< tmp.87 (unsafe-vector-length tmp.86))
                    (if (unsafe-fx>= tmp.87 0)
                      (unsafe-vector-ref tmp.86 tmp.87)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.93 tmp.89 tmp.90 tmp.91)
                (let ()
                  (if (unsafe-fx< tmp.90 (unsafe-vector-length tmp.89))
                    (if (unsafe-fx>= tmp.90 0)
                      (begin (unsafe-vector-set! tmp.89 tmp.90 tmp.91) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.80.3
              (lambda (c.94 len.81 i.83 vec.82)
                (let ((vector-init-loop.80 (closure-ref c.94 0)))
                  (if (eq? len.81 i.83)
                    vec.82
                    (begin
                      (unsafe-vector-set! vec.82 i.83 0)
                      (closure-apply
                       vector-init-loop.80
                       vector-init-loop.80
                       len.81
                       (unsafe-fx+ i.83 1)
                       vec.82))))))
             (L.make-init-vector.1.4
              (lambda (c.95 tmp.78)
                (let ((vector-init-loop.80 (closure-ref c.95 0)))
                  (let ((tmp.79 (unsafe-make-vector tmp.78)))
                    (closure-apply
                     vector-init-loop.80
                     vector-init-loop.80
                     tmp.78
                     0
                     tmp.79)))))
             (L.eq?.77.5
              (lambda (c.96 tmp.50 tmp.51) (let () (eq? tmp.50 tmp.51))))
             (L.cons.76.6
              (lambda (c.97 tmp.48 tmp.49) (let () (cons tmp.48 tmp.49))))
             (L.not.75.7 (lambda (c.98 tmp.47) (let () (not tmp.47))))
             (L.vector?.74.8 (lambda (c.99 tmp.46) (let () (vector? tmp.46))))
             (L.procedure?.73.9
              (lambda (c.100 tmp.45) (let () (procedure? tmp.45))))
             (L.pair?.72.10 (lambda (c.101 tmp.44) (let () (pair? tmp.44))))
             (L.error?.71.11 (lambda (c.102 tmp.43) (let () (error? tmp.43))))
             (L.ascii-char?.70.12
              (lambda (c.103 tmp.42) (let () (ascii-char? tmp.42))))
             (L.void?.69.13 (lambda (c.104 tmp.41) (let () (void? tmp.41))))
             (L.empty?.68.14 (lambda (c.105 tmp.40) (let () (empty? tmp.40))))
             (L.boolean?.67.15
              (lambda (c.106 tmp.39) (let () (boolean? tmp.39))))
             (L.fixnum?.66.16
              (lambda (c.107 tmp.38) (let () (fixnum? tmp.38))))
             (L.procedure-arity.65.17
              (lambda (c.108 tmp.37)
                (let ()
                  (if (procedure? tmp.37)
                    (unsafe-procedure-arity tmp.37)
                    (error 13)))))
             (L.cdr.64.18
              (lambda (c.109 tmp.36)
                (let () (if (pair? tmp.36) (unsafe-cdr tmp.36) (error 12)))))
             (L.car.63.19
              (lambda (c.110 tmp.35)
                (let () (if (pair? tmp.35) (unsafe-car tmp.35) (error 11)))))
             (L.vector-ref.62.20
              (lambda (c.111 tmp.33 tmp.34)
                (let ((unsafe-vector-ref.3 (closure-ref c.111 0)))
                  (if (fixnum? tmp.34)
                    (if (vector? tmp.33)
                      (closure-apply
                       unsafe-vector-ref.3
                       unsafe-vector-ref.3
                       tmp.33
                       tmp.34)
                      (error 10))
                    (error 10)))))
             (L.vector-set!.61.21
              (lambda (c.112 tmp.30 tmp.31 tmp.32)
                (let ((unsafe-vector-set!.2 (closure-ref c.112 0)))
                  (if (fixnum? tmp.31)
                    (if (vector? tmp.30)
                      (closure-apply
                       unsafe-vector-set!.2
                       unsafe-vector-set!.2
                       tmp.30
                       tmp.31
                       tmp.32)
                      (error 9))
                    (error 9)))))
             (L.vector-length.60.22
              (lambda (c.113 tmp.29)
                (let ()
                  (if (vector? tmp.29)
                    (unsafe-vector-length tmp.29)
                    (error 8)))))
             (L.make-vector.59.23
              (lambda (c.114 tmp.28)
                (let ((make-init-vector.1 (closure-ref c.114 0)))
                  (if (fixnum? tmp.28)
                    (closure-apply
                     make-init-vector.1
                     make-init-vector.1
                     tmp.28)
                    (error 7)))))
             (L.>=.58.24
              (lambda (c.115 tmp.26 tmp.27)
                (let ()
                  (if (fixnum? tmp.27)
                    (if (fixnum? tmp.26) (unsafe-fx>= tmp.26 tmp.27) (error 6))
                    (error 6)))))
             (L.>.57.25
              (lambda (c.116 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx> tmp.24 tmp.25) (error 5))
                    (error 5)))))
             (L.<=.56.26
              (lambda (c.117 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx<= tmp.22 tmp.23) (error 4))
                    (error 4)))))
             (L.<.55.27
              (lambda (c.118 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx< tmp.20 tmp.21) (error 3))
                    (error 3)))))
             (L.-.54.28
              (lambda (c.119 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx- tmp.18 tmp.19) (error 2))
                    (error 2)))))
             (L.+.53.29
              (lambda (c.120 tmp.16 tmp.17)
                (let ()
                  (if (fixnum? tmp.17)
                    (if (fixnum? tmp.16) (unsafe-fx+ tmp.16 tmp.17) (error 1))
                    (error 1)))))
             (L.*.52.30
              (lambda (c.121 tmp.14 tmp.15)
                (let ()
                  (if (fixnum? tmp.15)
                    (if (fixnum? tmp.14) (unsafe-fx* tmp.14 tmp.15) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.80
         (make-closure L.vector-init-loop.80.3 3 vector-init-loop.80))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.80))
        (eq?.77 (make-closure L.eq?.77.5 2))
        (cons.76 (make-closure L.cons.76.6 2))
        (not.75 (make-closure L.not.75.7 1))
        (vector?.74 (make-closure L.vector?.74.8 1))
        (procedure?.73 (make-closure L.procedure?.73.9 1))
        (pair?.72 (make-closure L.pair?.72.10 1))
        (error?.71 (make-closure L.error?.71.11 1))
        (ascii-char?.70 (make-closure L.ascii-char?.70.12 1))
        (void?.69 (make-closure L.void?.69.13 1))
        (empty?.68 (make-closure L.empty?.68.14 1))
        (boolean?.67 (make-closure L.boolean?.67.15 1))
        (fixnum?.66 (make-closure L.fixnum?.66.16 1))
        (procedure-arity.65 (make-closure L.procedure-arity.65.17 1))
        (cdr.64 (make-closure L.cdr.64.18 1))
        (car.63 (make-closure L.car.63.19 1))
        (vector-ref.62 (make-closure L.vector-ref.62.20 2 unsafe-vector-ref.3))
        (vector-set!.61
         (make-closure L.vector-set!.61.21 3 unsafe-vector-set!.2))
        (vector-length.60 (make-closure L.vector-length.60.22 1))
        (make-vector.59
         (make-closure L.make-vector.59.23 1 make-init-vector.1))
        (>=.58 (make-closure L.>=.58.24 2))
        (>.57 (make-closure L.>.57.25 2))
        (<=.56 (make-closure L.<=.56.26 2))
        (<.55 (make-closure L.<.55.27 2))
        (|-.54| (make-closure L.-.54.28 2))
        (|+.53| (make-closure L.+.53.29 2))
        (*.52 (make-closure L.*.52.30 2)))
       (let ()
         (let ()
           (letrec ((L.zeros.4.31
                     (lambda (c.122 n.7 l.8)
                       (let ((cons.76 (closure-ref c.122 0))
                             (|-.54| (closure-ref c.122 1))
                             (zeros.4 (closure-ref c.122 2))
                             (eq?.77 (closure-ref c.122 3)))
                         (if (closure-apply eq?.77 eq?.77 n.7 0)
                           l.8
                           (closure-apply
                            zeros.4
                            zeros.4
                            (closure-apply |-.54| |-.54| n.7 1)
                            (closure-apply cons.76 cons.76 0 l.8))))))
                    (L.map.5.32
                     (lambda (c.123 f.9 l.10)
                       (let ((cdr.64 (closure-ref c.123 0))
                             (map.5 (closure-ref c.123 1))
                             (car.63 (closure-ref c.123 2))
                             (cons.76 (closure-ref c.123 3))
                             (empty?.68 (closure-ref c.123 4)))
                         (if (closure-apply empty?.68 empty?.68 l.10)
                           l.10
                           (closure-apply
                            cons.76
                            cons.76
                            (closure-apply
                             f.9
                             f.9
                             (closure-apply car.63 car.63 l.10))
                            (closure-apply
                             map.5
                             map.5
                             f.9
                             (closure-apply cdr.64 cdr.64 l.10)))))))
                    (L.inc.6.33
                     (lambda (c.124 x.11)
                       (let ((|+.53| (closure-ref c.124 0)))
                         (closure-apply |+.53| |+.53| x.11 1)))))
             (cletrec
              ((zeros.4
                (make-closure L.zeros.4.31 2 cons.76 |-.54| zeros.4 eq?.77))
               (map.5
                (make-closure
                 L.map.5.32
                 2
                 cdr.64
                 map.5
                 car.63
                 cons.76
                 empty?.68))
               (inc.6 (make-closure L.inc.6.33 1 |+.53|)))
              (let ()
                (let ((listofZero.12 (closure-apply zeros.4 zeros.4 32 ())))
                  (let ((ones.13
                         (closure-apply map.5 map.5 inc.6 listofZero.12)))
                    ones.13))))))))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  (parameterize ([current-pass-list
                  (list
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (let ()
      (let ()
        (letrec ((zeros.4
                  (lambda (n.7 l.8)
                    (if (apply eq? n.7 0)
                      l.8
                      (apply zeros.4 (apply - n.7 1) (apply cons 0 l.8)))))
                 (map.5
                  (lambda (f.9 l.10)
                    (if (apply empty? l.10)
                      l.10
                      (apply
                       cons
                       (apply f.9 (apply car l.10))
                       (apply map.5 f.9 (apply cdr l.10))))))
                 (inc.6 (lambda (x.11) (apply + x.11 1))))
          (let ()
            (let ((listofZero.12 (apply zeros.4 32 ())))
              (let ((ones.13 (apply map.5 inc.6 listofZero.12))) ones.13)))))))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )

  (parameterize ([current-pass-list
                  (list
                   uniquify
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define zeros (lambda (n l) (if (eq? n 0) l (zeros (- n 1) (cons 0 l)))))
    (define map
      (lambda (f l) (if (empty? l) l (cons (f (car l)) (map f (cdr l))))))
    (define inc (lambda (x) (+ x 1)))
    (let ((listofZero (zeros 32 '())))
      (let ((ones (map inc listofZero))) ones)))
     ) '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))

  )
  
  )