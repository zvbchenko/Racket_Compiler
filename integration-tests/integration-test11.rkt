#lang racket
(require
  "../a10.rkt"
  "../a10-implement-safe-primops.rkt"
  "../a10-compiler-lib.rkt"
  "../a10-graph-lib.rkt")
(module+ test
  (require rackunit))


(module+ test
#|
(parameterize ([current-pass-list
                  (list
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.108 (set! (rbp + 0) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.unsafe-vector-ref.3.1)
    (set! (r15 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.unsafe-vector-set!.2.2)
    (set! (r14 + 6) 24)
    (set! r10 r14)
    (set! r13 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.vector-init-loop.78.3)
    (set! (r14 + 6) 24)
    (set! r10 r14)
    (set! r9 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.make-init-vector.1.4)
    (set! (r14 + 6) 8)
    (set! r10 r14)
    (set! r8 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.eq?.75.5)
    (set! (r14 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.cons.74.6)
    (set! (rdi + 6) 16)
    (set! (rbp + 16) rdi)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.not.73.7)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.vector?.72.8)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.procedure?.71.9)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.pair?.70.10)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.error?.69.11)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.ascii-char?.68.12)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.void?.67.13)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.empty?.66.14)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.boolean?.65.15)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.fixnum?.64.16)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.procedure-arity.63.17)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.cdr.62.18)
    (set! (rsi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.car.61.19)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 24))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.vector-ref.60.20)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (set! (rbx + -2) L.vector-set!.59.21)
    (set! (rbx + 6) 24)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (set! (rsp + -2) L.vector-length.58.22)
    (set! (rsp + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (set! (rsp + -2) L.make-vector.57.23)
    (set! (rsp + 6) 8)
    (set! (rbp + 8) rsp)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (set! (rsp + -2) L.>=.56.24)
    (set! (rsp + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (set! (rsp + -2) L.>.55.25)
    (set! (rsp + 6) 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (set! (r10 + -2) L.<=.54.26)
    (set! r10 (rbp + 24))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (set! (r10 + -2) L.<.53.27)
    (set! r10 (rbp + 24))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (set! (r10 + -2) L.-.52.28)
    (set! r10 (rbp + 24))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (set! (r10 + -2) L.+.51.29)
    (set! r10 (rbp + 24))
    (set! (r10 + 6) 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (set! (r10 + -2) L.*.50.30)
    (set! r10 (rbp + 24))
    (set! (r10 + 6) 16)
    (nop)
    (set! (r9 + 14) r9)
    (set! (r8 + 14) r9)
    (set! (rcx + 14) r15)
    (set! (rbx + 14) r13)
    (set! r10 (rbp + 8))
    (set! (r10 + 14) r8)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 64))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.filter.4.31)
    (set! (r15 + 6) 16)
    (set! (rbp + 8) r15)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 56))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.apply-pred.5.32)
    (set! (r15 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 32))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.make-bigger?.6.33)
    (set! (r13 + 6) 8)
    (nop)
    (set! r10 (rbp + 8))
    (set! (r10 + 14) rsi)
    (set! r10 (rbp + 8))
    (set! r11 (rbp + 8))
    (set! (r11 + 22) r10)
    (set! r10 (rbp + 16))
    (set! r11 (rbp + 8))
    (set! (r11 + 30) r10)
    (set! r10 (rbp + 8))
    (set! (r10 + 38) rdx)
    (set! r10 (rbp + 8))
    (set! (r10 + 46) r15)
    (set! r10 (rbp + 8))
    (set! (r10 + 54) rdi)
    (set! (r15 + 14) rsi)
    (set! (r15 + 22) rsp)
    (set! (r15 + 30) r13)
    (set! (r15 + 38) rdx)
    (set! (r15 + 46) r14)
    (set! (r13 + 14) r13)
    (set! r10 (rbp + 16))
    (set! (r13 + 22) r10)
    (set! r15 (rbp + 8))
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! rsi 64)
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.109)
    (jump L.make-bigger?.6.33)
    (define L.jp.39 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.272 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.273 (set! rax 62))
    (jump r15)
    (define L.jp.40 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_t.268 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.269 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.nest_t.270 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_f.271 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.266 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.267 (set! rax 318))
    (jump r15)
    (define L.jp.44 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_t.262 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.263 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.nest_t.264 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_f.265 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.260 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.261 (set! rax 574))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_t.256 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.257 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.258 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_f.259 (set! rax 574))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! rax 14))
    (jump r15)
    (define L.nest_f.253 (set! rax 6))
    (jump r15)
    (define L.nest_t.254 (compare r13 r9))
    (jump-if < L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 830))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.249 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.250 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! rax 14))
    (jump r15)
    (define L.nest_f.245 (set! rax 6))
    (jump r15)
    (define L.nest_t.246 (compare r13 r9))
    (jump-if <= L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 1086))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.241 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.242 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! rax 14))
    (jump r15)
    (define L.nest_f.237 (set! rax 6))
    (jump r15)
    (define L.nest_t.238 (compare r13 r9))
    (jump-if > L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1342))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.233 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.234 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! rax 14))
    (jump r15)
    (define L.nest_f.229 (set! rax 6))
    (jump r15)
    (define L.nest_t.230 (compare r13 r9))
    (jump-if >= L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1598))
    (jump r15)
    (define L.jp.68 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.225 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.nest_t.226 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.222 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.223 (set! rax 1854))
    (jump r15)
    (define L.jp.72 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_t.220 (set! rax (r13 + -3)))
    (jump r15)
    (define L.nest_f.221 (set! rax 2110))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.219 (set! rax 2366))
    (jump r15)
    (define L.jp.76 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.214 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.215 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.nest_t.216 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_f.217 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.212 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.213 (set! rax 2622))
    (jump r15)
    (define L.jp.80 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_t.208 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.209 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.nest_t.210 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_f.211 (set! rax 2622))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.206 (set! rax (r13 + -1)))
    (jump r15)
    (define L.nest_f.207 (set! rax 2878))
    (jump r15)
    (define L.jp.84 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_t.204 (set! rax (r13 + 7)))
    (jump r15)
    (define L.nest_f.205 (set! rax 3134))
    (jump r15)
    (define L.jp.86 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (r13 + 6)))
    (jump r15)
    (define L.nest_f.203 (set! rax 3390))
    (jump r15)
    (define L.jp.99 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.201 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (set! (r8 + rdi) 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.jp.102 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (set! (r14 + r9) r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.199 (set! rax 2366))
    (jump r15)
    (define L.jp.103 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.194 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.195 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.nest_t.196 (compare r13 0))
    (jump-if >= L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_f.197 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.192 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (r14 + r13))
    (jump r15)
    (define L.nest_f.193 (set! rax 2622))
    (jump r15)
    (define L.jp.107 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_t.188 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.189 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.nest_t.190 (compare r13 0))
    (jump-if >= L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_f.191 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r14 + -3))
    (compare r13 r9)
    (jump-if < L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.186 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.107)
    (define L.nest_f.187 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.107)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (r14 + -3))
    (compare r13 r8)
    (jump-if < L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_t.184 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.103)
    (define L.nest_f.185 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.103)
    (define L.vector-init-loop.78.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (r9 + 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.99)
    (define L.nest_f.183 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.99)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (set! (r9 + -3) r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.eq?.75.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! rax 14))
    (jump r15)
    (define L.nest_f.181 (set! rax 6))
    (jump r15)
    (define L.cons.74.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (set! (r9 + -1) r14)
    (set! (r9 + 7) r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.73.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (set! rax 6))
    (jump r15)
    (define L.nest_f.179 (set! rax 14))
    (jump r15)
    (define L.vector?.72.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.procedure?.71.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 14))
    (jump r15)
    (define L.nest_f.175 (set! rax 6))
    (jump r15)
    (define L.pair?.70.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.error?.69.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.68.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.void?.67.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.empty?.66.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.boolean?.65.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.fixnum?.64.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.63.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.86)
    (define L.nest_f.159 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.86)
    (define L.cdr.62.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.84)
    (define L.nest_f.157 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.84)
    (define L.car.61.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.155 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.vector-ref.60.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r9 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.80)
    (define L.nest_f.153 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.80)
    (define L.vector-set!.59.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (r8 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.76)
    (define L.nest_f.151 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.76)
    (define L.vector-length.58.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.72)
    (define L.nest_f.149 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.72)
    (define L.make-vector.57.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.147 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.>=.56.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.68)
    (define L.nest_f.145 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.68)
    (define L.>.55.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.143 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.<=.54.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.141 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<.53.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.139 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.-.52.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.137 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.+.51.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.44)
    (define L.nest_f.135 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.44)
    (define L.*.50.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.40)
    (define L.nest_f.133 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.40)
    (define L.filter.4.31 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 48) rsi)
    (set! (rbp + 32) rdx)
    (set! r10 (r15 + 14))
    (set! (rbp + 24) r10)
    (set! r10 (r15 + 22))
    (set! (rbp + 40) r10)
    (set! r10 (r15 + 30))
    (set! (rbp + 56) r10)
    (set! r10 (r15 + 38))
    (set! (rbp + 16) r10)
    (set! r10 (r15 + 46))
    (set! (rbp + 8) r10)
    (set! r15 (r15 + 54))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.119)
    (jump L.empty?.66.14)
    (define L.rp.119 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.rp.120 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 64))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -56))
    (set! r15 L.rp.121)
    (jump L.apply-pred.5.32)
    (define L.rp.121 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.rp.122 (set! rbp (- rbp 64)))
    (set! (rbp + 8) rax)
    (set! r15 (rbp + 40))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.123)
    (jump L.cdr.62.18)
    (define L.rp.123 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 64))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.124)
    (jump L.filter.4.31)
    (define L.rp.124 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 8))
    (set! rdi (rbp + 56))
    (set! r15 (rbp + 0))
    (jump L.cons.74.6)
    (define L.rp.125 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 48))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31)
    (define L.nest_t.128 (set! r15 (rbp + 56)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.122)
    (jump L.car.61.19)
    (define L.nest_f.129 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.125)
    (jump L.cdr.62.18)
    (define L.nest_t.130 (set! rax 22))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.nest_f.131 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.120)
    (jump L.car.61.19)
    (define L.apply-pred.5.32 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r14 r10)
    (set! (rbp + 24) rsi)
    (set! (rbp + 16) rdx)
    (set! r10 (r14 + 14))
    (set! (rbp + 32) r10)
    (set! r10 (r14 + 22))
    (set! (rbp + 8) r10)
    (set! r10 (r14 + 30))
    (set! (rbp + 40) r10)
    (set! r15 (r14 + 38))
    (set! r10 (r14 + 46))
    (set! (rbp + 48) r10)
    (set! r14 (rbp + 48))
    (nop)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.116)
    (jump L.car.61.19)
    (define L.rp.116 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! rdx (rbp + -16))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.117)
    (jump L.eq?.75.5)
    (define L.rp.117 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.>.55.25)
    (define L.nest_t.126 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.118)
    (jump L.cdr.62.18)
    (define L.nest_f.127 (set! rax 25406))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.make-bigger?.6.33 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r14 (r9 + 14))
    (set! r9 (r9 + 22))
    (nop)
    (set! r10 r13)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r9)
    (set! rdi r10)
    (nop)
    (jump L.cons.74.6)
    (define L.rp.109 (set! rbp (- rbp 32)))
    (set! (rbp + 24) rax)
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 32))
    (set! rdx 22)
    (set! rsi 184)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.110)
    (jump L.cons.74.6)
    (define L.rp.110 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 8)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.111)
    (jump L.cons.74.6)
    (define L.rp.111 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 72)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.112)
    (jump L.cons.74.6)
    (define L.rp.112 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 64)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.113)
    (jump L.cons.74.6)
    (define L.rp.113 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 56)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.114)
    (jump L.cons.74.6)
    (define L.rp.114 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 32)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.115)
    (jump L.cons.74.6)
    (define L.rp.115 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 24))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31))
     ) '(9 23)))

(parameterize ([current-pass-list
                  (list
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.108 (set! (rbp + 0) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (set! r10 r14)
    (set! r13 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.vector-init-loop.78.3)
    (mset! r14 6 24)
    (set! r10 r14)
    (set! r9 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.make-init-vector.1.4)
    (mset! r14 6 8)
    (set! r10 r14)
    (set! r8 r10)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.eq?.75.5)
    (mset! r14 6 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cons.74.6)
    (mset! rdi 6 16)
    (set! (rbp + 16) rdi)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.not.73.7)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector?.72.8)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure?.71.9)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.pair?.70.10)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.error?.69.11)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.ascii-char?.68.12)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.void?.67.13)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.empty?.66.14)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.boolean?.65.15)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.fixnum?.64.16)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.procedure-arity.63.17)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.cdr.62.18)
    (mset! rsi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.car.61.19)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 24))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.vector-ref.60.20)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.vector-set!.59.21)
    (mset! rbx 6 24)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.vector-length.58.22)
    (mset! rsp 6 8)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.make-vector.57.23)
    (mset! rsp 6 8)
    (set! (rbp + 8) rsp)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.>=.56.24)
    (mset! rsp 6 16)
    (nop)
    (set! r10 r12)
    (set! rsp r10)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.>.55.25)
    (mset! rsp 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (mset! r10 -2 L.<=.54.26)
    (set! r10 (rbp + 24))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (mset! r10 -2 L.<.53.27)
    (set! r10 (rbp + 24))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (mset! r10 -2 L.-.52.28)
    (set! r10 (rbp + 24))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (mset! r10 -2 L.+.51.29)
    (set! r10 (rbp + 24))
    (mset! r10 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! r10 (rbp + 24))
    (set! r10 (+ r10 2))
    (set! (rbp + 24) r10)
    (nop)
    (set! r10 (rbp + 24))
    (mset! r10 -2 L.*.50.30)
    (set! r10 (rbp + 24))
    (mset! r10 6 16)
    (nop)
    (mset! r9 14 r9)
    (mset! r8 14 r9)
    (mset! rcx 14 r15)
    (mset! rbx 14 r13)
    (set! r10 (rbp + 8))
    (mset! r10 14 r8)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 64))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.filter.4.31)
    (mset! r15 6 16)
    (set! (rbp + 8) r15)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 56))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.apply-pred.5.32)
    (mset! r15 6 16)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 32))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.make-bigger?.6.33)
    (mset! r13 6 8)
    (nop)
    (set! r10 (rbp + 8))
    (mset! r10 14 rsi)
    (set! r10 (rbp + 8))
    (set! r11 (rbp + 8))
    (mset! r11 22 r10)
    (set! r10 (rbp + 16))
    (set! r11 (rbp + 8))
    (mset! r11 30 r10)
    (set! r10 (rbp + 8))
    (mset! r10 38 rdx)
    (set! r10 (rbp + 8))
    (mset! r10 46 r15)
    (set! r10 (rbp + 8))
    (mset! r10 54 rdi)
    (mset! r15 14 rsi)
    (mset! r15 22 rsp)
    (mset! r15 30 r13)
    (mset! r15 38 rdx)
    (mset! r15 46 r14)
    (mset! r13 14 r13)
    (set! r10 (rbp + 16))
    (mset! r13 22 r10)
    (set! r15 (rbp + 8))
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! rsi 64)
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.109)
    (jump L.make-bigger?.6.33)
    (define L.jp.39 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.272 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.273 (set! rax 62))
    (jump r15)
    (define L.jp.40 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_t.268 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.269 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.nest_t.270 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_f.271 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.266 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.267 (set! rax 318))
    (jump r15)
    (define L.jp.44 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_t.262 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.263 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.nest_t.264 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_f.265 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.260 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.261 (set! rax 574))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_t.256 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.257 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.258 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_f.259 (set! rax 574))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! rax 14))
    (jump r15)
    (define L.nest_f.253 (set! rax 6))
    (jump r15)
    (define L.nest_t.254 (compare r13 r9))
    (jump-if < L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 830))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.249 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.250 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! rax 14))
    (jump r15)
    (define L.nest_f.245 (set! rax 6))
    (jump r15)
    (define L.nest_t.246 (compare r13 r9))
    (jump-if <= L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 1086))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.241 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.242 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! rax 14))
    (jump r15)
    (define L.nest_f.237 (set! rax 6))
    (jump r15)
    (define L.nest_t.238 (compare r13 r9))
    (jump-if > L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1342))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.233 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.234 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! rax 14))
    (jump r15)
    (define L.nest_f.229 (set! rax 6))
    (jump r15)
    (define L.nest_t.230 (compare r13 r9))
    (jump-if >= L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1598))
    (jump r15)
    (define L.jp.68 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.225 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.nest_t.226 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.222 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.223 (set! rax 1854))
    (jump r15)
    (define L.jp.72 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_t.220 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.221 (set! rax 2110))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.219 (set! rax 2366))
    (jump r15)
    (define L.jp.76 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.214 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.215 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.nest_t.216 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_f.217 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.212 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.213 (set! rax 2622))
    (jump r15)
    (define L.jp.80 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_t.208 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.209 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.nest_t.210 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_f.211 (set! rax 2622))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.206 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.207 (set! rax 2878))
    (jump r15)
    (define L.jp.84 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_t.204 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.205 (set! rax 3134))
    (jump r15)
    (define L.jp.86 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.203 (set! rax 3390))
    (jump r15)
    (define L.jp.99 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.201 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.jp.102 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.199 (set! rax 2366))
    (jump r15)
    (define L.jp.103 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.194 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.195 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.nest_t.196 (compare r13 0))
    (jump-if >= L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_f.197 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.192 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.193 (set! rax 2622))
    (jump r15)
    (define L.jp.107 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_t.188 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.189 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.nest_t.190 (compare r13 0))
    (jump-if >= L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_f.191 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.186 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.107)
    (define L.nest_f.187 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.107)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_t.184 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.103)
    (define L.nest_f.185 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.103)
    (define L.vector-init-loop.78.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.99)
    (define L.nest_f.183 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.99)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.eq?.75.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! rax 14))
    (jump r15)
    (define L.nest_f.181 (set! rax 6))
    (jump r15)
    (define L.cons.74.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.73.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (set! rax 6))
    (jump r15)
    (define L.nest_f.179 (set! rax 14))
    (jump r15)
    (define L.vector?.72.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.procedure?.71.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 14))
    (jump r15)
    (define L.nest_f.175 (set! rax 6))
    (jump r15)
    (define L.pair?.70.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.error?.69.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.68.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.void?.67.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.empty?.66.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.boolean?.65.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.fixnum?.64.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.63.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.86)
    (define L.nest_f.159 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.86)
    (define L.cdr.62.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.84)
    (define L.nest_f.157 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.84)
    (define L.car.61.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.155 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.vector-ref.60.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r9 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.80)
    (define L.nest_f.153 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.80)
    (define L.vector-set!.59.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (mref r8 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.76)
    (define L.nest_f.151 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.76)
    (define L.vector-length.58.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.72)
    (define L.nest_f.149 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.72)
    (define L.make-vector.57.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.147 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.>=.56.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.68)
    (define L.nest_f.145 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.68)
    (define L.>.55.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.143 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.<=.54.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.141 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<.53.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.139 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.-.52.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.137 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.+.51.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.44)
    (define L.nest_f.135 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.44)
    (define L.*.50.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.40)
    (define L.nest_f.133 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.40)
    (define L.filter.4.31 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r15 r10)
    (set! (rbp + 48) rsi)
    (set! (rbp + 32) rdx)
    (set! r10 (mref r15 14))
    (set! (rbp + 24) r10)
    (set! r10 (mref r15 22))
    (set! (rbp + 40) r10)
    (set! r10 (mref r15 30))
    (set! (rbp + 56) r10)
    (set! r10 (mref r15 38))
    (set! (rbp + 16) r10)
    (set! r10 (mref r15 46))
    (set! (rbp + 8) r10)
    (set! r15 (mref r15 54))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.119)
    (jump L.empty?.66.14)
    (define L.rp.119 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.rp.120 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 64))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -56))
    (set! r15 L.rp.121)
    (jump L.apply-pred.5.32)
    (define L.rp.121 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.rp.122 (set! rbp (- rbp 64)))
    (set! (rbp + 8) rax)
    (set! r15 (rbp + 40))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.123)
    (jump L.cdr.62.18)
    (define L.rp.123 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 64))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.124)
    (jump L.filter.4.31)
    (define L.rp.124 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 8))
    (set! rdi (rbp + 56))
    (set! r15 (rbp + 0))
    (jump L.cons.74.6)
    (define L.rp.125 (set! rbp (- rbp 64)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 48))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31)
    (define L.nest_t.128 (set! r15 (rbp + 56)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.122)
    (jump L.car.61.19)
    (define L.nest_f.129 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.125)
    (jump L.cdr.62.18)
    (define L.nest_t.130 (set! rax 22))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.nest_f.131 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.120)
    (jump L.car.61.19)
    (define L.apply-pred.5.32 (set! (rbp + 0) r15))
    (set! r10 rdi)
    (set! r14 r10)
    (set! (rbp + 24) rsi)
    (set! (rbp + 16) rdx)
    (set! r10 (mref r14 14))
    (set! (rbp + 32) r10)
    (set! r10 (mref r14 22))
    (set! (rbp + 8) r10)
    (set! r10 (mref r14 30))
    (set! (rbp + 40) r10)
    (set! r15 (mref r14 38))
    (set! r10 (mref r14 46))
    (set! (rbp + 48) r10)
    (set! r14 (rbp + 48))
    (nop)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! r10 r15)
    (set! rdi r10)
    (set! r15 L.rp.116)
    (jump L.car.61.19)
    (define L.rp.116 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 56))
    (set! rdx (rbp + -16))
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.117)
    (jump L.eq?.75.5)
    (define L.rp.117 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.>.55.25)
    (define L.nest_t.126 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.118)
    (jump L.cdr.62.18)
    (define L.nest_f.127 (set! rax 25406))
    (set! r10 (rbp + 0))
    (jump r10)
    (define L.make-bigger?.6.33 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r14 (mref r9 14))
    (set! r9 (mref r9 22))
    (nop)
    (set! r10 r13)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r9)
    (set! rdi r10)
    (nop)
    (jump L.cons.74.6)
    (define L.rp.109 (set! rbp (- rbp 32)))
    (set! (rbp + 24) rax)
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 32))
    (set! rdx 22)
    (set! rsi 184)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.110)
    (jump L.cons.74.6)
    (define L.rp.110 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 8)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.111)
    (jump L.cons.74.6)
    (define L.rp.111 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 72)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.112)
    (jump L.cons.74.6)
    (define L.rp.112 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 64)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.113)
    (jump L.cons.74.6)
    (define L.rp.113 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 56)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.114)
    (jump L.cons.74.6)
    (define L.rp.114 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! rbp (+ rbp 32))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi 32)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.115)
    (jump L.cons.74.6)
    (define L.rp.115 (set! rbp (- rbp 32)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 24))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31))
     ) '(9 23)))

(parameterize ([current-pass-list
                  (list
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.108 (set! (rbp + 0) r15))
    (set! r15 r12)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r14 r12)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (set! r13 r14)
    (set! r14 r12)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.vector-init-loop.78.3)
    (mset! r14 6 24)
    (set! r9 r14)
    (set! r14 r12)
    (set! r12 (+ r12 24))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.make-init-vector.1.4)
    (mset! r14 6 8)
    (set! r8 r14)
    (set! r14 r12)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.eq?.75.5)
    (mset! r14 6 16)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cons.74.6)
    (mset! rdi 6 16)
    (set! (rbp + 16) rdi)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.not.73.7)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector?.72.8)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure?.71.9)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.pair?.70.10)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.error?.69.11)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.ascii-char?.68.12)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.void?.67.13)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.empty?.66.14)
    (mset! rdi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.boolean?.65.15)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.fixnum?.64.16)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.procedure-arity.63.17)
    (mset! rsi 6 8)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 16))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.cdr.62.18)
    (mset! rsi 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.car.61.19)
    (mset! rdx 6 8)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 24))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.vector-ref.60.20)
    (mset! rcx 6 16)
    (nop)
    (set! rbx r12)
    (set! r12 (+ r12 24))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.vector-set!.59.21)
    (mset! rbx 6 24)
    (nop)
    (set! rsp r12)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.vector-length.58.22)
    (mset! rsp 6 8)
    (nop)
    (set! rsp r12)
    (set! r12 (+ r12 24))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.make-vector.57.23)
    (mset! rsp 6 8)
    (set! (rbp + 8) rsp)
    (set! rsp r12)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.>=.56.24)
    (mset! rsp 6 16)
    (nop)
    (set! rsp r12)
    (set! r12 (+ r12 16))
    (set! rsp (+ rsp 2))
    (nop)
    (mset! rsp -2 L.>.55.25)
    (mset! rsp 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 24) (+ (rbp + 24) 2))
    (nop)
    (mset! (rbp + 24) -2 L.<=.54.26)
    (mset! (rbp + 24) 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 24) (+ (rbp + 24) 2))
    (nop)
    (mset! (rbp + 24) -2 L.<.53.27)
    (mset! (rbp + 24) 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 24) (+ (rbp + 24) 2))
    (nop)
    (mset! (rbp + 24) -2 L.-.52.28)
    (mset! (rbp + 24) 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 24) (+ (rbp + 24) 2))
    (nop)
    (mset! (rbp + 24) -2 L.+.51.29)
    (mset! (rbp + 24) 6 16)
    (nop)
    (set! (rbp + 24) r12)
    (set! r12 (+ r12 16))
    (set! (rbp + 24) (+ (rbp + 24) 2))
    (nop)
    (mset! (rbp + 24) -2 L.*.50.30)
    (mset! (rbp + 24) 6 16)
    (nop)
    (mset! r9 14 r9)
    (mset! r8 14 r9)
    (mset! rcx 14 r15)
    (mset! rbx 14 r13)
    (mset! (rbp + 8) 14 r8)
    (set! r15 r12)
    (set! r12 (+ r12 64))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.filter.4.31)
    (mset! r15 6 16)
    (set! (rbp + 8) r15)
    (set! r15 r12)
    (set! r12 (+ r12 56))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.apply-pred.5.32)
    (mset! r15 6 16)
    (nop)
    (set! r13 r12)
    (set! r12 (+ r12 32))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.make-bigger?.6.33)
    (mset! r13 6 8)
    (nop)
    (mset! (rbp + 8) 14 rsi)
    (mset! (rbp + 8) 22 (rbp + 8))
    (mset! (rbp + 8) 30 (rbp + 16))
    (mset! (rbp + 8) 38 rdx)
    (mset! (rbp + 8) 46 r15)
    (mset! (rbp + 8) 54 rdi)
    (mset! r15 14 rsi)
    (mset! r15 22 rsp)
    (mset! r15 30 r13)
    (mset! r15 38 rdx)
    (mset! r15 46 r14)
    (mset! r13 14 r13)
    (mset! r13 22 (rbp + 16))
    (set! r15 (rbp + 8))
    (set! r15 r13)
    (set! rbp (+ rbp 32))
    (set! rsi 64)
    (set! rdi r13)
    (set! r15 L.rp.109)
    (jump L.make-bigger?.6.33)
    (define L.jp.39 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.272)
    (jump L.nest_f.273)
    (define L.nest_t.272 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r14 (* r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.273 (set! rax 62))
    (jump r15)
    (define L.jp.40 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.270)
    (jump L.nest_f.271)
    (define L.nest_t.268 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.269 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.nest_t.270 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.268)
    (jump L.nest_f.269)
    (define L.nest_f.271 (set! rax 62))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.266)
    (jump L.nest_f.267)
    (define L.nest_t.266 (set! r14 (+ r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.267 (set! rax 318))
    (jump r15)
    (define L.jp.44 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.264)
    (jump L.nest_f.265)
    (define L.nest_t.262 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.263 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.nest_t.264 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.262)
    (jump L.nest_f.263)
    (define L.nest_f.265 (set! rax 318))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.260)
    (jump L.nest_f.261)
    (define L.nest_t.260 (set! r14 (- r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.261 (set! rax 574))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.258)
    (jump L.nest_f.259)
    (define L.nest_t.256 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.257 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.258 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.256)
    (jump L.nest_f.257)
    (define L.nest_f.259 (set! rax 574))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.254)
    (jump L.nest_f.255)
    (define L.nest_t.252 (set! rax 14))
    (jump r15)
    (define L.nest_f.253 (set! rax 6))
    (jump r15)
    (define L.nest_t.254 (compare r13 r9))
    (jump-if < L.nest_t.252)
    (jump L.nest_f.253)
    (define L.nest_f.255 (set! rax 830))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.250)
    (jump L.nest_f.251)
    (define L.nest_t.248 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.249 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.250 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.248)
    (jump L.nest_f.249)
    (define L.nest_f.251 (set! rax 830))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.246)
    (jump L.nest_f.247)
    (define L.nest_t.244 (set! rax 14))
    (jump r15)
    (define L.nest_f.245 (set! rax 6))
    (jump r15)
    (define L.nest_t.246 (compare r13 r9))
    (jump-if <= L.nest_t.244)
    (jump L.nest_f.245)
    (define L.nest_f.247 (set! rax 1086))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.242)
    (jump L.nest_f.243)
    (define L.nest_t.240 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.241 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.242 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.240)
    (jump L.nest_f.241)
    (define L.nest_f.243 (set! rax 1086))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.238)
    (jump L.nest_f.239)
    (define L.nest_t.236 (set! rax 14))
    (jump r15)
    (define L.nest_f.237 (set! rax 6))
    (jump r15)
    (define L.nest_t.238 (compare r13 r9))
    (jump-if > L.nest_t.236)
    (jump L.nest_f.237)
    (define L.nest_f.239 (set! rax 1342))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.234)
    (jump L.nest_f.235)
    (define L.nest_t.232 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.233 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.234 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.232)
    (jump L.nest_f.233)
    (define L.nest_f.235 (set! rax 1342))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.230)
    (jump L.nest_f.231)
    (define L.nest_t.228 (set! rax 14))
    (jump r15)
    (define L.nest_f.229 (set! rax 6))
    (jump r15)
    (define L.nest_t.230 (compare r13 r9))
    (jump-if >= L.nest_t.228)
    (jump L.nest_f.229)
    (define L.nest_f.231 (set! rax 1598))
    (jump r15)
    (define L.jp.68 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.226)
    (jump L.nest_f.227)
    (define L.nest_t.224 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.225 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.nest_t.226 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.224)
    (jump L.nest_f.225)
    (define L.nest_f.227 (set! rax 1598))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.222)
    (jump L.nest_f.223)
    (define L.nest_t.222 (nop))
    (set! rsi r9)
    (set! rdi r14)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.223 (set! rax 1854))
    (jump r15)
    (define L.jp.72 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.220)
    (jump L.nest_f.221)
    (define L.nest_t.220 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.221 (set! rax 2110))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! rdi rcx)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.218)
    (jump L.nest_f.219)
    (define L.nest_t.218 (nop))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.219 (set! rax 2366))
    (jump r15)
    (define L.jp.76 (nop))
    (nop)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rsi r8)
    (compare rdi 6)
    (jump-if neq? L.nest_t.216)
    (jump L.nest_f.217)
    (define L.nest_t.214 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.215 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.nest_t.216 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.214)
    (jump L.nest_f.215)
    (define L.nest_f.217 (set! rax 2366))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r13 6)
    (jump-if neq? L.nest_t.212)
    (jump L.nest_f.213)
    (define L.nest_t.212 (nop))
    (set! rdx r9)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.213 (set! rax 2622))
    (jump r15)
    (define L.jp.80 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (compare r8 6)
    (jump-if neq? L.nest_t.210)
    (jump L.nest_f.211)
    (define L.nest_t.208 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.209 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.nest_t.210 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.208)
    (jump L.nest_f.209)
    (define L.nest_f.211 (set! rax 2622))
    (jump r15)
    (define L.jp.82 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.206)
    (jump L.nest_f.207)
    (define L.nest_t.206 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.207 (set! rax 2878))
    (jump r15)
    (define L.jp.84 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.204)
    (jump L.nest_f.205)
    (define L.nest_t.204 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.205 (set! rax 3134))
    (jump r15)
    (define L.jp.86 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.202)
    (jump L.nest_f.203)
    (define L.nest_t.202 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.203 (set! rax 3390))
    (jump r15)
    (define L.jp.99 (nop))
    (nop)
    (set! r9 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.200)
    (jump L.nest_f.201)
    (define L.nest_t.200 (set! rax r8))
    (jump r15)
    (define L.nest_f.201 (set! rdi (arithmetic-shift-right r9 3)))
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! rcx r8)
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.jp.102 (nop))
    (set! r9 rdi)
    (set! r8 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (compare r9 6)
    (jump-if neq? L.nest_t.198)
    (jump L.nest_f.199)
    (define L.nest_t.198 (set! r9 (arithmetic-shift-right r8 3)))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.199 (set! rax 2366))
    (jump r15)
    (define L.jp.103 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r14 6)
    (jump-if neq? L.nest_t.196)
    (jump L.nest_f.197)
    (define L.nest_t.194 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.195 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.nest_t.196 (compare r13 0))
    (jump-if >= L.nest_t.194)
    (jump L.nest_f.195)
    (define L.nest_f.197 (set! rax 2366))
    (jump r15)
    (define L.jp.106 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.192)
    (jump L.nest_f.193)
    (define L.nest_t.192 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.193 (set! rax 2622))
    (jump r15)
    (define L.jp.107 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.190)
    (jump L.nest_f.191)
    (define L.nest_t.188 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.106)
    (define L.nest_f.189 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.106)
    (define L.nest_t.190 (compare r13 0))
    (jump-if >= L.nest_t.188)
    (jump L.nest_f.189)
    (define L.nest_f.191 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.186)
    (jump L.nest_f.187)
    (define L.nest_t.186 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.107)
    (define L.nest_f.187 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.107)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.184)
    (jump L.nest_f.185)
    (define L.nest_t.184 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.103)
    (define L.nest_f.185 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.103)
    (define L.vector-init-loop.78.3 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r8 rcx)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.182)
    (jump L.nest_f.183)
    (define L.nest_t.182 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.99)
    (define L.nest_f.183 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.99)
    (define L.make-init-vector.1.4 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (arithmetic-shift-right r14 3))
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r8 r12)
    (set! r12 (+ r12 r9))
    (set! r9 (+ r8 3))
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! rcx r9)
    (set! rdx 0)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.78.3)
    (define L.eq?.75.5 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r14 r13)
    (jump-if eq? L.nest_t.180)
    (jump L.nest_f.181)
    (define L.nest_t.180 (set! rax 14))
    (jump r15)
    (define L.nest_f.181 (set! rax 6))
    (jump r15)
    (define L.cons.74.6 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 r12)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! rax r9)
    (jump r15)
    (define L.not.73.7 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.178)
    (jump L.nest_f.179)
    (define L.nest_t.178 (set! rax 6))
    (jump r15)
    (define L.nest_f.179 (set! rax 14))
    (jump r15)
    (define L.vector?.72.8 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.176)
    (jump L.nest_f.177)
    (define L.nest_t.176 (set! rax 14))
    (jump r15)
    (define L.nest_f.177 (set! rax 6))
    (jump r15)
    (define L.procedure?.71.9 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.174)
    (jump L.nest_f.175)
    (define L.nest_t.174 (set! rax 14))
    (jump r15)
    (define L.nest_f.175 (set! rax 6))
    (jump r15)
    (define L.pair?.70.10 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.172)
    (jump L.nest_f.173)
    (define L.nest_t.172 (set! rax 14))
    (jump r15)
    (define L.nest_f.173 (set! rax 6))
    (jump r15)
    (define L.error?.69.11 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.170)
    (jump L.nest_f.171)
    (define L.nest_t.170 (set! rax 14))
    (jump r15)
    (define L.nest_f.171 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.68.12 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.168)
    (jump L.nest_f.169)
    (define L.nest_t.168 (set! rax 14))
    (jump r15)
    (define L.nest_f.169 (set! rax 6))
    (jump r15)
    (define L.void?.67.13 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.166)
    (jump L.nest_f.167)
    (define L.nest_t.166 (set! rax 14))
    (jump r15)
    (define L.nest_f.167 (set! rax 6))
    (jump r15)
    (define L.empty?.66.14 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.164)
    (jump L.nest_f.165)
    (define L.nest_t.164 (set! rax 14))
    (jump r15)
    (define L.nest_f.165 (set! rax 6))
    (jump r15)
    (define L.boolean?.65.15 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.162)
    (jump L.nest_f.163)
    (define L.nest_t.162 (set! rax 14))
    (jump r15)
    (define L.nest_f.163 (set! rax 6))
    (jump r15)
    (define L.fixnum?.64.16 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.160)
    (jump L.nest_f.161)
    (define L.nest_t.160 (set! rax 14))
    (jump r15)
    (define L.nest_f.161 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.63.17 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.158)
    (jump L.nest_f.159)
    (define L.nest_t.158 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.86)
    (define L.nest_f.159 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.86)
    (define L.cdr.62.18 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.156)
    (jump L.nest_f.157)
    (define L.nest_t.156 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.84)
    (define L.nest_f.157 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.84)
    (define L.car.61.19 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.154)
    (jump L.nest_f.155)
    (define L.nest_t.154 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.82)
    (define L.nest_f.155 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.82)
    (define L.vector-ref.60.20 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r9 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.152)
    (jump L.nest_f.153)
    (define L.nest_t.152 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.80)
    (define L.nest_f.153 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.80)
    (define L.vector-set!.59.21 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rdi (mref r8 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.150)
    (jump L.nest_f.151)
    (define L.nest_t.150 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.76)
    (define L.nest_f.151 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.76)
    (define L.vector-length.58.22 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.148)
    (jump L.nest_f.149)
    (define L.nest_t.148 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.72)
    (define L.nest_f.149 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.72)
    (define L.make-vector.57.23 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (bitwise-and r14 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.146)
    (jump L.nest_f.147)
    (define L.nest_t.146 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.147 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.>=.56.24 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.144)
    (jump L.nest_f.145)
    (define L.nest_t.144 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.68)
    (define L.nest_f.145 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.68)
    (define L.>.55.25 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.142)
    (jump L.nest_f.143)
    (define L.nest_t.142 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.143 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.<=.54.26 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.140)
    (jump L.nest_f.141)
    (define L.nest_t.140 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.141 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<.53.27 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.138)
    (jump L.nest_f.139)
    (define L.nest_t.138 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.139 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.-.52.28 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.136)
    (jump L.nest_f.137)
    (define L.nest_t.136 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.137 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.+.51.29 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.134)
    (jump L.nest_f.135)
    (define L.nest_t.134 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.44)
    (define L.nest_f.135 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.44)
    (define L.*.50.30 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.132)
    (jump L.nest_f.133)
    (define L.nest_t.132 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.40)
    (define L.nest_f.133 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.40)
    (define L.filter.4.31 (set! (rbp + 0) r15))
    (set! r15 rdi)
    (set! (rbp + 48) rsi)
    (set! (rbp + 32) rdx)
    (set! (rbp + 24) (mref r15 14))
    (set! (rbp + 40) (mref r15 22))
    (set! (rbp + 56) (mref r15 30))
    (set! (rbp + 16) (mref r15 38))
    (set! (rbp + 8) (mref r15 46))
    (set! r15 (mref r15 54))
    (nop)
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi r15)
    (set! r15 L.rp.119)
    (jump L.empty?.66.14)
    (define L.rp.119 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.130)
    (jump L.nest_f.131)
    (define L.rp.120 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (set! rbp (+ rbp 64))
    (set! rdx r15)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -56))
    (set! r15 L.rp.121)
    (jump L.apply-pred.5.32)
    (define L.rp.121 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.128)
    (jump L.nest_f.129)
    (define L.rp.122 (set! rbp (- rbp 64)))
    (set! (rbp + 8) rax)
    (set! r15 (rbp + 40))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.123)
    (jump L.cdr.62.18)
    (define L.rp.123 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (set! rbp (+ rbp 64))
    (set! rdx r15)
    (set! rsi (rbp + -16))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.124)
    (jump L.filter.4.31)
    (define L.rp.124 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 8))
    (set! rdi (rbp + 56))
    (set! r15 (rbp + 0))
    (jump L.cons.74.6)
    (define L.rp.125 (set! rbp (- rbp 64)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 48))
    (set! rdi (rbp + 40))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31)
    (define L.nest_t.128 (set! r15 (rbp + 56)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.122)
    (jump L.car.61.19)
    (define L.nest_f.129 (set! r15 (rbp + 40)))
    (set! r15 (rbp + 24))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.125)
    (jump L.cdr.62.18)
    (define L.nest_t.130 (set! rax 22))
    (jump (rbp + 0))
    (define L.nest_f.131 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 64))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -48))
    (set! r15 L.rp.120)
    (jump L.car.61.19)
    (define L.apply-pred.5.32 (set! (rbp + 0) r15))
    (set! r14 rdi)
    (set! (rbp + 24) rsi)
    (set! (rbp + 16) rdx)
    (set! (rbp + 32) (mref r14 14))
    (set! (rbp + 8) (mref r14 22))
    (set! (rbp + 40) (mref r14 30))
    (set! r15 (mref r14 38))
    (set! (rbp + 48) (mref r14 46))
    (set! r14 (rbp + 48))
    (nop)
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! rdi r15)
    (set! r15 L.rp.116)
    (jump L.car.61.19)
    (define L.rp.116 (set! rbp (- rbp 56)))
    (set! r15 rax)
    (set! rbp (+ rbp 56))
    (set! rdx (rbp + -16))
    (set! rsi r15)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.117)
    (jump L.eq?.75.5)
    (define L.rp.117 (set! rbp (- rbp 56)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.126)
    (jump L.nest_f.127)
    (define L.rp.118 (set! rbp (- rbp 56)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.>.55.25)
    (define L.nest_t.126 (set! r15 (rbp + 8)))
    (set! r15 (rbp + 32))
    (set! rbp (+ rbp 56))
    (set! rsi (rbp + -32))
    (set! rdi (rbp + -24))
    (set! r15 L.rp.118)
    (jump L.cdr.62.18)
    (define L.nest_f.127 (set! rax 25406))
    (jump (rbp + 0))
    (define L.make-bigger?.6.33 (nop))
    (set! r9 rdi)
    (set! r13 rsi)
    (set! r14 (mref r9 14))
    (set! r9 (mref r9 22))
    (nop)
    (set! rdx r13)
    (set! rsi r14)
    (set! rdi r9)
    (nop)
    (jump L.cons.74.6)
    (define L.rp.109 (set! rbp (- rbp 32)))
    (set! (rbp + 24) rax)
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! r15 (rbp + 16))
    (set! rbp (+ rbp 32))
    (set! rdx 22)
    (set! rsi 184)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.110)
    (jump L.cons.74.6)
    (define L.rp.110 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rbp (+ rbp 32))
    (set! rdx r15)
    (set! rsi 8)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.111)
    (jump L.cons.74.6)
    (define L.rp.111 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rbp (+ rbp 32))
    (set! rdx r15)
    (set! rsi 72)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.112)
    (jump L.cons.74.6)
    (define L.rp.112 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rbp (+ rbp 32))
    (set! rdx r15)
    (set! rsi 64)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.113)
    (jump L.cons.74.6)
    (define L.rp.113 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rbp (+ rbp 32))
    (set! rdx r15)
    (set! rsi 56)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.114)
    (jump L.cons.74.6)
    (define L.rp.114 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rbp (+ rbp 32))
    (set! rdx r15)
    (set! rsi 32)
    (set! rdi (rbp + -16))
    (set! r15 L.rp.115)
    (jump L.cons.74.6)
    (define L.rp.115 (set! rbp (- rbp 32)))
    (set! r15 rax)
    (set! rdx r15)
    (set! rsi (rbp + 24))
    (set! rdi (rbp + 8))
    (set! r15 (rbp + 0))
    (jump L.filter.4.31))
     ) '(9 23)))

(parameterize ([current-pass-list
                  (list
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.78.3)
        (mset! r14 6 24)
        (set! r9 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.75.5)
        (mset! r14 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.74.6)
        (mset! rdi 6 16)
        (set! (rbp + 16) rdi)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.73.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.72.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.71.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.70.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.69.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.68.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.67.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.66.14)
        (mset! rdi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.boolean?.65.15)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.fixnum?.64.16)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure-arity.63.17)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.cdr.62.18)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.car.61.19)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 24))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.vector-ref.60.20)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-set!.59.21)
        (mset! rbx 6 24)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-length.58.22)
        (mset! rsp 6 8)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.make-vector.57.23)
        (mset! rsp 6 8)
        (set! (rbp + 8) rsp)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>=.56.24)
        (mset! rsp 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>.55.25)
        (mset! rsp 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.<=.54.26)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.<.53.27)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.-.52.28)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.+.51.29)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.*.50.30)
        (mset! (rbp + 24) 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rcx 14 r15)
        (mset! rbx 14 r13)
        (mset! (rbp + 8) 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 64))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.filter.4.31)
        (mset! r15 6 16)
        (set! (rbp + 8) r15)
        (set! r15 r12)
        (set! r12 (+ r12 56))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.apply-pred.5.32)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 32))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-bigger?.6.33)
        (mset! r13 6 8)
        (nop)
        (mset! (rbp + 8) 14 rsi)
        (mset! (rbp + 8) 22 (rbp + 8))
        (mset! (rbp + 8) 30 (rbp + 16))
        (mset! (rbp + 8) 38 rdx)
        (mset! (rbp + 8) 46 r15)
        (mset! (rbp + 8) 54 rdi)
        (mset! r15 14 rsi)
        (mset! r15 22 rsp)
        (mset! r15 30 r13)
        (mset! r15 38 rdx)
        (mset! r15 46 r14)
        (mset! r13 14 r13)
        (mset! r13 22 (rbp + 16))
        (set! r15 (rbp + 8))
        (set! r15 r13)
        (set! rbp (+ rbp 32))
        (set! rsi 64)
        (set! rdi r13)
        (set! r15 L.rp.109)
        (jump L.make-bigger?.6.33)))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.272) (jump L.nest_f.273))))
    (define L.nest_t.272
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r14 (* r14 r13))
        (set! rax r14)
        (jump r15)))
    (define L.nest_f.273 () (begin (set! rax 62) (jump r15)))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.270) (jump L.nest_f.271))))
    (define L.nest_t.268
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.39)))
    (define L.nest_f.269
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.39)))
    (define L.nest_t.270
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.268) (jump L.nest_f.269))))
    (define L.nest_f.271 () (begin (set! rax 62) (jump r15)))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.266) (jump L.nest_f.267))))
    (define L.nest_t.266
      ()
      (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.267 () (begin (set! rax 318) (jump r15)))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.264) (jump L.nest_f.265))))
    (define L.nest_t.262
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.43)))
    (define L.nest_f.263
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.43)))
    (define L.nest_t.264
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.262) (jump L.nest_f.263))))
    (define L.nest_f.265 () (begin (set! rax 318) (jump r15)))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.260) (jump L.nest_f.261))))
    (define L.nest_t.260
      ()
      (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.261 () (begin (set! rax 574) (jump r15)))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.258) (jump L.nest_f.259))))
    (define L.nest_t.256
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.47)))
    (define L.nest_f.257
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.47)))
    (define L.nest_t.258
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.256) (jump L.nest_f.257))))
    (define L.nest_f.259 () (begin (set! rax 574) (jump r15)))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.254) (jump L.nest_f.255))))
    (define L.nest_t.252 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.253 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.254
      ()
      (if (< r13 r9) (jump L.nest_t.252) (jump L.nest_f.253)))
    (define L.nest_f.255 () (begin (set! rax 830) (jump r15)))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.250) (jump L.nest_f.251))))
    (define L.nest_t.248
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.52)))
    (define L.nest_f.249
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.52)))
    (define L.nest_t.250
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.248) (jump L.nest_f.249))))
    (define L.nest_f.251 () (begin (set! rax 830) (jump r15)))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.246) (jump L.nest_f.247))))
    (define L.nest_t.244 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.245 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.246
      ()
      (if (<= r13 r9) (jump L.nest_t.244) (jump L.nest_f.245)))
    (define L.nest_f.247 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.242) (jump L.nest_f.243))))
    (define L.nest_t.240
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.57)))
    (define L.nest_f.241
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.57)))
    (define L.nest_t.242
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.240) (jump L.nest_f.241))))
    (define L.nest_f.243 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.238) (jump L.nest_f.239))))
    (define L.nest_t.236 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.237 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.238
      ()
      (if (> r13 r9) (jump L.nest_t.236) (jump L.nest_f.237)))
    (define L.nest_f.239 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.234) (jump L.nest_f.235))))
    (define L.nest_t.232
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.62)))
    (define L.nest_f.233
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.62)))
    (define L.nest_t.234
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.232) (jump L.nest_f.233))))
    (define L.nest_f.235 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.230) (jump L.nest_f.231))))
    (define L.nest_t.228 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.229 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.230
      ()
      (if (>= r13 r9) (jump L.nest_t.228) (jump L.nest_f.229)))
    (define L.nest_f.231 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.68
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.226) (jump L.nest_f.227))))
    (define L.nest_t.224
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.67)))
    (define L.nest_f.225
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.67)))
    (define L.nest_t.226
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.224) (jump L.nest_f.225))))
    (define L.nest_f.227 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6) (jump L.nest_t.222) (jump L.nest_f.223))))
    (define L.nest_t.222
      ()
      (begin
        (nop)
        (set! rsi r9)
        (set! rdi r14)
        (nop)
        (jump L.make-init-vector.1.4)))
    (define L.nest_f.223 () (begin (set! rax 1854) (jump r15)))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.220) (jump L.nest_f.221))))
    (define L.nest_t.220 () (begin (set! rax (mref r13 -3)) (jump r15)))
    (define L.nest_f.221 () (begin (set! rax 2110) (jump r15)))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6) (jump L.nest_t.218) (jump L.nest_f.219))))
    (define L.nest_t.218
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-set!.2.2)))
    (define L.nest_f.219 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.76
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6) (jump L.nest_t.216) (jump L.nest_f.217))))
    (define L.nest_t.214
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.75)))
    (define L.nest_f.215
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.75)))
    (define L.nest_t.216
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.214) (jump L.nest_f.215))))
    (define L.nest_f.217 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6) (jump L.nest_t.212) (jump L.nest_f.213))))
    (define L.nest_t.212
      ()
      (begin
        (nop)
        (set! rdx r9)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-ref.3.1)))
    (define L.nest_f.213 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.80
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6) (jump L.nest_t.210) (jump L.nest_f.211))))
    (define L.nest_t.208
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.79)))
    (define L.nest_f.209
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.79)))
    (define L.nest_t.210
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.208) (jump L.nest_f.209))))
    (define L.nest_f.211 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.206) (jump L.nest_f.207))))
    (define L.nest_t.206 () (begin (set! rax (mref r13 -1)) (jump r15)))
    (define L.nest_f.207 () (begin (set! rax 2878) (jump r15)))
    (define L.jp.84
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.204) (jump L.nest_f.205))))
    (define L.nest_t.204 () (begin (set! rax (mref r13 7)) (jump r15)))
    (define L.nest_f.205 () (begin (set! rax 3134) (jump r15)))
    (define L.jp.86
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.202) (jump L.nest_f.203))))
    (define L.nest_t.202 () (begin (set! rax (mref r13 6)) (jump r15)))
    (define L.nest_f.203 () (begin (set! rax 3390) (jump r15)))
    (define L.jp.99
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6) (jump L.nest_t.200) (jump L.nest_f.201))))
    (define L.nest_t.200 () (begin (set! rax r8) (jump r15)))
    (define L.nest_f.201
      ()
      (begin
        (set! rdi (arithmetic-shift-right r9 3))
        (nop)
        (set! rdi (* rdi 8))
        (nop)
        (set! rdi (+ rdi 5))
        (nop)
        (mset! r8 rdi 0)
        (nop)
        (set! r9 (+ r9 8))
        (nop)
        (set! rcx r8)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.78.3)))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6) (jump L.nest_t.198) (jump L.nest_f.199))))
    (define L.nest_t.198
      ()
      (begin
        (set! r9 (arithmetic-shift-right r8 3))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (set! r9 (+ r9 5))
        (nop)
        (mset! r14 r9 r13)
        (set! rax 30)
        (jump r15)))
    (define L.nest_f.199 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6) (jump L.nest_t.196) (jump L.nest_f.197))))
    (define L.nest_t.194
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.102)))
    (define L.nest_f.195
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.102)))
    (define L.nest_t.196
      ()
      (if (>= r13 0) (jump L.nest_t.194) (jump L.nest_f.195)))
    (define L.nest_f.197 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.192) (jump L.nest_f.193))))
    (define L.nest_t.192
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r13 (* r13 8))
        (nop)
        (set! r13 (+ r13 5))
        (nop)
        (set! rax (mref r14 r13))
        (jump r15)))
    (define L.nest_f.193 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.107
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.190) (jump L.nest_f.191))))
    (define L.nest_t.188
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.106)))
    (define L.nest_f.189
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.106)))
    (define L.nest_t.190
      ()
      (if (>= r13 0) (jump L.nest_t.188) (jump L.nest_f.189)))
    (define L.nest_f.191 () (begin (set! rax 2622) (jump r15)))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9) (jump L.nest_t.186) (jump L.nest_f.187))))
    (define L.nest_t.186
      ()
      (begin
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.107)))
    (define L.nest_f.187
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.107)))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8) (jump L.nest_t.184) (jump L.nest_f.185))))
    (define L.nest_t.184
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.103)))
    (define L.nest_f.185
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.103)))
    (define L.vector-init-loop.78.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13) (jump L.nest_t.182) (jump L.nest_f.183))))
    (define L.nest_t.182
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.99)))
    (define L.nest_f.183
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.99)))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.78.3)))
    (define L.eq?.75.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13) (jump L.nest_t.180) (jump L.nest_f.181))))
    (define L.nest_t.180 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.181 () (begin (set! rax 6) (jump r15)))
    (define L.cons.74.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.not.73.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6) (jump L.nest_t.178) (jump L.nest_f.179))))
    (define L.nest_t.178 () (begin (set! rax 6) (jump r15)))
    (define L.nest_f.179 () (begin (set! rax 14) (jump r15)))
    (define L.vector?.72.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3) (jump L.nest_t.176) (jump L.nest_f.177))))
    (define L.nest_t.176 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.177 () (begin (set! rax 6) (jump r15)))
    (define L.procedure?.71.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2) (jump L.nest_t.174) (jump L.nest_f.175))))
    (define L.nest_t.174 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.175 () (begin (set! rax 6) (jump r15)))
    (define L.pair?.70.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1) (jump L.nest_t.172) (jump L.nest_f.173))))
    (define L.nest_t.172 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.173 () (begin (set! rax 6) (jump r15)))
    (define L.error?.69.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62) (jump L.nest_t.170) (jump L.nest_f.171))))
    (define L.nest_t.170 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.171 () (begin (set! rax 6) (jump r15)))
    (define L.ascii-char?.68.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46) (jump L.nest_t.168) (jump L.nest_f.169))))
    (define L.nest_t.168 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.169 () (begin (set! rax 6) (jump r15)))
    (define L.void?.67.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30) (jump L.nest_t.166) (jump L.nest_f.167))))
    (define L.nest_t.166 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.167 () (begin (set! rax 6) (jump r15)))
    (define L.empty?.66.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22) (jump L.nest_t.164) (jump L.nest_f.165))))
    (define L.nest_t.164 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.165 () (begin (set! rax 6) (jump r15)))
    (define L.boolean?.65.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6) (jump L.nest_t.162) (jump L.nest_f.163))))
    (define L.nest_t.162 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.163 () (begin (set! rax 6) (jump r15)))
    (define L.fixnum?.64.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0) (jump L.nest_t.160) (jump L.nest_f.161))))
    (define L.nest_t.160 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.161 () (begin (set! rax 6) (jump r15)))
    (define L.procedure-arity.63.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2) (jump L.nest_t.158) (jump L.nest_f.159))))
    (define L.nest_t.158
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.86)))
    (define L.nest_f.159
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.86)))
    (define L.cdr.62.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.156) (jump L.nest_f.157))))
    (define L.nest_t.156
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.84)))
    (define L.nest_f.157
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.84)))
    (define L.car.61.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.154) (jump L.nest_f.155))))
    (define L.nest_t.154
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.82)))
    (define L.nest_f.155
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.82)))
    (define L.vector-ref.60.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.152) (jump L.nest_f.153))))
    (define L.nest_t.152
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.80)))
    (define L.nest_f.153
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.80)))
    (define L.vector-set!.59.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.150) (jump L.nest_f.151))))
    (define L.nest_t.150
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.76)))
    (define L.nest_f.151
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.76)))
    (define L.vector-length.58.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3) (jump L.nest_t.148) (jump L.nest_f.149))))
    (define L.nest_t.148
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.72)))
    (define L.nest_f.149
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.72)))
    (define L.make-vector.57.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.146) (jump L.nest_f.147))))
    (define L.nest_t.146
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.70)))
    (define L.nest_f.147
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.70)))
    (define L.>=.56.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.144) (jump L.nest_f.145))))
    (define L.nest_t.144
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.68)))
    (define L.nest_f.145
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.68)))
    (define L.>.55.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.142) (jump L.nest_f.143))))
    (define L.nest_t.142
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.63)))
    (define L.nest_f.143
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.63)))
    (define L.<=.54.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.140) (jump L.nest_f.141))))
    (define L.nest_t.140
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.58)))
    (define L.nest_f.141
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.58)))
    (define L.<.53.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.138) (jump L.nest_f.139))))
    (define L.nest_t.138
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.53)))
    (define L.nest_f.139
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.53)))
    (define L.-.52.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.136) (jump L.nest_f.137))))
    (define L.nest_t.136
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.48)))
    (define L.nest_f.137
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.48)))
    (define L.+.51.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.134) (jump L.nest_f.135))))
    (define L.nest_t.134
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.44)))
    (define L.nest_f.135
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.44)))
    (define L.*.50.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.132) (jump L.nest_f.133))))
    (define L.nest_t.132
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.40)))
    (define L.nest_f.133
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.40)))
    (define L.filter.4.31
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 rdi)
        (set! (rbp + 48) rsi)
        (set! (rbp + 32) rdx)
        (set! (rbp + 24) (mref r15 14))
        (set! (rbp + 40) (mref r15 22))
        (set! (rbp + 56) (mref r15 30))
        (set! (rbp + 16) (mref r15 38))
        (set! (rbp + 8) (mref r15 46))
        (set! r15 (mref r15 54))
        (nop)
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -32))
        (set! rdi r15)
        (set! r15 L.rp.119)
        (jump L.empty?.66.14)))
    (define L.rp.119
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.130) (jump L.nest_f.131))))
    (define L.rp.120
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (set! rbp (+ rbp 64))
        (set! rdx r15)
        (set! rsi (rbp + -16))
        (set! rdi (rbp + -56))
        (set! r15 L.rp.121)
        (jump L.apply-pred.5.32)))
    (define L.rp.121
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.128) (jump L.nest_f.129))))
    (define L.rp.122
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! (rbp + 8) rax)
        (set! r15 (rbp + 40))
        (set! r15 (rbp + 24))
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -32))
        (set! rdi (rbp + -40))
        (set! r15 L.rp.123)
        (jump L.cdr.62.18)))
    (define L.rp.123
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (set! rbp (+ rbp 64))
        (set! rdx r15)
        (set! rsi (rbp + -16))
        (set! rdi (rbp + -24))
        (set! r15 L.rp.124)
        (jump L.filter.4.31)))
    (define L.rp.124
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 8))
        (set! rdi (rbp + 56))
        (set! r15 (rbp + 0))
        (jump L.cons.74.6)))
    (define L.rp.125
      ()
      (begin
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 48))
        (set! rdi (rbp + 40))
        (set! r15 (rbp + 0))
        (jump L.filter.4.31)))
    (define L.nest_t.128
      ()
      (begin
        (set! r15 (rbp + 56))
        (set! r15 (rbp + 16))
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -32))
        (set! rdi (rbp + -48))
        (set! r15 L.rp.122)
        (jump L.car.61.19)))
    (define L.nest_f.129
      ()
      (begin
        (set! r15 (rbp + 40))
        (set! r15 (rbp + 24))
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -32))
        (set! rdi (rbp + -40))
        (set! r15 L.rp.125)
        (jump L.cdr.62.18)))
    (define L.nest_t.130 () (begin (set! rax 22) (jump (rbp + 0))))
    (define L.nest_f.131
      ()
      (begin
        (set! r15 (rbp + 8))
        (set! r15 (rbp + 16))
        (set! rbp (+ rbp 64))
        (set! rsi (rbp + -32))
        (set! rdi (rbp + -48))
        (set! r15 L.rp.120)
        (jump L.car.61.19)))
    (define L.apply-pred.5.32
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r14 rdi)
        (set! (rbp + 24) rsi)
        (set! (rbp + 16) rdx)
        (set! (rbp + 32) (mref r14 14))
        (set! (rbp + 8) (mref r14 22))
        (set! (rbp + 40) (mref r14 30))
        (set! r15 (mref r14 38))
        (set! (rbp + 48) (mref r14 46))
        (set! r14 (rbp + 48))
        (nop)
        (set! rbp (+ rbp 56))
        (set! rsi (rbp + -32))
        (set! rdi r15)
        (set! r15 L.rp.116)
        (jump L.car.61.19)))
    (define L.rp.116
      ()
      (begin
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! rbp (+ rbp 56))
        (set! rdx (rbp + -16))
        (set! rsi r15)
        (set! rdi (rbp + -8))
        (set! r15 L.rp.117)
        (jump L.eq?.75.5)))
    (define L.rp.117
      ()
      (begin
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.126) (jump L.nest_f.127))))
    (define L.rp.118
      ()
      (begin
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 8))
        (set! r15 (rbp + 0))
        (jump L.>.55.25)))
    (define L.nest_t.126
      ()
      (begin
        (set! r15 (rbp + 8))
        (set! r15 (rbp + 32))
        (set! rbp (+ rbp 56))
        (set! rsi (rbp + -32))
        (set! rdi (rbp + -24))
        (set! r15 L.rp.118)
        (jump L.cdr.62.18)))
    (define L.nest_f.127 () (begin (set! rax 25406) (jump (rbp + 0))))
    (define L.make-bigger?.6.33
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r13 rsi)
        (set! r14 (mref r9 14))
        (set! r9 (mref r9 22))
        (nop)
        (set! rdx r13)
        (set! rsi r14)
        (set! rdi r9)
        (nop)
        (jump L.cons.74.6)))
    (define L.rp.109
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! (rbp + 24) rax)
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! rbp (+ rbp 32))
        (set! rdx 22)
        (set! rsi 184)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.110)
        (jump L.cons.74.6)))
    (define L.rp.110
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (set! rdx r15)
        (set! rsi 8)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.111)
        (jump L.cons.74.6)))
    (define L.rp.111
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (set! rdx r15)
        (set! rsi 72)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.112)
        (jump L.cons.74.6)))
    (define L.rp.112
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (set! rdx r15)
        (set! rsi 64)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.113)
        (jump L.cons.74.6)))
    (define L.rp.113
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (set! rdx r15)
        (set! rsi 56)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.114)
        (jump L.cons.74.6)))
    (define L.rp.114
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (set! rdx r15)
        (set! rsi 32)
        (set! rdi (rbp + -16))
        (set! r15 L.rp.115)
        (jump L.cons.74.6)))
    (define L.rp.115
      ()
      (begin
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 24))
        (set! rdi (rbp + 8))
        (set! r15 (rbp + 0))
        (jump L.filter.4.31))))
     ) '(9 23)))

(parameterize ([current-pass-list
                  (list
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.78.3)
        (mset! r14 6 24)
        (set! r9 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.75.5)
        (mset! r14 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.74.6)
        (mset! rdi 6 16)
        (set! (rbp + 16) rdi)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.73.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.72.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.71.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.70.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.69.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.68.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.67.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.66.14)
        (mset! rdi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.boolean?.65.15)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.fixnum?.64.16)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure-arity.63.17)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.cdr.62.18)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.car.61.19)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 24))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.vector-ref.60.20)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-set!.59.21)
        (mset! rbx 6 24)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-length.58.22)
        (mset! rsp 6 8)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.make-vector.57.23)
        (mset! rsp 6 8)
        (set! (rbp + 8) rsp)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>=.56.24)
        (mset! rsp 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>.55.25)
        (mset! rsp 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.<=.54.26)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.<.53.27)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.-.52.28)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.+.51.29)
        (mset! (rbp + 24) 6 16)
        (nop)
        (set! (rbp + 24) r12)
        (set! r12 (+ r12 16))
        (set! (rbp + 24) (+ (rbp + 24) 2))
        (nop)
        (mset! (rbp + 24) -2 L.*.50.30)
        (mset! (rbp + 24) 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rcx 14 r15)
        (mset! rbx 14 r13)
        (mset! (rbp + 8) 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 64))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.filter.4.31)
        (mset! r15 6 16)
        (set! (rbp + 8) r15)
        (set! r15 r12)
        (set! r12 (+ r12 56))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.apply-pred.5.32)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 32))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-bigger?.6.33)
        (mset! r13 6 8)
        (nop)
        (mset! (rbp + 8) 14 rsi)
        (mset! (rbp + 8) 22 (rbp + 8))
        (mset! (rbp + 8) 30 (rbp + 16))
        (mset! (rbp + 8) 38 rdx)
        (mset! (rbp + 8) 46 r15)
        (mset! (rbp + 8) 54 rdi)
        (mset! r15 14 rsi)
        (mset! r15 22 rsp)
        (mset! r15 30 r13)
        (mset! r15 38 rdx)
        (mset! r15 46 r14)
        (mset! r13 14 r13)
        (mset! r13 22 (rbp + 16))
        (set! r15 (rbp + 8))
        (set! r15 r13)
        (set! rbp (+ rbp 32))
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi r13)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33)))
        (set! rbp (- rbp 32))
        (set! (rbp + 24) rax)
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! r15 (rbp + 16))
        (set! rbp (+ rbp 32))
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.110)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.111
          (begin
            (set! rdx r15)
            (set! rsi 8)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.111)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.112
          (begin
            (set! rdx r15)
            (set! rsi 72)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.112)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.113
          (begin
            (set! rdx r15)
            (set! rsi 64)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.113)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.114
          (begin
            (set! rdx r15)
            (set! rsi 56)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.114)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.115
          (begin
            (set! rdx r15)
            (set! rsi 32)
            (set! rdi (rbp + -16))
            (set! r15 L.rp.115)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi (rbp + 24))
        (set! rdi (rbp + 8))
        (set! r15 (rbp + 0))
        (jump L.filter.4.31)))
    (define L.make-bigger?.6.33
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r13 rsi)
        (set! r14 (mref r9 14))
        (set! r9 (mref r9 22))
        (nop)
        (set! rdx r13)
        (set! rsi r14)
        (set! rdi r9)
        (nop)
        (jump L.cons.74.6)))
    (define L.apply-pred.5.32
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r14 rdi)
        (set! (rbp + 24) rsi)
        (set! (rbp + 16) rdx)
        (set! (rbp + 32) (mref r14 14))
        (set! (rbp + 8) (mref r14 22))
        (set! (rbp + 40) (mref r14 30))
        (set! r15 (mref r14 38))
        (set! (rbp + 48) (mref r14 46))
        (set! r14 (rbp + 48))
        (nop)
        (set! rbp (+ rbp 56))
        (return-point L.rp.116
          (begin
            (set! rsi (rbp + -32))
            (set! rdi r15)
            (set! r15 L.rp.116)
            (jump L.car.61.19)))
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! rbp (+ rbp 56))
        (return-point L.rp.117
          (begin
            (set! rdx (rbp + -16))
            (set! rsi r15)
            (set! rdi (rbp + -8))
            (set! r15 L.rp.117)
            (jump L.eq?.75.5)))
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin
            (set! r15 (rbp + 8))
            (set! r15 (rbp + 32))
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi (rbp + -32))
                (set! rdi (rbp + -24))
                (set! r15 L.rp.118)
                (jump L.cdr.62.18)))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! rdx r15)
            (set! rsi (rbp + 16))
            (set! rdi (rbp + 8))
            (set! r15 (rbp + 0))
            (jump L.>.55.25))
          (begin (set! rax 25406) (jump (rbp + 0))))))
    (define L.filter.4.31
      ()
      (begin
        (set! (rbp + 0) r15)
        (set! r15 rdi)
        (set! (rbp + 48) rsi)
        (set! (rbp + 32) rdx)
        (set! (rbp + 24) (mref r15 14))
        (set! (rbp + 40) (mref r15 22))
        (set! (rbp + 56) (mref r15 30))
        (set! (rbp + 16) (mref r15 38))
        (set! (rbp + 8) (mref r15 46))
        (set! r15 (mref r15 54))
        (nop)
        (set! rbp (+ rbp 64))
        (return-point L.rp.119
          (begin
            (set! rsi (rbp + -32))
            (set! rdi r15)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14)))
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax 22) (jump (rbp + 0)))
          (begin
            (set! r15 (rbp + 8))
            (set! r15 (rbp + 16))
            (set! rbp (+ rbp 64))
            (return-point L.rp.120
              (begin
                (set! rsi (rbp + -32))
                (set! rdi (rbp + -48))
                (set! r15 L.rp.120)
                (jump L.car.61.19)))
            (set! rbp (- rbp 64))
            (set! r15 rax)
            (set! rbp (+ rbp 64))
            (return-point L.rp.121
              (begin
                (set! rdx r15)
                (set! rsi (rbp + -16))
                (set! rdi (rbp + -56))
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32)))
            (set! rbp (- rbp 64))
            (set! r15 rax)
            (if (neq? r15 6)
              (begin
                (set! r15 (rbp + 56))
                (set! r15 (rbp + 16))
                (set! rbp (+ rbp 64))
                (return-point L.rp.122
                  (begin
                    (set! rsi (rbp + -32))
                    (set! rdi (rbp + -48))
                    (set! r15 L.rp.122)
                    (jump L.car.61.19)))
                (set! rbp (- rbp 64))
                (set! (rbp + 8) rax)
                (set! r15 (rbp + 40))
                (set! r15 (rbp + 24))
                (set! rbp (+ rbp 64))
                (return-point L.rp.123
                  (begin
                    (set! rsi (rbp + -32))
                    (set! rdi (rbp + -40))
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rbp (+ rbp 64))
                (return-point L.rp.124
                  (begin
                    (set! rdx r15)
                    (set! rsi (rbp + -16))
                    (set! rdi (rbp + -24))
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rdx r15)
                (set! rsi (rbp + 8))
                (set! rdi (rbp + 56))
                (set! r15 (rbp + 0))
                (jump L.cons.74.6))
              (begin
                (set! r15 (rbp + 40))
                (set! r15 (rbp + 24))
                (set! rbp (+ rbp 64))
                (return-point L.rp.125
                  (begin
                    (set! rsi (rbp + -32))
                    (set! rdi (rbp + -40))
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rdx r15)
                (set! rsi (rbp + 48))
                (set! rdi (rbp + 40))
                (set! r15 (rbp + 0))
                (jump L.filter.4.31)))))))
    (define L.*.50.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.40))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.40)))))
    (define L.+.51.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.44))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.44)))))
    (define L.-.52.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.48))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.48)))))
    (define L.<.53.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.53))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.53)))))
    (define L.<=.54.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.58))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.58)))))
    (define L.>.55.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.63))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.63)))))
    (define L.>=.56.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.68))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.68)))))
    (define L.make-vector.57.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.70))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.70)))))
    (define L.vector-length.58.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.72))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.72)))))
    (define L.vector-set!.59.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.76))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.76)))))
    (define L.vector-ref.60.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.80))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.80)))))
    (define L.car.61.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.82))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.82)))))
    (define L.cdr.62.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.84))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.84)))))
    (define L.procedure-arity.63.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.86))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.86)))))
    (define L.fixnum?.64.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.65.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.66.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.67.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.68.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.69.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.70.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.71.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.72.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.73.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.74.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.75.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.78.3)))
    (define L.vector-init-loop.78.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.99))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.99)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.103))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.103)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.107))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.107)))))
    (define L.jp.107
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.106))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.106)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.102))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.102)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.99
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.78.3)))))
    (define L.jp.86
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.84
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.80
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.79))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.79))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.76
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.75))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.75))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.68
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.67))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.67))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.62))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.62))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.57))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.57))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.52))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.52))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.47))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.47))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.43))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.43))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.39))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.39))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) '(9 23)))

(parameterize ([current-pass-list
                  (list
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ()
      (begin
        (set! fv0 r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (set! r13 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.vector-init-loop.78.3)
        (mset! r14 6 24)
        (set! r9 r14)
        (set! r14 r12)
        (set! r12 (+ r12 24))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.make-init-vector.1.4)
        (mset! r14 6 8)
        (set! r8 r14)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.eq?.75.5)
        (mset! r14 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.74.6)
        (mset! rdi 6 16)
        (set! fv2 rdi)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.73.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.72.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.71.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.70.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.69.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.68.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.67.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.66.14)
        (mset! rdi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.boolean?.65.15)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.fixnum?.64.16)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.procedure-arity.63.17)
        (mset! rsi 6 8)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 16))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.cdr.62.18)
        (mset! rsi 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.car.61.19)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 24))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.vector-ref.60.20)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 24))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.vector-set!.59.21)
        (mset! rbx 6 24)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.vector-length.58.22)
        (mset! rsp 6 8)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 24))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.make-vector.57.23)
        (mset! rsp 6 8)
        (set! fv1 rsp)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>=.56.24)
        (mset! rsp 6 16)
        (nop)
        (set! rsp r12)
        (set! r12 (+ r12 16))
        (set! rsp (+ rsp 2))
        (nop)
        (mset! rsp -2 L.>.55.25)
        (mset! rsp 6 16)
        (nop)
        (set! fv3 r12)
        (set! r12 (+ r12 16))
        (set! fv3 (+ fv3 2))
        (nop)
        (mset! fv3 -2 L.<=.54.26)
        (mset! fv3 6 16)
        (nop)
        (set! fv3 r12)
        (set! r12 (+ r12 16))
        (set! fv3 (+ fv3 2))
        (nop)
        (mset! fv3 -2 L.<.53.27)
        (mset! fv3 6 16)
        (nop)
        (set! fv3 r12)
        (set! r12 (+ r12 16))
        (set! fv3 (+ fv3 2))
        (nop)
        (mset! fv3 -2 L.-.52.28)
        (mset! fv3 6 16)
        (nop)
        (set! fv3 r12)
        (set! r12 (+ r12 16))
        (set! fv3 (+ fv3 2))
        (nop)
        (mset! fv3 -2 L.+.51.29)
        (mset! fv3 6 16)
        (nop)
        (set! fv3 r12)
        (set! r12 (+ r12 16))
        (set! fv3 (+ fv3 2))
        (nop)
        (mset! fv3 -2 L.*.50.30)
        (mset! fv3 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rcx 14 r15)
        (mset! rbx 14 r13)
        (mset! fv1 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 64))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.filter.4.31)
        (mset! r15 6 16)
        (set! fv1 r15)
        (set! r15 r12)
        (set! r12 (+ r12 56))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.apply-pred.5.32)
        (mset! r15 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 32))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-bigger?.6.33)
        (mset! r13 6 8)
        (nop)
        (mset! fv1 14 rsi)
        (mset! fv1 22 fv1)
        (mset! fv1 30 fv2)
        (mset! fv1 38 rdx)
        (mset! fv1 46 r15)
        (mset! fv1 54 rdi)
        (mset! r15 14 rsi)
        (mset! r15 22 rsp)
        (mset! r15 30 r13)
        (mset! r15 38 rdx)
        (mset! r15 46 r14)
        (mset! r13 14 r13)
        (mset! r13 22 fv2)
        (set! r15 fv1)
        (set! r15 r13)
        (set! rbp (+ rbp 32))
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi r13)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33)))
        (set! rbp (- rbp 32))
        (set! fv3 rax)
        (set! r15 fv2)
        (set! r15 fv2)
        (set! r15 fv2)
        (set! r15 fv2)
        (set! r15 fv2)
        (set! r15 fv2)
        (set! rbp (+ rbp 32))
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi fv2)
            (set! r15 L.rp.110)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.111
          (begin
            (set! rdx r15)
            (set! rsi 8)
            (set! rdi fv2)
            (set! r15 L.rp.111)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.112
          (begin
            (set! rdx r15)
            (set! rsi 72)
            (set! rdi fv2)
            (set! r15 L.rp.112)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.113
          (begin
            (set! rdx r15)
            (set! rsi 64)
            (set! rdi fv2)
            (set! r15 L.rp.113)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.114
          (begin
            (set! rdx r15)
            (set! rsi 56)
            (set! rdi fv2)
            (set! r15 L.rp.114)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.115
          (begin
            (set! rdx r15)
            (set! rsi 32)
            (set! rdi fv2)
            (set! r15 L.rp.115)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! r15 rax)
        (set! rdx r15)
        (set! rsi fv3)
        (set! rdi fv1)
        (set! r15 fv0)
        (jump L.filter.4.31)))
    (define L.make-bigger?.6.33
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r13 rsi)
        (set! r14 (mref r9 14))
        (set! r9 (mref r9 22))
        (nop)
        (set! rdx r13)
        (set! rsi r14)
        (set! rdi r9)
        (nop)
        (jump L.cons.74.6)))
    (define L.apply-pred.5.32
      ()
      (begin
        (set! fv0 r15)
        (set! r14 rdi)
        (set! fv3 rsi)
        (set! fv2 rdx)
        (set! fv4 (mref r14 14))
        (set! fv1 (mref r14 22))
        (set! fv5 (mref r14 30))
        (set! r15 (mref r14 38))
        (set! fv6 (mref r14 46))
        (set! r14 fv6)
        (nop)
        (set! rbp (+ rbp 56))
        (return-point L.rp.116
          (begin
            (set! rsi fv3)
            (set! rdi r15)
            (set! r15 L.rp.116)
            (jump L.car.61.19)))
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (set! rbp (+ rbp 56))
        (return-point L.rp.117
          (begin
            (set! rdx fv5)
            (set! rsi r15)
            (set! rdi fv6)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5)))
        (set! rbp (- rbp 56))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin
            (set! r15 fv1)
            (set! r15 fv4)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi fv3)
                (set! rdi fv4)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18)))
            (set! rbp (- rbp 56))
            (set! r15 rax)
            (set! rdx r15)
            (set! rsi fv2)
            (set! rdi fv1)
            (set! r15 fv0)
            (jump L.>.55.25))
          (begin (set! rax 25406) (jump fv0)))))
    (define L.filter.4.31
      ()
      (begin
        (set! fv0 r15)
        (set! r15 rdi)
        (set! fv6 rsi)
        (set! fv4 rdx)
        (set! fv3 (mref r15 14))
        (set! fv5 (mref r15 22))
        (set! fv7 (mref r15 30))
        (set! fv2 (mref r15 38))
        (set! fv1 (mref r15 46))
        (set! r15 (mref r15 54))
        (nop)
        (set! rbp (+ rbp 64))
        (return-point L.rp.119
          (begin
            (set! rsi fv4)
            (set! rdi r15)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14)))
        (set! rbp (- rbp 64))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin (set! rax 22) (jump fv0))
          (begin
            (set! r15 fv1)
            (set! r15 fv2)
            (set! rbp (+ rbp 64))
            (return-point L.rp.120
              (begin
                (set! rsi fv4)
                (set! rdi fv2)
                (set! r15 L.rp.120)
                (jump L.car.61.19)))
            (set! rbp (- rbp 64))
            (set! r15 rax)
            (set! rbp (+ rbp 64))
            (return-point L.rp.121
              (begin
                (set! rdx r15)
                (set! rsi fv6)
                (set! rdi fv1)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32)))
            (set! rbp (- rbp 64))
            (set! r15 rax)
            (if (neq? r15 6)
              (begin
                (set! r15 fv7)
                (set! r15 fv2)
                (set! rbp (+ rbp 64))
                (return-point L.rp.122
                  (begin
                    (set! rsi fv4)
                    (set! rdi fv2)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19)))
                (set! rbp (- rbp 64))
                (set! fv1 rax)
                (set! r15 fv5)
                (set! r15 fv3)
                (set! rbp (+ rbp 64))
                (return-point L.rp.123
                  (begin
                    (set! rsi fv4)
                    (set! rdi fv3)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rbp (+ rbp 64))
                (return-point L.rp.124
                  (begin
                    (set! rdx r15)
                    (set! rsi fv6)
                    (set! rdi fv5)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rdx r15)
                (set! rsi fv1)
                (set! rdi fv7)
                (set! r15 fv0)
                (jump L.cons.74.6))
              (begin
                (set! r15 fv5)
                (set! r15 fv3)
                (set! rbp (+ rbp 64))
                (return-point L.rp.125
                  (begin
                    (set! rsi fv4)
                    (set! rdi fv3)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! r15 rax)
                (set! rdx r15)
                (set! rsi fv6)
                (set! rdi fv5)
                (set! r15 fv0)
                (jump L.filter.4.31)))))))
    (define L.*.50.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.40))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.40)))))
    (define L.+.51.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.44))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.44)))))
    (define L.-.52.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.48))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.48)))))
    (define L.<.53.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.53))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.53)))))
    (define L.<=.54.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.58))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.58)))))
    (define L.>.55.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.63))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.63)))))
    (define L.>=.56.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.68))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.68)))))
    (define L.make-vector.57.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.70))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.70)))))
    (define L.vector-length.58.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.72))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.72)))))
    (define L.vector-set!.59.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.76))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.76)))))
    (define L.vector-ref.60.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.80))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.80)))))
    (define L.car.61.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.82))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.82)))))
    (define L.cdr.62.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.84))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.84)))))
    (define L.procedure-arity.63.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.86))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.86)))))
    (define L.fixnum?.64.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.65.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.66.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.67.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.68.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.69.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.70.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.71.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.72.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.73.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.74.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.75.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.78.3)))
    (define L.vector-init-loop.78.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.99))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.99)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.103))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.103)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.107))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.107)))))
    (define L.jp.107
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.106))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.106)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.106
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.102))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.102)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.99
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.78.3)))))
    (define L.jp.86
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.84
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.82
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.80
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.79))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.79))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.76
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.75))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.75))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.68
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.67))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.67))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.62))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.62))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.57))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.57))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.52))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.52))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.47))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.47))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.43))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.43))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.39))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.39))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) '(9 23)))



(parameterize ([current-pass-list
                  (list
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((assignment
        ((ra.359 fv0)
         (filter.4 fv1)
         (cons.74 fv2)
         (tmp.352 fv3)
         (unsafe-vector-ref.3 r15)
         (eq?.75 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.78 r9)
         (make-init-vector.1 r8)
         (empty?.66 rdi)
         (cdr.62 rsi)
         (car.61 rdx)
         (vector-ref.60 rcx)
         (vector-set!.59 rbx)
         (>.55 rsp)
         (tmp.342 rsp)
         (tmp.383 rsp)
         (tmp.175 rsp)
         (>=.56 rsp)
         (tmp.343 rsp)
         (tmp.384 rsp)
         (tmp.176 rsp)
         (tmp.340 rsp)
         (tmp.381 rsp)
         (tmp.173 rsp)
         (vector-length.58 rsp)
         (tmp.341 rsp)
         (tmp.382 rsp)
         (tmp.174 rsp)
         (apply-pred.5 r15)
         (tmp.339 rbx)
         (tmp.380 rbx)
         (tmp.172 rbx)
         (tmp.338 rcx)
         (tmp.379 rcx)
         (tmp.171 rcx)
         (make-bigger?.6 r13)
         (tmp.337 rdx)
         (tmp.378 rdx)
         (tmp.170 rdx)
         (tmp.351 r13)
         (tmp.333 rsi)
         (tmp.374 rsi)
         (tmp.166 rsi)
         (boolean?.65 rsi)
         (tmp.334 rsi)
         (tmp.375 rsi)
         (tmp.167 rsi)
         (fixnum?.64 rsi)
         (tmp.335 rsi)
         (tmp.376 rsi)
         (tmp.168 rsi)
         (procedure-arity.63 rsi)
         (tmp.336 rsi)
         (tmp.377 rsi)
         (tmp.169 rsi)
         (tmp.350 r15)
         (tmp.391 r15)
         (tmp.183 r15)
         (tmp.392 r13)
         (tmp.184 r13)
         (tmp.325 rdi)
         (tmp.366 rdi)
         (tmp.158 rdi)
         (not.73 rdi)
         (tmp.326 rdi)
         (tmp.367 rdi)
         (tmp.159 rdi)
         (vector?.72 rdi)
         (tmp.327 rdi)
         (tmp.368 rdi)
         (tmp.160 rdi)
         (procedure?.71 rdi)
         (tmp.328 rdi)
         (tmp.369 rdi)
         (tmp.161 rdi)
         (pair?.70 rdi)
         (tmp.329 rdi)
         (tmp.370 rdi)
         (tmp.162 rdi)
         (error?.69 rdi)
         (tmp.330 rdi)
         (tmp.371 rdi)
         (tmp.163 rdi)
         (ascii-char?.68 rdi)
         (tmp.331 rdi)
         (tmp.372 rdi)
         (tmp.164 rdi)
         (void?.67 rdi)
         (tmp.332 rdi)
         (tmp.373 rdi)
         (tmp.165 rdi)
         (tmp.349 r15)
         (tmp.390 r15)
         (tmp.182 r15)
         (tmp.324 rdi)
         (tmp.365 rdi)
         (tmp.157 rdi)
         (tmp.323 r14)
         (tmp.364 r14)
         (tmp.156 r14)
         (tmp.322 r14)
         (tmp.363 r14)
         (tmp.155 r14)
         (tmp.321 r14)
         (tmp.362 r14)
         (tmp.154 r14)
         (tmp.353 r15)
         (tmp.354 r15)
         (tmp.355 r15)
         (tmp.356 r15)
         (tmp.357 r15)
         (tmp.320 r14)
         (tmp.361 r14)
         (tmp.153 r14)
         (tmp.142 r15)
         (tmp.143 r15)
         (tmp.144 r15)
         (tmp.145 r15)
         (tmp.146 r15)
         (tmp.147 r15)
         (tmp.148 r15)
         (tmp.149 r15)
         (tmp.358 r15)
         (tmp.319 r15)
         (tmp.360 r15)
         (tmp.152 r15)
         (make-vector.57 fv1)
         (tmp.344 fv3)
         (tmp.385 fv3)
         (tmp.177 fv3)
         (<=.54 fv3)
         (tmp.345 fv3)
         (tmp.386 fv3)
         (tmp.178 fv3)
         (<.53 fv3)
         (tmp.346 fv3)
         (tmp.387 fv3)
         (tmp.179 fv3)
         (|-.52| fv3)
         (tmp.347 fv3)
         (tmp.388 fv3)
         (tmp.180 fv3)
         (|+.51| fv3)
         (tmp.348 fv3)
         (tmp.389 fv3)
         (tmp.181 fv3)
         (*.50 fv3))))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 r12)
        (set! r12 (+ r12 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 r12)
        (set! r12 (+ r12 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 r12)
        (set! r12 (+ r12 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 r12)
        (set! r12 (+ r12 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 r12)
        (set! r12 (+ r12 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (set! rbp (+ rbp 32))
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33)))
        (set! rbp (- rbp 32))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (set! rbp (+ rbp 32))
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.353 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.354 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.355 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.356 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.357 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6)))
        (set! rbp (- rbp 32))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31)))
    (define L.make-bigger?.6.33
      ((assignment
        ((ra.393 r15)
         (make-bigger?.6 r14)
         (threshold.11 r13)
         (cons.74 r9)
         (c.122 r9)
         (tmp.141 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6)))
    (define L.apply-pred.5.32
      ((assignment
        ((ra.394 fv0)
         (>.55 fv1)
         (x.10 fv2)
         (pred?.9 fv3)
         (cdr.62 fv4)
         (make-bigger?.6 fv5)
         (eq?.75 fv6)
         (car.61 r15)
         (c.121 r14)
         (tmp.186 r15)
         (tmp.137 r14)
         (tmp.138 r15)
         (tmp.187 r15)
         (tmp.139 r15)
         (tmp.140 r15)
         (tmp.188 r15))))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (set! rbp (+ rbp 56))
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19)))
        (set! rbp (- rbp 56))
        (set! tmp.186 rax)
        (set! rbp (+ rbp 56))
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5)))
        (set! rbp (- rbp 56))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25))
          (begin (set! rax 25406) (jump ra.394)))))
    (define L.filter.4.31
      ((assignment
        ((ra.395 fv0)
         (apply-pred.5 fv1)
         (car.61 fv2)
         (cdr.62 fv3)
         (lox.8 fv4)
         (filter.4 fv5)
         (pred?.7 fv6)
         (cons.74 fv7)
         (tmp.194 fv1)
         (c.120 r15)
         (empty?.66 r15)
         (tmp.192 r15)
         (tmp.190 r15)
         (tmp.128 r15)
         (tmp.130 r15)
         (tmp.129 r15)
         (tmp.193 r15)
         (tmp.134 r15)
         (tmp.133 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.195 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (tmp.197 r15)
         (tmp.196 r15))))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (set! rbp (+ rbp 64))
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14)))
        (set! rbp (- rbp 64))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (set! rbp (+ rbp 64))
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19)))
            (set! rbp (- rbp 64))
            (set! tmp.192 rax)
            (set! rbp (+ rbp 64))
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32)))
            (set! rbp (- rbp 64))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (set! rbp (+ rbp 64))
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19)))
                (set! rbp (- rbp 64))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! tmp.195 rax)
                (set! rbp (+ rbp 64))
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31)))
                (set! rbp (- rbp 64))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18)))
                (set! rbp (- rbp 64))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31)))))))
    (define L.*.50.30
      ((assignment
        ((ra.396 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.204 r9)
         (c.119 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40)))))
    (define L.+.51.29
      ((assignment
        ((ra.398 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.210 r9)
         (c.118 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44)))))
    (define L.-.52.28
      ((assignment
        ((ra.400 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.216 r9)
         (c.117 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48)))))
    (define L.<.53.27
      ((assignment
        ((ra.402 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.223 r9)
         (c.116 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53)))))
    (define L.<=.54.26
      ((assignment
        ((ra.404 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.230 r9)
         (c.115 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58)))))
    (define L.>.55.25
      ((assignment
        ((ra.406 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.237 r9)
         (c.114 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63)))))
    (define L.>=.56.24
      ((assignment
        ((ra.408 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.244 r9)
         (c.113 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68)))))
    (define L.make-vector.57.23
      ((assignment
        ((ra.410 r15)
         (tmp.26 r14)
         (make-init-vector.1 r13)
         (tmp.247 r9)
         (c.112 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70)))))
    (define L.vector-length.58.22
      ((assignment
        ((ra.412 r15) (tmp.27 r14) (tmp.250 r13) (c.111 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72)))))
    (define L.vector-set!.59.21
      ((assignment
        ((ra.414 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.30 r9)
         (unsafe-vector-set!.2 rdi)
         (c.110 r8)
         (tmp.256 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76)))))
    (define L.vector-ref.60.20
      ((assignment
        ((ra.416 r15)
         (tmp.31 r14)
         (tmp.32 r13)
         (unsafe-vector-ref.3 r9)
         (c.109 r9)
         (tmp.262 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80)))))
    (define L.car.61.19
      ((assignment
        ((ra.418 r15) (tmp.33 r14) (tmp.265 r13) (c.108 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82)))))
    (define L.cdr.62.18
      ((assignment
        ((ra.420 r15) (tmp.34 r14) (tmp.268 r13) (c.107 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84)))))
    (define L.procedure-arity.63.17
      ((assignment
        ((ra.422 r15) (tmp.35 r14) (tmp.271 r13) (c.106 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86)))))
    (define L.fixnum?.64.16
      ((assignment
        ((ra.424 r15) (c.105 r14) (tmp.273 r14) (tmp.36 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424))
          (begin (set! rax 6) (jump ra.424)))))
    (define L.boolean?.65.15
      ((assignment
        ((ra.426 r15) (c.104 r14) (tmp.275 r14) (tmp.37 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426))
          (begin (set! rax 6) (jump ra.426)))))
    (define L.empty?.66.14
      ((assignment
        ((ra.428 r15) (c.103 r14) (tmp.277 r14) (tmp.38 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428))
          (begin (set! rax 6) (jump ra.428)))))
    (define L.void?.67.13
      ((assignment
        ((ra.430 r15) (c.102 r14) (tmp.279 r14) (tmp.39 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430))
          (begin (set! rax 6) (jump ra.430)))))
    (define L.ascii-char?.68.12
      ((assignment
        ((ra.432 r15) (c.101 r14) (tmp.281 r14) (tmp.40 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432))
          (begin (set! rax 6) (jump ra.432)))))
    (define L.error?.69.11
      ((assignment
        ((ra.434 r15) (c.100 r14) (tmp.283 r14) (tmp.41 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434))
          (begin (set! rax 6) (jump ra.434)))))
    (define L.pair?.70.10
      ((assignment
        ((ra.436 r15) (c.99 r14) (tmp.285 r14) (tmp.42 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436))
          (begin (set! rax 6) (jump ra.436)))))
    (define L.procedure?.71.9
      ((assignment
        ((ra.438 r15) (c.98 r14) (tmp.287 r14) (tmp.43 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438))
          (begin (set! rax 6) (jump ra.438)))))
    (define L.vector?.72.8
      ((assignment
        ((ra.440 r15) (c.97 r14) (tmp.289 r14) (tmp.44 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440))
          (begin (set! rax 6) (jump ra.440)))))
    (define L.not.73.7
      ((assignment ((ra.442 r15) (c.96 r14) (tmp.45 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442))
          (begin (set! rax 14) (jump ra.442)))))
    (define L.cons.74.6
      ((assignment
        ((ra.443 r15)
         (tmp.46 r14)
         (tmp.47 r13)
         (c.95 r14)
         (tmp.291 r9)
         (tmp.444 r9)
         (tmp.150 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443)))
    (define L.eq?.75.5
      ((assignment ((ra.445 r15) (tmp.48 r14) (c.94 r14) (tmp.49 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445))
          (begin (set! rax 6) (jump ra.445)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.446 r15)
         (tmp.76 r14)
         (vector-init-loop.78 r13)
         (tmp.293 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.296 r8)
         (c.93 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.294 r9)
         (tmp.450 r9)
         (tmp.295 r9)
         (tmp.77 r9)
         (tmp.451 r9)
         (tmp.151 r9)
         (tmp.124 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.540 tmp.295)
        (set! tmp.296 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3)))
    (define L.vector-init-loop.78.3
      ((assignment
        ((ra.452 r15)
         (len.79 r14)
         (i.81 r13)
         (c.92 r9)
         (vec.80 r8)
         (vector-init-loop.78 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.453 r15)
         (tmp.87 r14)
         (tmp.88 r13)
         (tmp.89 r9)
         (tmp.310 r8)
         (c.91 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.454 r15) (tmp.84 r14) (tmp.85 r13) (tmp.318 r9) (c.90 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107)))))
    (define L.jp.107
      ((assignment ((ra.455 r15) (tmp.312 r14) (tmp.85 r13) (tmp.84 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106)))
          (begin (set! rax 2622) (jump ra.455)))))
    (define L.jp.106
      ((assignment
        ((ra.456 r15)
         (tmp.84 r14)
         (tmp.314 r13)
         (tmp.85 r9)
         (tmp.457 r13)
         (tmp.315 r13)
         (tmp.458 r13)
         (tmp.316 r13)
         (tmp.459 r13)
         (tmp.317 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456))
          (begin (set! rax 2622) (jump ra.456)))))
    (define L.jp.103
      ((assignment
        ((ra.460 r15) (tmp.304 r14) (tmp.88 r13) (tmp.89 r9) (tmp.87 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102)))
          (begin (set! rax 2366) (jump ra.460)))))
    (define L.jp.102
      ((assignment
        ((ra.461 r15)
         (tmp.87 r14)
         (tmp.89 r13)
         (tmp.306 r9)
         (tmp.88 r8)
         (tmp.462 r9)
         (tmp.307 r9)
         (tmp.463 r9)
         (tmp.308 r9)
         (tmp.464 r9)
         (tmp.309 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461))
          (begin (set! rax 2366) (jump ra.461)))))
    (define L.jp.99
      ((assignment
        ((ra.465 r15)
         (len.79 r14)
         (vector-init-loop.78 r13)
         (i.81 r9)
         (vec.80 r8)
         (tmp.298 rdi)
         (tmp.302 r9)
         (tmp.301 rdi)
         (tmp.468 rdi)
         (tmp.300 rdi)
         (tmp.467 rdi)
         (tmp.299 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.123 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3)))))
    (define L.jp.86
      ((assignment ((ra.470 r15) (tmp.270 r14) (tmp.35 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470))
          (begin (set! rax 3390) (jump ra.470)))))
    (define L.jp.84
      ((assignment ((ra.471 r15) (tmp.267 r14) (tmp.34 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471))
          (begin (set! rax 3134) (jump ra.471)))))
    (define L.jp.82
      ((assignment ((ra.472 r15) (tmp.264 r14) (tmp.33 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472))
          (begin (set! rax 2878) (jump ra.472)))))
    (define L.jp.80
      ((assignment
        ((ra.473 r15)
         (tmp.31 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.32 r9)
         (tmp.258 r8)
         (tmp.261 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79))))
          (begin (set! rax 2622) (jump ra.473)))))
    (define L.jp.79
      ((assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.260 r13)
         (tmp.32 r9)
         (tmp.31 r8)
         (tmp.125 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump ra.475)))))
    (define L.jp.76
      ((assignment
        ((ra.476 r15)
         (tmp.28 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.30 r9)
         (tmp.252 rdi)
         (tmp.29 rsi)
         (tmp.255 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75))))
          (begin (set! rax 2366) (jump ra.476)))))
    (define L.jp.75
      ((assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.254 r13)
         (tmp.30 r9)
         (tmp.29 rdi)
         (tmp.28 r8)
         (tmp.126 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump ra.478)))))
    (define L.jp.72
      ((assignment ((ra.479 r15) (tmp.249 r14) (tmp.27 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479))
          (begin (set! rax 2110) (jump ra.479)))))
    (define L.jp.70
      ((assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.246 r13)
         (tmp.26 r9)
         (tmp.127 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump ra.480)))))
    (define L.jp.68
      ((assignment
        ((ra.481 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.239 r9)
         (tmp.243 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67))))
          (begin (set! rax 1598) (jump ra.481)))))
    (define L.jp.67
      ((assignment ((ra.483 r15) (tmp.241 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483))
            (begin (set! rax 6) (jump ra.483)))
          (begin (set! rax 1598) (jump ra.483)))))
    (define L.jp.63
      ((assignment
        ((ra.484 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.232 r9)
         (tmp.236 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62))))
          (begin (set! rax 1342) (jump ra.484)))))
    (define L.jp.62
      ((assignment ((ra.486 r15) (tmp.234 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486))
            (begin (set! rax 6) (jump ra.486)))
          (begin (set! rax 1342) (jump ra.486)))))
    (define L.jp.58
      ((assignment
        ((ra.487 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.225 r9)
         (tmp.229 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57))))
          (begin (set! rax 1086) (jump ra.487)))))
    (define L.jp.57
      ((assignment ((ra.489 r15) (tmp.227 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489))
            (begin (set! rax 6) (jump ra.489)))
          (begin (set! rax 1086) (jump ra.489)))))
    (define L.jp.53
      ((assignment
        ((ra.490 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.218 r9)
         (tmp.222 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52))))
          (begin (set! rax 830) (jump ra.490)))))
    (define L.jp.52
      ((assignment ((ra.492 r15) (tmp.220 r14) (tmp.18 r13) (tmp.19 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492))
            (begin (set! rax 6) (jump ra.492)))
          (begin (set! rax 830) (jump ra.492)))))
    (define L.jp.48
      ((assignment
        ((ra.493 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.212 r9)
         (tmp.215 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47))))
          (begin (set! rax 574) (jump ra.493)))))
    (define L.jp.47
      ((assignment
        ((ra.495 r15) (tmp.214 r14) (tmp.16 r13) (tmp.17 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495))
          (begin (set! rax 574) (jump ra.495)))))
    (define L.jp.44
      ((assignment
        ((ra.497 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.206 r9)
         (tmp.209 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43))))
          (begin (set! rax 318) (jump ra.497)))))
    (define L.jp.43
      ((assignment
        ((ra.499 r15) (tmp.208 r14) (tmp.14 r13) (tmp.15 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499))
          (begin (set! rax 318) (jump ra.499)))))
    (define L.jp.40
      ((assignment
        ((ra.501 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.199 r9)
         (tmp.203 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39))))
          (begin (set! rax 62) (jump ra.501)))))
    (define L.jp.39
      ((assignment
        ((ra.503 r15)
         (tmp.12 r14)
         (tmp.201 r13)
         (tmp.13 r9)
         (tmp.504 r13)
         (tmp.202 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503))
          (begin (set! rax 62) (jump ra.503))))))
     ) '(9 23)))



(parameterize ([current-pass-list
                  (list
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((assignment
        ((ra.359 fv0)
         (filter.4 fv1)
         (cons.74 fv2)
         (tmp.352 fv3)
         (unsafe-vector-ref.3 r15)
         (eq?.75 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.78 r9)
         (make-init-vector.1 r8)
         (empty?.66 rdi)
         (cdr.62 rsi)
         (car.61 rdx)
         (vector-ref.60 rcx)
         (vector-set!.59 rbx)
         (>.55 rsp)
         (tmp.342 rsp)
         (tmp.383 rsp)
         (tmp.175 rsp)
         (>=.56 rsp)
         (tmp.343 rsp)
         (tmp.384 rsp)
         (tmp.176 rsp)
         (tmp.340 rsp)
         (tmp.381 rsp)
         (tmp.173 rsp)
         (vector-length.58 rsp)
         (tmp.341 rsp)
         (tmp.382 rsp)
         (tmp.174 rsp)
         (apply-pred.5 r15)
         (tmp.339 rbx)
         (tmp.380 rbx)
         (tmp.172 rbx)
         (tmp.338 rcx)
         (tmp.379 rcx)
         (tmp.171 rcx)
         (make-bigger?.6 r13)
         (tmp.337 rdx)
         (tmp.378 rdx)
         (tmp.170 rdx)
         (tmp.351 r13)
         (tmp.333 rsi)
         (tmp.374 rsi)
         (tmp.166 rsi)
         (boolean?.65 rsi)
         (tmp.334 rsi)
         (tmp.375 rsi)
         (tmp.167 rsi)
         (fixnum?.64 rsi)
         (tmp.335 rsi)
         (tmp.376 rsi)
         (tmp.168 rsi)
         (procedure-arity.63 rsi)
         (tmp.336 rsi)
         (tmp.377 rsi)
         (tmp.169 rsi)
         (tmp.350 r15)
         (tmp.391 r15)
         (tmp.183 r15)
         (tmp.392 r13)
         (tmp.184 r13)
         (tmp.325 rdi)
         (tmp.366 rdi)
         (tmp.158 rdi)
         (not.73 rdi)
         (tmp.326 rdi)
         (tmp.367 rdi)
         (tmp.159 rdi)
         (vector?.72 rdi)
         (tmp.327 rdi)
         (tmp.368 rdi)
         (tmp.160 rdi)
         (procedure?.71 rdi)
         (tmp.328 rdi)
         (tmp.369 rdi)
         (tmp.161 rdi)
         (pair?.70 rdi)
         (tmp.329 rdi)
         (tmp.370 rdi)
         (tmp.162 rdi)
         (error?.69 rdi)
         (tmp.330 rdi)
         (tmp.371 rdi)
         (tmp.163 rdi)
         (ascii-char?.68 rdi)
         (tmp.331 rdi)
         (tmp.372 rdi)
         (tmp.164 rdi)
         (void?.67 rdi)
         (tmp.332 rdi)
         (tmp.373 rdi)
         (tmp.165 rdi)
         (tmp.349 r15)
         (tmp.390 r15)
         (tmp.182 r15)
         (tmp.324 rdi)
         (tmp.365 rdi)
         (tmp.157 rdi)
         (tmp.323 r14)
         (tmp.364 r14)
         (tmp.156 r14)
         (tmp.322 r14)
         (tmp.363 r14)
         (tmp.155 r14)
         (tmp.321 r14)
         (tmp.362 r14)
         (tmp.154 r14)
         (tmp.353 r15)
         (tmp.354 r15)
         (tmp.355 r15)
         (tmp.356 r15)
         (tmp.357 r15)
         (tmp.320 r14)
         (tmp.361 r14)
         (tmp.153 r14)
         (tmp.142 r15)
         (tmp.143 r15)
         (tmp.144 r15)
         (tmp.145 r15)
         (tmp.146 r15)
         (tmp.147 r15)
         (tmp.148 r15)
         (tmp.149 r15)
         (tmp.358 r15)
         (tmp.319 r15)
         (tmp.360 r15)
         (tmp.152 r15)
         (make-vector.57 fv1)
         (tmp.344 fv3)
         (tmp.385 fv3)
         (tmp.177 fv3)
         (<=.54 fv3)
         (tmp.345 fv3)
         (tmp.386 fv3)
         (tmp.178 fv3)
         (<.53 fv3)
         (tmp.346 fv3)
         (tmp.387 fv3)
         (tmp.179 fv3)
         (|-.52| fv3)
         (tmp.347 fv3)
         (tmp.388 fv3)
         (tmp.180 fv3)
         (|+.51| fv3)
         (tmp.348 fv3)
         (tmp.389 fv3)
         (tmp.181 fv3)
         (*.50 fv3))))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 r12)
        (set! r12 (+ r12 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 r12)
        (set! r12 (+ r12 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 r12)
        (set! r12 (+ r12 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 r12)
        (set! r12 (+ r12 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 r12)
        (set! r12 (+ r12 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (set! rbp (+ rbp 32))
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33 rbp r15 rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (set! rbp (+ rbp 32))
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.353 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.354 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.355 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.356 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.357 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
    (define L.make-bigger?.6.33
      ((assignment
        ((ra.393 r15)
         (make-bigger?.6 r14)
         (threshold.11 r13)
         (cons.74 r9)
         (c.122 r9)
         (tmp.141 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
    (define L.apply-pred.5.32
      ((assignment
        ((ra.394 fv0)
         (>.55 fv1)
         (x.10 fv2)
         (pred?.9 fv3)
         (cdr.62 fv4)
         (make-bigger?.6 fv5)
         (eq?.75 fv6)
         (car.61 r15)
         (c.121 r14)
         (tmp.186 r15)
         (tmp.137 r14)
         (tmp.138 r15)
         (tmp.187 r15)
         (tmp.139 r15)
         (tmp.140 r15)
         (tmp.188 r15))))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (set! rbp (+ rbp 56))
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19 rbp r15 rsi rdi)))
        (set! rbp (- rbp 56))
        (set! tmp.186 rax)
        (set! rbp (+ rbp 56))
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 56))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25 rbp r15 rdx rsi rdi))
          (begin (set! rax 25406) (jump ra.394 rbp rax)))))
    (define L.filter.4.31
      ((assignment
        ((ra.395 fv0)
         (apply-pred.5 fv1)
         (car.61 fv2)
         (cdr.62 fv3)
         (lox.8 fv4)
         (filter.4 fv5)
         (pred?.7 fv6)
         (cons.74 fv7)
         (tmp.194 fv1)
         (c.120 r15)
         (empty?.66 r15)
         (tmp.192 r15)
         (tmp.190 r15)
         (tmp.128 r15)
         (tmp.130 r15)
         (tmp.129 r15)
         (tmp.193 r15)
         (tmp.134 r15)
         (tmp.133 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.195 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (tmp.197 r15)
         (tmp.196 r15))))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (set! rbp (+ rbp 64))
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14 rbp r15 rsi rdi)))
        (set! rbp (- rbp 64))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395 rbp rax))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (set! rbp (+ rbp 64))
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19 rbp r15 rsi rdi)))
            (set! rbp (- rbp 64))
            (set! tmp.192 rax)
            (set! rbp (+ rbp 64))
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 64))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (set! rbp (+ rbp 64))
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.195 rax)
                (set! rbp (+ rbp 64))
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6 rbp r15 rdx rsi rdi))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31 rbp r15 rdx rsi rdi)))))))
    (define L.*.50.30
      ((assignment
        ((ra.396 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.204 r9)
         (c.119 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi)))))
    (define L.+.51.29
      ((assignment
        ((ra.398 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.210 r9)
         (c.118 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi)))))
    (define L.-.52.28
      ((assignment
        ((ra.400 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.216 r9)
         (c.117 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<.53.27
      ((assignment
        ((ra.402 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.223 r9)
         (c.116 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.<=.54.26
      ((assignment
        ((ra.404 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.230 r9)
         (c.115 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>.55.25
      ((assignment
        ((ra.406 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.237 r9)
         (c.114 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.>=.56.24
      ((assignment
        ((ra.408 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.244 r9)
         (c.113 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.57.23
      ((assignment
        ((ra.410 r15)
         (tmp.26 r14)
         (make-init-vector.1 r13)
         (tmp.247 r9)
         (c.112 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.58.22
      ((assignment
        ((ra.412 r15) (tmp.27 r14) (tmp.250 r13) (c.111 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi)))))
    (define L.vector-set!.59.21
      ((assignment
        ((ra.414 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.30 r9)
         (unsafe-vector-set!.2 rdi)
         (c.110 r8)
         (tmp.256 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.60.20
      ((assignment
        ((ra.416 r15)
         (tmp.31 r14)
         (tmp.32 r13)
         (unsafe-vector-ref.3 r9)
         (c.109 r9)
         (tmp.262 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.61.19
      ((assignment
        ((ra.418 r15) (tmp.33 r14) (tmp.265 r13) (c.108 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi)))))
    (define L.cdr.62.18
      ((assignment
        ((ra.420 r15) (tmp.34 r14) (tmp.268 r13) (c.107 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi)))))
    (define L.procedure-arity.63.17
      ((assignment
        ((ra.422 r15) (tmp.35 r14) (tmp.271 r13) (c.106 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi)))))
    (define L.fixnum?.64.16
      ((assignment
        ((ra.424 r15) (c.105 r14) (tmp.273 r14) (tmp.36 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.65.15
      ((assignment
        ((ra.426 r15) (c.104 r14) (tmp.275 r14) (tmp.37 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.66.14
      ((assignment
        ((ra.428 r15) (c.103 r14) (tmp.277 r14) (tmp.38 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.67.13
      ((assignment
        ((ra.430 r15) (c.102 r14) (tmp.279 r14) (tmp.39 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.68.12
      ((assignment
        ((ra.432 r15) (c.101 r14) (tmp.281 r14) (tmp.40 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.69.11
      ((assignment
        ((ra.434 r15) (c.100 r14) (tmp.283 r14) (tmp.41 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.70.10
      ((assignment
        ((ra.436 r15) (c.99 r14) (tmp.285 r14) (tmp.42 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.71.9
      ((assignment
        ((ra.438 r15) (c.98 r14) (tmp.287 r14) (tmp.43 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.72.8
      ((assignment
        ((ra.440 r15) (c.97 r14) (tmp.289 r14) (tmp.44 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.73.7
      ((assignment ((ra.442 r15) (c.96 r14) (tmp.45 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.74.6
      ((assignment
        ((ra.443 r15)
         (tmp.46 r14)
         (tmp.47 r13)
         (c.95 r14)
         (tmp.291 r9)
         (tmp.444 r9)
         (tmp.150 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443 rbp rax)))
    (define L.eq?.75.5
      ((assignment ((ra.445 r15) (tmp.48 r14) (c.94 r14) (tmp.49 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.446 r15)
         (tmp.76 r14)
         (vector-init-loop.78 r13)
         (tmp.293 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.296 r8)
         (c.93 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.294 r9)
         (tmp.450 r9)
         (tmp.295 r9)
         (tmp.77 r9)
         (tmp.451 r9)
         (tmp.151 r9)
         (tmp.124 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.540 tmp.295)
        (set! tmp.296 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.78.3
      ((assignment
        ((ra.452 r15)
         (len.79 r14)
         (i.81 r13)
         (c.92 r9)
         (vec.80 r8)
         (vector-init-loop.78 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.453 r15)
         (tmp.87 r14)
         (tmp.88 r13)
         (tmp.89 r9)
         (tmp.310 r8)
         (c.91 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.454 r15) (tmp.84 r14) (tmp.85 r13) (tmp.318 r9) (c.90 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi)))))
    (define L.jp.107
      ((assignment ((ra.455 r15) (tmp.312 r14) (tmp.85 r13) (tmp.84 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.106
      ((assignment
        ((ra.456 r15)
         (tmp.84 r14)
         (tmp.314 r13)
         (tmp.85 r9)
         (tmp.457 r13)
         (tmp.315 r13)
         (tmp.458 r13)
         (tmp.316 r13)
         (tmp.459 r13)
         (tmp.317 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.103
      ((assignment
        ((ra.460 r15) (tmp.304 r14) (tmp.88 r13) (tmp.89 r9) (tmp.87 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.102
      ((assignment
        ((ra.461 r15)
         (tmp.87 r14)
         (tmp.89 r13)
         (tmp.306 r9)
         (tmp.88 r8)
         (tmp.462 r9)
         (tmp.307 r9)
         (tmp.463 r9)
         (tmp.308 r9)
         (tmp.464 r9)
         (tmp.309 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.99
      ((assignment
        ((ra.465 r15)
         (len.79 r14)
         (vector-init-loop.78 r13)
         (i.81 r9)
         (vec.80 r8)
         (tmp.298 rdi)
         (tmp.302 r9)
         (tmp.301 rdi)
         (tmp.468 rdi)
         (tmp.300 rdi)
         (tmp.467 rdi)
         (tmp.299 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.123 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.86
      ((assignment ((ra.470 r15) (tmp.270 r14) (tmp.35 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.84
      ((assignment ((ra.471 r15) (tmp.267 r14) (tmp.34 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.82
      ((assignment ((ra.472 r15) (tmp.264 r14) (tmp.33 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.80
      ((assignment
        ((ra.473 r15)
         (tmp.31 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.32 r9)
         (tmp.258 r8)
         (tmp.261 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.79
      ((assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.260 r13)
         (tmp.32 r9)
         (tmp.31 r8)
         (tmp.125 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.76
      ((assignment
        ((ra.476 r15)
         (tmp.28 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.30 r9)
         (tmp.252 rdi)
         (tmp.29 rsi)
         (tmp.255 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.75
      ((assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.254 r13)
         (tmp.30 r9)
         (tmp.29 rdi)
         (tmp.28 r8)
         (tmp.126 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.72
      ((assignment ((ra.479 r15) (tmp.249 r14) (tmp.27 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.70
      ((assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.246 r13)
         (tmp.26 r9)
         (tmp.127 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.68
      ((assignment
        ((ra.481 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.239 r9)
         (tmp.243 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.67
      ((assignment ((ra.483 r15) (tmp.241 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.63
      ((assignment
        ((ra.484 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.232 r9)
         (tmp.236 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.62
      ((assignment ((ra.486 r15) (tmp.234 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.58
      ((assignment
        ((ra.487 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.225 r9)
         (tmp.229 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.57
      ((assignment ((ra.489 r15) (tmp.227 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.53
      ((assignment
        ((ra.490 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.218 r9)
         (tmp.222 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.52
      ((assignment ((ra.492 r15) (tmp.220 r14) (tmp.18 r13) (tmp.19 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.48
      ((assignment
        ((ra.493 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.212 r9)
         (tmp.215 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.47
      ((assignment
        ((ra.495 r15) (tmp.214 r14) (tmp.16 r13) (tmp.17 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.44
      ((assignment
        ((ra.497 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.206 r9)
         (tmp.209 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.43
      ((assignment
        ((ra.499 r15) (tmp.208 r14) (tmp.14 r13) (tmp.15 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.40
      ((assignment
        ((ra.501 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.199 r9)
         (tmp.203 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.39
      ((assignment
        ((ra.503 r15)
         (tmp.12 r14)
         (tmp.201 r13)
         (tmp.13 r9)
         (tmp.504 r13)
         (tmp.202 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) '(9 23)))

  (parameterize ([current-pass-list
                  (list
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((locals
        (*.50
         tmp.181
         tmp.389
         tmp.348
         |+.51|
         tmp.180
         tmp.388
         tmp.347
         |-.52|
         tmp.179
         tmp.387
         tmp.346
         <.53
         tmp.178
         tmp.386
         tmp.345
         <=.54
         tmp.177
         tmp.385
         tmp.344
         make-vector.57))
       (undead-out
        ((r12 ra.359 rbp)
         (r12 tmp.319 ra.359 rbp)
         (tmp.319 r12 ra.359 rbp)
         (tmp.360 r12 ra.359 rbp)
         (r12 ra.359 rbp tmp.152)
         (rbp ra.359 r12 tmp.152)
         (tmp.152 r12 ra.359 rbp)
         (r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.320 ra.359 rbp unsafe-vector-ref.3)
         (tmp.320 r12 ra.359 rbp unsafe-vector-ref.3)
         (tmp.361 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 ra.359 rbp unsafe-vector-ref.3 tmp.153)
         (unsafe-vector-ref.3 rbp ra.359 r12 tmp.153)
         (tmp.153 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.321 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.321 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.362 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3 tmp.154)
         (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12 tmp.154)
         (tmp.154 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.322
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.322
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.363
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.155)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          r12
          tmp.155)
         (tmp.155
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.156)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.157)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.158)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.159)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.160)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.161)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.162)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.163)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.164)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.165)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.166)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.167)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.168)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.169)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.378
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.170)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.379
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.171)
         (vector-init-loop.78
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.380
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.172)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.173)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.174)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.175)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.176)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.177)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.386
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.178)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.387
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.179)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.388
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.180)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.389
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.181)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          tmp.181)
         (tmp.181
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          vector-init-loop.78
          make-init-vector.1)
         (vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60)
         (make-vector.57
          make-init-vector.1
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59)
         (cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 tmp.349 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.349 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.390 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 tmp.182)
         (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12 tmp.182)
         (tmp.182 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 filter.4)
         (r12
          tmp.350
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.350
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.391
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4
          tmp.183)
         (filter.4
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          tmp.183)
         (tmp.183
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (r12
          tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.392
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4
          tmp.184)
         (filter.4
          cdr.62
          cons.74
          apply-pred.5
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          tmp.184)
         (tmp.184
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (cons.74
          apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          cons.74
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (empty?.66
          >.55
          car.61
          rbp
          ra.359
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          car.61
          >.55
          empty?.66
          filter.4)
         (>.55
          car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5)
         (make-bigger?.6
          eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          car.61
          >.55
          apply-pred.5)
         (car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          apply-pred.5)
         (eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          make-bigger?.6
          car.61
          apply-pred.5)
         (make-bigger?.6 rbp ra.359 filter.4 cons.74 eq?.75 apply-pred.5)
         (cons.74 filter.4 ra.359 rbp make-bigger?.6)
         (rbp ra.359 filter.4 cons.74 make-bigger?.6)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         ((rax cons.74 filter.4 ra.359 rbp)
          ((make-bigger?.6 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.353 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.354 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.355 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.356 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (cons.74 tmp.357 tmp.352 filter.4 ra.359 rbp)
         ((rax tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.358 tmp.352 filter.4 ra.359 rbp)
         (tmp.352 filter.4 ra.359 rdx rbp)
         (filter.4 ra.359 rsi rdx rbp)
         (ra.359 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.359
          (rdi
           rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           tmp.319
           r12
           rbp))
         (rbp
          (tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rdx
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           r15
           rdi
           rsi
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           r12
           tmp.319
           ra.359))
         (r12
          (tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           rbp
           tmp.319
           ra.359))
         (tmp.319 (r12 ra.359 rbp))
         (tmp.360 (rbp ra.359 r12))
         (tmp.152 (r12 ra.359 rbp))
         (unsafe-vector-ref.3
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           r12
           ra.359
           rbp))
         (tmp.320 (r12 ra.359 rbp unsafe-vector-ref.3))
         (tmp.361 (unsafe-vector-ref.3 rbp ra.359 r12))
         (tmp.153 (r12 ra.359 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           r12
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.321 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (tmp.362 (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12))
         (tmp.154 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (vector-init-loop.78
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.322
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.363
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           r12))
         (tmp.155
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (make-init-vector.1
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.364
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (eq?.75
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.365
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cons.74
          (tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rsi
           rdx
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.366
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (not.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.367
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.368
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.369
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (pair?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.370
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (error?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.371
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (ascii-char?.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.372
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (void?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.373
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (empty?.66
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.374
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (boolean?.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.375
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (fixnum?.64
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.376
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure-arity.63
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.377
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cdr.62
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.378
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (car.61
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.379
          (vector-init-loop.78
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector-ref.60
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.380
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-set!.59
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.381
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-length.58
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.382
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (make-vector.57
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.383
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>=.56
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.384
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>.55
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.385
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<=.54
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.386
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<.53
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.387
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|-.52|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.388
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|+.51|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.389
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1))
         (tmp.181
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (*.50
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.349 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (tmp.390 (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12))
         (tmp.182 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (filter.4
          (rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62))
         (tmp.350
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.391
          (filter.4
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12))
         (tmp.183
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (apply-pred.5
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.351
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.392
          (filter.4
           cdr.62
           cons.74
           apply-pred.5
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61))
         (tmp.184
          (car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (make-bigger?.6
          (rsi
           tmp.142
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.142 (make-bigger?.6 cons.74 ra.359 rbp))
         (tmp.143 (cons.74 filter.4 ra.359 rbp))
         (rax (tmp.352 rbp ra.359 filter.4 cons.74))
         (rsi (filter.4 ra.359 cons.74 rdx r15 rdi make-bigger?.6 rbp))
         (rdi (ra.359 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.352
          (rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rax
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           cons.74
           filter.4
           ra.359
           rbp))
         (tmp.144 (tmp.352 filter.4 ra.359 rbp))
         (tmp.145 (tmp.352 filter.4 ra.359 rbp))
         (tmp.146 (tmp.352 filter.4 ra.359 rbp))
         (tmp.147 (tmp.352 filter.4 ra.359 rbp))
         (tmp.148 (tmp.352 filter.4 ra.359 rbp))
         (tmp.149 (tmp.352 filter.4 ra.359 rbp))
         (rdx (tmp.352 filter.4 ra.359 r15 rdi rsi cons.74 rbp))
         (tmp.353 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.354 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.355 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.356 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.357 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.358 (tmp.352 filter.4 ra.359 rbp))))
       (assignment
        ((ra.359 fv0)
         (filter.4 fv1)
         (cons.74 fv2)
         (tmp.352 fv3)
         (unsafe-vector-ref.3 r15)
         (eq?.75 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.78 r9)
         (make-init-vector.1 r8)
         (empty?.66 rdi)
         (cdr.62 rsi)
         (car.61 rdx)
         (vector-ref.60 rcx)
         (vector-set!.59 rbx)
         (>.55 rsp)
         (tmp.342 rsp)
         (tmp.383 rsp)
         (tmp.175 rsp)
         (>=.56 rsp)
         (tmp.343 rsp)
         (tmp.384 rsp)
         (tmp.176 rsp)
         (tmp.340 rsp)
         (tmp.381 rsp)
         (tmp.173 rsp)
         (vector-length.58 rsp)
         (tmp.341 rsp)
         (tmp.382 rsp)
         (tmp.174 rsp)
         (apply-pred.5 r15)
         (tmp.339 rbx)
         (tmp.380 rbx)
         (tmp.172 rbx)
         (tmp.338 rcx)
         (tmp.379 rcx)
         (tmp.171 rcx)
         (make-bigger?.6 r13)
         (tmp.337 rdx)
         (tmp.378 rdx)
         (tmp.170 rdx)
         (tmp.351 r13)
         (tmp.333 rsi)
         (tmp.374 rsi)
         (tmp.166 rsi)
         (boolean?.65 rsi)
         (tmp.334 rsi)
         (tmp.375 rsi)
         (tmp.167 rsi)
         (fixnum?.64 rsi)
         (tmp.335 rsi)
         (tmp.376 rsi)
         (tmp.168 rsi)
         (procedure-arity.63 rsi)
         (tmp.336 rsi)
         (tmp.377 rsi)
         (tmp.169 rsi)
         (tmp.350 r15)
         (tmp.391 r15)
         (tmp.183 r15)
         (tmp.392 r13)
         (tmp.184 r13)
         (tmp.325 rdi)
         (tmp.366 rdi)
         (tmp.158 rdi)
         (not.73 rdi)
         (tmp.326 rdi)
         (tmp.367 rdi)
         (tmp.159 rdi)
         (vector?.72 rdi)
         (tmp.327 rdi)
         (tmp.368 rdi)
         (tmp.160 rdi)
         (procedure?.71 rdi)
         (tmp.328 rdi)
         (tmp.369 rdi)
         (tmp.161 rdi)
         (pair?.70 rdi)
         (tmp.329 rdi)
         (tmp.370 rdi)
         (tmp.162 rdi)
         (error?.69 rdi)
         (tmp.330 rdi)
         (tmp.371 rdi)
         (tmp.163 rdi)
         (ascii-char?.68 rdi)
         (tmp.331 rdi)
         (tmp.372 rdi)
         (tmp.164 rdi)
         (void?.67 rdi)
         (tmp.332 rdi)
         (tmp.373 rdi)
         (tmp.165 rdi)
         (tmp.349 r15)
         (tmp.390 r15)
         (tmp.182 r15)
         (tmp.324 rdi)
         (tmp.365 rdi)
         (tmp.157 rdi)
         (tmp.323 r14)
         (tmp.364 r14)
         (tmp.156 r14)
         (tmp.322 r14)
         (tmp.363 r14)
         (tmp.155 r14)
         (tmp.321 r14)
         (tmp.362 r14)
         (tmp.154 r14)
         (tmp.353 r15)
         (tmp.354 r15)
         (tmp.355 r15)
         (tmp.356 r15)
         (tmp.357 r15)
         (tmp.320 r14)
         (tmp.361 r14)
         (tmp.153 r14)
         (tmp.142 r15)
         (tmp.143 r15)
         (tmp.144 r15)
         (tmp.145 r15)
         (tmp.146 r15)
         (tmp.147 r15)
         (tmp.148 r15)
         (tmp.149 r15)
         (tmp.358 r15)
         (tmp.319 r15)
         (tmp.360 r15)
         (tmp.152 r15))))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 r12)
        (set! r12 (+ r12 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 r12)
        (set! r12 (+ r12 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 r12)
        (set! r12 (+ r12 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 r12)
        (set! r12 (+ r12 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 r12)
        (set! r12 (+ r12 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (set! rbp (+ rbp 32))
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33 rbp r15 rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (set! rbp (+ rbp 32))
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.353 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.354 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.355 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.356 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.357 rax)
        (set! rbp (+ rbp 32))
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 32))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
    (define L.make-bigger?.6.33
      ((locals ())
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi c.122 ra.393 rbp)
         (c.122 threshold.11 ra.393 rbp)
         (c.122 threshold.11 make-bigger?.6 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (make-bigger?.6 cons.74 ra.393 rdx rbp)
         (cons.74 ra.393 rsi rdx rbp)
         (ra.393 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.393
          (rdx tmp.141 cons.74 make-bigger?.6 threshold.11 c.122 rdi rsi rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           tmp.141
           cons.74
           make-bigger?.6
           threshold.11
           c.122
           ra.393))
         (rsi (r15 rdi cons.74 rdx rbp c.122 ra.393))
         (rdi (r15 rsi rdx rbp ra.393))
         (c.122 (make-bigger?.6 threshold.11 rsi ra.393 rbp))
         (threshold.11 (tmp.141 cons.74 make-bigger?.6 c.122 ra.393 rbp))
         (make-bigger?.6 (rdx tmp.141 cons.74 rbp ra.393 threshold.11 c.122))
         (cons.74 (rsi rdx rbp ra.393 make-bigger?.6 threshold.11))
         (tmp.141 (threshold.11 make-bigger?.6 ra.393 rbp))
         (rdx (r15 rdi rsi make-bigger?.6 cons.74 ra.393 rbp))
         (r15 (rdi rsi rdx rbp))))
       (assignment
        ((ra.393 r15)
         (make-bigger?.6 r14)
         (threshold.11 r13)
         (cons.74 r9)
         (c.122 r9)
         (tmp.141 r9))))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
    (define L.apply-pred.5.32
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.394 rbp)
         (rsi rdx c.121 ra.394 rbp)
         (rdx c.121 pred?.9 ra.394 rbp)
         (c.121 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((car.61 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (eq?.75 tmp.186 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((tmp.186 eq?.75 rdx rbp)
           (eq?.75 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.187 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           (cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           ((rax x.10 >.55 ra.394 rbp)
            ((cdr.62 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.188 x.10 >.55 ra.394 rbp)
           (x.10 >.55 ra.394 rdx rbp)
           (>.55 ra.394 rsi rdx rbp)
           (ra.394 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.394 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (pred?.9 cdr.62 make-bigger?.6 eq?.75 >.55 x.10 ra.394 rbp))
         (rbp
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           ra.394
           rdx
           tmp.188
           r15
           rdi
           rsi
           tmp.140
           tmp.139
           rax))
         (ra.394
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           rbp
           rdi
           rsi
           rdx
           tmp.188
           tmp.140
           tmp.139
           rax))
         (tmp.139 (cdr.62 pred?.9 x.10 ra.394 rbp))
         (x.10
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           c.121
           pred?.9
           ra.394
           rbp
           rdx
           tmp.188
           rax
           tmp.140
           tmp.139))
         (pred?.9
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           rdx
           c.121
           ra.394
           rbp
           tmp.140
           tmp.139))
         (cdr.62
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           rbp
           ra.394
           x.10
           pred?.9
           c.121
           rsi
           tmp.139))
         (tmp.140 (pred?.9 x.10 >.55 ra.394 rbp))
         (>.55
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           rbp
           ra.394
           x.10
           pred?.9
           cdr.62
           c.121
           rsi
           rdx
           tmp.188
           rax
           tmp.140))
         (rsi (eq?.75 car.61 c.121 >.55 ra.394 rdx r15 rdi cdr.62 rbp))
         (rdi (ra.394 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.188 (x.10 >.55 ra.394 rbp))
         (rdx (tmp.186 eq?.75 pred?.9 c.121 r15 rdi rsi x.10 >.55 ra.394 rbp))
         (c.121
          (car.61 make-bigger?.6 >.55 cdr.62 x.10 pred?.9 rsi rdx ra.394 rbp))
         (make-bigger?.6
          (tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           c.121))
         (car.61
          (rsi
           tmp.137
           eq?.75
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           c.121))
         (eq?.75
          (rsi
           rdx
           tmp.186
           rax
           tmp.138
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           car.61))
         (tmp.137 (car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.138 (eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.186
          (rdx eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.187 (cdr.62 pred?.9 x.10 >.55 ra.394 rbp))))
       (assignment
        ((ra.394 fv0)
         (>.55 fv1)
         (x.10 fv2)
         (pred?.9 fv3)
         (cdr.62 fv4)
         (make-bigger?.6 fv5)
         (eq?.75 fv6)
         (car.61 r15)
         (c.121 r14)
         (tmp.186 r15)
         (tmp.137 r14)
         (tmp.138 r15)
         (tmp.187 r15)
         (tmp.139 r15)
         (tmp.140 r15)
         (tmp.188 r15))))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (set! rbp (+ rbp 56))
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19 rbp r15 rsi rdi)))
        (set! rbp (- rbp 56))
        (set! tmp.186 rax)
        (set! rbp (+ rbp 56))
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 56))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (set! rbp (+ rbp 56))
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18 rbp r15 rsi rdi)))
            (set! rbp (- rbp 56))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25 rbp r15 rdx rsi rdi))
          (begin (set! rax 25406) (jump ra.394 rbp rax)))))
    (define L.filter.4.31
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx c.120 ra.395 rbp)
         (rdx c.120 pred?.7 ra.395 rbp)
         (c.120 pred?.7 lox.8 ra.395 rbp)
         (c.120 pred?.7 lox.8 cdr.62 ra.395 rbp)
         (c.120 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 car.61 ra.395 rbp)
         (c.120
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((rax
           cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((empty?.66 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.190
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           (apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax
             apply-pred.5
             car.61
             cdr.62
             lox.8
             filter.4
             pred?.7
             cons.74
             ra.395
             rbp)
            ((car.61 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (apply-pred.5
            tmp.192
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((pred?.7 apply-pred.5 rdx rbp)
             (apply-pred.5 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.193 car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
           ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             ((rax cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
              ((car.61 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             ((rax filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (filter.4 pred?.7 tmp.195 tmp.194 cons.74 ra.395 rbp)
             ((rax tmp.194 cons.74 ra.395 rbp)
              ((pred?.7 filter.4 rdx rbp)
               (filter.4 rsi rdx rbp)
               (rdi rsi rdx rbp)
               (rdi rsi rdx r15 rbp)
               (rdi rsi rdx r15 rbp)))
             (tmp.196 tmp.194 cons.74 ra.395 rbp)
             (tmp.194 cons.74 ra.395 rdx rbp)
             (cons.74 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             (cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             ((rax pred?.7 filter.4 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (tmp.197 pred?.7 filter.4 ra.395 rbp)
             (pred?.7 filter.4 ra.395 rdx rbp)
             (filter.4 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))))))
       (conflicts
        ((tmp.135 (cdr.62 lox.8 pred?.7 ra.395 rbp))
         (rbp
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           ra.395
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           r15
           rdi
           rsi
           rax
           tmp.136
           tmp.135))
         (ra.395
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdi
           rsi
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (pred?.7
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           c.120
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (lox.8
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           c.120
           pred?.7
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           tmp.136
           tmp.135))
         (cdr.62
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           rbp
           ra.395
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           rsi
           tmp.135))
         (tmp.136 (lox.8 pred?.7 filter.4 ra.395 rbp))
         (filter.4
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           rbp
           ra.395
           cdr.62
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.194
           tmp.132
           tmp.131
           rsi
           rdx
           tmp.197
           rax
           tmp.136))
         (rax
          (car.61
           apply-pred.5
           tmp.194
           cons.74
           lox.8
           cdr.62
           rbp
           ra.395
           filter.4
           pred?.7))
         (rsi
          (empty?.66
           c.120
           apply-pred.5
           cons.74
           car.61
           filter.4
           ra.395
           rdx
           r15
           rdi
           cdr.62
           rbp))
         (rdi (ra.395 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.197 (pred?.7 filter.4 ra.395 rbp))
         (rdx
          (c.120
           apply-pred.5
           tmp.194
           cons.74
           r15
           rdi
           rsi
           pred?.7
           filter.4
           ra.395
           rbp))
         (tmp.131 (car.61 cdr.62 lox.8 filter.4 pred?.7 ra.395 rbp))
         (car.61
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           tmp.193
           tmp.192
           rax
           tmp.129
           rsi
           tmp.131))
         (tmp.132 (cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (cons.74
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           rsi
           rdx
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132))
         (tmp.194
          (rdx
           tmp.196
           tmp.195
           rax
           tmp.134
           tmp.133
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.133 (cdr.62 lox.8 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.134 (lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.195 (filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.196 (tmp.194 cons.74 ra.395 rbp))
         (tmp.129 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (tmp.130
          (apply-pred.5 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (apply-pred.5
          (tmp.190
           tmp.128
           empty?.66
           rbp
           ra.395
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           rsi
           rdx
           tmp.192
           rax
           tmp.130))
         (tmp.192
          (apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.193 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (c.120
          (apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           rsi
           rdx
           ra.395
           rbp))
         (empty?.66
          (rsi
           rbp
           ra.395
           apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74))
         (tmp.128
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp))
         (tmp.190
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp))))
       (assignment
        ((ra.395 fv0)
         (apply-pred.5 fv1)
         (car.61 fv2)
         (cdr.62 fv3)
         (lox.8 fv4)
         (filter.4 fv5)
         (pred?.7 fv6)
         (cons.74 fv7)
         (tmp.194 fv1)
         (c.120 r15)
         (empty?.66 r15)
         (tmp.192 r15)
         (tmp.190 r15)
         (tmp.128 r15)
         (tmp.130 r15)
         (tmp.129 r15)
         (tmp.193 r15)
         (tmp.134 r15)
         (tmp.133 r15)
         (tmp.132 r15)
         (tmp.131 r15)
         (tmp.195 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (tmp.197 r15)
         (tmp.196 r15))))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (set! rbp (+ rbp 64))
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14 rbp r15 rsi rdi)))
        (set! rbp (- rbp 64))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395 rbp rax))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (set! rbp (+ rbp 64))
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19 rbp r15 rsi rdi)))
            (set! rbp (- rbp 64))
            (set! tmp.192 rax)
            (set! rbp (+ rbp 64))
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32 rbp r15 rdx rsi rdi)))
            (set! rbp (- rbp 64))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (set! rbp (+ rbp 64))
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.195 rax)
                (set! rbp (+ rbp 64))
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6 rbp r15 rdx rsi rdi))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (set! rbp (+ rbp 64))
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! rbp (- rbp 64))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31 rbp r15 rdx rsi rdi)))))))
    (define L.*.50.30
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.12 ra.396 rbp)
         (tmp.13 tmp.12 ra.396 rbp)
         (tmp.397 tmp.13 tmp.12 ra.396 rbp)
         (tmp.204 tmp.13 tmp.12 ra.396 rbp)
         ((tmp.13 tmp.12 ra.396 rbp)
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.12 ra.396 rbp))
         (rbp (tmp.204 tmp.397 tmp.13 tmp.12 c.119 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.204 tmp.397 tmp.13 tmp.12 c.119 rbp rdi rsi rdx))
         (tmp.12 (tmp.204 tmp.397 tmp.13 ra.396 rbp rdx))
         (rsi (c.119 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.396 rbp))
         (tmp.13 (tmp.204 tmp.397 tmp.12 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.12 tmp.13))
         (tmp.204 (tmp.13 tmp.12 ra.396 rbp))))
       (assignment
        ((ra.396 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.204 r9)
         (c.119 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi)))))
    (define L.+.51.29
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.14 ra.398 rbp)
         (tmp.15 tmp.14 ra.398 rbp)
         (tmp.399 tmp.15 tmp.14 ra.398 rbp)
         (tmp.210 tmp.15 tmp.14 ra.398 rbp)
         ((tmp.15 tmp.14 ra.398 rbp)
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.14 ra.398 rbp))
         (rbp (tmp.210 tmp.399 tmp.15 tmp.14 c.118 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.210 tmp.399 tmp.15 tmp.14 c.118 rbp rdi rsi rdx))
         (tmp.14 (tmp.210 tmp.399 tmp.15 ra.398 rbp rdx))
         (rsi (c.118 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.398 rbp))
         (tmp.15 (tmp.210 tmp.399 tmp.14 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.14 tmp.15))
         (tmp.210 (tmp.15 tmp.14 ra.398 rbp))))
       (assignment
        ((ra.398 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.210 r9)
         (c.118 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi)))))
    (define L.-.52.28
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.16 ra.400 rbp)
         (tmp.17 tmp.16 ra.400 rbp)
         (tmp.401 tmp.17 tmp.16 ra.400 rbp)
         (tmp.216 tmp.17 tmp.16 ra.400 rbp)
         ((tmp.17 tmp.16 ra.400 rbp)
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.16 ra.400 rbp))
         (rbp (tmp.216 tmp.401 tmp.17 tmp.16 c.117 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.216 tmp.401 tmp.17 tmp.16 c.117 rbp rdi rsi rdx))
         (tmp.16 (tmp.216 tmp.401 tmp.17 ra.400 rbp rdx))
         (rsi (c.117 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.400 rbp))
         (tmp.17 (tmp.216 tmp.401 tmp.16 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.16 tmp.17))
         (tmp.216 (tmp.17 tmp.16 ra.400 rbp))))
       (assignment
        ((ra.400 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.216 r9)
         (c.117 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<.53.27
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.18 ra.402 rbp)
         (tmp.19 tmp.18 ra.402 rbp)
         (tmp.403 tmp.19 tmp.18 ra.402 rbp)
         (tmp.223 tmp.19 tmp.18 ra.402 rbp)
         ((tmp.19 tmp.18 ra.402 rbp)
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.18 ra.402 rbp))
         (rbp (tmp.223 tmp.403 tmp.19 tmp.18 c.116 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.223 tmp.403 tmp.19 tmp.18 c.116 rbp rdi rsi rdx))
         (tmp.18 (tmp.223 tmp.403 tmp.19 ra.402 rbp rdx))
         (rsi (c.116 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.402 rbp))
         (tmp.19 (tmp.223 tmp.403 tmp.18 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.18 tmp.19))
         (tmp.223 (tmp.19 tmp.18 ra.402 rbp))))
       (assignment
        ((ra.402 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.223 r9)
         (c.116 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.<=.54.26
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.20 ra.404 rbp)
         (tmp.21 tmp.20 ra.404 rbp)
         (tmp.405 tmp.21 tmp.20 ra.404 rbp)
         (tmp.230 tmp.21 tmp.20 ra.404 rbp)
         ((tmp.21 tmp.20 ra.404 rbp)
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.20 ra.404 rbp))
         (rbp (tmp.230 tmp.405 tmp.21 tmp.20 c.115 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.230 tmp.405 tmp.21 tmp.20 c.115 rbp rdi rsi rdx))
         (tmp.20 (tmp.230 tmp.405 tmp.21 ra.404 rbp rdx))
         (rsi (c.115 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.404 rbp))
         (tmp.21 (tmp.230 tmp.405 tmp.20 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.20 tmp.21))
         (tmp.230 (tmp.21 tmp.20 ra.404 rbp))))
       (assignment
        ((ra.404 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.230 r9)
         (c.115 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>.55.25
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.22 ra.406 rbp)
         (tmp.23 tmp.22 ra.406 rbp)
         (tmp.407 tmp.23 tmp.22 ra.406 rbp)
         (tmp.237 tmp.23 tmp.22 ra.406 rbp)
         ((tmp.23 tmp.22 ra.406 rbp)
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.114 r15 rdi rsi tmp.22 ra.406 rbp))
         (rbp (tmp.237 tmp.407 tmp.23 tmp.22 c.114 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.237 tmp.407 tmp.23 tmp.22 c.114 rbp rdi rsi rdx))
         (tmp.22 (tmp.237 tmp.407 tmp.23 ra.406 rbp rdx))
         (rsi (c.114 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (rsi rdx ra.406 rbp))
         (tmp.23 (tmp.237 tmp.407 tmp.22 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.22 tmp.23))
         (tmp.237 (tmp.23 tmp.22 ra.406 rbp))))
       (assignment
        ((ra.406 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.237 r9)
         (c.114 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.>=.56.24
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.24 ra.408 rbp)
         (tmp.25 tmp.24 ra.408 rbp)
         (tmp.409 tmp.25 tmp.24 ra.408 rbp)
         (tmp.244 tmp.25 tmp.24 ra.408 rbp)
         ((tmp.25 tmp.24 ra.408 rbp)
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.113 r15 rdi rsi tmp.24 ra.408 rbp))
         (rbp (tmp.244 tmp.409 tmp.25 tmp.24 c.113 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.244 tmp.409 tmp.25 tmp.24 c.113 rbp rdi rsi rdx))
         (tmp.24 (tmp.244 tmp.409 tmp.25 ra.408 rbp rdx))
         (rsi (c.113 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.113 (rsi rdx ra.408 rbp))
         (tmp.25 (tmp.244 tmp.409 tmp.24 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.24 tmp.25))
         (tmp.244 (tmp.25 tmp.24 ra.408 rbp))))
       (assignment
        ((ra.408 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.244 r9)
         (c.113 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.57.23
      ((locals ())
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.112 ra.410 rbp)
         (c.112 tmp.26 ra.410 rbp)
         (tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.247 tmp.26 make-init-vector.1 ra.410 rbp)
         ((tmp.26 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.247
           tmp.411
           make-init-vector.1
           tmp.26
           c.112
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.247 tmp.411 make-init-vector.1 tmp.26 c.112 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.247 tmp.411 rbp ra.410 tmp.26 rdx))
         (rsi (c.112 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.112 (tmp.26 rsi ra.410 rbp))
         (tmp.26 (tmp.247 tmp.411 make-init-vector.1 c.112 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.26))
         (tmp.247 (tmp.26 make-init-vector.1 ra.410 rbp))))
       (assignment
        ((ra.410 r15)
         (tmp.26 r14)
         (make-init-vector.1 r13)
         (tmp.247 r9)
         (c.112 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.58.22
      ((locals ())
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.27 ra.412 rbp)
         (tmp.413 tmp.27 ra.412 rbp)
         (tmp.250 tmp.27 ra.412 rbp)
         ((tmp.27 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.111 r15 rdi ra.412 rbp))
         (rbp (tmp.250 tmp.413 tmp.27 c.111 ra.412 r15 rdi rsi))
         (ra.412 (tmp.250 tmp.413 tmp.27 c.111 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.111 (rsi ra.412 rbp))
         (tmp.27 (tmp.250 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.27))
         (tmp.250 (tmp.27 ra.412 rbp))))
       (assignment
        ((ra.412 r15) (tmp.27 r14) (tmp.250 r13) (c.111 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi)))))
    (define L.vector-set!.59.21
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.110 ra.414 rbp)
         (rdx rcx c.110 tmp.28 ra.414 rbp)
         (rcx c.110 tmp.29 tmp.28 ra.414 rbp)
         (c.110 tmp.29 tmp.30 tmp.28 ra.414 rbp)
         (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.415 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.256 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         ((tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp))
         (rbp
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.28
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           c.110
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.256 tmp.415 rbp ra.414 tmp.28 tmp.30 tmp.29 rcx r8))
         (tmp.30
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           c.110
           tmp.29
           tmp.28
           ra.414
           rbp
           r8))
         (rcx
          (tmp.29
           c.110
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.28
           ra.414
           r8
           rbp))
         (rdx (c.110 r15 rdi rsi tmp.28 ra.414 rcx r8 rbp))
         (rsi (c.110 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.110 (tmp.30 tmp.29 tmp.28 rsi rdx rcx ra.414 rbp))
         (tmp.29
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           rcx
           c.110
           tmp.28
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29))
         (tmp.256 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp))))
       (assignment
        ((ra.414 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.30 r9)
         (unsafe-vector-set!.2 rdi)
         (c.110 r8)
         (tmp.256 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.60.20
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.109 ra.416 rbp)
         (rdx c.109 tmp.31 ra.416 rbp)
         (c.109 tmp.32 tmp.31 ra.416 rbp)
         (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.417 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.262 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         ((tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.31 ra.416 rbp))
         (rbp
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.31
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           c.109
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.262 tmp.417 rbp ra.416 tmp.31 tmp.32 rcx))
         (rdx (c.109 r15 rdi rsi tmp.31 ra.416 rcx rbp))
         (rsi (c.109 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.109 (tmp.32 tmp.31 rsi rdx ra.416 rbp))
         (tmp.32 (tmp.262 tmp.417 unsafe-vector-ref.3 c.109 tmp.31 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.31 unsafe-vector-ref.3 tmp.32))
         (tmp.262 (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp))))
       (assignment
        ((ra.416 r15)
         (tmp.31 r14)
         (tmp.32 r13)
         (unsafe-vector-ref.3 r9)
         (c.109 r9)
         (tmp.262 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.61.19
      ((locals ())
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.33 ra.418 rbp)
         (tmp.419 tmp.33 ra.418 rbp)
         (tmp.265 tmp.33 ra.418 rbp)
         ((tmp.33 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.108 r15 rdi ra.418 rbp))
         (rbp (tmp.265 tmp.419 tmp.33 c.108 ra.418 r15 rdi rsi))
         (ra.418 (tmp.265 tmp.419 tmp.33 c.108 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.418 rbp))
         (tmp.33 (tmp.265 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.33))
         (tmp.265 (tmp.33 ra.418 rbp))))
       (assignment
        ((ra.418 r15) (tmp.33 r14) (tmp.265 r13) (c.108 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi)))))
    (define L.cdr.62.18
      ((locals ())
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.34 ra.420 rbp)
         (tmp.421 tmp.34 ra.420 rbp)
         (tmp.268 tmp.34 ra.420 rbp)
         ((tmp.34 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.107 r15 rdi ra.420 rbp))
         (rbp (tmp.268 tmp.421 tmp.34 c.107 ra.420 r15 rdi rsi))
         (ra.420 (tmp.268 tmp.421 tmp.34 c.107 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.107 (rsi ra.420 rbp))
         (tmp.34 (tmp.268 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.34))
         (tmp.268 (tmp.34 ra.420 rbp))))
       (assignment
        ((ra.420 r15) (tmp.34 r14) (tmp.268 r13) (c.107 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi)))))
    (define L.procedure-arity.63.17
      ((locals ())
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.35 ra.422 rbp)
         (tmp.423 tmp.35 ra.422 rbp)
         (tmp.271 tmp.35 ra.422 rbp)
         ((tmp.35 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.106 r15 rdi ra.422 rbp))
         (rbp (tmp.271 tmp.423 tmp.35 c.106 ra.422 r15 rdi rsi))
         (ra.422 (tmp.271 tmp.423 tmp.35 c.106 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.106 (rsi ra.422 rbp))
         (tmp.35 (tmp.271 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.35))
         (tmp.271 (tmp.35 ra.422 rbp))))
       (assignment
        ((ra.422 r15) (tmp.35 r14) (tmp.271 r13) (c.106 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi)))))
    (define L.fixnum?.64.16
      ((locals ())
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.36 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.273 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.273 tmp.425 tmp.36 c.105 ra.424 rax))
         (ra.424 (tmp.273 tmp.425 tmp.36 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.424))
         (rdi (ra.424))
         (c.105 (rsi ra.424 rbp))
         (tmp.36 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.273 (ra.424 rbp))))
       (assignment
        ((ra.424 r15) (c.105 r14) (tmp.273 r14) (tmp.36 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.65.15
      ((locals ())
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.37 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.275 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.275 tmp.427 tmp.37 c.104 ra.426 rax))
         (ra.426 (tmp.275 tmp.427 tmp.37 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.426))
         (rdi (ra.426))
         (c.104 (rsi ra.426 rbp))
         (tmp.37 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.275 (ra.426 rbp))))
       (assignment
        ((ra.426 r15) (c.104 r14) (tmp.275 r14) (tmp.37 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.66.14
      ((locals ())
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.38 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.277 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.277 tmp.429 tmp.38 c.103 ra.428 rax))
         (ra.428 (tmp.277 tmp.429 tmp.38 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.428))
         (rdi (ra.428))
         (c.103 (rsi ra.428 rbp))
         (tmp.38 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.277 (ra.428 rbp))))
       (assignment
        ((ra.428 r15) (c.103 r14) (tmp.277 r14) (tmp.38 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.67.13
      ((locals ())
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.39 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.279 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.279 tmp.431 tmp.39 c.102 ra.430 rax))
         (ra.430 (tmp.279 tmp.431 tmp.39 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.430))
         (rdi (ra.430))
         (c.102 (rsi ra.430 rbp))
         (tmp.39 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.279 (ra.430 rbp))))
       (assignment
        ((ra.430 r15) (c.102 r14) (tmp.279 r14) (tmp.39 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.68.12
      ((locals ())
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.40 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.281 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.281 tmp.433 tmp.40 c.101 ra.432 rax))
         (ra.432 (tmp.281 tmp.433 tmp.40 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.432))
         (rdi (ra.432))
         (c.101 (rsi ra.432 rbp))
         (tmp.40 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.281 (ra.432 rbp))))
       (assignment
        ((ra.432 r15) (c.101 r14) (tmp.281 r14) (tmp.40 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.69.11
      ((locals ())
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.41 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.283 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.283 tmp.435 tmp.41 c.100 ra.434 rax))
         (ra.434 (tmp.283 tmp.435 tmp.41 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.434))
         (rdi (ra.434))
         (c.100 (rsi ra.434 rbp))
         (tmp.41 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.283 (ra.434 rbp))))
       (assignment
        ((ra.434 r15) (c.100 r14) (tmp.283 r14) (tmp.41 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.70.10
      ((locals ())
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.42 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.285 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.285 tmp.437 tmp.42 c.99 ra.436 rax))
         (ra.436 (tmp.285 tmp.437 tmp.42 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.436))
         (rdi (ra.436))
         (c.99 (rsi ra.436 rbp))
         (tmp.42 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.285 (ra.436 rbp))))
       (assignment
        ((ra.436 r15) (c.99 r14) (tmp.285 r14) (tmp.42 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.71.9
      ((locals ())
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.43 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.287 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.287 tmp.439 tmp.43 c.98 ra.438 rax))
         (ra.438 (tmp.287 tmp.439 tmp.43 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.438))
         (rdi (ra.438))
         (c.98 (rsi ra.438 rbp))
         (tmp.43 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.287 (ra.438 rbp))))
       (assignment
        ((ra.438 r15) (c.98 r14) (tmp.287 r14) (tmp.43 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.72.8
      ((locals ())
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.44 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.289 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.289 tmp.441 tmp.44 c.97 ra.440 rax))
         (ra.440 (tmp.289 tmp.441 tmp.44 c.97 rdi rsi rbp rax))
         (rsi (c.97 ra.440))
         (rdi (ra.440))
         (c.97 (rsi ra.440 rbp))
         (tmp.44 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.289 (ra.440 rbp))))
       (assignment
        ((ra.440 r15) (c.97 r14) (tmp.289 r14) (tmp.44 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.73.7
      ((locals ())
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.45 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.45 c.96 ra.442 rax))
         (ra.442 (tmp.45 c.96 rdi rsi rbp rax))
         (rsi (c.96 ra.442))
         (rdi (ra.442))
         (c.96 (rsi ra.442 rbp))
         (tmp.45 (ra.442 rbp))))
       (assignment ((ra.442 r15) (c.96 r14) (tmp.45 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.74.6
      ((locals ())
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.46)
         (r12 tmp.47 ra.443 rbp tmp.46)
         (r12 tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.444 tmp.47 ra.443 rbp tmp.46)
         (tmp.47 ra.443 rbp tmp.46 tmp.150)
         (rbp ra.443 tmp.47 tmp.150)
         (tmp.150 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.443
          (rax tmp.150 tmp.444 tmp.291 tmp.47 tmp.46 c.95 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.150 tmp.444 r12 tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (r12 (rbp tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (rdx (tmp.46 c.95 ra.443))
         (rsi (c.95 ra.443))
         (rdi (ra.443))
         (c.95 (rsi rdx r12 ra.443 rbp))
         (tmp.46 (tmp.150 tmp.444 tmp.291 tmp.47 rdx r12 ra.443 rbp))
         (tmp.47 (tmp.150 tmp.444 tmp.291 r12 ra.443 rbp tmp.46))
         (tmp.291 (r12 tmp.47 ra.443 rbp tmp.46))
         (tmp.444 (tmp.46 rbp ra.443 tmp.47))
         (tmp.150 (tmp.47 ra.443 rbp tmp.46))
         (rax (ra.443 rbp))))
       (assignment
        ((ra.443 r15)
         (tmp.46 r14)
         (tmp.47 r13)
         (c.95 r14)
         (tmp.291 r9)
         (tmp.444 r9)
         (tmp.150 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443 rbp rax)))
    (define L.eq?.75.5
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.48 ra.445 rbp)
         (tmp.48 tmp.49 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.49 tmp.48 c.94 ra.445 rax))
         (ra.445 (tmp.49 tmp.48 c.94 rdi rsi rdx rbp rax))
         (rdx (tmp.48 c.94 ra.445))
         (rsi (c.94 ra.445))
         (rdi (ra.445))
         (c.94 (rsi rdx ra.445 rbp))
         (tmp.48 (tmp.49 rdx ra.445 rbp))
         (tmp.49 (tmp.48 ra.445 rbp))))
       (assignment ((ra.445 r15) (tmp.48 r14) (c.94 r14) (tmp.49 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((locals ())
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.93 r12 rbp ra.446)
         (c.93 r12 rbp ra.446 tmp.76)
         (r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.447 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.449 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.294 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.450 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.295 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.451 rbp ra.446 vector-init-loop.78 tmp.76)
         (rbp ra.446 vector-init-loop.78 tmp.76 tmp.151)
         (tmp.151 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.76 vector-init-loop.78 ra.446 rcx rbp)
         (tmp.76 vector-init-loop.78 ra.446 rdx rcx rbp)
         (vector-init-loop.78 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           r12
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (r12
          (rbp
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (rsi (r15 rdi vector-init-loop.78 rdx rcx rbp c.93 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.93 (tmp.76 rsi r12 rbp ra.446))
         (tmp.76
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           c.93
           r12
           rbp
           ra.446))
         (vector-init-loop.78
          (rsi
           rdx
           rcx
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           tmp.76
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.293 (tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.448 (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.449 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.294 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.450 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.295 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.540 (tmp.296 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.296 (r12 tmp.540 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.451 (tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.151 (rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.77 (tmp.124 tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.124 (tmp.77 tmp.76 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.76 vector-init-loop.78 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.76 vector-init-loop.78 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment
        ((ra.446 r15)
         (tmp.76 r14)
         (vector-init-loop.78 r13)
         (tmp.293 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.296 r8)
         (c.93 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.294 r9)
         (tmp.450 r9)
         (tmp.295 r9)
         (tmp.77 r9)
         (tmp.451 r9)
         (tmp.151 r9)
         (tmp.124 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.540 tmp.295)
        (set! tmp.296 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.78.3
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.92 ra.452 rbp)
         (rdx rcx c.92 len.79 ra.452 rbp)
         (rcx c.92 len.79 i.81 ra.452 rbp)
         (c.92 vec.80 len.79 i.81 ra.452 rbp)
         (vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
         ((vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.78 len.79 i.81 ra.452 rbp))
         (rbp
          (vector-init-loop.78
           vec.80
           i.81
           len.79
           c.92
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.78 vec.80 i.81 len.79 c.92 rbp rdi rsi rdx rcx r8))
         (i.81 (vector-init-loop.78 vec.80 c.92 len.79 ra.452 rbp rdx rcx r8))
         (len.79 (vector-init-loop.78 vec.80 i.81 rdx c.92 ra.452 rbp rcx r8))
         (vector-init-loop.78 (rbp ra.452 i.81 len.79 vec.80 r8))
         (rcx (c.92 r15 rdi rsi rdx len.79 i.81 ra.452 r8 rbp))
         (rdx (len.79 c.92 r15 rdi rsi i.81 ra.452 rcx r8 rbp))
         (rsi (c.92 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.92 (vec.80 i.81 len.79 rsi rdx rcx ra.452 rbp))
         (vec.80 (vector-init-loop.78 c.92 len.79 i.81 ra.452 rbp))))
       (assignment
        ((ra.452 r15)
         (len.79 r14)
         (i.81 r13)
         (c.92 r9)
         (vec.80 r8)
         (vector-init-loop.78 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.87 ra.453 rbp)
         (rcx tmp.87 tmp.88 ra.453 rbp)
         (tmp.87 tmp.89 tmp.88 ra.453 rbp)
         (tmp.310 tmp.87 tmp.89 tmp.88 ra.453 rbp)
         ((tmp.87 tmp.89 tmp.88 ra.453 rbp)
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (tmp.87 c.91 r15 rdi rsi rdx tmp.89 tmp.88 ra.453 rbp))
         (rbp (tmp.310 tmp.89 tmp.88 tmp.87 c.91 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.310 tmp.89 tmp.88 tmp.87 c.91 rbp rdi rsi rdx rcx))
         (tmp.88 (tmp.310 tmp.89 tmp.87 ra.453 rbp rdx rcx))
         (tmp.89 (tmp.310 tmp.87 tmp.88 ra.453 rbp rcx))
         (rdx (tmp.87 c.91 r15 rdi rsi tmp.88 ra.453 rcx rbp))
         (rsi (c.91 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.91 (rsi rdx rcx ra.453 rbp))
         (tmp.87 (tmp.310 tmp.89 tmp.88 rdx rcx ra.453 rbp))
         (tmp.310 (rbp ra.453 tmp.88 tmp.89 tmp.87))))
       (assignment
        ((ra.453 r15)
         (tmp.87 r14)
         (tmp.88 r13)
         (tmp.89 r9)
         (tmp.310 r8)
         (c.91 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.84 ra.454 rbp)
         (tmp.84 tmp.85 ra.454 rbp)
         (tmp.318 tmp.84 tmp.85 ra.454 rbp)
         ((tmp.84 tmp.85 ra.454 rbp)
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (tmp.84 c.90 r15 rdi rsi tmp.85 ra.454 rbp))
         (rbp (tmp.318 tmp.85 tmp.84 c.90 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.318 tmp.85 tmp.84 c.90 rbp rdi rsi rdx))
         (tmp.85 (tmp.318 tmp.84 ra.454 rbp rdx))
         (rsi (c.90 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.90 (rsi rdx ra.454 rbp))
         (tmp.84 (tmp.318 tmp.85 rdx ra.454 rbp))
         (tmp.318 (rbp ra.454 tmp.85 tmp.84))))
       (assignment
        ((ra.454 r15) (tmp.84 r14) (tmp.85 r13) (tmp.318 r9) (c.90 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi)))))
    (define L.jp.107
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.312 ra.455 rbp)
         (rdx tmp.312 tmp.85 ra.455 rbp)
         (tmp.312 tmp.84 tmp.85 ra.455 rbp)
         ((tmp.84 tmp.85 ra.455 rbp)
          ((tmp.84 tmp.85 ra.455 rbp)
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.84 tmp.85 tmp.312 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.84 tmp.85 tmp.312 rbp rdi rsi rdx rax))
         (rdx (tmp.312 r15 rdi rsi tmp.85 ra.455 rbp))
         (tmp.85 (tmp.84 tmp.312 ra.455 rbp rdx))
         (rsi (tmp.312 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.312 (tmp.84 tmp.85 rsi rdx ra.455 rbp))
         (tmp.84 (tmp.312 tmp.85 ra.455 rbp))))
       (assignment ((ra.455 r15) (tmp.312 r14) (tmp.85 r13) (tmp.84 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.106
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.314 ra.456 rbp)
         (rdx tmp.314 tmp.85 ra.456 rbp)
         (tmp.314 tmp.85 tmp.84 ra.456 rbp)
         ((tmp.85 tmp.84 ra.456 rbp)
          ((tmp.457 tmp.84 ra.456 rbp)
           (tmp.315 tmp.84 ra.456 rbp)
           (tmp.458 tmp.84 ra.456 rbp)
           (tmp.316 tmp.84 ra.456 rbp)
           (tmp.459 tmp.84 ra.456 rbp)
           (tmp.317 tmp.84 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.84
           tmp.85
           tmp.314
           ra.456
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (ra.456
          (tmp.84
           tmp.85
           tmp.314
           rdi
           rsi
           rdx
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.84))
         (tmp.84
          (tmp.314
           tmp.85
           ra.456
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457))
         (tmp.315 (tmp.84 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.84))
         (tmp.316 (tmp.84 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.84))
         (tmp.317 (tmp.84 ra.456 rbp))
         (rdx (tmp.85 tmp.314 ra.456))
         (rsi (tmp.314 ra.456))
         (rdi (ra.456))
         (tmp.314 (tmp.84 tmp.85 rsi rdx ra.456 rbp))
         (tmp.85 (tmp.84 rdx tmp.314 ra.456 rbp))))
       (assignment
        ((ra.456 r15)
         (tmp.84 r14)
         (tmp.314 r13)
         (tmp.85 r9)
         (tmp.457 r13)
         (tmp.315 r13)
         (tmp.458 r13)
         (tmp.316 r13)
         (tmp.459 r13)
         (tmp.317 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.103
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.304 ra.460 rbp)
         (rdx rcx tmp.304 tmp.88 ra.460 rbp)
         (rcx tmp.304 tmp.89 tmp.88 ra.460 rbp)
         (tmp.304 tmp.89 tmp.87 tmp.88 ra.460 rbp)
         ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
          ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.87 tmp.89 tmp.88 tmp.304 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.87 tmp.89 tmp.88 tmp.304 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.89 tmp.304 r15 rdi rsi rdx tmp.87 tmp.88 ra.460 rbp))
         (tmp.88 (tmp.87 tmp.89 tmp.304 ra.460 rbp rdx rcx))
         (tmp.87 (tmp.304 tmp.89 tmp.88 ra.460 rbp rcx))
         (rdx (tmp.304 r15 rdi rsi tmp.88 ra.460 rcx rbp))
         (rsi (tmp.304 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.304 (tmp.87 tmp.89 tmp.88 rsi rdx rcx ra.460 rbp))
         (tmp.89 (tmp.87 rcx tmp.304 tmp.88 ra.460 rbp))))
       (assignment
        ((ra.460 r15) (tmp.304 r14) (tmp.88 r13) (tmp.89 r9) (tmp.87 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.102
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.306 rbp ra.461)
         (rdx rcx tmp.306 tmp.88 rbp ra.461)
         (rcx tmp.306 tmp.88 rbp ra.461 tmp.87)
         (tmp.306 tmp.88 rbp ra.461 tmp.89 tmp.87)
         ((tmp.88 rbp ra.461 tmp.89 tmp.87)
          ((tmp.462 rbp ra.461 tmp.89 tmp.87)
           (tmp.307 rbp ra.461 tmp.89 tmp.87)
           (tmp.463 rbp ra.461 tmp.89 tmp.87)
           (tmp.308 rbp ra.461 tmp.89 tmp.87)
           (tmp.464 rbp ra.461 tmp.89 tmp.87)
           (rbp ra.461 tmp.89 tmp.309 tmp.87)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (ra.461
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (tmp.462 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.89
          (tmp.306
           tmp.88
           rbp
           ra.461
           tmp.87
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.87
          (tmp.89
           rcx
           tmp.306
           tmp.88
           rbp
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.307 (rbp ra.461 tmp.89 tmp.87))
         (tmp.463 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.308 (rbp ra.461 tmp.89 tmp.87))
         (tmp.464 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.309 (rbp ra.461 tmp.89 tmp.87))
         (rcx (tmp.87 tmp.88 tmp.306 ra.461))
         (rdx (tmp.88 tmp.306 ra.461))
         (rsi (tmp.306 ra.461))
         (rdi (ra.461))
         (tmp.306 (tmp.89 tmp.87 tmp.88 rsi rdx rcx rbp ra.461))
         (tmp.88 (tmp.89 tmp.87 rdx rcx tmp.306 rbp ra.461))))
       (assignment
        ((ra.461 r15)
         (tmp.87 r14)
         (tmp.89 r13)
         (tmp.306 r9)
         (tmp.88 r8)
         (tmp.462 r9)
         (tmp.307 r9)
         (tmp.463 r9)
         (tmp.308 r9)
         (tmp.464 r9)
         (tmp.309 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.99
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.298 ra.465 rbp)
         (rdx rcx r8 tmp.298 i.81 ra.465 rbp)
         (rcx r8 tmp.298 i.81 len.79 ra.465 rbp)
         (r8 tmp.298 i.81 len.79 vector-init-loop.78 ra.465 rbp)
         (tmp.298 i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
         ((i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.299 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.467 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.300 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.468 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (rbp ra.465 vector-init-loop.78 len.79 i.81 tmp.301 vec.80)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.469 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (vec.80 tmp.302 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.302 len.79 vector-init-loop.78 ra.465 rcx rbp)
           (len.79 vector-init-loop.78 ra.465 rdx rcx rbp)
           (vector-init-loop.78 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((tmp.466 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (rbp
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (ra.465
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vector-init-loop.78
          (vec.80
           r8
           tmp.298
           i.81
           len.79
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (len.79
          (vec.80
           vector-init-loop.78
           r8
           tmp.298
           i.81
           ra.465
           rbp
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (i.81
          (vec.80
           vector-init-loop.78
           len.79
           rdx
           rcx
           r8
           tmp.298
           ra.465
           rbp
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vec.80
          (tmp.298
           i.81
           len.79
           vector-init-loop.78
           ra.465
           rbp
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (tmp.299 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.467 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.300 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.468 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.301 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.123 (i.81 vec.80 len.79 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.78 len.79 vec.80))
         (tmp.302 (rcx vec.80 len.79 vector-init-loop.78 ra.465 rbp))
         (rcx
          (i.81
           tmp.298
           r15
           rdi
           rsi
           rdx
           tmp.302
           len.79
           vector-init-loop.78
           ra.465
           rbp))
         (rdx
          (i.81 tmp.298 r15 rdi rsi len.79 vector-init-loop.78 ra.465 rcx rbp))
         (rsi (tmp.298 r15 rdi vector-init-loop.78 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.78 len.79 i.81 tmp.298 ra.465))
         (tmp.298
          (vec.80 vector-init-loop.78 len.79 i.81 rsi rdx rcx r8 ra.465 rbp))))
       (assignment
        ((ra.465 r15)
         (len.79 r14)
         (vector-init-loop.78 r13)
         (i.81 r9)
         (vec.80 r8)
         (tmp.298 rdi)
         (tmp.302 r9)
         (tmp.301 rdi)
         (tmp.468 rdi)
         (tmp.300 rdi)
         (tmp.467 rdi)
         (tmp.299 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.123 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.86
      ((locals ())
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.270 ra.470 rbp)
         (tmp.270 tmp.35 ra.470 rbp)
         ((tmp.35 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.35 tmp.270 ra.470 rax))
         (ra.470 (tmp.35 tmp.270 rdi rsi rbp rax))
         (rsi (tmp.270 ra.470))
         (rdi (ra.470))
         (tmp.270 (tmp.35 rsi ra.470 rbp))
         (tmp.35 (tmp.270 ra.470 rbp))))
       (assignment ((ra.470 r15) (tmp.270 r14) (tmp.35 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.84
      ((locals ())
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.267 ra.471 rbp)
         (tmp.267 tmp.34 ra.471 rbp)
         ((tmp.34 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.34 tmp.267 ra.471 rax))
         (ra.471 (tmp.34 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.471))
         (rdi (ra.471))
         (tmp.267 (tmp.34 rsi ra.471 rbp))
         (tmp.34 (tmp.267 ra.471 rbp))))
       (assignment ((ra.471 r15) (tmp.267 r14) (tmp.34 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.82
      ((locals ())
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.264 ra.472 rbp)
         (tmp.264 tmp.33 ra.472 rbp)
         ((tmp.33 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.33 tmp.264 ra.472 rax))
         (ra.472 (tmp.33 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.472))
         (rdi (ra.472))
         (tmp.264 (tmp.33 rsi ra.472 rbp))
         (tmp.33 (tmp.264 ra.472 rbp))))
       (assignment ((ra.472 r15) (tmp.264 r14) (tmp.33 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.80
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.258 ra.473 rbp)
         (rdx rcx tmp.258 tmp.31 ra.473 rbp)
         (rcx tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.258 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.261 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           ra.473
           tmp.261
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           rbp
           tmp.261
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.31
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.32 tmp.258 tmp.31 ra.473 rbp tmp.261 tmp.474 rdx rcx))
         (tmp.32
          (tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp tmp.261 tmp.474 rcx))
         (rdx (tmp.31 tmp.258 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.258 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.32 tmp.31))
         (tmp.31
          (tmp.32
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.258
           ra.473
           rbp
           tmp.261
           tmp.474))
         (tmp.261 (tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.258 (tmp.32 unsafe-vector-ref.3 tmp.31 rsi rdx rcx ra.473 rbp))))
       (assignment
        ((ra.473 r15)
         (tmp.31 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.32 r9)
         (tmp.258 r8)
         (tmp.261 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.79
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.260 ra.475 rbp)
         (rdx rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.260 tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.31 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (ra.475
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (tmp.125 (tmp.32 tmp.31 ra.475 rbp))
         (tmp.31 (tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp rdx tmp.125))
         (tmp.32 (tmp.31 rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp tmp.125))
         (rdx (tmp.260 r15 rdi rsi tmp.31 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.31 tmp.32 rcx tmp.260 ra.475 rbp rsi rdx))
         (rsi (tmp.260 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.32 unsafe-vector-ref.3 tmp.260 ra.475))
         (tmp.260 (tmp.31 tmp.32 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp))))
       (assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.260 r13)
         (tmp.32 r9)
         (tmp.31 r8)
         (tmp.125 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.76
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.252 ra.476 rbp)
         (rdx rcx r8 tmp.252 tmp.28 ra.476 rbp)
         (rcx r8 tmp.252 tmp.28 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.252 tmp.28 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.252 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.255 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           ra.476
           tmp.255
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           rbp
           tmp.255
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.29 tmp.30 tmp.252 tmp.28 ra.476 rbp tmp.255 tmp.477 rdx rcx r8))
         (tmp.30
          (tmp.29
           tmp.252
           tmp.28
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           rcx
           r8))
         (tmp.29
          (tmp.252
           tmp.28
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           r8))
         (rcx
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           tmp.30
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.28 tmp.252 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.252 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28))
         (tmp.28
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.252
           ra.476
           rbp
           tmp.255
           tmp.477))
         (tmp.255 (tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.252
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp))))
       (assignment
        ((ra.476 r15)
         (tmp.28 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.30 r9)
         (tmp.252 rdi)
         (tmp.29 rsi)
         (tmp.255 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.75
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.254 ra.478 rbp)
         (rdx rcx r8 tmp.254 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.254 tmp.30 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.254 tmp.30 tmp.29 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.254 tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.28 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (ra.478
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (tmp.126 (tmp.30 tmp.29 tmp.28 ra.478 rbp))
         (tmp.28
          (tmp.254
           tmp.30
           tmp.29
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.126))
         (tmp.29
          (tmp.28
           r8
           tmp.254
           tmp.30
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.126))
         (tmp.30
          (tmp.28
           tmp.29
           rcx
           r8
           tmp.254
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.126))
         (rcx
          (tmp.30
           tmp.254
           r15
           rdi
           rsi
           rdx
           tmp.29
           tmp.28
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.28 tmp.29 tmp.30 r8 tmp.254 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.254 r15 rdi rsi tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.254 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.254 ra.478))
         (tmp.254
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp))))
       (assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.254 r13)
         (tmp.30 r9)
         (tmp.29 rdi)
         (tmp.28 r8)
         (tmp.126 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.72
      ((locals ())
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.249 ra.479 rbp)
         (tmp.249 tmp.27 ra.479 rbp)
         ((tmp.27 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.27 tmp.249 ra.479 rax))
         (ra.479 (tmp.27 tmp.249 rdi rsi rbp rax))
         (rsi (tmp.249 ra.479))
         (rdi (ra.479))
         (tmp.249 (tmp.27 rsi ra.479 rbp))
         (tmp.27 (tmp.249 ra.479 rbp))))
       (assignment ((ra.479 r15) (tmp.249 r14) (tmp.27 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.70
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.246 ra.480 rbp)
         (rdx tmp.246 make-init-vector.1 ra.480 rbp)
         (tmp.246 tmp.26 make-init-vector.1 ra.480 rbp)
         ((tmp.26 make-init-vector.1 ra.480 rbp)
          ((tmp.26 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.26 make-init-vector.1 tmp.246 ra.480 r15 rdi rsi tmp.127 rax))
         (ra.480
          (tmp.26 make-init-vector.1 tmp.246 rdx rbp rdi rsi tmp.127 rax))
         (tmp.127 (tmp.26 ra.480 rbp))
         (tmp.26 (tmp.246 make-init-vector.1 ra.480 rbp tmp.127))
         (rsi (tmp.246 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.26 rdx tmp.246 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.246 ra.480))
         (tmp.246 (tmp.26 make-init-vector.1 rsi rdx ra.480 rbp))))
       (assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.246 r13)
         (tmp.26 r9)
         (tmp.127 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.68
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.239 ra.481 rbp)
         (rdx tmp.239 tmp.24 ra.481 rbp)
         (tmp.239 tmp.25 tmp.24 ra.481 rbp)
         ((tmp.25 tmp.24 ra.481 rbp)
          ((tmp.482 tmp.25 tmp.24 ra.481 rbp)
           (tmp.243 tmp.25 tmp.24 ra.481 rbp)
           ((tmp.25 tmp.24 ra.481 rbp)
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.239 ra.481 tmp.243 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.25 tmp.24 tmp.239 rbp tmp.243 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.239 r15 rdi rsi tmp.24 ra.481 rbp))
         (tmp.24 (tmp.25 tmp.239 ra.481 rbp tmp.243 tmp.482 rdx))
         (rsi (tmp.239 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.24 tmp.25))
         (tmp.25 (tmp.239 tmp.24 ra.481 rbp tmp.243 tmp.482))
         (tmp.243 (tmp.25 tmp.24 ra.481 rbp))
         (tmp.239 (tmp.25 tmp.24 rsi rdx ra.481 rbp))))
       (assignment
        ((ra.481 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.239 r9)
         (tmp.243 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.67
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.241 ra.483 rbp)
         (rdx tmp.241 tmp.24 ra.483 rbp)
         (tmp.241 tmp.24 tmp.25 ra.483 rbp)
         ((tmp.24 tmp.25 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.25 tmp.24 tmp.241 ra.483 rax))
         (ra.483 (tmp.25 tmp.24 tmp.241 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.241 ra.483))
         (rsi (tmp.241 ra.483))
         (rdi (ra.483))
         (tmp.241 (tmp.25 tmp.24 rsi rdx ra.483 rbp))
         (tmp.24 (tmp.25 rdx tmp.241 ra.483 rbp))
         (tmp.25 (tmp.241 tmp.24 ra.483 rbp))))
       (assignment ((ra.483 r15) (tmp.241 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.63
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.232 ra.484 rbp)
         (rdx tmp.232 tmp.22 ra.484 rbp)
         (tmp.232 tmp.23 tmp.22 ra.484 rbp)
         ((tmp.23 tmp.22 ra.484 rbp)
          ((tmp.485 tmp.23 tmp.22 ra.484 rbp)
           (tmp.236 tmp.23 tmp.22 ra.484 rbp)
           ((tmp.23 tmp.22 ra.484 rbp)
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.232 ra.484 tmp.236 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.23 tmp.22 tmp.232 rbp tmp.236 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.232 r15 rdi rsi tmp.22 ra.484 rbp))
         (tmp.22 (tmp.23 tmp.232 ra.484 rbp tmp.236 tmp.485 rdx))
         (rsi (tmp.232 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.22 tmp.23))
         (tmp.23 (tmp.232 tmp.22 ra.484 rbp tmp.236 tmp.485))
         (tmp.236 (tmp.23 tmp.22 ra.484 rbp))
         (tmp.232 (tmp.23 tmp.22 rsi rdx ra.484 rbp))))
       (assignment
        ((ra.484 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.232 r9)
         (tmp.236 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.62
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.234 ra.486 rbp)
         (rdx tmp.234 tmp.22 ra.486 rbp)
         (tmp.234 tmp.22 tmp.23 ra.486 rbp)
         ((tmp.22 tmp.23 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.23 tmp.22 tmp.234 ra.486 rax))
         (ra.486 (tmp.23 tmp.22 tmp.234 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.234 ra.486))
         (rsi (tmp.234 ra.486))
         (rdi (ra.486))
         (tmp.234 (tmp.23 tmp.22 rsi rdx ra.486 rbp))
         (tmp.22 (tmp.23 rdx tmp.234 ra.486 rbp))
         (tmp.23 (tmp.234 tmp.22 ra.486 rbp))))
       (assignment ((ra.486 r15) (tmp.234 r14) (tmp.22 r13) (tmp.23 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.58
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.225 ra.487 rbp)
         (rdx tmp.225 tmp.20 ra.487 rbp)
         (tmp.225 tmp.21 tmp.20 ra.487 rbp)
         ((tmp.21 tmp.20 ra.487 rbp)
          ((tmp.488 tmp.21 tmp.20 ra.487 rbp)
           (tmp.229 tmp.21 tmp.20 ra.487 rbp)
           ((tmp.21 tmp.20 ra.487 rbp)
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.225 ra.487 tmp.229 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.21 tmp.20 tmp.225 rbp tmp.229 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.225 r15 rdi rsi tmp.20 ra.487 rbp))
         (tmp.20 (tmp.21 tmp.225 ra.487 rbp tmp.229 tmp.488 rdx))
         (rsi (tmp.225 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.20 tmp.21))
         (tmp.21 (tmp.225 tmp.20 ra.487 rbp tmp.229 tmp.488))
         (tmp.229 (tmp.21 tmp.20 ra.487 rbp))
         (tmp.225 (tmp.21 tmp.20 rsi rdx ra.487 rbp))))
       (assignment
        ((ra.487 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.225 r9)
         (tmp.229 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.57
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.227 ra.489 rbp)
         (rdx tmp.227 tmp.20 ra.489 rbp)
         (tmp.227 tmp.20 tmp.21 ra.489 rbp)
         ((tmp.20 tmp.21 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.21 tmp.20 tmp.227 ra.489 rax))
         (ra.489 (tmp.21 tmp.20 tmp.227 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.227 ra.489))
         (rsi (tmp.227 ra.489))
         (rdi (ra.489))
         (tmp.227 (tmp.21 tmp.20 rsi rdx ra.489 rbp))
         (tmp.20 (tmp.21 rdx tmp.227 ra.489 rbp))
         (tmp.21 (tmp.227 tmp.20 ra.489 rbp))))
       (assignment ((ra.489 r15) (tmp.227 r14) (tmp.20 r13) (tmp.21 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.53
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.218 ra.490 rbp)
         (rdx tmp.218 tmp.18 ra.490 rbp)
         (tmp.218 tmp.19 tmp.18 ra.490 rbp)
         ((tmp.19 tmp.18 ra.490 rbp)
          ((tmp.491 tmp.19 tmp.18 ra.490 rbp)
           (tmp.222 tmp.19 tmp.18 ra.490 rbp)
           ((tmp.19 tmp.18 ra.490 rbp)
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.218 ra.490 tmp.222 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.19 tmp.18 tmp.218 rbp tmp.222 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.218 r15 rdi rsi tmp.18 ra.490 rbp))
         (tmp.18 (tmp.19 tmp.218 ra.490 rbp tmp.222 tmp.491 rdx))
         (rsi (tmp.218 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.18 tmp.19))
         (tmp.19 (tmp.218 tmp.18 ra.490 rbp tmp.222 tmp.491))
         (tmp.222 (tmp.19 tmp.18 ra.490 rbp))
         (tmp.218 (tmp.19 tmp.18 rsi rdx ra.490 rbp))))
       (assignment
        ((ra.490 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.218 r9)
         (tmp.222 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.52
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.220 ra.492 rbp)
         (rdx tmp.220 tmp.18 ra.492 rbp)
         (tmp.220 tmp.18 tmp.19 ra.492 rbp)
         ((tmp.18 tmp.19 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.19 tmp.18 tmp.220 ra.492 rax))
         (ra.492 (tmp.19 tmp.18 tmp.220 rdi rsi rdx rbp rax))
         (rdx (tmp.18 tmp.220 ra.492))
         (rsi (tmp.220 ra.492))
         (rdi (ra.492))
         (tmp.220 (tmp.19 tmp.18 rsi rdx ra.492 rbp))
         (tmp.18 (tmp.19 rdx tmp.220 ra.492 rbp))
         (tmp.19 (tmp.220 tmp.18 ra.492 rbp))))
       (assignment ((ra.492 r15) (tmp.220 r14) (tmp.18 r13) (tmp.19 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.48
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.212 ra.493 rbp)
         (rdx tmp.212 tmp.16 ra.493 rbp)
         (tmp.212 tmp.17 tmp.16 ra.493 rbp)
         ((tmp.17 tmp.16 ra.493 rbp)
          ((tmp.494 tmp.17 tmp.16 ra.493 rbp)
           (tmp.215 tmp.17 tmp.16 ra.493 rbp)
           ((tmp.17 tmp.16 ra.493 rbp)
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.212 ra.493 tmp.215 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.17 tmp.16 tmp.212 rbp tmp.215 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.16 ra.493 rbp))
         (tmp.16 (tmp.17 tmp.212 ra.493 rbp tmp.215 tmp.494 rdx))
         (rsi (tmp.212 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.16 tmp.17))
         (tmp.17 (tmp.212 tmp.16 ra.493 rbp tmp.215 tmp.494))
         (tmp.215 (tmp.17 tmp.16 ra.493 rbp))
         (tmp.212 (tmp.17 tmp.16 rsi rdx ra.493 rbp))))
       (assignment
        ((ra.493 r15)
         (tmp.16 r14)
         (tmp.17 r13)
         (tmp.212 r9)
         (tmp.215 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.47
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.214 ra.495 rbp)
         (rdx tmp.214 tmp.16 ra.495 rbp)
         (tmp.214 tmp.17 tmp.16 ra.495 rbp)
         ((tmp.17 tmp.16 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.17 tmp.16 tmp.214 ra.495 tmp.496 rax))
         (ra.495 (tmp.17 tmp.16 tmp.214 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.16 tmp.214 ra.495))
         (rsi (tmp.214 ra.495))
         (rdi (ra.495))
         (tmp.214 (tmp.17 tmp.16 rsi rdx ra.495 rbp))
         (tmp.16 (tmp.17 rdx tmp.214 ra.495 rbp))
         (tmp.17 (tmp.214 tmp.16 ra.495 rbp))))
       (assignment
        ((ra.495 r15) (tmp.214 r14) (tmp.16 r13) (tmp.17 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.44
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.206 ra.497 rbp)
         (rdx tmp.206 tmp.14 ra.497 rbp)
         (tmp.206 tmp.15 tmp.14 ra.497 rbp)
         ((tmp.15 tmp.14 ra.497 rbp)
          ((tmp.498 tmp.15 tmp.14 ra.497 rbp)
           (tmp.209 tmp.15 tmp.14 ra.497 rbp)
           ((tmp.15 tmp.14 ra.497 rbp)
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.206 ra.497 tmp.209 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.15 tmp.14 tmp.206 rbp tmp.209 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.206 r15 rdi rsi tmp.14 ra.497 rbp))
         (tmp.14 (tmp.15 tmp.206 ra.497 rbp tmp.209 tmp.498 rdx))
         (rsi (tmp.206 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.14 tmp.15))
         (tmp.15 (tmp.206 tmp.14 ra.497 rbp tmp.209 tmp.498))
         (tmp.209 (tmp.15 tmp.14 ra.497 rbp))
         (tmp.206 (tmp.15 tmp.14 rsi rdx ra.497 rbp))))
       (assignment
        ((ra.497 r15)
         (tmp.14 r14)
         (tmp.15 r13)
         (tmp.206 r9)
         (tmp.209 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.43
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.208 ra.499 rbp)
         (rdx tmp.208 tmp.14 ra.499 rbp)
         (tmp.208 tmp.15 tmp.14 ra.499 rbp)
         ((tmp.15 tmp.14 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.15 tmp.14 tmp.208 ra.499 tmp.500 rax))
         (ra.499 (tmp.15 tmp.14 tmp.208 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.14 tmp.208 ra.499))
         (rsi (tmp.208 ra.499))
         (rdi (ra.499))
         (tmp.208 (tmp.15 tmp.14 rsi rdx ra.499 rbp))
         (tmp.14 (tmp.15 rdx tmp.208 ra.499 rbp))
         (tmp.15 (tmp.208 tmp.14 ra.499 rbp))))
       (assignment
        ((ra.499 r15) (tmp.208 r14) (tmp.14 r13) (tmp.15 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.40
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.199 ra.501 rbp)
         (rdx tmp.199 tmp.12 ra.501 rbp)
         (tmp.199 tmp.12 tmp.13 ra.501 rbp)
         ((tmp.12 tmp.13 ra.501 rbp)
          ((tmp.502 tmp.12 tmp.13 ra.501 rbp)
           (tmp.203 tmp.12 tmp.13 ra.501 rbp)
           ((tmp.12 tmp.13 ra.501 rbp)
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.13 tmp.12 tmp.199 ra.501 tmp.203 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.13 tmp.12 tmp.199 rbp tmp.203 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.12 tmp.199 r15 rdi rsi tmp.13 ra.501 rbp))
         (tmp.13 (tmp.199 tmp.12 ra.501 rbp tmp.203 tmp.502 rdx))
         (rsi (tmp.199 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.13 tmp.12))
         (tmp.12 (tmp.13 rdx tmp.199 ra.501 rbp tmp.203 tmp.502))
         (tmp.203 (tmp.12 tmp.13 ra.501 rbp))
         (tmp.199 (tmp.13 tmp.12 rsi rdx ra.501 rbp))))
       (assignment
        ((ra.501 r15)
         (tmp.12 r14)
         (tmp.13 r13)
         (tmp.199 r9)
         (tmp.203 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.39
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.201 ra.503 rbp)
         (rdx tmp.201 tmp.13 ra.503 rbp)
         (tmp.201 tmp.13 tmp.12 ra.503 rbp)
         ((tmp.13 tmp.12 ra.503 rbp)
          ((tmp.504 tmp.12 ra.503 rbp)
           (tmp.202 tmp.12 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.12 tmp.13 tmp.201 ra.503 tmp.505 tmp.202 tmp.504 rax))
         (ra.503
          (tmp.12 tmp.13 tmp.201 rdi rsi rdx rbp tmp.505 tmp.202 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.12))
         (tmp.12 (tmp.201 tmp.13 ra.503 rbp tmp.202 tmp.504))
         (tmp.202 (tmp.12 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.13 tmp.201 ra.503))
         (rsi (tmp.201 ra.503))
         (rdi (ra.503))
         (tmp.201 (tmp.12 tmp.13 rsi rdx ra.503 rbp))
         (tmp.13 (tmp.12 rdx tmp.201 ra.503 rbp))))
       (assignment
        ((ra.503 r15)
         (tmp.12 r14)
         (tmp.201 r13)
         (tmp.13 r9)
         (tmp.504 r13)
         (tmp.202 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) '(9 23))

  )

  (parameterize ([current-pass-list
                  (list
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((new-frames ())
       (locals
        (tmp.319
         tmp.360
         tmp.152
         unsafe-vector-ref.3
         tmp.320
         tmp.361
         tmp.153
         unsafe-vector-set!.2
         tmp.321
         tmp.362
         tmp.154
         vector-init-loop.78
         tmp.322
         tmp.363
         tmp.155
         make-init-vector.1
         tmp.323
         tmp.364
         tmp.156
         eq?.75
         tmp.324
         tmp.365
         tmp.157
         tmp.325
         tmp.366
         tmp.158
         not.73
         tmp.326
         tmp.367
         tmp.159
         vector?.72
         tmp.327
         tmp.368
         tmp.160
         procedure?.71
         tmp.328
         tmp.369
         tmp.161
         pair?.70
         tmp.329
         tmp.370
         tmp.162
         error?.69
         tmp.330
         tmp.371
         tmp.163
         ascii-char?.68
         tmp.331
         tmp.372
         tmp.164
         void?.67
         tmp.332
         tmp.373
         tmp.165
         empty?.66
         tmp.333
         tmp.374
         tmp.166
         boolean?.65
         tmp.334
         tmp.375
         tmp.167
         fixnum?.64
         tmp.335
         tmp.376
         tmp.168
         procedure-arity.63
         tmp.336
         tmp.377
         tmp.169
         cdr.62
         tmp.337
         tmp.378
         tmp.170
         car.61
         tmp.338
         tmp.379
         tmp.171
         vector-ref.60
         tmp.339
         tmp.380
         tmp.172
         vector-set!.59
         tmp.340
         tmp.381
         tmp.173
         vector-length.58
         tmp.341
         tmp.382
         tmp.174
         make-vector.57
         tmp.342
         tmp.383
         tmp.175
         >=.56
         tmp.343
         tmp.384
         tmp.176
         >.55
         tmp.344
         tmp.385
         tmp.177
         <=.54
         tmp.345
         tmp.386
         tmp.178
         <.53
         tmp.346
         tmp.387
         tmp.179
         |-.52|
         tmp.347
         tmp.388
         tmp.180
         |+.51|
         tmp.348
         tmp.389
         tmp.181
         *.50
         tmp.349
         tmp.390
         tmp.182
         tmp.350
         tmp.391
         tmp.183
         apply-pred.5
         tmp.351
         tmp.392
         tmp.184
         make-bigger?.6
         tmp.142
         tmp.143
         tmp.144
         tmp.145
         tmp.146
         tmp.147
         tmp.148
         tmp.149
         tmp.353
         tmp.354
         tmp.355
         tmp.356
         tmp.357
         tmp.358))
       (undead-out
        ((r12 ra.359 rbp)
         (r12 tmp.319 ra.359 rbp)
         (tmp.319 r12 ra.359 rbp)
         (tmp.360 r12 ra.359 rbp)
         (r12 ra.359 rbp tmp.152)
         (rbp ra.359 r12 tmp.152)
         (tmp.152 r12 ra.359 rbp)
         (r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.320 ra.359 rbp unsafe-vector-ref.3)
         (tmp.320 r12 ra.359 rbp unsafe-vector-ref.3)
         (tmp.361 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 ra.359 rbp unsafe-vector-ref.3 tmp.153)
         (unsafe-vector-ref.3 rbp ra.359 r12 tmp.153)
         (tmp.153 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.321 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.321 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.362 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3 tmp.154)
         (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12 tmp.154)
         (tmp.154 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.322
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.322
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.363
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.155)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          r12
          tmp.155)
         (tmp.155
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.156)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.157)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.158)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.159)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.160)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.161)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.162)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.163)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.164)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.165)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.166)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.167)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.168)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.169)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.378
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.170)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.379
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.171)
         (vector-init-loop.78
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.380
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.172)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.173)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.174)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.175)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.176)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.177)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.386
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.178)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.387
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.179)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.388
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.180)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.389
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.181)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          tmp.181)
         (tmp.181
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          vector-init-loop.78
          make-init-vector.1)
         (vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60)
         (make-vector.57
          make-init-vector.1
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59)
         (cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 tmp.349 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.349 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.390 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 tmp.182)
         (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12 tmp.182)
         (tmp.182 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 filter.4)
         (r12
          tmp.350
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.350
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.391
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4
          tmp.183)
         (filter.4
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          tmp.183)
         (tmp.183
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (r12
          tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.392
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4
          tmp.184)
         (filter.4
          cdr.62
          cons.74
          apply-pred.5
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          tmp.184)
         (tmp.184
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (cons.74
          apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          cons.74
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (empty?.66
          >.55
          car.61
          rbp
          ra.359
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          car.61
          >.55
          empty?.66
          filter.4)
         (>.55
          car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5)
         (make-bigger?.6
          eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          car.61
          >.55
          apply-pred.5)
         (car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          apply-pred.5)
         (eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          make-bigger?.6
          car.61
          apply-pred.5)
         (make-bigger?.6 rbp ra.359 filter.4 cons.74 eq?.75 apply-pred.5)
         (cons.74 filter.4 ra.359 rbp make-bigger?.6)
         (rbp ra.359 filter.4 cons.74 make-bigger?.6)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         ((rax cons.74 filter.4 ra.359 rbp)
          ((make-bigger?.6 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.353 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.354 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.355 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.356 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (cons.74 tmp.357 tmp.352 filter.4 ra.359 rbp)
         ((rax tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.358 tmp.352 filter.4 ra.359 rbp)
         (tmp.352 filter.4 ra.359 rdx rbp)
         (filter.4 ra.359 rsi rdx rbp)
         (ra.359 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (tmp.352 cons.74 filter.4 ra.359))
       (conflicts
        ((ra.359
          (rdi
           rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           tmp.319
           r12
           rbp))
         (rbp
          (tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rdx
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           r15
           rdi
           rsi
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           r12
           tmp.319
           ra.359))
         (r12
          (tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           rbp
           tmp.319
           ra.359))
         (tmp.319 (r12 ra.359 rbp))
         (tmp.360 (rbp ra.359 r12))
         (tmp.152 (r12 ra.359 rbp))
         (unsafe-vector-ref.3
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           r12
           ra.359
           rbp))
         (tmp.320 (r12 ra.359 rbp unsafe-vector-ref.3))
         (tmp.361 (unsafe-vector-ref.3 rbp ra.359 r12))
         (tmp.153 (r12 ra.359 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           r12
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.321 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (tmp.362 (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12))
         (tmp.154 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (vector-init-loop.78
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.322
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.363
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           r12))
         (tmp.155
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (make-init-vector.1
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.364
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (eq?.75
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.365
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cons.74
          (tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rsi
           rdx
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.366
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (not.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.367
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.368
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.369
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (pair?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.370
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (error?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.371
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (ascii-char?.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.372
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (void?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.373
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (empty?.66
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.374
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (boolean?.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.375
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (fixnum?.64
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.376
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure-arity.63
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.377
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cdr.62
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.378
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (car.61
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.379
          (vector-init-loop.78
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector-ref.60
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.380
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-set!.59
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.381
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-length.58
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.382
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (make-vector.57
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.383
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>=.56
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.384
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>.55
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.385
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<=.54
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.386
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<.53
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.387
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|-.52|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.388
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|+.51|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.389
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1))
         (tmp.181
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (*.50
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.349 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (tmp.390 (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12))
         (tmp.182 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (filter.4
          (rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62))
         (tmp.350
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.391
          (filter.4
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12))
         (tmp.183
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (apply-pred.5
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.351
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.392
          (filter.4
           cdr.62
           cons.74
           apply-pred.5
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61))
         (tmp.184
          (car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (make-bigger?.6
          (rsi
           tmp.142
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.142 (make-bigger?.6 cons.74 ra.359 rbp))
         (tmp.143 (cons.74 filter.4 ra.359 rbp))
         (rax (tmp.352 rbp ra.359 filter.4 cons.74))
         (rsi (filter.4 ra.359 cons.74 rdx r15 rdi make-bigger?.6 rbp))
         (rdi (ra.359 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.352
          (rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rax
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           cons.74
           filter.4
           ra.359
           rbp))
         (tmp.144 (tmp.352 filter.4 ra.359 rbp))
         (tmp.145 (tmp.352 filter.4 ra.359 rbp))
         (tmp.146 (tmp.352 filter.4 ra.359 rbp))
         (tmp.147 (tmp.352 filter.4 ra.359 rbp))
         (tmp.148 (tmp.352 filter.4 ra.359 rbp))
         (tmp.149 (tmp.352 filter.4 ra.359 rbp))
         (rdx (tmp.352 filter.4 ra.359 r15 rdi rsi cons.74 rbp))
         (tmp.353 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.354 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.355 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.356 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.357 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.358 (tmp.352 filter.4 ra.359 rbp))))
       (assignment ((ra.359 fv0) (filter.4 fv1) (cons.74 fv2) (tmp.352 fv3))))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 r12)
        (set! r12 (+ r12 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 r12)
        (set! r12 (+ r12 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 r12)
        (set! r12 (+ r12 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 r12)
        (set! r12 (+ r12 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 r12)
        (set! r12 (+ r12 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33 rbp r15 rsi rdi)))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.353 rax)
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.354 rax)
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.355 rax)
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.356 rax)
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.357 rax)
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
    (define L.make-bigger?.6.33
      ((new-frames ())
       (locals (ra.393 c.122 threshold.11 make-bigger?.6 cons.74 tmp.141))
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi c.122 ra.393 rbp)
         (c.122 threshold.11 ra.393 rbp)
         (c.122 threshold.11 make-bigger?.6 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (make-bigger?.6 cons.74 ra.393 rdx rbp)
         (cons.74 ra.393 rsi rdx rbp)
         (ra.393 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.393
          (rdx tmp.141 cons.74 make-bigger?.6 threshold.11 c.122 rdi rsi rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           tmp.141
           cons.74
           make-bigger?.6
           threshold.11
           c.122
           ra.393))
         (rsi (r15 rdi cons.74 rdx rbp c.122 ra.393))
         (rdi (r15 rsi rdx rbp ra.393))
         (c.122 (make-bigger?.6 threshold.11 rsi ra.393 rbp))
         (threshold.11 (tmp.141 cons.74 make-bigger?.6 c.122 ra.393 rbp))
         (make-bigger?.6 (rdx tmp.141 cons.74 rbp ra.393 threshold.11 c.122))
         (cons.74 (rsi rdx rbp ra.393 make-bigger?.6 threshold.11))
         (tmp.141 (threshold.11 make-bigger?.6 ra.393 rbp))
         (rdx (r15 rdi rsi make-bigger?.6 cons.74 ra.393 rbp))
         (r15 (rdi rsi rdx rbp))))
       (assignment ()))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
    (define L.apply-pred.5.32
      ((new-frames ())
       (locals
        (tmp.139 tmp.140 tmp.188 tmp.187 c.121 car.61 tmp.137 tmp.138 tmp.186))
       (undead-out
        ((rdi rsi rdx ra.394 rbp)
         (rsi rdx c.121 ra.394 rbp)
         (rdx c.121 pred?.9 ra.394 rbp)
         (c.121 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((car.61 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (eq?.75 tmp.186 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((tmp.186 eq?.75 rdx rbp)
           (eq?.75 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.187 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           (cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           ((rax x.10 >.55 ra.394 rbp)
            ((cdr.62 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.188 x.10 >.55 ra.394 rbp)
           (x.10 >.55 ra.394 rdx rbp)
           (>.55 ra.394 rsi rdx rbp)
           (ra.394 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.394 rax rbp) (rax rbp)))))
       (call-undead (eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394))
       (conflicts
        ((rax (pred?.9 cdr.62 make-bigger?.6 eq?.75 >.55 x.10 ra.394 rbp))
         (rbp
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           ra.394
           rdx
           tmp.188
           r15
           rdi
           rsi
           tmp.140
           tmp.139
           rax))
         (ra.394
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           rbp
           rdi
           rsi
           rdx
           tmp.188
           tmp.140
           tmp.139
           rax))
         (tmp.139 (cdr.62 pred?.9 x.10 ra.394 rbp))
         (x.10
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           c.121
           pred?.9
           ra.394
           rbp
           rdx
           tmp.188
           rax
           tmp.140
           tmp.139))
         (pred?.9
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           rdx
           c.121
           ra.394
           rbp
           tmp.140
           tmp.139))
         (cdr.62
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           rbp
           ra.394
           x.10
           pred?.9
           c.121
           rsi
           tmp.139))
         (tmp.140 (pred?.9 x.10 >.55 ra.394 rbp))
         (>.55
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           rbp
           ra.394
           x.10
           pred?.9
           cdr.62
           c.121
           rsi
           rdx
           tmp.188
           rax
           tmp.140))
         (rsi (eq?.75 car.61 c.121 >.55 ra.394 rdx r15 rdi cdr.62 rbp))
         (rdi (ra.394 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.188 (x.10 >.55 ra.394 rbp))
         (rdx (tmp.186 eq?.75 pred?.9 c.121 r15 rdi rsi x.10 >.55 ra.394 rbp))
         (c.121
          (car.61 make-bigger?.6 >.55 cdr.62 x.10 pred?.9 rsi rdx ra.394 rbp))
         (make-bigger?.6
          (tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           c.121))
         (car.61
          (rsi
           tmp.137
           eq?.75
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           c.121))
         (eq?.75
          (rsi
           rdx
           tmp.186
           rax
           tmp.138
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           car.61))
         (tmp.137 (car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.138 (eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.186
          (rdx eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.187 (cdr.62 pred?.9 x.10 >.55 ra.394 rbp))))
       (assignment
        ((ra.394 fv0)
         (>.55 fv1)
         (x.10 fv2)
         (pred?.9 fv3)
         (cdr.62 fv4)
         (make-bigger?.6 fv5)
         (eq?.75 fv6))))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19 rbp r15 rsi rdi)))
        (set! tmp.186 rax)
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5 rbp r15 rdx rsi rdi)))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25 rbp r15 rdx rsi rdi))
          (begin (set! rax 25406) (jump ra.394 rbp rax)))))
    (define L.filter.4.31
      ((new-frames ())
       (locals
        (tmp.192
         tmp.130
         tmp.129
         tmp.193
         tmp.135
         tmp.136
         tmp.197
         tmp.196
         tmp.195
         tmp.134
         tmp.133
         tmp.132
         tmp.131
         tmp.190
         c.120
         empty?.66
         tmp.128))
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx c.120 ra.395 rbp)
         (rdx c.120 pred?.7 ra.395 rbp)
         (c.120 pred?.7 lox.8 ra.395 rbp)
         (c.120 pred?.7 lox.8 cdr.62 ra.395 rbp)
         (c.120 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 car.61 ra.395 rbp)
         (c.120
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((rax
           cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((empty?.66 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.190
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           (apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax
             apply-pred.5
             car.61
             cdr.62
             lox.8
             filter.4
             pred?.7
             cons.74
             ra.395
             rbp)
            ((car.61 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (apply-pred.5
            tmp.192
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((pred?.7 apply-pred.5 rdx rbp)
             (apply-pred.5 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.193 car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
           ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             ((rax cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
              ((car.61 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             ((rax filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (filter.4 pred?.7 tmp.195 tmp.194 cons.74 ra.395 rbp)
             ((rax tmp.194 cons.74 ra.395 rbp)
              ((pred?.7 filter.4 rdx rbp)
               (filter.4 rsi rdx rbp)
               (rdi rsi rdx rbp)
               (rdi rsi rdx r15 rbp)
               (rdi rsi rdx r15 rbp)))
             (tmp.196 tmp.194 cons.74 ra.395 rbp)
             (tmp.194 cons.74 ra.395 rdx rbp)
             (cons.74 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             (cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             ((rax pred?.7 filter.4 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (tmp.197 pred?.7 filter.4 ra.395 rbp)
             (pred?.7 filter.4 ra.395 rdx rbp)
             (filter.4 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))))))
       (call-undead
        (tmp.194
         cons.74
         pred?.7
         filter.4
         lox.8
         cdr.62
         car.61
         apply-pred.5
         ra.395))
       (conflicts
        ((tmp.135 (cdr.62 lox.8 pred?.7 ra.395 rbp))
         (rbp
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           ra.395
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           r15
           rdi
           rsi
           rax
           tmp.136
           tmp.135))
         (ra.395
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdi
           rsi
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (pred?.7
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           c.120
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (lox.8
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           c.120
           pred?.7
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           tmp.136
           tmp.135))
         (cdr.62
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           rbp
           ra.395
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           rsi
           tmp.135))
         (tmp.136 (lox.8 pred?.7 filter.4 ra.395 rbp))
         (filter.4
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           rbp
           ra.395
           cdr.62
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.194
           tmp.132
           tmp.131
           rsi
           rdx
           tmp.197
           rax
           tmp.136))
         (rax
          (car.61
           apply-pred.5
           tmp.194
           cons.74
           lox.8
           cdr.62
           rbp
           ra.395
           filter.4
           pred?.7))
         (rsi
          (empty?.66
           c.120
           apply-pred.5
           cons.74
           car.61
           filter.4
           ra.395
           rdx
           r15
           rdi
           cdr.62
           rbp))
         (rdi (ra.395 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.197 (pred?.7 filter.4 ra.395 rbp))
         (rdx
          (c.120
           apply-pred.5
           tmp.194
           cons.74
           r15
           rdi
           rsi
           pred?.7
           filter.4
           ra.395
           rbp))
         (tmp.131 (car.61 cdr.62 lox.8 filter.4 pred?.7 ra.395 rbp))
         (car.61
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           tmp.193
           tmp.192
           rax
           tmp.129
           rsi
           tmp.131))
         (tmp.132 (cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (cons.74
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           rsi
           rdx
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132))
         (tmp.194
          (rdx
           tmp.196
           tmp.195
           rax
           tmp.134
           tmp.133
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.133 (cdr.62 lox.8 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.134 (lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.195 (filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.196 (tmp.194 cons.74 ra.395 rbp))
         (tmp.129 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (tmp.130
          (apply-pred.5 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (apply-pred.5
          (tmp.190
           tmp.128
           empty?.66
           rbp
           ra.395
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           rsi
           rdx
           tmp.192
           rax
           tmp.130))
         (tmp.192
          (apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.193 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (c.120
          (apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           rsi
           rdx
           ra.395
           rbp))
         (empty?.66
          (rsi
           rbp
           ra.395
           apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74))
         (tmp.128
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp))
         (tmp.190
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp))))
       (assignment
        ((ra.395 fv0)
         (apply-pred.5 fv1)
         (car.61 fv2)
         (cdr.62 fv3)
         (lox.8 fv4)
         (filter.4 fv5)
         (pred?.7 fv6)
         (cons.74 fv7)
         (tmp.194 fv1))))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14 rbp r15 rsi rdi)))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395 rbp rax))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19 rbp r15 rsi rdi)))
            (set! tmp.192 rax)
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19 rbp r15 rsi rdi)))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.195 rax)
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6 rbp r15 rdx rsi rdi))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31 rbp r15 rdx rsi rdi)))))))
    (define L.*.50.30
      ((new-frames ())
       (locals (tmp.13 tmp.12 ra.396 tmp.204 c.119 tmp.397))
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.12 ra.396 rbp)
         (tmp.13 tmp.12 ra.396 rbp)
         (tmp.397 tmp.13 tmp.12 ra.396 rbp)
         (tmp.204 tmp.13 tmp.12 ra.396 rbp)
         ((tmp.13 tmp.12 ra.396 rbp)
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.12 ra.396 rbp))
         (rbp (tmp.204 tmp.397 tmp.13 tmp.12 c.119 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.204 tmp.397 tmp.13 tmp.12 c.119 rbp rdi rsi rdx))
         (tmp.12 (tmp.204 tmp.397 tmp.13 ra.396 rbp rdx))
         (rsi (c.119 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.396 rbp))
         (tmp.13 (tmp.204 tmp.397 tmp.12 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.12 tmp.13))
         (tmp.204 (tmp.13 tmp.12 ra.396 rbp))))
       (assignment ()))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi)))))
    (define L.+.51.29
      ((new-frames ())
       (locals (tmp.15 tmp.14 ra.398 tmp.210 c.118 tmp.399))
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.14 ra.398 rbp)
         (tmp.15 tmp.14 ra.398 rbp)
         (tmp.399 tmp.15 tmp.14 ra.398 rbp)
         (tmp.210 tmp.15 tmp.14 ra.398 rbp)
         ((tmp.15 tmp.14 ra.398 rbp)
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.14 ra.398 rbp))
         (rbp (tmp.210 tmp.399 tmp.15 tmp.14 c.118 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.210 tmp.399 tmp.15 tmp.14 c.118 rbp rdi rsi rdx))
         (tmp.14 (tmp.210 tmp.399 tmp.15 ra.398 rbp rdx))
         (rsi (c.118 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.398 rbp))
         (tmp.15 (tmp.210 tmp.399 tmp.14 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.14 tmp.15))
         (tmp.210 (tmp.15 tmp.14 ra.398 rbp))))
       (assignment ()))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi)))))
    (define L.-.52.28
      ((new-frames ())
       (locals (tmp.17 tmp.16 ra.400 tmp.216 c.117 tmp.401))
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.16 ra.400 rbp)
         (tmp.17 tmp.16 ra.400 rbp)
         (tmp.401 tmp.17 tmp.16 ra.400 rbp)
         (tmp.216 tmp.17 tmp.16 ra.400 rbp)
         ((tmp.17 tmp.16 ra.400 rbp)
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.16 ra.400 rbp))
         (rbp (tmp.216 tmp.401 tmp.17 tmp.16 c.117 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.216 tmp.401 tmp.17 tmp.16 c.117 rbp rdi rsi rdx))
         (tmp.16 (tmp.216 tmp.401 tmp.17 ra.400 rbp rdx))
         (rsi (c.117 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.400 rbp))
         (tmp.17 (tmp.216 tmp.401 tmp.16 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.16 tmp.17))
         (tmp.216 (tmp.17 tmp.16 ra.400 rbp))))
       (assignment ()))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<.53.27
      ((new-frames ())
       (locals (tmp.19 tmp.18 ra.402 tmp.223 c.116 tmp.403))
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.18 ra.402 rbp)
         (tmp.19 tmp.18 ra.402 rbp)
         (tmp.403 tmp.19 tmp.18 ra.402 rbp)
         (tmp.223 tmp.19 tmp.18 ra.402 rbp)
         ((tmp.19 tmp.18 ra.402 rbp)
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.18 ra.402 rbp))
         (rbp (tmp.223 tmp.403 tmp.19 tmp.18 c.116 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.223 tmp.403 tmp.19 tmp.18 c.116 rbp rdi rsi rdx))
         (tmp.18 (tmp.223 tmp.403 tmp.19 ra.402 rbp rdx))
         (rsi (c.116 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.402 rbp))
         (tmp.19 (tmp.223 tmp.403 tmp.18 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.18 tmp.19))
         (tmp.223 (tmp.19 tmp.18 ra.402 rbp))))
       (assignment ()))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.<=.54.26
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.404 tmp.230 c.115 tmp.405))
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.20 ra.404 rbp)
         (tmp.21 tmp.20 ra.404 rbp)
         (tmp.405 tmp.21 tmp.20 ra.404 rbp)
         (tmp.230 tmp.21 tmp.20 ra.404 rbp)
         ((tmp.21 tmp.20 ra.404 rbp)
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.20 ra.404 rbp))
         (rbp (tmp.230 tmp.405 tmp.21 tmp.20 c.115 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.230 tmp.405 tmp.21 tmp.20 c.115 rbp rdi rsi rdx))
         (tmp.20 (tmp.230 tmp.405 tmp.21 ra.404 rbp rdx))
         (rsi (c.115 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.404 rbp))
         (tmp.21 (tmp.230 tmp.405 tmp.20 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.20 tmp.21))
         (tmp.230 (tmp.21 tmp.20 ra.404 rbp))))
       (assignment ()))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>.55.25
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.406 tmp.237 c.114 tmp.407))
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.22 ra.406 rbp)
         (tmp.23 tmp.22 ra.406 rbp)
         (tmp.407 tmp.23 tmp.22 ra.406 rbp)
         (tmp.237 tmp.23 tmp.22 ra.406 rbp)
         ((tmp.23 tmp.22 ra.406 rbp)
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.114 r15 rdi rsi tmp.22 ra.406 rbp))
         (rbp (tmp.237 tmp.407 tmp.23 tmp.22 c.114 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.237 tmp.407 tmp.23 tmp.22 c.114 rbp rdi rsi rdx))
         (tmp.22 (tmp.237 tmp.407 tmp.23 ra.406 rbp rdx))
         (rsi (c.114 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (rsi rdx ra.406 rbp))
         (tmp.23 (tmp.237 tmp.407 tmp.22 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.22 tmp.23))
         (tmp.237 (tmp.23 tmp.22 ra.406 rbp))))
       (assignment ()))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.>=.56.24
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.408 tmp.244 c.113 tmp.409))
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.24 ra.408 rbp)
         (tmp.25 tmp.24 ra.408 rbp)
         (tmp.409 tmp.25 tmp.24 ra.408 rbp)
         (tmp.244 tmp.25 tmp.24 ra.408 rbp)
         ((tmp.25 tmp.24 ra.408 rbp)
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.113 r15 rdi rsi tmp.24 ra.408 rbp))
         (rbp (tmp.244 tmp.409 tmp.25 tmp.24 c.113 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.244 tmp.409 tmp.25 tmp.24 c.113 rbp rdi rsi rdx))
         (tmp.24 (tmp.244 tmp.409 tmp.25 ra.408 rbp rdx))
         (rsi (c.113 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.113 (rsi rdx ra.408 rbp))
         (tmp.25 (tmp.244 tmp.409 tmp.24 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.24 tmp.25))
         (tmp.244 (tmp.25 tmp.24 ra.408 rbp))))
       (assignment ()))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.57.23
      ((new-frames ())
       (locals (tmp.26 make-init-vector.1 ra.410 tmp.247 c.112 tmp.411))
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.112 ra.410 rbp)
         (c.112 tmp.26 ra.410 rbp)
         (tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.247 tmp.26 make-init-vector.1 ra.410 rbp)
         ((tmp.26 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.247
           tmp.411
           make-init-vector.1
           tmp.26
           c.112
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.247 tmp.411 make-init-vector.1 tmp.26 c.112 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.247 tmp.411 rbp ra.410 tmp.26 rdx))
         (rsi (c.112 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.112 (tmp.26 rsi ra.410 rbp))
         (tmp.26 (tmp.247 tmp.411 make-init-vector.1 c.112 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.26))
         (tmp.247 (tmp.26 make-init-vector.1 ra.410 rbp))))
       (assignment ()))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.58.22
      ((new-frames ())
       (locals (tmp.27 ra.412 tmp.250 c.111 tmp.413))
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.27 ra.412 rbp)
         (tmp.413 tmp.27 ra.412 rbp)
         (tmp.250 tmp.27 ra.412 rbp)
         ((tmp.27 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.111 r15 rdi ra.412 rbp))
         (rbp (tmp.250 tmp.413 tmp.27 c.111 ra.412 r15 rdi rsi))
         (ra.412 (tmp.250 tmp.413 tmp.27 c.111 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.111 (rsi ra.412 rbp))
         (tmp.27 (tmp.250 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.27))
         (tmp.250 (tmp.27 ra.412 rbp))))
       (assignment ()))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi)))))
    (define L.vector-set!.59.21
      ((new-frames ())
       (locals
        (tmp.29
         tmp.30
         unsafe-vector-set!.2
         tmp.28
         ra.414
         tmp.256
         c.110
         tmp.415))
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.110 ra.414 rbp)
         (rdx rcx c.110 tmp.28 ra.414 rbp)
         (rcx c.110 tmp.29 tmp.28 ra.414 rbp)
         (c.110 tmp.29 tmp.30 tmp.28 ra.414 rbp)
         (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.415 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.256 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         ((tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp))
         (rbp
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.28
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           c.110
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.256 tmp.415 rbp ra.414 tmp.28 tmp.30 tmp.29 rcx r8))
         (tmp.30
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           c.110
           tmp.29
           tmp.28
           ra.414
           rbp
           r8))
         (rcx
          (tmp.29
           c.110
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.28
           ra.414
           r8
           rbp))
         (rdx (c.110 r15 rdi rsi tmp.28 ra.414 rcx r8 rbp))
         (rsi (c.110 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.110 (tmp.30 tmp.29 tmp.28 rsi rdx rcx ra.414 rbp))
         (tmp.29
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           rcx
           c.110
           tmp.28
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29))
         (tmp.256 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp))))
       (assignment ()))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.60.20
      ((new-frames ())
       (locals
        (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 tmp.262 c.109 tmp.417))
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.109 ra.416 rbp)
         (rdx c.109 tmp.31 ra.416 rbp)
         (c.109 tmp.32 tmp.31 ra.416 rbp)
         (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.417 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.262 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         ((tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.31 ra.416 rbp))
         (rbp
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.31
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           c.109
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.262 tmp.417 rbp ra.416 tmp.31 tmp.32 rcx))
         (rdx (c.109 r15 rdi rsi tmp.31 ra.416 rcx rbp))
         (rsi (c.109 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.109 (tmp.32 tmp.31 rsi rdx ra.416 rbp))
         (tmp.32 (tmp.262 tmp.417 unsafe-vector-ref.3 c.109 tmp.31 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.31 unsafe-vector-ref.3 tmp.32))
         (tmp.262 (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp))))
       (assignment ()))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.61.19
      ((new-frames ())
       (locals (tmp.33 ra.418 tmp.265 c.108 tmp.419))
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.33 ra.418 rbp)
         (tmp.419 tmp.33 ra.418 rbp)
         (tmp.265 tmp.33 ra.418 rbp)
         ((tmp.33 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.108 r15 rdi ra.418 rbp))
         (rbp (tmp.265 tmp.419 tmp.33 c.108 ra.418 r15 rdi rsi))
         (ra.418 (tmp.265 tmp.419 tmp.33 c.108 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.418 rbp))
         (tmp.33 (tmp.265 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.33))
         (tmp.265 (tmp.33 ra.418 rbp))))
       (assignment ()))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi)))))
    (define L.cdr.62.18
      ((new-frames ())
       (locals (tmp.34 ra.420 tmp.268 c.107 tmp.421))
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.34 ra.420 rbp)
         (tmp.421 tmp.34 ra.420 rbp)
         (tmp.268 tmp.34 ra.420 rbp)
         ((tmp.34 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.107 r15 rdi ra.420 rbp))
         (rbp (tmp.268 tmp.421 tmp.34 c.107 ra.420 r15 rdi rsi))
         (ra.420 (tmp.268 tmp.421 tmp.34 c.107 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.107 (rsi ra.420 rbp))
         (tmp.34 (tmp.268 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.34))
         (tmp.268 (tmp.34 ra.420 rbp))))
       (assignment ()))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi)))))
    (define L.procedure-arity.63.17
      ((new-frames ())
       (locals (tmp.35 ra.422 tmp.271 c.106 tmp.423))
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.35 ra.422 rbp)
         (tmp.423 tmp.35 ra.422 rbp)
         (tmp.271 tmp.35 ra.422 rbp)
         ((tmp.35 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.106 r15 rdi ra.422 rbp))
         (rbp (tmp.271 tmp.423 tmp.35 c.106 ra.422 r15 rdi rsi))
         (ra.422 (tmp.271 tmp.423 tmp.35 c.106 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.106 (rsi ra.422 rbp))
         (tmp.35 (tmp.271 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.35))
         (tmp.271 (tmp.35 ra.422 rbp))))
       (assignment ()))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi)))))
    (define L.fixnum?.64.16
      ((new-frames ())
       (locals (tmp.273 ra.424 c.105 tmp.36 tmp.425))
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.36 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.273 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.273 tmp.425 tmp.36 c.105 ra.424 rax))
         (ra.424 (tmp.273 tmp.425 tmp.36 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.424))
         (rdi (ra.424))
         (c.105 (rsi ra.424 rbp))
         (tmp.36 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.273 (ra.424 rbp))))
       (assignment ()))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.65.15
      ((new-frames ())
       (locals (tmp.275 ra.426 c.104 tmp.37 tmp.427))
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.37 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.275 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.275 tmp.427 tmp.37 c.104 ra.426 rax))
         (ra.426 (tmp.275 tmp.427 tmp.37 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.426))
         (rdi (ra.426))
         (c.104 (rsi ra.426 rbp))
         (tmp.37 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.275 (ra.426 rbp))))
       (assignment ()))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.66.14
      ((new-frames ())
       (locals (tmp.277 ra.428 c.103 tmp.38 tmp.429))
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.38 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.277 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.277 tmp.429 tmp.38 c.103 ra.428 rax))
         (ra.428 (tmp.277 tmp.429 tmp.38 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.428))
         (rdi (ra.428))
         (c.103 (rsi ra.428 rbp))
         (tmp.38 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.277 (ra.428 rbp))))
       (assignment ()))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.67.13
      ((new-frames ())
       (locals (tmp.279 ra.430 c.102 tmp.39 tmp.431))
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.39 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.279 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.279 tmp.431 tmp.39 c.102 ra.430 rax))
         (ra.430 (tmp.279 tmp.431 tmp.39 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.430))
         (rdi (ra.430))
         (c.102 (rsi ra.430 rbp))
         (tmp.39 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.279 (ra.430 rbp))))
       (assignment ()))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.68.12
      ((new-frames ())
       (locals (tmp.281 ra.432 c.101 tmp.40 tmp.433))
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.40 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.281 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.281 tmp.433 tmp.40 c.101 ra.432 rax))
         (ra.432 (tmp.281 tmp.433 tmp.40 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.432))
         (rdi (ra.432))
         (c.101 (rsi ra.432 rbp))
         (tmp.40 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.281 (ra.432 rbp))))
       (assignment ()))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.69.11
      ((new-frames ())
       (locals (tmp.283 ra.434 c.100 tmp.41 tmp.435))
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.41 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.283 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.283 tmp.435 tmp.41 c.100 ra.434 rax))
         (ra.434 (tmp.283 tmp.435 tmp.41 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.434))
         (rdi (ra.434))
         (c.100 (rsi ra.434 rbp))
         (tmp.41 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.283 (ra.434 rbp))))
       (assignment ()))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.70.10
      ((new-frames ())
       (locals (tmp.285 ra.436 c.99 tmp.42 tmp.437))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.42 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.285 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.285 tmp.437 tmp.42 c.99 ra.436 rax))
         (ra.436 (tmp.285 tmp.437 tmp.42 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.436))
         (rdi (ra.436))
         (c.99 (rsi ra.436 rbp))
         (tmp.42 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.285 (ra.436 rbp))))
       (assignment ()))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.71.9
      ((new-frames ())
       (locals (tmp.287 ra.438 c.98 tmp.43 tmp.439))
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.43 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.287 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.287 tmp.439 tmp.43 c.98 ra.438 rax))
         (ra.438 (tmp.287 tmp.439 tmp.43 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.438))
         (rdi (ra.438))
         (c.98 (rsi ra.438 rbp))
         (tmp.43 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.287 (ra.438 rbp))))
       (assignment ()))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.72.8
      ((new-frames ())
       (locals (tmp.289 ra.440 c.97 tmp.44 tmp.441))
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.44 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.289 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.289 tmp.441 tmp.44 c.97 ra.440 rax))
         (ra.440 (tmp.289 tmp.441 tmp.44 c.97 rdi rsi rbp rax))
         (rsi (c.97 ra.440))
         (rdi (ra.440))
         (c.97 (rsi ra.440 rbp))
         (tmp.44 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.289 (ra.440 rbp))))
       (assignment ()))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.73.7
      ((new-frames ())
       (locals (tmp.45 ra.442 c.96))
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.45 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.45 c.96 ra.442 rax))
         (ra.442 (tmp.45 c.96 rdi rsi rbp rax))
         (rsi (c.96 ra.442))
         (rdi (ra.442))
         (c.96 (rsi ra.442 rbp))
         (tmp.45 (ra.442 rbp))))
       (assignment ()))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.74.6
      ((new-frames ())
       (locals (ra.443 c.95 tmp.46 tmp.47 tmp.291 tmp.444 tmp.150))
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.46)
         (r12 tmp.47 ra.443 rbp tmp.46)
         (r12 tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.444 tmp.47 ra.443 rbp tmp.46)
         (tmp.47 ra.443 rbp tmp.46 tmp.150)
         (rbp ra.443 tmp.47 tmp.150)
         (tmp.150 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.443
          (rax tmp.150 tmp.444 tmp.291 tmp.47 tmp.46 c.95 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.150 tmp.444 r12 tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (r12 (rbp tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (rdx (tmp.46 c.95 ra.443))
         (rsi (c.95 ra.443))
         (rdi (ra.443))
         (c.95 (rsi rdx r12 ra.443 rbp))
         (tmp.46 (tmp.150 tmp.444 tmp.291 tmp.47 rdx r12 ra.443 rbp))
         (tmp.47 (tmp.150 tmp.444 tmp.291 r12 ra.443 rbp tmp.46))
         (tmp.291 (r12 tmp.47 ra.443 rbp tmp.46))
         (tmp.444 (tmp.46 rbp ra.443 tmp.47))
         (tmp.150 (tmp.47 ra.443 rbp tmp.46))
         (rax (ra.443 rbp))))
       (assignment ()))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443 rbp rax)))
    (define L.eq?.75.5
      ((new-frames ())
       (locals (tmp.48 tmp.49 ra.445 c.94))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.48 ra.445 rbp)
         (tmp.48 tmp.49 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.49 tmp.48 c.94 ra.445 rax))
         (ra.445 (tmp.49 tmp.48 c.94 rdi rsi rdx rbp rax))
         (rdx (tmp.48 c.94 ra.445))
         (rsi (c.94 ra.445))
         (rdi (ra.445))
         (c.94 (rsi rdx ra.445 rbp))
         (tmp.48 (tmp.49 rdx ra.445 rbp))
         (tmp.49 (tmp.48 ra.445 rbp))))
       (assignment ()))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (ra.446
         c.93
         tmp.76
         vector-init-loop.78
         tmp.447
         tmp.293
         tmp.448
         tmp.449
         tmp.294
         tmp.450
         tmp.295
         tmp.540
         tmp.296
         tmp.451
         tmp.151
         tmp.77
         tmp.124))
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.93 r12 rbp ra.446)
         (c.93 r12 rbp ra.446 tmp.76)
         (r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.447 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.449 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.294 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.450 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.295 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.451 rbp ra.446 vector-init-loop.78 tmp.76)
         (rbp ra.446 vector-init-loop.78 tmp.76 tmp.151)
         (tmp.151 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.76 vector-init-loop.78 ra.446 rcx rbp)
         (tmp.76 vector-init-loop.78 ra.446 rdx rcx rbp)
         (vector-init-loop.78 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           r12
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (r12
          (rbp
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (rsi (r15 rdi vector-init-loop.78 rdx rcx rbp c.93 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.93 (tmp.76 rsi r12 rbp ra.446))
         (tmp.76
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           c.93
           r12
           rbp
           ra.446))
         (vector-init-loop.78
          (rsi
           rdx
           rcx
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           tmp.76
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.293 (tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.448 (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.449 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.294 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.450 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.295 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.540 (tmp.296 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.296 (r12 tmp.540 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.451 (tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.151 (rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.77 (tmp.124 tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.124 (tmp.77 tmp.76 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.76 vector-init-loop.78 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.76 vector-init-loop.78 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment ()))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.540 tmp.295)
        (set! tmp.296 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.78.3
      ((new-frames ())
       (locals (vec.80 vector-init-loop.78 len.79 i.81 ra.452 c.92))
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.92 ra.452 rbp)
         (rdx rcx c.92 len.79 ra.452 rbp)
         (rcx c.92 len.79 i.81 ra.452 rbp)
         (c.92 vec.80 len.79 i.81 ra.452 rbp)
         (vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
         ((vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.78 len.79 i.81 ra.452 rbp))
         (rbp
          (vector-init-loop.78
           vec.80
           i.81
           len.79
           c.92
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.78 vec.80 i.81 len.79 c.92 rbp rdi rsi rdx rcx r8))
         (i.81 (vector-init-loop.78 vec.80 c.92 len.79 ra.452 rbp rdx rcx r8))
         (len.79 (vector-init-loop.78 vec.80 i.81 rdx c.92 ra.452 rbp rcx r8))
         (vector-init-loop.78 (rbp ra.452 i.81 len.79 vec.80 r8))
         (rcx (c.92 r15 rdi rsi rdx len.79 i.81 ra.452 r8 rbp))
         (rdx (len.79 c.92 r15 rdi rsi i.81 ra.452 rcx r8 rbp))
         (rsi (c.92 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.92 (vec.80 i.81 len.79 rsi rdx rcx ra.452 rbp))
         (vec.80 (vector-init-loop.78 c.92 len.79 i.81 ra.452 rbp))))
       (assignment ()))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (tmp.87 tmp.89 tmp.88 ra.453 tmp.310 c.91))
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.87 ra.453 rbp)
         (rcx tmp.87 tmp.88 ra.453 rbp)
         (tmp.87 tmp.89 tmp.88 ra.453 rbp)
         (tmp.310 tmp.87 tmp.89 tmp.88 ra.453 rbp)
         ((tmp.87 tmp.89 tmp.88 ra.453 rbp)
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.87 c.91 r15 rdi rsi rdx tmp.89 tmp.88 ra.453 rbp))
         (rbp (tmp.310 tmp.89 tmp.88 tmp.87 c.91 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.310 tmp.89 tmp.88 tmp.87 c.91 rbp rdi rsi rdx rcx))
         (tmp.88 (tmp.310 tmp.89 tmp.87 ra.453 rbp rdx rcx))
         (tmp.89 (tmp.310 tmp.87 tmp.88 ra.453 rbp rcx))
         (rdx (tmp.87 c.91 r15 rdi rsi tmp.88 ra.453 rcx rbp))
         (rsi (c.91 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.91 (rsi rdx rcx ra.453 rbp))
         (tmp.87 (tmp.310 tmp.89 tmp.88 rdx rcx ra.453 rbp))
         (tmp.310 (rbp ra.453 tmp.88 tmp.89 tmp.87))))
       (assignment ()))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (tmp.84 tmp.85 ra.454 tmp.318 c.90))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.84 ra.454 rbp)
         (tmp.84 tmp.85 ra.454 rbp)
         (tmp.318 tmp.84 tmp.85 ra.454 rbp)
         ((tmp.84 tmp.85 ra.454 rbp)
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.84 c.90 r15 rdi rsi tmp.85 ra.454 rbp))
         (rbp (tmp.318 tmp.85 tmp.84 c.90 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.318 tmp.85 tmp.84 c.90 rbp rdi rsi rdx))
         (tmp.85 (tmp.318 tmp.84 ra.454 rbp rdx))
         (rsi (c.90 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.90 (rsi rdx ra.454 rbp))
         (tmp.84 (tmp.318 tmp.85 rdx ra.454 rbp))
         (tmp.318 (rbp ra.454 tmp.85 tmp.84))))
       (assignment ()))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi)))))
    (define L.jp.107
      ((new-frames ())
       (locals (tmp.84 tmp.85 ra.455 tmp.312))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.312 ra.455 rbp)
         (rdx tmp.312 tmp.85 ra.455 rbp)
         (tmp.312 tmp.84 tmp.85 ra.455 rbp)
         ((tmp.84 tmp.85 ra.455 rbp)
          ((tmp.84 tmp.85 ra.455 rbp)
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.84 tmp.85 tmp.312 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.84 tmp.85 tmp.312 rbp rdi rsi rdx rax))
         (rdx (tmp.312 r15 rdi rsi tmp.85 ra.455 rbp))
         (tmp.85 (tmp.84 tmp.312 ra.455 rbp rdx))
         (rsi (tmp.312 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.312 (tmp.84 tmp.85 rsi rdx ra.455 rbp))
         (tmp.84 (tmp.312 tmp.85 ra.455 rbp))))
       (assignment ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.106
      ((new-frames ())
       (locals
        (tmp.85
         tmp.457
         tmp.315
         tmp.458
         tmp.316
         tmp.459
         tmp.317
         tmp.84
         tmp.314
         ra.456))
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.314 ra.456 rbp)
         (rdx tmp.314 tmp.85 ra.456 rbp)
         (tmp.314 tmp.85 tmp.84 ra.456 rbp)
         ((tmp.85 tmp.84 ra.456 rbp)
          ((tmp.457 tmp.84 ra.456 rbp)
           (tmp.315 tmp.84 ra.456 rbp)
           (tmp.458 tmp.84 ra.456 rbp)
           (tmp.316 tmp.84 ra.456 rbp)
           (tmp.459 tmp.84 ra.456 rbp)
           (tmp.317 tmp.84 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.84
           tmp.85
           tmp.314
           ra.456
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (ra.456
          (tmp.84
           tmp.85
           tmp.314
           rdi
           rsi
           rdx
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.84))
         (tmp.84
          (tmp.314
           tmp.85
           ra.456
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457))
         (tmp.315 (tmp.84 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.84))
         (tmp.316 (tmp.84 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.84))
         (tmp.317 (tmp.84 ra.456 rbp))
         (rdx (tmp.85 tmp.314 ra.456))
         (rsi (tmp.314 ra.456))
         (rdi (ra.456))
         (tmp.314 (tmp.84 tmp.85 rsi rdx ra.456 rbp))
         (tmp.85 (tmp.84 rdx tmp.314 ra.456 rbp))))
       (assignment ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.103
      ((new-frames ())
       (locals (tmp.89 tmp.87 tmp.88 ra.460 tmp.304))
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.304 ra.460 rbp)
         (rdx rcx tmp.304 tmp.88 ra.460 rbp)
         (rcx tmp.304 tmp.89 tmp.88 ra.460 rbp)
         (tmp.304 tmp.89 tmp.87 tmp.88 ra.460 rbp)
         ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
          ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.87 tmp.89 tmp.88 tmp.304 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.87 tmp.89 tmp.88 tmp.304 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.89 tmp.304 r15 rdi rsi rdx tmp.87 tmp.88 ra.460 rbp))
         (tmp.88 (tmp.87 tmp.89 tmp.304 ra.460 rbp rdx rcx))
         (tmp.87 (tmp.304 tmp.89 tmp.88 ra.460 rbp rcx))
         (rdx (tmp.304 r15 rdi rsi tmp.88 ra.460 rcx rbp))
         (rsi (tmp.304 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.304 (tmp.87 tmp.89 tmp.88 rsi rdx rcx ra.460 rbp))
         (tmp.89 (tmp.87 rcx tmp.304 tmp.88 ra.460 rbp))))
       (assignment ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.102
      ((new-frames ())
       (locals
        (tmp.88
         tmp.462
         tmp.307
         tmp.463
         tmp.308
         tmp.464
         tmp.309
         tmp.89
         tmp.87
         tmp.306
         ra.461))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.306 rbp ra.461)
         (rdx rcx tmp.306 tmp.88 rbp ra.461)
         (rcx tmp.306 tmp.88 rbp ra.461 tmp.87)
         (tmp.306 tmp.88 rbp ra.461 tmp.89 tmp.87)
         ((tmp.88 rbp ra.461 tmp.89 tmp.87)
          ((tmp.462 rbp ra.461 tmp.89 tmp.87)
           (tmp.307 rbp ra.461 tmp.89 tmp.87)
           (tmp.463 rbp ra.461 tmp.89 tmp.87)
           (tmp.308 rbp ra.461 tmp.89 tmp.87)
           (tmp.464 rbp ra.461 tmp.89 tmp.87)
           (rbp ra.461 tmp.89 tmp.309 tmp.87)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (ra.461
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (tmp.462 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.89
          (tmp.306
           tmp.88
           rbp
           ra.461
           tmp.87
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.87
          (tmp.89
           rcx
           tmp.306
           tmp.88
           rbp
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.307 (rbp ra.461 tmp.89 tmp.87))
         (tmp.463 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.308 (rbp ra.461 tmp.89 tmp.87))
         (tmp.464 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.309 (rbp ra.461 tmp.89 tmp.87))
         (rcx (tmp.87 tmp.88 tmp.306 ra.461))
         (rdx (tmp.88 tmp.306 ra.461))
         (rsi (tmp.306 ra.461))
         (rdi (ra.461))
         (tmp.306 (tmp.89 tmp.87 tmp.88 rsi rdx rcx rbp ra.461))
         (tmp.88 (tmp.89 tmp.87 rdx rcx tmp.306 rbp ra.461))))
       (assignment ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.99
      ((new-frames ())
       (locals
        (vec.80
         ra.465
         len.79
         tmp.302
         tmp.469
         tmp.123
         vector-init-loop.78
         tmp.301
         tmp.468
         tmp.300
         tmp.467
         tmp.299
         tmp.466
         i.81
         tmp.298))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.298 ra.465 rbp)
         (rdx rcx r8 tmp.298 i.81 ra.465 rbp)
         (rcx r8 tmp.298 i.81 len.79 ra.465 rbp)
         (r8 tmp.298 i.81 len.79 vector-init-loop.78 ra.465 rbp)
         (tmp.298 i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
         ((i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.299 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.467 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.300 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.468 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (rbp ra.465 vector-init-loop.78 len.79 i.81 tmp.301 vec.80)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.469 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (vec.80 tmp.302 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.302 len.79 vector-init-loop.78 ra.465 rcx rbp)
           (len.79 vector-init-loop.78 ra.465 rdx rcx rbp)
           (vector-init-loop.78 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.466 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (rbp
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (ra.465
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vector-init-loop.78
          (vec.80
           r8
           tmp.298
           i.81
           len.79
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (len.79
          (vec.80
           vector-init-loop.78
           r8
           tmp.298
           i.81
           ra.465
           rbp
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (i.81
          (vec.80
           vector-init-loop.78
           len.79
           rdx
           rcx
           r8
           tmp.298
           ra.465
           rbp
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vec.80
          (tmp.298
           i.81
           len.79
           vector-init-loop.78
           ra.465
           rbp
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (tmp.299 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.467 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.300 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.468 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.301 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.123 (i.81 vec.80 len.79 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.78 len.79 vec.80))
         (tmp.302 (rcx vec.80 len.79 vector-init-loop.78 ra.465 rbp))
         (rcx
          (i.81
           tmp.298
           r15
           rdi
           rsi
           rdx
           tmp.302
           len.79
           vector-init-loop.78
           ra.465
           rbp))
         (rdx
          (i.81 tmp.298 r15 rdi rsi len.79 vector-init-loop.78 ra.465 rcx rbp))
         (rsi (tmp.298 r15 rdi vector-init-loop.78 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.78 len.79 i.81 tmp.298 ra.465))
         (tmp.298
          (vec.80 vector-init-loop.78 len.79 i.81 rsi rdx rcx r8 ra.465 rbp))))
       (assignment ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.86
      ((new-frames ())
       (locals (tmp.35 tmp.270 ra.470))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.270 ra.470 rbp)
         (tmp.270 tmp.35 ra.470 rbp)
         ((tmp.35 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.35 tmp.270 ra.470 rax))
         (ra.470 (tmp.35 tmp.270 rdi rsi rbp rax))
         (rsi (tmp.270 ra.470))
         (rdi (ra.470))
         (tmp.270 (tmp.35 rsi ra.470 rbp))
         (tmp.35 (tmp.270 ra.470 rbp))))
       (assignment ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.84
      ((new-frames ())
       (locals (tmp.34 tmp.267 ra.471))
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.267 ra.471 rbp)
         (tmp.267 tmp.34 ra.471 rbp)
         ((tmp.34 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.34 tmp.267 ra.471 rax))
         (ra.471 (tmp.34 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.471))
         (rdi (ra.471))
         (tmp.267 (tmp.34 rsi ra.471 rbp))
         (tmp.34 (tmp.267 ra.471 rbp))))
       (assignment ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.82
      ((new-frames ())
       (locals (tmp.33 tmp.264 ra.472))
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.264 ra.472 rbp)
         (tmp.264 tmp.33 ra.472 rbp)
         ((tmp.33 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.33 tmp.264 ra.472 rax))
         (ra.472 (tmp.33 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.472))
         (rdi (ra.472))
         (tmp.264 (tmp.33 rsi ra.472 rbp))
         (tmp.33 (tmp.264 ra.472 rbp))))
       (assignment ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.80
      ((new-frames ())
       (locals
        (tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 tmp.261 tmp.474 tmp.258))
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.258 ra.473 rbp)
         (rdx rcx tmp.258 tmp.31 ra.473 rbp)
         (rcx tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.258 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.261 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           ra.473
           tmp.261
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           rbp
           tmp.261
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.31
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.32 tmp.258 tmp.31 ra.473 rbp tmp.261 tmp.474 rdx rcx))
         (tmp.32
          (tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp tmp.261 tmp.474 rcx))
         (rdx (tmp.31 tmp.258 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.258 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.32 tmp.31))
         (tmp.31
          (tmp.32
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.258
           ra.473
           rbp
           tmp.261
           tmp.474))
         (tmp.261 (tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.258 (tmp.32 unsafe-vector-ref.3 tmp.31 rsi rdx rcx ra.473 rbp))))
       (assignment ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (unsafe-vector-ref.3 tmp.125 tmp.32 tmp.31 ra.475 tmp.260))
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.260 ra.475 rbp)
         (rdx rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.260 tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.31 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (ra.475
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (tmp.125 (tmp.32 tmp.31 ra.475 rbp))
         (tmp.31 (tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp rdx tmp.125))
         (tmp.32 (tmp.31 rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp tmp.125))
         (rdx (tmp.260 r15 rdi rsi tmp.31 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.31 tmp.32 rcx tmp.260 ra.475 rbp rsi rdx))
         (rsi (tmp.260 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.32 unsafe-vector-ref.3 tmp.260 ra.475))
         (tmp.260 (tmp.31 tmp.32 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp))))
       (assignment ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.76
      ((new-frames ())
       (locals
        (tmp.28
         tmp.29
         tmp.30
         unsafe-vector-set!.2
         ra.476
         tmp.255
         tmp.477
         tmp.252))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.252 ra.476 rbp)
         (rdx rcx r8 tmp.252 tmp.28 ra.476 rbp)
         (rcx r8 tmp.252 tmp.28 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.252 tmp.28 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.252 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.255 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           ra.476
           tmp.255
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           rbp
           tmp.255
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.29 tmp.30 tmp.252 tmp.28 ra.476 rbp tmp.255 tmp.477 rdx rcx r8))
         (tmp.30
          (tmp.29
           tmp.252
           tmp.28
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           rcx
           r8))
         (tmp.29
          (tmp.252
           tmp.28
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           r8))
         (rcx
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           tmp.30
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.28 tmp.252 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.252 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28))
         (tmp.28
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.252
           ra.476
           rbp
           tmp.255
           tmp.477))
         (tmp.255 (tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.252
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp))))
       (assignment ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals
        (unsafe-vector-set!.2 tmp.126 tmp.30 tmp.29 tmp.28 ra.478 tmp.254))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.254 ra.478 rbp)
         (rdx rcx r8 tmp.254 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.254 tmp.30 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.254 tmp.30 tmp.29 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.254 tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.28 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (ra.478
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (tmp.126 (tmp.30 tmp.29 tmp.28 ra.478 rbp))
         (tmp.28
          (tmp.254
           tmp.30
           tmp.29
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.126))
         (tmp.29
          (tmp.28
           r8
           tmp.254
           tmp.30
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.126))
         (tmp.30
          (tmp.28
           tmp.29
           rcx
           r8
           tmp.254
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.126))
         (rcx
          (tmp.30
           tmp.254
           r15
           rdi
           rsi
           rdx
           tmp.29
           tmp.28
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.28 tmp.29 tmp.30 r8 tmp.254 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.254 r15 rdi rsi tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.254 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.254 ra.478))
         (tmp.254
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp))))
       (assignment ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.72
      ((new-frames ())
       (locals (tmp.27 tmp.249 ra.479))
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.249 ra.479 rbp)
         (tmp.249 tmp.27 ra.479 rbp)
         ((tmp.27 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.27 tmp.249 ra.479 rax))
         (ra.479 (tmp.27 tmp.249 rdi rsi rbp rax))
         (rsi (tmp.249 ra.479))
         (rdi (ra.479))
         (tmp.249 (tmp.27 rsi ra.479 rbp))
         (tmp.27 (tmp.249 ra.479 rbp))))
       (assignment ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals (make-init-vector.1 tmp.127 tmp.26 ra.480 tmp.246))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.246 ra.480 rbp)
         (rdx tmp.246 make-init-vector.1 ra.480 rbp)
         (tmp.246 tmp.26 make-init-vector.1 ra.480 rbp)
         ((tmp.26 make-init-vector.1 ra.480 rbp)
          ((tmp.26 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.26 make-init-vector.1 tmp.246 ra.480 r15 rdi rsi tmp.127 rax))
         (ra.480
          (tmp.26 make-init-vector.1 tmp.246 rdx rbp rdi rsi tmp.127 rax))
         (tmp.127 (tmp.26 ra.480 rbp))
         (tmp.26 (tmp.246 make-init-vector.1 ra.480 rbp tmp.127))
         (rsi (tmp.246 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.26 rdx tmp.246 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.246 ra.480))
         (tmp.246 (tmp.26 make-init-vector.1 rsi rdx ra.480 rbp))))
       (assignment ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.68
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.481 tmp.243 tmp.482 tmp.239))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.239 ra.481 rbp)
         (rdx tmp.239 tmp.24 ra.481 rbp)
         (tmp.239 tmp.25 tmp.24 ra.481 rbp)
         ((tmp.25 tmp.24 ra.481 rbp)
          ((tmp.482 tmp.25 tmp.24 ra.481 rbp)
           (tmp.243 tmp.25 tmp.24 ra.481 rbp)
           ((tmp.25 tmp.24 ra.481 rbp)
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.239 ra.481 tmp.243 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.25 tmp.24 tmp.239 rbp tmp.243 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.239 r15 rdi rsi tmp.24 ra.481 rbp))
         (tmp.24 (tmp.25 tmp.239 ra.481 rbp tmp.243 tmp.482 rdx))
         (rsi (tmp.239 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.24 tmp.25))
         (tmp.25 (tmp.239 tmp.24 ra.481 rbp tmp.243 tmp.482))
         (tmp.243 (tmp.25 tmp.24 ra.481 rbp))
         (tmp.239 (tmp.25 tmp.24 rsi rdx ra.481 rbp))))
       (assignment ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (tmp.24 tmp.25 tmp.241 ra.483))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.241 ra.483 rbp)
         (rdx tmp.241 tmp.24 ra.483 rbp)
         (tmp.241 tmp.24 tmp.25 ra.483 rbp)
         ((tmp.24 tmp.25 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.25 tmp.24 tmp.241 ra.483 rax))
         (ra.483 (tmp.25 tmp.24 tmp.241 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.241 ra.483))
         (rsi (tmp.241 ra.483))
         (rdi (ra.483))
         (tmp.241 (tmp.25 tmp.24 rsi rdx ra.483 rbp))
         (tmp.24 (tmp.25 rdx tmp.241 ra.483 rbp))
         (tmp.25 (tmp.241 tmp.24 ra.483 rbp))))
       (assignment ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.63
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.484 tmp.236 tmp.485 tmp.232))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.232 ra.484 rbp)
         (rdx tmp.232 tmp.22 ra.484 rbp)
         (tmp.232 tmp.23 tmp.22 ra.484 rbp)
         ((tmp.23 tmp.22 ra.484 rbp)
          ((tmp.485 tmp.23 tmp.22 ra.484 rbp)
           (tmp.236 tmp.23 tmp.22 ra.484 rbp)
           ((tmp.23 tmp.22 ra.484 rbp)
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.232 ra.484 tmp.236 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.23 tmp.22 tmp.232 rbp tmp.236 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.232 r15 rdi rsi tmp.22 ra.484 rbp))
         (tmp.22 (tmp.23 tmp.232 ra.484 rbp tmp.236 tmp.485 rdx))
         (rsi (tmp.232 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.22 tmp.23))
         (tmp.23 (tmp.232 tmp.22 ra.484 rbp tmp.236 tmp.485))
         (tmp.236 (tmp.23 tmp.22 ra.484 rbp))
         (tmp.232 (tmp.23 tmp.22 rsi rdx ra.484 rbp))))
       (assignment ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.62
      ((new-frames ())
       (locals (tmp.22 tmp.23 tmp.234 ra.486))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.234 ra.486 rbp)
         (rdx tmp.234 tmp.22 ra.486 rbp)
         (tmp.234 tmp.22 tmp.23 ra.486 rbp)
         ((tmp.22 tmp.23 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.23 tmp.22 tmp.234 ra.486 rax))
         (ra.486 (tmp.23 tmp.22 tmp.234 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.234 ra.486))
         (rsi (tmp.234 ra.486))
         (rdi (ra.486))
         (tmp.234 (tmp.23 tmp.22 rsi rdx ra.486 rbp))
         (tmp.22 (tmp.23 rdx tmp.234 ra.486 rbp))
         (tmp.23 (tmp.234 tmp.22 ra.486 rbp))))
       (assignment ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.58
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.487 tmp.229 tmp.488 tmp.225))
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.225 ra.487 rbp)
         (rdx tmp.225 tmp.20 ra.487 rbp)
         (tmp.225 tmp.21 tmp.20 ra.487 rbp)
         ((tmp.21 tmp.20 ra.487 rbp)
          ((tmp.488 tmp.21 tmp.20 ra.487 rbp)
           (tmp.229 tmp.21 tmp.20 ra.487 rbp)
           ((tmp.21 tmp.20 ra.487 rbp)
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.225 ra.487 tmp.229 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.21 tmp.20 tmp.225 rbp tmp.229 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.225 r15 rdi rsi tmp.20 ra.487 rbp))
         (tmp.20 (tmp.21 tmp.225 ra.487 rbp tmp.229 tmp.488 rdx))
         (rsi (tmp.225 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.20 tmp.21))
         (tmp.21 (tmp.225 tmp.20 ra.487 rbp tmp.229 tmp.488))
         (tmp.229 (tmp.21 tmp.20 ra.487 rbp))
         (tmp.225 (tmp.21 tmp.20 rsi rdx ra.487 rbp))))
       (assignment ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.57
      ((new-frames ())
       (locals (tmp.20 tmp.21 tmp.227 ra.489))
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.227 ra.489 rbp)
         (rdx tmp.227 tmp.20 ra.489 rbp)
         (tmp.227 tmp.20 tmp.21 ra.489 rbp)
         ((tmp.20 tmp.21 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.21 tmp.20 tmp.227 ra.489 rax))
         (ra.489 (tmp.21 tmp.20 tmp.227 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.227 ra.489))
         (rsi (tmp.227 ra.489))
         (rdi (ra.489))
         (tmp.227 (tmp.21 tmp.20 rsi rdx ra.489 rbp))
         (tmp.20 (tmp.21 rdx tmp.227 ra.489 rbp))
         (tmp.21 (tmp.227 tmp.20 ra.489 rbp))))
       (assignment ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.53
      ((new-frames ())
       (locals (tmp.19 tmp.18 ra.490 tmp.222 tmp.491 tmp.218))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.218 ra.490 rbp)
         (rdx tmp.218 tmp.18 ra.490 rbp)
         (tmp.218 tmp.19 tmp.18 ra.490 rbp)
         ((tmp.19 tmp.18 ra.490 rbp)
          ((tmp.491 tmp.19 tmp.18 ra.490 rbp)
           (tmp.222 tmp.19 tmp.18 ra.490 rbp)
           ((tmp.19 tmp.18 ra.490 rbp)
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.218 ra.490 tmp.222 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.19 tmp.18 tmp.218 rbp tmp.222 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.218 r15 rdi rsi tmp.18 ra.490 rbp))
         (tmp.18 (tmp.19 tmp.218 ra.490 rbp tmp.222 tmp.491 rdx))
         (rsi (tmp.218 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.18 tmp.19))
         (tmp.19 (tmp.218 tmp.18 ra.490 rbp tmp.222 tmp.491))
         (tmp.222 (tmp.19 tmp.18 ra.490 rbp))
         (tmp.218 (tmp.19 tmp.18 rsi rdx ra.490 rbp))))
       (assignment ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.52
      ((new-frames ())
       (locals (tmp.18 tmp.19 tmp.220 ra.492))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.220 ra.492 rbp)
         (rdx tmp.220 tmp.18 ra.492 rbp)
         (tmp.220 tmp.18 tmp.19 ra.492 rbp)
         ((tmp.18 tmp.19 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.19 tmp.18 tmp.220 ra.492 rax))
         (ra.492 (tmp.19 tmp.18 tmp.220 rdi rsi rdx rbp rax))
         (rdx (tmp.18 tmp.220 ra.492))
         (rsi (tmp.220 ra.492))
         (rdi (ra.492))
         (tmp.220 (tmp.19 tmp.18 rsi rdx ra.492 rbp))
         (tmp.18 (tmp.19 rdx tmp.220 ra.492 rbp))
         (tmp.19 (tmp.220 tmp.18 ra.492 rbp))))
       (assignment ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.48
      ((new-frames ())
       (locals (tmp.17 tmp.16 ra.493 tmp.215 tmp.494 tmp.212))
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.212 ra.493 rbp)
         (rdx tmp.212 tmp.16 ra.493 rbp)
         (tmp.212 tmp.17 tmp.16 ra.493 rbp)
         ((tmp.17 tmp.16 ra.493 rbp)
          ((tmp.494 tmp.17 tmp.16 ra.493 rbp)
           (tmp.215 tmp.17 tmp.16 ra.493 rbp)
           ((tmp.17 tmp.16 ra.493 rbp)
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.212 ra.493 tmp.215 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.17 tmp.16 tmp.212 rbp tmp.215 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.16 ra.493 rbp))
         (tmp.16 (tmp.17 tmp.212 ra.493 rbp tmp.215 tmp.494 rdx))
         (rsi (tmp.212 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.16 tmp.17))
         (tmp.17 (tmp.212 tmp.16 ra.493 rbp tmp.215 tmp.494))
         (tmp.215 (tmp.17 tmp.16 ra.493 rbp))
         (tmp.212 (tmp.17 tmp.16 rsi rdx ra.493 rbp))))
       (assignment ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (tmp.17 tmp.16 tmp.496 tmp.214 ra.495))
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.214 ra.495 rbp)
         (rdx tmp.214 tmp.16 ra.495 rbp)
         (tmp.214 tmp.17 tmp.16 ra.495 rbp)
         ((tmp.17 tmp.16 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.17 tmp.16 tmp.214 ra.495 tmp.496 rax))
         (ra.495 (tmp.17 tmp.16 tmp.214 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.16 tmp.214 ra.495))
         (rsi (tmp.214 ra.495))
         (rdi (ra.495))
         (tmp.214 (tmp.17 tmp.16 rsi rdx ra.495 rbp))
         (tmp.16 (tmp.17 rdx tmp.214 ra.495 rbp))
         (tmp.17 (tmp.214 tmp.16 ra.495 rbp))))
       (assignment ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.44
      ((new-frames ())
       (locals (tmp.15 tmp.14 ra.497 tmp.209 tmp.498 tmp.206))
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.206 ra.497 rbp)
         (rdx tmp.206 tmp.14 ra.497 rbp)
         (tmp.206 tmp.15 tmp.14 ra.497 rbp)
         ((tmp.15 tmp.14 ra.497 rbp)
          ((tmp.498 tmp.15 tmp.14 ra.497 rbp)
           (tmp.209 tmp.15 tmp.14 ra.497 rbp)
           ((tmp.15 tmp.14 ra.497 rbp)
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.206 ra.497 tmp.209 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.15 tmp.14 tmp.206 rbp tmp.209 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.206 r15 rdi rsi tmp.14 ra.497 rbp))
         (tmp.14 (tmp.15 tmp.206 ra.497 rbp tmp.209 tmp.498 rdx))
         (rsi (tmp.206 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.14 tmp.15))
         (tmp.15 (tmp.206 tmp.14 ra.497 rbp tmp.209 tmp.498))
         (tmp.209 (tmp.15 tmp.14 ra.497 rbp))
         (tmp.206 (tmp.15 tmp.14 rsi rdx ra.497 rbp))))
       (assignment ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (tmp.15 tmp.14 tmp.500 tmp.208 ra.499))
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.208 ra.499 rbp)
         (rdx tmp.208 tmp.14 ra.499 rbp)
         (tmp.208 tmp.15 tmp.14 ra.499 rbp)
         ((tmp.15 tmp.14 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.15 tmp.14 tmp.208 ra.499 tmp.500 rax))
         (ra.499 (tmp.15 tmp.14 tmp.208 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.14 tmp.208 ra.499))
         (rsi (tmp.208 ra.499))
         (rdi (ra.499))
         (tmp.208 (tmp.15 tmp.14 rsi rdx ra.499 rbp))
         (tmp.14 (tmp.15 rdx tmp.208 ra.499 rbp))
         (tmp.15 (tmp.208 tmp.14 ra.499 rbp))))
       (assignment ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.40
      ((new-frames ())
       (locals (tmp.12 tmp.13 ra.501 tmp.203 tmp.502 tmp.199))
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.199 ra.501 rbp)
         (rdx tmp.199 tmp.12 ra.501 rbp)
         (tmp.199 tmp.12 tmp.13 ra.501 rbp)
         ((tmp.12 tmp.13 ra.501 rbp)
          ((tmp.502 tmp.12 tmp.13 ra.501 rbp)
           (tmp.203 tmp.12 tmp.13 ra.501 rbp)
           ((tmp.12 tmp.13 ra.501 rbp)
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.13 tmp.12 tmp.199 ra.501 tmp.203 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.13 tmp.12 tmp.199 rbp tmp.203 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.12 tmp.199 r15 rdi rsi tmp.13 ra.501 rbp))
         (tmp.13 (tmp.199 tmp.12 ra.501 rbp tmp.203 tmp.502 rdx))
         (rsi (tmp.199 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.13 tmp.12))
         (tmp.12 (tmp.13 rdx tmp.199 ra.501 rbp tmp.203 tmp.502))
         (tmp.203 (tmp.12 tmp.13 ra.501 rbp))
         (tmp.199 (tmp.13 tmp.12 rsi rdx ra.501 rbp))))
       (assignment ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.39
      ((new-frames ())
       (locals (tmp.13 tmp.504 tmp.202 tmp.12 tmp.505 tmp.201 ra.503))
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.201 ra.503 rbp)
         (rdx tmp.201 tmp.13 ra.503 rbp)
         (tmp.201 tmp.13 tmp.12 ra.503 rbp)
         ((tmp.13 tmp.12 ra.503 rbp)
          ((tmp.504 tmp.12 ra.503 rbp)
           (tmp.202 tmp.12 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.12 tmp.13 tmp.201 ra.503 tmp.505 tmp.202 tmp.504 rax))
         (ra.503
          (tmp.12 tmp.13 tmp.201 rdi rsi rdx rbp tmp.505 tmp.202 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.12))
         (tmp.12 (tmp.201 tmp.13 ra.503 rbp tmp.202 tmp.504))
         (tmp.202 (tmp.12 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.13 tmp.201 ra.503))
         (rsi (tmp.201 ra.503))
         (rdi (ra.503))
         (tmp.201 (tmp.12 tmp.13 rsi rdx ra.503 rbp))
         (tmp.13 (tmp.12 rdx tmp.201 ra.503 rbp))))
       (assignment ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((new-frames ())
       (locals
        (tmp.358
         tmp.357
         tmp.356
         tmp.355
         tmp.354
         tmp.353
         tmp.149
         tmp.148
         tmp.147
         tmp.146
         tmp.145
         tmp.144
         tmp.352
         tmp.143
         tmp.142
         make-bigger?.6
         tmp.184
         tmp.392
         tmp.351
         apply-pred.5
         tmp.183
         tmp.391
         tmp.350
         filter.4
         tmp.182
         tmp.390
         tmp.349
         *.50
         tmp.181
         tmp.389
         tmp.348
         |+.51|
         tmp.180
         tmp.388
         tmp.347
         |-.52|
         tmp.179
         tmp.387
         tmp.346
         <.53
         tmp.178
         tmp.386
         tmp.345
         <=.54
         tmp.177
         tmp.385
         tmp.344
         >.55
         tmp.176
         tmp.384
         tmp.343
         >=.56
         tmp.175
         tmp.383
         tmp.342
         make-vector.57
         tmp.174
         tmp.382
         tmp.341
         vector-length.58
         tmp.173
         tmp.381
         tmp.340
         vector-set!.59
         tmp.172
         tmp.380
         tmp.339
         vector-ref.60
         tmp.171
         tmp.379
         tmp.338
         car.61
         tmp.170
         tmp.378
         tmp.337
         cdr.62
         tmp.169
         tmp.377
         tmp.336
         procedure-arity.63
         tmp.168
         tmp.376
         tmp.335
         fixnum?.64
         tmp.167
         tmp.375
         tmp.334
         boolean?.65
         tmp.166
         tmp.374
         tmp.333
         empty?.66
         tmp.165
         tmp.373
         tmp.332
         void?.67
         tmp.164
         tmp.372
         tmp.331
         ascii-char?.68
         tmp.163
         tmp.371
         tmp.330
         error?.69
         tmp.162
         tmp.370
         tmp.329
         pair?.70
         tmp.161
         tmp.369
         tmp.328
         procedure?.71
         tmp.160
         tmp.368
         tmp.327
         vector?.72
         tmp.159
         tmp.367
         tmp.326
         not.73
         tmp.158
         tmp.366
         tmp.325
         cons.74
         tmp.157
         tmp.365
         tmp.324
         eq?.75
         tmp.156
         tmp.364
         tmp.323
         make-init-vector.1
         tmp.155
         tmp.363
         tmp.322
         vector-init-loop.78
         tmp.154
         tmp.362
         tmp.321
         unsafe-vector-set!.2
         tmp.153
         tmp.361
         tmp.320
         unsafe-vector-ref.3
         tmp.152
         tmp.360
         tmp.319
         ra.359))
       (undead-out
        ((r12 ra.359 rbp)
         (r12 tmp.319 ra.359 rbp)
         (tmp.319 r12 ra.359 rbp)
         (tmp.360 r12 ra.359 rbp)
         (r12 ra.359 rbp tmp.152)
         (rbp ra.359 r12 tmp.152)
         (tmp.152 r12 ra.359 rbp)
         (r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.320 ra.359 rbp unsafe-vector-ref.3)
         (tmp.320 r12 ra.359 rbp unsafe-vector-ref.3)
         (tmp.361 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 ra.359 rbp unsafe-vector-ref.3 tmp.153)
         (unsafe-vector-ref.3 rbp ra.359 r12 tmp.153)
         (tmp.153 r12 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 tmp.321 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.321 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (tmp.362 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3 tmp.154)
         (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12 tmp.154)
         (tmp.154 r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.322
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.322
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.363
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.155)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          r12
          tmp.155)
         (tmp.155
          r12
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.323
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.323
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.156)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.324
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.324
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.157)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.325
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.325
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.158)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.326
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.326
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.159)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.160)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.161)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.162)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.163)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.164)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.165)
         (vector-init-loop.78
          unsafe-vector-ref.3
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.166)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.167)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.168)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.169)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.169)
         (tmp.169
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.378
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.170)
         (vector-init-loop.78
          unsafe-vector-ref.3
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.170)
         (tmp.170
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (tmp.379
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78
          tmp.171)
         (vector-init-loop.78
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.171)
         (tmp.171
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.380
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.172)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.172)
         (tmp.172
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.340
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.340
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.173)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.341
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.341
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.174)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.342
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.342
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.175)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.343
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.343
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.176)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.177)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.386
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.178)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.387
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.179)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.388
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.180)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.348
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (tmp.389
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78
          tmp.181)
         (vector-init-loop.78
          vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          make-init-vector.1
          tmp.181)
         (tmp.181
          make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (make-init-vector.1
          vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60
          vector-init-loop.78)
         (vector-ref.60
          unsafe-vector-ref.3
          make-vector.57
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59
          vector-init-loop.78
          make-init-vector.1)
         (vector-set!.59
          unsafe-vector-set!.2
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57
          unsafe-vector-ref.3
          vector-ref.60)
         (make-vector.57
          make-init-vector.1
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          unsafe-vector-set!.2
          vector-set!.59)
         (cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          make-init-vector.1
          make-vector.57)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 tmp.349 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.349 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (tmp.390 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 tmp.182)
         (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12 tmp.182)
         (tmp.182 r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62)
         (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62 filter.4)
         (r12
          tmp.350
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.350
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (tmp.391
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4
          tmp.183)
         (filter.4
          cdr.62
          cons.74
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          r12
          tmp.183)
         (tmp.183
          r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          cons.74
          cdr.62
          filter.4)
         (r12
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (r12
          tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.351
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (tmp.392
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4
          tmp.184)
         (filter.4
          cdr.62
          cons.74
          apply-pred.5
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          tmp.184)
         (tmp.184
          car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          apply-pred.5
          cons.74
          cdr.62
          filter.4)
         (cons.74
          apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (car.61
          empty?.66
          >.55
          rbp
          ra.359
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          cons.74
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          >.55
          empty?.66
          car.61
          filter.4)
         (empty?.66
          >.55
          car.61
          rbp
          ra.359
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5
          filter.4)
         (apply-pred.5
          cdr.62
          make-bigger?.6
          eq?.75
          cons.74
          ra.359
          rbp
          car.61
          >.55
          empty?.66
          filter.4)
         (>.55
          car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          cdr.62
          apply-pred.5)
         (make-bigger?.6
          eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          car.61
          >.55
          apply-pred.5)
         (car.61
          rbp
          ra.359
          filter.4
          cons.74
          eq?.75
          make-bigger?.6
          apply-pred.5)
         (eq?.75
          cons.74
          filter.4
          ra.359
          rbp
          make-bigger?.6
          car.61
          apply-pred.5)
         (make-bigger?.6 rbp ra.359 filter.4 cons.74 eq?.75 apply-pred.5)
         (cons.74 filter.4 ra.359 rbp make-bigger?.6)
         (rbp ra.359 filter.4 cons.74 make-bigger?.6)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         (make-bigger?.6 cons.74 filter.4 ra.359 rbp)
         ((rax cons.74 filter.4 ra.359 rbp)
          ((make-bigger?.6 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         (cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.353 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.354 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.355 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.356 cons.74 tmp.352 filter.4 ra.359 rbp)
         ((rax cons.74 tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (cons.74 tmp.357 tmp.352 filter.4 ra.359 rbp)
         ((rax tmp.352 filter.4 ra.359 rbp)
          ((cons.74 rdx rbp)
           (cons.74 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.358 tmp.352 filter.4 ra.359 rbp)
         (tmp.352 filter.4 ra.359 rdx rbp)
         (filter.4 ra.359 rsi rdx rbp)
         (ra.359 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (tmp.352 cons.74 filter.4 ra.359))
       (conflicts
        ((ra.359
          (rdi
           rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           tmp.319
           r12
           rbp))
         (rbp
          (tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rdx
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           r15
           rdi
           rsi
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           r12
           tmp.319
           ra.359))
         (r12
          (tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           unsafe-vector-ref.3
           tmp.152
           tmp.360
           rbp
           tmp.319
           ra.359))
         (tmp.319 (r12 ra.359 rbp))
         (tmp.360 (rbp ra.359 r12))
         (tmp.152 (r12 ra.359 rbp))
         (unsafe-vector-ref.3
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           unsafe-vector-set!.2
           tmp.153
           tmp.361
           tmp.320
           r12
           ra.359
           rbp))
         (tmp.320 (r12 ra.359 rbp unsafe-vector-ref.3))
         (tmp.361 (unsafe-vector-ref.3 rbp ra.359 r12))
         (tmp.153 (r12 ra.359 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           vector-init-loop.78
           tmp.154
           tmp.362
           tmp.321
           r12
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.321 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (tmp.362 (unsafe-vector-ref.3 rbp ra.359 unsafe-vector-set!.2 r12))
         (tmp.154 (r12 unsafe-vector-set!.2 ra.359 rbp unsafe-vector-ref.3))
         (vector-init-loop.78
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           make-init-vector.1
           tmp.155
           tmp.363
           tmp.322
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3))
         (tmp.322
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.363
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           r12))
         (tmp.155
          (r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (make-init-vector.1
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           eq?.75
           tmp.156
           tmp.364
           tmp.323
           r12
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.323
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.364
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (eq?.75
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           cons.74
           tmp.157
           tmp.365
           tmp.324
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.324
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.365
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cons.74
          (tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rsi
           rdx
           tmp.352
           rax
           tmp.143
           tmp.142
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           empty?.66
           tmp.165
           tmp.373
           tmp.332
           void?.67
           tmp.164
           tmp.372
           tmp.331
           ascii-char?.68
           tmp.163
           tmp.371
           tmp.330
           error?.69
           tmp.162
           tmp.370
           tmp.329
           pair?.70
           tmp.161
           tmp.369
           tmp.328
           procedure?.71
           tmp.160
           tmp.368
           tmp.327
           vector?.72
           tmp.159
           tmp.367
           tmp.326
           not.73
           tmp.158
           tmp.366
           tmp.325
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.325
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.366
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (not.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.326
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.367
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.368
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.369
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (pair?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.370
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (error?.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.371
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (ascii-char?.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.372
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (void?.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.373
          (vector-init-loop.78
           unsafe-vector-ref.3
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (empty?.66
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           cdr.62
           tmp.169
           tmp.377
           tmp.336
           procedure-arity.63
           tmp.168
           tmp.376
           tmp.335
           fixnum?.64
           tmp.167
           tmp.375
           tmp.334
           boolean?.65
           tmp.166
           tmp.374
           tmp.333
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.374
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (boolean?.65
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.375
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (fixnum?.64
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.376
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (procedure-arity.63
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.377
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.169
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (cdr.62
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           car.61
           tmp.170
           tmp.378
           tmp.337
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.378
          (vector-init-loop.78
           unsafe-vector-ref.3
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.170
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (car.61
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           vector-ref.60
           tmp.171
           tmp.379
           tmp.338
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.379
          (vector-init-loop.78
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.171
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (vector-ref.60
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           vector-set!.59
           tmp.172
           tmp.380
           tmp.339
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-init-loop.78))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.380
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.172
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-set!.59
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           make-vector.57
           tmp.174
           tmp.382
           tmp.341
           vector-length.58
           tmp.173
           tmp.381
           tmp.340
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.340
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.381
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (vector-length.58
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.341
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.382
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (make-vector.57
          (*.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           >.55
           tmp.176
           tmp.384
           tmp.343
           >=.56
           tmp.175
           tmp.383
           tmp.342
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.342
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.383
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>=.56
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.343
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.384
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (>.55
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           filter.4
           tmp.182
           tmp.390
           tmp.349
           *.50
           tmp.181
           tmp.389
           tmp.348
           |+.51|
           tmp.180
           tmp.388
           tmp.347
           |-.52|
           tmp.179
           tmp.387
           tmp.346
           <.53
           tmp.178
           tmp.386
           tmp.345
           <=.54
           tmp.177
           tmp.385
           tmp.344
           r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.385
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<=.54
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.386
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (<.53
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.387
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|-.52|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.388
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (|+.51|
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.389
          (vector-init-loop.78
           vector-ref.60
           unsafe-vector-ref.3
           make-vector.57
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           unsafe-vector-set!.2
           vector-set!.59
           make-init-vector.1))
         (tmp.181
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (*.50
          (make-init-vector.1
           vector-set!.59
           unsafe-vector-set!.2
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12
           make-vector.57
           unsafe-vector-ref.3
           vector-ref.60
           vector-init-loop.78))
         (tmp.349 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (tmp.390 (cdr.62 cons.74 eq?.75 ra.359 rbp >.55 empty?.66 car.61 r12))
         (tmp.182 (r12 car.61 empty?.66 >.55 rbp ra.359 eq?.75 cons.74 cdr.62))
         (filter.4
          (rsi
           rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           tmp.352
           rax
           tmp.143
           make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           apply-pred.5
           tmp.183
           tmp.391
           tmp.350
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62))
         (tmp.350
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.391
          (filter.4
           cdr.62
           cons.74
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61
           r12))
         (tmp.183
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (apply-pred.5
          (make-bigger?.6
           tmp.184
           tmp.392
           tmp.351
           r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           cons.74
           cdr.62
           filter.4))
         (tmp.351
          (r12
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.392
          (filter.4
           cdr.62
           cons.74
           apply-pred.5
           eq?.75
           ra.359
           rbp
           >.55
           empty?.66
           car.61))
         (tmp.184
          (car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (make-bigger?.6
          (rsi
           tmp.142
           car.61
           empty?.66
           >.55
           rbp
           ra.359
           eq?.75
           apply-pred.5
           cons.74
           cdr.62
           filter.4))
         (tmp.142 (make-bigger?.6 cons.74 ra.359 rbp))
         (tmp.143 (cons.74 filter.4 ra.359 rbp))
         (rax (tmp.352 rbp ra.359 filter.4 cons.74))
         (rsi (filter.4 ra.359 cons.74 rdx r15 rdi make-bigger?.6 rbp))
         (rdi (ra.359 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.352
          (rdx
           tmp.358
           tmp.357
           tmp.356
           tmp.355
           tmp.354
           tmp.353
           rax
           tmp.149
           tmp.148
           tmp.147
           tmp.146
           tmp.145
           tmp.144
           cons.74
           filter.4
           ra.359
           rbp))
         (tmp.144 (tmp.352 filter.4 ra.359 rbp))
         (tmp.145 (tmp.352 filter.4 ra.359 rbp))
         (tmp.146 (tmp.352 filter.4 ra.359 rbp))
         (tmp.147 (tmp.352 filter.4 ra.359 rbp))
         (tmp.148 (tmp.352 filter.4 ra.359 rbp))
         (tmp.149 (tmp.352 filter.4 ra.359 rbp))
         (rdx (tmp.352 filter.4 ra.359 r15 rdi rsi cons.74 rbp))
         (tmp.353 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.354 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.355 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.356 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.357 (cons.74 tmp.352 filter.4 ra.359 rbp))
         (tmp.358 (tmp.352 filter.4 ra.359 rbp)))))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 r12)
        (set! r12 (+ r12 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 r12)
        (set! r12 (+ r12 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 r12)
        (set! r12 (+ r12 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 r12)
        (set! r12 (+ r12 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 r12)
        (set! r12 (+ r12 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 r12)
        (set! r12 (+ r12 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33 rbp r15 rsi rdi)))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.353 rax)
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.354 rax)
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.355 rax)
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.356 rax)
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.357 rax)
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
    (define L.make-bigger?.6.33
      ((new-frames ())
       (locals (tmp.141 cons.74 make-bigger?.6 threshold.11 c.122 ra.393))
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi c.122 ra.393 rbp)
         (c.122 threshold.11 ra.393 rbp)
         (c.122 threshold.11 make-bigger?.6 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (threshold.11 make-bigger?.6 cons.74 ra.393 rbp)
         (make-bigger?.6 cons.74 ra.393 rdx rbp)
         (cons.74 ra.393 rsi rdx rbp)
         (ra.393 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.393
          (rdx tmp.141 cons.74 make-bigger?.6 threshold.11 c.122 rdi rsi rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           tmp.141
           cons.74
           make-bigger?.6
           threshold.11
           c.122
           ra.393))
         (rsi (r15 rdi cons.74 rdx rbp c.122 ra.393))
         (rdi (r15 rsi rdx rbp ra.393))
         (c.122 (make-bigger?.6 threshold.11 rsi ra.393 rbp))
         (threshold.11 (tmp.141 cons.74 make-bigger?.6 c.122 ra.393 rbp))
         (make-bigger?.6 (rdx tmp.141 cons.74 rbp ra.393 threshold.11 c.122))
         (cons.74 (rsi rdx rbp ra.393 make-bigger?.6 threshold.11))
         (tmp.141 (threshold.11 make-bigger?.6 ra.393 rbp))
         (rdx (r15 rdi rsi make-bigger?.6 cons.74 ra.393 rbp))
         (r15 (rdi rsi rdx rbp)))))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
    (define L.apply-pred.5.32
      ((new-frames ())
       (locals
        (tmp.186
         tmp.138
         tmp.137
         eq?.75
         car.61
         make-bigger?.6
         c.121
         tmp.187
         ra.394
         x.10
         tmp.188
         pred?.9
         tmp.140
         cdr.62
         tmp.139
         >.55))
       (undead-out
        ((rdi rsi rdx ra.394 rbp)
         (rsi rdx c.121 ra.394 rbp)
         (rdx c.121 pred?.9 ra.394 rbp)
         (c.121 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 ra.394 rbp)
         (c.121 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (c.121 car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         (car.61 eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((car.61 rsi rbp) (rdi rsi rbp) (rdi rsi r15 rbp) (rdi rsi r15 rbp)))
         (eq?.75 tmp.186 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((rax cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((tmp.186 eq?.75 rdx rbp)
           (eq?.75 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.187 cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
         ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
          ((cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           (cdr.62 pred?.9 x.10 >.55 ra.394 rbp)
           ((rax x.10 >.55 ra.394 rbp)
            ((cdr.62 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (tmp.188 x.10 >.55 ra.394 rbp)
           (x.10 >.55 ra.394 rdx rbp)
           (>.55 ra.394 rsi rdx rbp)
           (ra.394 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.394 rax rbp) (rax rbp)))))
       (call-undead (eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394))
       (conflicts
        ((rax (pred?.9 cdr.62 make-bigger?.6 eq?.75 >.55 x.10 ra.394 rbp))
         (rbp
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           ra.394
           rdx
           tmp.188
           r15
           rdi
           rsi
           tmp.140
           tmp.139
           rax))
         (ra.394
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           pred?.9
           c.121
           rbp
           rdi
           rsi
           rdx
           tmp.188
           tmp.140
           tmp.139
           rax))
         (tmp.139 (cdr.62 pred?.9 x.10 ra.394 rbp))
         (x.10
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           c.121
           pred?.9
           ra.394
           rbp
           rdx
           tmp.188
           rax
           tmp.140
           tmp.139))
         (pred?.9
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           cdr.62
           x.10
           rdx
           c.121
           ra.394
           rbp
           tmp.140
           tmp.139))
         (cdr.62
          (tmp.187
           tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           >.55
           rbp
           ra.394
           x.10
           pred?.9
           c.121
           rsi
           tmp.139))
         (tmp.140 (pred?.9 x.10 >.55 ra.394 rbp))
         (>.55
          (tmp.187
           tmp.186
           tmp.138
           tmp.137
           eq?.75
           car.61
           make-bigger?.6
           rbp
           ra.394
           x.10
           pred?.9
           cdr.62
           c.121
           rsi
           rdx
           tmp.188
           rax
           tmp.140))
         (rsi (eq?.75 car.61 c.121 >.55 ra.394 rdx r15 rdi cdr.62 rbp))
         (rdi (ra.394 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.188 (x.10 >.55 ra.394 rbp))
         (rdx (tmp.186 eq?.75 pred?.9 c.121 r15 rdi rsi x.10 >.55 ra.394 rbp))
         (c.121
          (car.61 make-bigger?.6 >.55 cdr.62 x.10 pred?.9 rsi rdx ra.394 rbp))
         (make-bigger?.6
          (tmp.186
           rax
           tmp.138
           tmp.137
           eq?.75
           car.61
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           c.121))
         (car.61
          (rsi
           tmp.137
           eq?.75
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           c.121))
         (eq?.75
          (rsi
           rdx
           tmp.186
           rax
           tmp.138
           rbp
           ra.394
           >.55
           x.10
           pred?.9
           cdr.62
           make-bigger?.6
           car.61))
         (tmp.137 (car.61 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.138 (eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.186
          (rdx eq?.75 make-bigger?.6 cdr.62 pred?.9 x.10 >.55 ra.394 rbp))
         (tmp.187 (cdr.62 pred?.9 x.10 >.55 ra.394 rbp)))))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19 rbp r15 rsi rdi)))
        (set! tmp.186 rax)
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5 rbp r15 rdx rsi rdi)))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25 rbp r15 rdx rsi rdi))
          (begin (set! rax 25406) (jump ra.394 rbp rax)))))
    (define L.filter.4.31
      ((new-frames ())
       (locals
        (tmp.128
         empty?.66
         c.120
         tmp.190
         cons.74
         tmp.131
         car.61
         tmp.132
         lox.8
         tmp.194
         filter.4
         tmp.133
         cdr.62
         tmp.134
         tmp.195
         pred?.7
         tmp.196
         ra.395
         tmp.197
         tmp.136
         tmp.135
         tmp.193
         apply-pred.5
         tmp.129
         tmp.130
         tmp.192))
       (undead-out
        ((rdi rsi rdx ra.395 rbp)
         (rsi rdx c.120 ra.395 rbp)
         (rdx c.120 pred?.7 ra.395 rbp)
         (c.120 pred?.7 lox.8 ra.395 rbp)
         (c.120 pred?.7 lox.8 cdr.62 ra.395 rbp)
         (c.120 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 ra.395 rbp)
         (c.120 cons.74 pred?.7 filter.4 lox.8 cdr.62 car.61 ra.395 rbp)
         (c.120
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         (empty?.66
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((rax
           cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((empty?.66 rsi rbp)
           (rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))
         (tmp.190
          cons.74
          pred?.7
          filter.4
          lox.8
          cdr.62
          car.61
          apply-pred.5
          ra.395
          rbp)
         ((cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           (apply-pred.5
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax
             apply-pred.5
             car.61
             cdr.62
             lox.8
             filter.4
             pred?.7
             cons.74
             ra.395
             rbp)
            ((car.61 rsi rbp)
             (rdi rsi rbp)
             (rdi rsi r15 rbp)
             (rdi rsi r15 rbp)))
           (apply-pred.5
            tmp.192
            car.61
            cdr.62
            lox.8
            filter.4
            pred?.7
            cons.74
            ra.395
            rbp)
           ((rax car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((pred?.7 apply-pred.5 rdx rbp)
             (apply-pred.5 rsi rdx rbp)
             (rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))
           (tmp.193 car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
           ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
            ((car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
             ((rax cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp)
              ((car.61 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             (cdr.62 lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
             ((rax filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (filter.4 pred?.7 tmp.195 tmp.194 cons.74 ra.395 rbp)
             ((rax tmp.194 cons.74 ra.395 rbp)
              ((pred?.7 filter.4 rdx rbp)
               (filter.4 rsi rdx rbp)
               (rdi rsi rdx rbp)
               (rdi rsi rdx r15 rbp)
               (rdi rsi rdx r15 rbp)))
             (tmp.196 tmp.194 cons.74 ra.395 rbp)
             (tmp.194 cons.74 ra.395 rdx rbp)
             (cons.74 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             (cdr.62 lox.8 pred?.7 filter.4 ra.395 rbp)
             ((rax pred?.7 filter.4 ra.395 rbp)
              ((cdr.62 rsi rbp)
               (rdi rsi rbp)
               (rdi rsi r15 rbp)
               (rdi rsi r15 rbp)))
             (tmp.197 pred?.7 filter.4 ra.395 rbp)
             (pred?.7 filter.4 ra.395 rdx rbp)
             (filter.4 ra.395 rsi rdx rbp)
             (ra.395 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp)))))))
       (call-undead
        (tmp.194
         cons.74
         pred?.7
         filter.4
         lox.8
         cdr.62
         car.61
         apply-pred.5
         ra.395))
       (conflicts
        ((tmp.135 (cdr.62 lox.8 pred?.7 ra.395 rbp))
         (rbp
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           ra.395
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           r15
           rdi
           rsi
           rax
           tmp.136
           tmp.135))
         (ra.395
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           c.120
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdi
           rsi
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (pred?.7
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           c.120
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           tmp.132
           tmp.131
           rdx
           tmp.197
           rax
           tmp.136
           tmp.135))
         (lox.8
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           c.120
           pred?.7
           ra.395
           rbp
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           tmp.136
           tmp.135))
         (cdr.62
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           filter.4
           rbp
           ra.395
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.133
           tmp.194
           rax
           tmp.132
           tmp.131
           rsi
           tmp.135))
         (tmp.136 (lox.8 pred?.7 filter.4 ra.395 rbp))
         (filter.4
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           cons.74
           rbp
           ra.395
           cdr.62
           lox.8
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           tmp.195
           tmp.134
           tmp.194
           tmp.132
           tmp.131
           rsi
           rdx
           tmp.197
           rax
           tmp.136))
         (rax
          (car.61
           apply-pred.5
           tmp.194
           cons.74
           lox.8
           cdr.62
           rbp
           ra.395
           filter.4
           pred?.7))
         (rsi
          (empty?.66
           c.120
           apply-pred.5
           cons.74
           car.61
           filter.4
           ra.395
           rdx
           r15
           rdi
           cdr.62
           rbp))
         (rdi (ra.395 rdx r15 rsi rbp))
         (r15 (rdx rdi rsi rbp))
         (tmp.197 (pred?.7 filter.4 ra.395 rbp))
         (rdx
          (c.120
           apply-pred.5
           tmp.194
           cons.74
           r15
           rdi
           rsi
           pred?.7
           filter.4
           ra.395
           rbp))
         (tmp.131 (car.61 cdr.62 lox.8 filter.4 pred?.7 ra.395 rbp))
         (car.61
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           tmp.193
           tmp.192
           rax
           tmp.129
           rsi
           tmp.131))
         (tmp.132 (cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (cons.74
          (tmp.190
           tmp.128
           empty?.66
           apply-pred.5
           car.61
           rbp
           ra.395
           cdr.62
           lox.8
           filter.4
           pred?.7
           c.120
           tmp.193
           tmp.192
           tmp.130
           tmp.129
           rsi
           rdx
           tmp.196
           tmp.195
           tmp.134
           tmp.133
           tmp.194
           rax
           tmp.132))
         (tmp.194
          (rdx
           tmp.196
           tmp.195
           rax
           tmp.134
           tmp.133
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.133 (cdr.62 lox.8 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.134 (lox.8 filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.195 (filter.4 pred?.7 tmp.194 cons.74 ra.395 rbp))
         (tmp.196 (tmp.194 cons.74 ra.395 rbp))
         (tmp.129 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (tmp.130
          (apply-pred.5 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (apply-pred.5
          (tmp.190
           tmp.128
           empty?.66
           rbp
           ra.395
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           c.120
           rsi
           rdx
           tmp.192
           rax
           tmp.130))
         (tmp.192
          (apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74
           ra.395
           rbp))
         (tmp.193 (car.61 cdr.62 lox.8 filter.4 pred?.7 cons.74 ra.395 rbp))
         (c.120
          (apply-pred.5
           car.61
           cons.74
           filter.4
           cdr.62
           lox.8
           pred?.7
           rsi
           rdx
           ra.395
           rbp))
         (empty?.66
          (rsi
           rbp
           ra.395
           apply-pred.5
           car.61
           cdr.62
           lox.8
           filter.4
           pred?.7
           cons.74))
         (tmp.128
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp))
         (tmp.190
          (cons.74
           pred?.7
           filter.4
           lox.8
           cdr.62
           car.61
           apply-pred.5
           ra.395
           rbp)))))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14 rbp r15 rsi rdi)))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395 rbp rax))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19 rbp r15 rsi rdi)))
            (set! tmp.192 rax)
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19 rbp r15 rsi rdi)))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.195 rax)
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6 rbp r15 rdx rsi rdi))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31 rbp r15 rdx rsi rdi)))))))
    (define L.*.50.30
      ((new-frames ())
       (locals (tmp.397 c.119 tmp.204 ra.396 tmp.12 tmp.13))
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.12 ra.396 rbp)
         (tmp.13 tmp.12 ra.396 rbp)
         (tmp.397 tmp.13 tmp.12 ra.396 rbp)
         (tmp.204 tmp.13 tmp.12 ra.396 rbp)
         ((tmp.13 tmp.12 ra.396 rbp)
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.12 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.12 ra.396 rbp))
         (rbp (tmp.204 tmp.397 tmp.13 tmp.12 c.119 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.204 tmp.397 tmp.13 tmp.12 c.119 rbp rdi rsi rdx))
         (tmp.12 (tmp.204 tmp.397 tmp.13 ra.396 rbp rdx))
         (rsi (c.119 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.396 rbp))
         (tmp.13 (tmp.204 tmp.397 tmp.12 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.12 tmp.13))
         (tmp.204 (tmp.13 tmp.12 ra.396 rbp)))))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi)))))
    (define L.+.51.29
      ((new-frames ())
       (locals (tmp.399 c.118 tmp.210 ra.398 tmp.14 tmp.15))
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.14 ra.398 rbp)
         (tmp.15 tmp.14 ra.398 rbp)
         (tmp.399 tmp.15 tmp.14 ra.398 rbp)
         (tmp.210 tmp.15 tmp.14 ra.398 rbp)
         ((tmp.15 tmp.14 ra.398 rbp)
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.14 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.118 r15 rdi rsi tmp.14 ra.398 rbp))
         (rbp (tmp.210 tmp.399 tmp.15 tmp.14 c.118 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.210 tmp.399 tmp.15 tmp.14 c.118 rbp rdi rsi rdx))
         (tmp.14 (tmp.210 tmp.399 tmp.15 ra.398 rbp rdx))
         (rsi (c.118 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (rsi rdx ra.398 rbp))
         (tmp.15 (tmp.210 tmp.399 tmp.14 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.14 tmp.15))
         (tmp.210 (tmp.15 tmp.14 ra.398 rbp)))))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi)))))
    (define L.-.52.28
      ((new-frames ())
       (locals (tmp.401 c.117 tmp.216 ra.400 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.16 ra.400 rbp)
         (tmp.17 tmp.16 ra.400 rbp)
         (tmp.401 tmp.17 tmp.16 ra.400 rbp)
         (tmp.216 tmp.17 tmp.16 ra.400 rbp)
         ((tmp.17 tmp.16 ra.400 rbp)
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.16 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.117 r15 rdi rsi tmp.16 ra.400 rbp))
         (rbp (tmp.216 tmp.401 tmp.17 tmp.16 c.117 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.216 tmp.401 tmp.17 tmp.16 c.117 rbp rdi rsi rdx))
         (tmp.16 (tmp.216 tmp.401 tmp.17 ra.400 rbp rdx))
         (rsi (c.117 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.400 rbp))
         (tmp.17 (tmp.216 tmp.401 tmp.16 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.16 tmp.17))
         (tmp.216 (tmp.17 tmp.16 ra.400 rbp)))))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<.53.27
      ((new-frames ())
       (locals (tmp.403 c.116 tmp.223 ra.402 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.18 ra.402 rbp)
         (tmp.19 tmp.18 ra.402 rbp)
         (tmp.403 tmp.19 tmp.18 ra.402 rbp)
         (tmp.223 tmp.19 tmp.18 ra.402 rbp)
         ((tmp.19 tmp.18 ra.402 rbp)
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.116 r15 rdi rsi tmp.18 ra.402 rbp))
         (rbp (tmp.223 tmp.403 tmp.19 tmp.18 c.116 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.223 tmp.403 tmp.19 tmp.18 c.116 rbp rdi rsi rdx))
         (tmp.18 (tmp.223 tmp.403 tmp.19 ra.402 rbp rdx))
         (rsi (c.116 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.116 (rsi rdx ra.402 rbp))
         (tmp.19 (tmp.223 tmp.403 tmp.18 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.18 tmp.19))
         (tmp.223 (tmp.19 tmp.18 ra.402 rbp)))))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.<=.54.26
      ((new-frames ())
       (locals (tmp.405 c.115 tmp.230 ra.404 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.20 ra.404 rbp)
         (tmp.21 tmp.20 ra.404 rbp)
         (tmp.405 tmp.21 tmp.20 ra.404 rbp)
         (tmp.230 tmp.21 tmp.20 ra.404 rbp)
         ((tmp.21 tmp.20 ra.404 rbp)
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.115 r15 rdi rsi tmp.20 ra.404 rbp))
         (rbp (tmp.230 tmp.405 tmp.21 tmp.20 c.115 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.230 tmp.405 tmp.21 tmp.20 c.115 rbp rdi rsi rdx))
         (tmp.20 (tmp.230 tmp.405 tmp.21 ra.404 rbp rdx))
         (rsi (c.115 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.115 (rsi rdx ra.404 rbp))
         (tmp.21 (tmp.230 tmp.405 tmp.20 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.20 tmp.21))
         (tmp.230 (tmp.21 tmp.20 ra.404 rbp)))))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>.55.25
      ((new-frames ())
       (locals (tmp.407 c.114 tmp.237 ra.406 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.22 ra.406 rbp)
         (tmp.23 tmp.22 ra.406 rbp)
         (tmp.407 tmp.23 tmp.22 ra.406 rbp)
         (tmp.237 tmp.23 tmp.22 ra.406 rbp)
         ((tmp.23 tmp.22 ra.406 rbp)
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.114 r15 rdi rsi tmp.22 ra.406 rbp))
         (rbp (tmp.237 tmp.407 tmp.23 tmp.22 c.114 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.237 tmp.407 tmp.23 tmp.22 c.114 rbp rdi rsi rdx))
         (tmp.22 (tmp.237 tmp.407 tmp.23 ra.406 rbp rdx))
         (rsi (c.114 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.114 (rsi rdx ra.406 rbp))
         (tmp.23 (tmp.237 tmp.407 tmp.22 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.22 tmp.23))
         (tmp.237 (tmp.23 tmp.22 ra.406 rbp)))))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.>=.56.24
      ((new-frames ())
       (locals (tmp.409 c.113 tmp.244 ra.408 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.24 ra.408 rbp)
         (tmp.25 tmp.24 ra.408 rbp)
         (tmp.409 tmp.25 tmp.24 ra.408 rbp)
         (tmp.244 tmp.25 tmp.24 ra.408 rbp)
         ((tmp.25 tmp.24 ra.408 rbp)
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.113 r15 rdi rsi tmp.24 ra.408 rbp))
         (rbp (tmp.244 tmp.409 tmp.25 tmp.24 c.113 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.244 tmp.409 tmp.25 tmp.24 c.113 rbp rdi rsi rdx))
         (tmp.24 (tmp.244 tmp.409 tmp.25 ra.408 rbp rdx))
         (rsi (c.113 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.113 (rsi rdx ra.408 rbp))
         (tmp.25 (tmp.244 tmp.409 tmp.24 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.24 tmp.25))
         (tmp.244 (tmp.25 tmp.24 ra.408 rbp)))))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.57.23
      ((new-frames ())
       (locals (tmp.411 c.112 tmp.247 ra.410 make-init-vector.1 tmp.26))
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.112 ra.410 rbp)
         (c.112 tmp.26 ra.410 rbp)
         (tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.26 make-init-vector.1 ra.410 rbp)
         (tmp.247 tmp.26 make-init-vector.1 ra.410 rbp)
         ((tmp.26 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.247
           tmp.411
           make-init-vector.1
           tmp.26
           c.112
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.247 tmp.411 make-init-vector.1 tmp.26 c.112 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.247 tmp.411 rbp ra.410 tmp.26 rdx))
         (rsi (c.112 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.112 (tmp.26 rsi ra.410 rbp))
         (tmp.26 (tmp.247 tmp.411 make-init-vector.1 c.112 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.26))
         (tmp.247 (tmp.26 make-init-vector.1 ra.410 rbp)))))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.58.22
      ((new-frames ())
       (locals (tmp.413 c.111 tmp.250 ra.412 tmp.27))
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.27 ra.412 rbp)
         (tmp.413 tmp.27 ra.412 rbp)
         (tmp.250 tmp.27 ra.412 rbp)
         ((tmp.27 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.111 r15 rdi ra.412 rbp))
         (rbp (tmp.250 tmp.413 tmp.27 c.111 ra.412 r15 rdi rsi))
         (ra.412 (tmp.250 tmp.413 tmp.27 c.111 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.111 (rsi ra.412 rbp))
         (tmp.27 (tmp.250 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.27))
         (tmp.250 (tmp.27 ra.412 rbp)))))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi)))))
    (define L.vector-set!.59.21
      ((new-frames ())
       (locals
        (tmp.415
         c.110
         tmp.256
         ra.414
         tmp.28
         unsafe-vector-set!.2
         tmp.30
         tmp.29))
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.110 ra.414 rbp)
         (rdx rcx c.110 tmp.28 ra.414 rbp)
         (rcx c.110 tmp.29 tmp.28 ra.414 rbp)
         (c.110 tmp.29 tmp.30 tmp.28 ra.414 rbp)
         (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.415 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         (tmp.256 tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
         ((tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.28 ra.414 rcx r8 rbp)
           (tmp.28 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp))
         (rbp
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           tmp.28
           c.110
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.28
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           tmp.29
           c.110
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.256 tmp.415 rbp ra.414 tmp.28 tmp.30 tmp.29 rcx r8))
         (tmp.30
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           c.110
           tmp.29
           tmp.28
           ra.414
           rbp
           r8))
         (rcx
          (tmp.29
           c.110
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.28
           ra.414
           r8
           rbp))
         (rdx (c.110 r15 rdi rsi tmp.28 ra.414 rcx r8 rbp))
         (rsi (c.110 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.110 (tmp.30 tmp.29 tmp.28 rsi rdx rcx ra.414 rbp))
         (tmp.29
          (tmp.256
           tmp.415
           unsafe-vector-set!.2
           tmp.30
           rcx
           c.110
           tmp.28
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29))
         (tmp.256 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.28 ra.414 rbp)))))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.60.20
      ((new-frames ())
       (locals
        (tmp.417 c.109 tmp.262 ra.416 tmp.31 unsafe-vector-ref.3 tmp.32))
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.109 ra.416 rbp)
         (rdx c.109 tmp.31 ra.416 rbp)
         (c.109 tmp.32 tmp.31 ra.416 rbp)
         (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.417 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         (tmp.262 tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
         ((tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.31 ra.416 rcx rbp)
           (tmp.31 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.31 ra.416 rbp))
         (rbp
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           tmp.31
           c.109
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.31
          (tmp.262
           tmp.417
           unsafe-vector-ref.3
           tmp.32
           c.109
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.262 tmp.417 rbp ra.416 tmp.31 tmp.32 rcx))
         (rdx (c.109 r15 rdi rsi tmp.31 ra.416 rcx rbp))
         (rsi (c.109 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.109 (tmp.32 tmp.31 rsi rdx ra.416 rbp))
         (tmp.32 (tmp.262 tmp.417 unsafe-vector-ref.3 c.109 tmp.31 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.31 unsafe-vector-ref.3 tmp.32))
         (tmp.262 (tmp.32 unsafe-vector-ref.3 tmp.31 ra.416 rbp)))))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.61.19
      ((new-frames ())
       (locals (tmp.419 c.108 tmp.265 ra.418 tmp.33))
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.33 ra.418 rbp)
         (tmp.419 tmp.33 ra.418 rbp)
         (tmp.265 tmp.33 ra.418 rbp)
         ((tmp.33 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.108 r15 rdi ra.418 rbp))
         (rbp (tmp.265 tmp.419 tmp.33 c.108 ra.418 r15 rdi rsi))
         (ra.418 (tmp.265 tmp.419 tmp.33 c.108 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.108 (rsi ra.418 rbp))
         (tmp.33 (tmp.265 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.33))
         (tmp.265 (tmp.33 ra.418 rbp)))))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi)))))
    (define L.cdr.62.18
      ((new-frames ())
       (locals (tmp.421 c.107 tmp.268 ra.420 tmp.34))
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.34 ra.420 rbp)
         (tmp.421 tmp.34 ra.420 rbp)
         (tmp.268 tmp.34 ra.420 rbp)
         ((tmp.34 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.107 r15 rdi ra.420 rbp))
         (rbp (tmp.268 tmp.421 tmp.34 c.107 ra.420 r15 rdi rsi))
         (ra.420 (tmp.268 tmp.421 tmp.34 c.107 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.107 (rsi ra.420 rbp))
         (tmp.34 (tmp.268 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.34))
         (tmp.268 (tmp.34 ra.420 rbp)))))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi)))))
    (define L.procedure-arity.63.17
      ((new-frames ())
       (locals (tmp.423 c.106 tmp.271 ra.422 tmp.35))
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.35 ra.422 rbp)
         (tmp.423 tmp.35 ra.422 rbp)
         (tmp.271 tmp.35 ra.422 rbp)
         ((tmp.35 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.106 r15 rdi ra.422 rbp))
         (rbp (tmp.271 tmp.423 tmp.35 c.106 ra.422 r15 rdi rsi))
         (ra.422 (tmp.271 tmp.423 tmp.35 c.106 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.106 (rsi ra.422 rbp))
         (tmp.35 (tmp.271 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.35))
         (tmp.271 (tmp.35 ra.422 rbp)))))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi)))))
    (define L.fixnum?.64.16
      ((new-frames ())
       (locals (tmp.425 tmp.36 c.105 ra.424 tmp.273))
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.36 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.273 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.273 tmp.425 tmp.36 c.105 ra.424 rax))
         (ra.424 (tmp.273 tmp.425 tmp.36 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.424))
         (rdi (ra.424))
         (c.105 (rsi ra.424 rbp))
         (tmp.36 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.273 (ra.424 rbp)))))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.65.15
      ((new-frames ())
       (locals (tmp.427 tmp.37 c.104 ra.426 tmp.275))
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.37 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.275 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.275 tmp.427 tmp.37 c.104 ra.426 rax))
         (ra.426 (tmp.275 tmp.427 tmp.37 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.426))
         (rdi (ra.426))
         (c.104 (rsi ra.426 rbp))
         (tmp.37 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.275 (ra.426 rbp)))))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.66.14
      ((new-frames ())
       (locals (tmp.429 tmp.38 c.103 ra.428 tmp.277))
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.38 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.277 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.277 tmp.429 tmp.38 c.103 ra.428 rax))
         (ra.428 (tmp.277 tmp.429 tmp.38 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.428))
         (rdi (ra.428))
         (c.103 (rsi ra.428 rbp))
         (tmp.38 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.277 (ra.428 rbp)))))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.67.13
      ((new-frames ())
       (locals (tmp.431 tmp.39 c.102 ra.430 tmp.279))
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.39 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.279 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.279 tmp.431 tmp.39 c.102 ra.430 rax))
         (ra.430 (tmp.279 tmp.431 tmp.39 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.430))
         (rdi (ra.430))
         (c.102 (rsi ra.430 rbp))
         (tmp.39 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.279 (ra.430 rbp)))))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.68.12
      ((new-frames ())
       (locals (tmp.433 tmp.40 c.101 ra.432 tmp.281))
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.40 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.281 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.281 tmp.433 tmp.40 c.101 ra.432 rax))
         (ra.432 (tmp.281 tmp.433 tmp.40 c.101 rdi rsi rbp rax))
         (rsi (c.101 ra.432))
         (rdi (ra.432))
         (c.101 (rsi ra.432 rbp))
         (tmp.40 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.281 (ra.432 rbp)))))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.69.11
      ((new-frames ())
       (locals (tmp.435 tmp.41 c.100 ra.434 tmp.283))
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.41 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.283 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.283 tmp.435 tmp.41 c.100 ra.434 rax))
         (ra.434 (tmp.283 tmp.435 tmp.41 c.100 rdi rsi rbp rax))
         (rsi (c.100 ra.434))
         (rdi (ra.434))
         (c.100 (rsi ra.434 rbp))
         (tmp.41 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.283 (ra.434 rbp)))))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.70.10
      ((new-frames ())
       (locals (tmp.437 tmp.42 c.99 ra.436 tmp.285))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.42 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.285 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.285 tmp.437 tmp.42 c.99 ra.436 rax))
         (ra.436 (tmp.285 tmp.437 tmp.42 c.99 rdi rsi rbp rax))
         (rsi (c.99 ra.436))
         (rdi (ra.436))
         (c.99 (rsi ra.436 rbp))
         (tmp.42 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.285 (ra.436 rbp)))))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.71.9
      ((new-frames ())
       (locals (tmp.439 tmp.43 c.98 ra.438 tmp.287))
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.43 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.287 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.287 tmp.439 tmp.43 c.98 ra.438 rax))
         (ra.438 (tmp.287 tmp.439 tmp.43 c.98 rdi rsi rbp rax))
         (rsi (c.98 ra.438))
         (rdi (ra.438))
         (c.98 (rsi ra.438 rbp))
         (tmp.43 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.287 (ra.438 rbp)))))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.72.8
      ((new-frames ())
       (locals (tmp.441 tmp.44 c.97 ra.440 tmp.289))
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.44 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.289 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.289 tmp.441 tmp.44 c.97 ra.440 rax))
         (ra.440 (tmp.289 tmp.441 tmp.44 c.97 rdi rsi rbp rax))
         (rsi (c.97 ra.440))
         (rdi (ra.440))
         (c.97 (rsi ra.440 rbp))
         (tmp.44 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.289 (ra.440 rbp)))))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.73.7
      ((new-frames ())
       (locals (c.96 ra.442 tmp.45))
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.45 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.45 c.96 ra.442 rax))
         (ra.442 (tmp.45 c.96 rdi rsi rbp rax))
         (rsi (c.96 ra.442))
         (rdi (ra.442))
         (c.96 (rsi ra.442 rbp))
         (tmp.45 (ra.442 rbp)))))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.74.6
      ((new-frames ())
       (locals (tmp.150 tmp.444 tmp.291 tmp.47 tmp.46 c.95 ra.443))
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.46)
         (r12 tmp.47 ra.443 rbp tmp.46)
         (r12 tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.291 tmp.47 ra.443 rbp tmp.46)
         (tmp.444 tmp.47 ra.443 rbp tmp.46)
         (tmp.47 ra.443 rbp tmp.46 tmp.150)
         (rbp ra.443 tmp.47 tmp.150)
         (tmp.150 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.443
          (rax tmp.150 tmp.444 tmp.291 tmp.47 tmp.46 c.95 rdi rsi rdx r12 rbp))
         (rbp (rax tmp.150 tmp.444 r12 tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (r12 (rbp tmp.291 tmp.47 tmp.46 c.95 ra.443))
         (rdx (tmp.46 c.95 ra.443))
         (rsi (c.95 ra.443))
         (rdi (ra.443))
         (c.95 (rsi rdx r12 ra.443 rbp))
         (tmp.46 (tmp.150 tmp.444 tmp.291 tmp.47 rdx r12 ra.443 rbp))
         (tmp.47 (tmp.150 tmp.444 tmp.291 r12 ra.443 rbp tmp.46))
         (tmp.291 (r12 tmp.47 ra.443 rbp tmp.46))
         (tmp.444 (tmp.46 rbp ra.443 tmp.47))
         (tmp.150 (tmp.47 ra.443 rbp tmp.46))
         (rax (ra.443 rbp)))))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443 rbp rax)))
    (define L.eq?.75.5
      ((new-frames ())
       (locals (c.94 ra.445 tmp.49 tmp.48))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.48 ra.445 rbp)
         (tmp.48 tmp.49 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.49 tmp.48 c.94 ra.445 rax))
         (ra.445 (tmp.49 tmp.48 c.94 rdi rsi rdx rbp rax))
         (rdx (tmp.48 c.94 ra.445))
         (rsi (c.94 ra.445))
         (rdi (ra.445))
         (c.94 (rsi rdx ra.445 rbp))
         (tmp.48 (tmp.49 rdx ra.445 rbp))
         (tmp.49 (tmp.48 ra.445 rbp)))))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (tmp.124
         tmp.77
         tmp.151
         tmp.451
         tmp.296
         tmp.540
         tmp.295
         tmp.450
         tmp.294
         tmp.449
         tmp.448
         tmp.293
         tmp.447
         vector-init-loop.78
         tmp.76
         c.93
         ra.446))
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.93 r12 rbp ra.446)
         (c.93 r12 rbp ra.446 tmp.76)
         (r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.447 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.293 tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.449 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.294 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.450 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.295 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.540 r12 tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.296 rbp ra.446 vector-init-loop.78 tmp.76)
         (tmp.451 rbp ra.446 vector-init-loop.78 tmp.76)
         (rbp ra.446 vector-init-loop.78 tmp.76 tmp.151)
         (tmp.151 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.77 tmp.76 vector-init-loop.78 ra.446 rbp)
         (tmp.76 vector-init-loop.78 ra.446 rcx rbp)
         (tmp.76 vector-init-loop.78 ra.446 rdx rcx rbp)
         (vector-init-loop.78 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           r12
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (r12
          (rbp
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           tmp.76
           c.93
           ra.446))
         (rsi (r15 rdi vector-init-loop.78 rdx rcx rbp c.93 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.93 (tmp.76 rsi r12 rbp ra.446))
         (tmp.76
          (rdx
           rcx
           tmp.124
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           vector-init-loop.78
           c.93
           r12
           rbp
           ra.446))
         (vector-init-loop.78
          (rsi
           rdx
           rcx
           tmp.77
           tmp.151
           tmp.451
           tmp.296
           tmp.540
           tmp.295
           tmp.450
           tmp.294
           tmp.449
           tmp.448
           tmp.293
           tmp.447
           tmp.76
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.293 (tmp.448 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.448 (tmp.293 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.449 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.294 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.450 (tmp.76 vector-init-loop.78 ra.446 rbp r12))
         (tmp.295 (r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.540 (tmp.296 r12 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.296 (r12 tmp.540 rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.451 (tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.151 (rbp ra.446 vector-init-loop.78 tmp.76))
         (tmp.77 (tmp.124 tmp.76 vector-init-loop.78 ra.446 rbp))
         (tmp.124 (tmp.77 tmp.76 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.76 vector-init-loop.78 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.76 vector-init-loop.78 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp)))))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.540 tmp.295)
        (set! tmp.296 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.78.3
      ((new-frames ())
       (locals (c.92 ra.452 i.81 len.79 vector-init-loop.78 vec.80))
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.92 ra.452 rbp)
         (rdx rcx c.92 len.79 ra.452 rbp)
         (rcx c.92 len.79 i.81 ra.452 rbp)
         (c.92 vec.80 len.79 i.81 ra.452 rbp)
         (vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
         ((vec.80 vector-init-loop.78 len.79 i.81 ra.452 rbp)
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.78 len.79 i.81 ra.452 r8 rbp)
           (len.79 i.81 ra.452 rcx r8 rbp)
           (i.81 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.78 len.79 i.81 ra.452 rbp))
         (rbp
          (vector-init-loop.78
           vec.80
           i.81
           len.79
           c.92
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.78 vec.80 i.81 len.79 c.92 rbp rdi rsi rdx rcx r8))
         (i.81 (vector-init-loop.78 vec.80 c.92 len.79 ra.452 rbp rdx rcx r8))
         (len.79 (vector-init-loop.78 vec.80 i.81 rdx c.92 ra.452 rbp rcx r8))
         (vector-init-loop.78 (rbp ra.452 i.81 len.79 vec.80 r8))
         (rcx (c.92 r15 rdi rsi rdx len.79 i.81 ra.452 r8 rbp))
         (rdx (len.79 c.92 r15 rdi rsi i.81 ra.452 rcx r8 rbp))
         (rsi (c.92 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.92 (vec.80 i.81 len.79 rsi rdx rcx ra.452 rbp))
         (vec.80 (vector-init-loop.78 c.92 len.79 i.81 ra.452 rbp)))))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (c.91 tmp.310 ra.453 tmp.88 tmp.89 tmp.87))
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.87 ra.453 rbp)
         (rcx tmp.87 tmp.88 ra.453 rbp)
         (tmp.87 tmp.89 tmp.88 ra.453 rbp)
         (tmp.310 tmp.87 tmp.89 tmp.88 ra.453 rbp)
         ((tmp.87 tmp.89 tmp.88 ra.453 rbp)
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.89 tmp.88 ra.453 rcx rbp)
           (tmp.88 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.87 c.91 r15 rdi rsi rdx tmp.89 tmp.88 ra.453 rbp))
         (rbp (tmp.310 tmp.89 tmp.88 tmp.87 c.91 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.310 tmp.89 tmp.88 tmp.87 c.91 rbp rdi rsi rdx rcx))
         (tmp.88 (tmp.310 tmp.89 tmp.87 ra.453 rbp rdx rcx))
         (tmp.89 (tmp.310 tmp.87 tmp.88 ra.453 rbp rcx))
         (rdx (tmp.87 c.91 r15 rdi rsi tmp.88 ra.453 rcx rbp))
         (rsi (c.91 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.91 (rsi rdx rcx ra.453 rbp))
         (tmp.87 (tmp.310 tmp.89 tmp.88 rdx rcx ra.453 rbp))
         (tmp.310 (rbp ra.453 tmp.88 tmp.89 tmp.87)))))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (c.90 tmp.318 ra.454 tmp.85 tmp.84))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.84 ra.454 rbp)
         (tmp.84 tmp.85 ra.454 rbp)
         (tmp.318 tmp.84 tmp.85 ra.454 rbp)
         ((tmp.84 tmp.85 ra.454 rbp)
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.85 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.84 c.90 r15 rdi rsi tmp.85 ra.454 rbp))
         (rbp (tmp.318 tmp.85 tmp.84 c.90 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.318 tmp.85 tmp.84 c.90 rbp rdi rsi rdx))
         (tmp.85 (tmp.318 tmp.84 ra.454 rbp rdx))
         (rsi (c.90 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.90 (rsi rdx ra.454 rbp))
         (tmp.84 (tmp.318 tmp.85 rdx ra.454 rbp))
         (tmp.318 (rbp ra.454 tmp.85 tmp.84)))))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi)))))
    (define L.jp.107
      ((new-frames ())
       (locals (tmp.312 ra.455 tmp.85 tmp.84))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.312 ra.455 rbp)
         (rdx tmp.312 tmp.85 ra.455 rbp)
         (tmp.312 tmp.84 tmp.85 ra.455 rbp)
         ((tmp.84 tmp.85 ra.455 rbp)
          ((tmp.84 tmp.85 ra.455 rbp)
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.85 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.84 tmp.85 tmp.312 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.84 tmp.85 tmp.312 rbp rdi rsi rdx rax))
         (rdx (tmp.312 r15 rdi rsi tmp.85 ra.455 rbp))
         (tmp.85 (tmp.84 tmp.312 ra.455 rbp rdx))
         (rsi (tmp.312 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.312 (tmp.84 tmp.85 rsi rdx ra.455 rbp))
         (tmp.84 (tmp.312 tmp.85 ra.455 rbp)))))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.106
      ((new-frames ())
       (locals
        (ra.456
         tmp.314
         tmp.84
         tmp.317
         tmp.459
         tmp.316
         tmp.458
         tmp.315
         tmp.457
         tmp.85))
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.314 ra.456 rbp)
         (rdx tmp.314 tmp.85 ra.456 rbp)
         (tmp.314 tmp.85 tmp.84 ra.456 rbp)
         ((tmp.85 tmp.84 ra.456 rbp)
          ((tmp.457 tmp.84 ra.456 rbp)
           (tmp.315 tmp.84 ra.456 rbp)
           (tmp.458 tmp.84 ra.456 rbp)
           (tmp.316 tmp.84 ra.456 rbp)
           (tmp.459 tmp.84 ra.456 rbp)
           (tmp.317 tmp.84 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.84
           tmp.85
           tmp.314
           ra.456
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (ra.456
          (tmp.84
           tmp.85
           tmp.314
           rdi
           rsi
           rdx
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.84))
         (tmp.84
          (tmp.314
           tmp.85
           ra.456
           rbp
           tmp.317
           tmp.459
           tmp.316
           tmp.458
           tmp.315
           tmp.457))
         (tmp.315 (tmp.84 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.84))
         (tmp.316 (tmp.84 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.84))
         (tmp.317 (tmp.84 ra.456 rbp))
         (rdx (tmp.85 tmp.314 ra.456))
         (rsi (tmp.314 ra.456))
         (rdi (ra.456))
         (tmp.314 (tmp.84 tmp.85 rsi rdx ra.456 rbp))
         (tmp.85 (tmp.84 rdx tmp.314 ra.456 rbp)))))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.103
      ((new-frames ())
       (locals (tmp.304 ra.460 tmp.88 tmp.87 tmp.89))
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.304 ra.460 rbp)
         (rdx rcx tmp.304 tmp.88 ra.460 rbp)
         (rcx tmp.304 tmp.89 tmp.88 ra.460 rbp)
         (tmp.304 tmp.89 tmp.87 tmp.88 ra.460 rbp)
         ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
          ((tmp.89 tmp.87 tmp.88 ra.460 rbp)
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.87 tmp.88 ra.460 rcx rbp)
            (tmp.88 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.87 tmp.89 tmp.88 tmp.304 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.87 tmp.89 tmp.88 tmp.304 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.89 tmp.304 r15 rdi rsi rdx tmp.87 tmp.88 ra.460 rbp))
         (tmp.88 (tmp.87 tmp.89 tmp.304 ra.460 rbp rdx rcx))
         (tmp.87 (tmp.304 tmp.89 tmp.88 ra.460 rbp rcx))
         (rdx (tmp.304 r15 rdi rsi tmp.88 ra.460 rcx rbp))
         (rsi (tmp.304 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.304 (tmp.87 tmp.89 tmp.88 rsi rdx rcx ra.460 rbp))
         (tmp.89 (tmp.87 rcx tmp.304 tmp.88 ra.460 rbp)))))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.102
      ((new-frames ())
       (locals
        (ra.461
         tmp.306
         tmp.87
         tmp.89
         tmp.309
         tmp.464
         tmp.308
         tmp.463
         tmp.307
         tmp.462
         tmp.88))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.306 rbp ra.461)
         (rdx rcx tmp.306 tmp.88 rbp ra.461)
         (rcx tmp.306 tmp.88 rbp ra.461 tmp.87)
         (tmp.306 tmp.88 rbp ra.461 tmp.89 tmp.87)
         ((tmp.88 rbp ra.461 tmp.89 tmp.87)
          ((tmp.462 rbp ra.461 tmp.89 tmp.87)
           (tmp.307 rbp ra.461 tmp.89 tmp.87)
           (tmp.463 rbp ra.461 tmp.89 tmp.87)
           (tmp.308 rbp ra.461 tmp.89 tmp.87)
           (tmp.464 rbp ra.461 tmp.89 tmp.87)
           (rbp ra.461 tmp.89 tmp.309 tmp.87)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (ra.461
          (tmp.89
           tmp.87
           tmp.88
           tmp.306
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462
           rax))
         (tmp.462 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.89
          (tmp.306
           tmp.88
           rbp
           ra.461
           tmp.87
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.87
          (tmp.89
           rcx
           tmp.306
           tmp.88
           rbp
           ra.461
           tmp.309
           tmp.464
           tmp.308
           tmp.463
           tmp.307
           tmp.462))
         (tmp.307 (rbp ra.461 tmp.89 tmp.87))
         (tmp.463 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.308 (rbp ra.461 tmp.89 tmp.87))
         (tmp.464 (tmp.87 tmp.89 ra.461 rbp))
         (tmp.309 (rbp ra.461 tmp.89 tmp.87))
         (rcx (tmp.87 tmp.88 tmp.306 ra.461))
         (rdx (tmp.88 tmp.306 ra.461))
         (rsi (tmp.306 ra.461))
         (rdi (ra.461))
         (tmp.306 (tmp.89 tmp.87 tmp.88 rsi rdx rcx rbp ra.461))
         (tmp.88 (tmp.89 tmp.87 rdx rcx tmp.306 rbp ra.461)))))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.99
      ((new-frames ())
       (locals
        (tmp.298
         i.81
         tmp.466
         tmp.299
         tmp.467
         tmp.300
         tmp.468
         tmp.301
         vector-init-loop.78
         tmp.123
         tmp.469
         tmp.302
         len.79
         ra.465
         vec.80))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.298 ra.465 rbp)
         (rdx rcx r8 tmp.298 i.81 ra.465 rbp)
         (rcx r8 tmp.298 i.81 len.79 ra.465 rbp)
         (r8 tmp.298 i.81 len.79 vector-init-loop.78 ra.465 rbp)
         (tmp.298 i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
         ((i.81 len.79 vector-init-loop.78 vec.80 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.299 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.467 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.300 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (tmp.468 rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80)
           (rbp ra.465 vector-init-loop.78 len.79 i.81 tmp.301 vec.80)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (i.81 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.469 vec.80 len.79 vector-init-loop.78 ra.465 rbp)
           (vec.80 tmp.302 len.79 vector-init-loop.78 ra.465 rbp)
           (tmp.302 len.79 vector-init-loop.78 ra.465 rcx rbp)
           (len.79 vector-init-loop.78 ra.465 rdx rcx rbp)
           (vector-init-loop.78 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.466 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (rbp
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (ra.465
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           tmp.298
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vector-init-loop.78
          (vec.80
           r8
           tmp.298
           i.81
           len.79
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (len.79
          (vec.80
           vector-init-loop.78
           r8
           tmp.298
           i.81
           ra.465
           rbp
           rdx
           rcx
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (i.81
          (vec.80
           vector-init-loop.78
           len.79
           rdx
           rcx
           r8
           tmp.298
           ra.465
           rbp
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (vec.80
          (tmp.298
           i.81
           len.79
           vector-init-loop.78
           ra.465
           rbp
           tmp.302
           tmp.469
           tmp.123
           tmp.301
           tmp.468
           tmp.300
           tmp.467
           tmp.299
           tmp.466))
         (tmp.299 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.467 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.300 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.468 (vec.80 i.81 len.79 vector-init-loop.78 ra.465 rbp))
         (tmp.301 (rbp ra.465 vector-init-loop.78 len.79 i.81 vec.80))
         (tmp.123 (i.81 vec.80 len.79 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.78 len.79 vec.80))
         (tmp.302 (rcx vec.80 len.79 vector-init-loop.78 ra.465 rbp))
         (rcx
          (i.81
           tmp.298
           r15
           rdi
           rsi
           rdx
           tmp.302
           len.79
           vector-init-loop.78
           ra.465
           rbp))
         (rdx
          (i.81 tmp.298 r15 rdi rsi len.79 vector-init-loop.78 ra.465 rcx rbp))
         (rsi (tmp.298 r15 rdi vector-init-loop.78 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.78 len.79 i.81 tmp.298 ra.465))
         (tmp.298
          (vec.80
           vector-init-loop.78
           len.79
           i.81
           rsi
           rdx
           rcx
           r8
           ra.465
           rbp)))))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.86
      ((new-frames ())
       (locals (ra.470 tmp.270 tmp.35))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.270 ra.470 rbp)
         (tmp.270 tmp.35 ra.470 rbp)
         ((tmp.35 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.35 tmp.270 ra.470 rax))
         (ra.470 (tmp.35 tmp.270 rdi rsi rbp rax))
         (rsi (tmp.270 ra.470))
         (rdi (ra.470))
         (tmp.270 (tmp.35 rsi ra.470 rbp))
         (tmp.35 (tmp.270 ra.470 rbp)))))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.84
      ((new-frames ())
       (locals (ra.471 tmp.267 tmp.34))
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.267 ra.471 rbp)
         (tmp.267 tmp.34 ra.471 rbp)
         ((tmp.34 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.34 tmp.267 ra.471 rax))
         (ra.471 (tmp.34 tmp.267 rdi rsi rbp rax))
         (rsi (tmp.267 ra.471))
         (rdi (ra.471))
         (tmp.267 (tmp.34 rsi ra.471 rbp))
         (tmp.34 (tmp.267 ra.471 rbp)))))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.82
      ((new-frames ())
       (locals (ra.472 tmp.264 tmp.33))
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.264 ra.472 rbp)
         (tmp.264 tmp.33 ra.472 rbp)
         ((tmp.33 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.33 tmp.264 ra.472 rax))
         (ra.472 (tmp.33 tmp.264 rdi rsi rbp rax))
         (rsi (tmp.264 ra.472))
         (rdi (ra.472))
         (tmp.264 (tmp.33 rsi ra.472 rbp))
         (tmp.33 (tmp.264 ra.472 rbp)))))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.80
      ((new-frames ())
       (locals
        (tmp.258 tmp.474 tmp.261 ra.473 unsafe-vector-ref.3 tmp.32 tmp.31))
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.258 ra.473 rbp)
         (rdx rcx tmp.258 tmp.31 ra.473 rbp)
         (rcx tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.258 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.261 tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.32 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           ra.473
           tmp.261
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.32
           unsafe-vector-ref.3
           tmp.31
           tmp.258
           rbp
           tmp.261
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.31
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.32
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.32 tmp.258 tmp.31 ra.473 rbp tmp.261 tmp.474 rdx rcx))
         (tmp.32
          (tmp.258 tmp.31 unsafe-vector-ref.3 ra.473 rbp tmp.261 tmp.474 rcx))
         (rdx (tmp.31 tmp.258 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.258 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.32 tmp.31))
         (tmp.31
          (tmp.32
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.258
           ra.473
           rbp
           tmp.261
           tmp.474))
         (tmp.261 (tmp.31 tmp.32 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.258
          (tmp.32 unsafe-vector-ref.3 tmp.31 rsi rdx rcx ra.473 rbp)))))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (tmp.260 ra.475 tmp.31 tmp.32 tmp.125 unsafe-vector-ref.3))
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.260 ra.475 rbp)
         (rdx rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.260 tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.32 tmp.31 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.31 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (ra.475
          (tmp.31
           tmp.32
           unsafe-vector-ref.3
           tmp.260
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.125
           rax))
         (tmp.125 (tmp.32 tmp.31 ra.475 rbp))
         (tmp.31 (tmp.260 tmp.32 unsafe-vector-ref.3 ra.475 rbp rdx tmp.125))
         (tmp.32 (tmp.31 rcx tmp.260 unsafe-vector-ref.3 ra.475 rbp tmp.125))
         (rdx (tmp.260 r15 rdi rsi tmp.31 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.31 tmp.32 rcx tmp.260 ra.475 rbp rsi rdx))
         (rsi (tmp.260 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.32 unsafe-vector-ref.3 tmp.260 ra.475))
         (tmp.260
          (tmp.31 tmp.32 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp)))))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.76
      ((new-frames ())
       (locals
        (tmp.252
         tmp.477
         tmp.255
         ra.476
         unsafe-vector-set!.2
         tmp.30
         tmp.29
         tmp.28))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.252 ra.476 rbp)
         (rdx rcx r8 tmp.252 tmp.28 ra.476 rbp)
         (rcx r8 tmp.252 tmp.28 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.252 tmp.28 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.252 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.255 tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.30 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           ra.476
           tmp.255
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           tmp.252
           rbp
           tmp.255
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.29 tmp.30 tmp.252 tmp.28 ra.476 rbp tmp.255 tmp.477 rdx rcx r8))
         (tmp.30
          (tmp.29
           tmp.252
           tmp.28
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           rcx
           r8))
         (tmp.29
          (tmp.252
           tmp.28
           tmp.30
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.255
           tmp.477
           r8))
         (rcx
          (tmp.28
           tmp.252
           r15
           rdi
           rsi
           rdx
           tmp.30
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.28 tmp.252 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.252 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28))
         (tmp.28
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.252
           ra.476
           rbp
           tmp.255
           tmp.477))
         (tmp.255 (tmp.28 tmp.29 tmp.30 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.252
          (tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.28
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp)))))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals
        (tmp.254 ra.478 tmp.28 tmp.29 tmp.30 tmp.126 unsafe-vector-set!.2))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.254 ra.478 rbp)
         (rdx rcx r8 tmp.254 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.254 tmp.30 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.254 tmp.30 tmp.29 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.254 tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.30 tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.29 tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.28 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (ra.478
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           tmp.254
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.126
           rax))
         (tmp.126 (tmp.30 tmp.29 tmp.28 ra.478 rbp))
         (tmp.28
          (tmp.254
           tmp.30
           tmp.29
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.126))
         (tmp.29
          (tmp.28
           r8
           tmp.254
           tmp.30
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.126))
         (tmp.30
          (tmp.28
           tmp.29
           rcx
           r8
           tmp.254
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.126))
         (rcx
          (tmp.30
           tmp.254
           r15
           rdi
           rsi
           rdx
           tmp.29
           tmp.28
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.28 tmp.29 tmp.30 r8 tmp.254 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.254 r15 rdi rsi tmp.28 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.254 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.29 tmp.30 unsafe-vector-set!.2 tmp.254 ra.478))
         (tmp.254
          (tmp.28
           tmp.29
           tmp.30
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp)))))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.72
      ((new-frames ())
       (locals (ra.479 tmp.249 tmp.27))
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.249 ra.479 rbp)
         (tmp.249 tmp.27 ra.479 rbp)
         ((tmp.27 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.27 tmp.249 ra.479 rax))
         (ra.479 (tmp.27 tmp.249 rdi rsi rbp rax))
         (rsi (tmp.249 ra.479))
         (rdi (ra.479))
         (tmp.249 (tmp.27 rsi ra.479 rbp))
         (tmp.27 (tmp.249 ra.479 rbp)))))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals (tmp.246 ra.480 tmp.26 tmp.127 make-init-vector.1))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.246 ra.480 rbp)
         (rdx tmp.246 make-init-vector.1 ra.480 rbp)
         (tmp.246 tmp.26 make-init-vector.1 ra.480 rbp)
         ((tmp.26 make-init-vector.1 ra.480 rbp)
          ((tmp.26 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.26 make-init-vector.1 tmp.246 ra.480 r15 rdi rsi tmp.127 rax))
         (ra.480
          (tmp.26 make-init-vector.1 tmp.246 rdx rbp rdi rsi tmp.127 rax))
         (tmp.127 (tmp.26 ra.480 rbp))
         (tmp.26 (tmp.246 make-init-vector.1 ra.480 rbp tmp.127))
         (rsi (tmp.246 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.26 rdx tmp.246 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.246 ra.480))
         (tmp.246 (tmp.26 make-init-vector.1 rsi rdx ra.480 rbp)))))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.68
      ((new-frames ())
       (locals (tmp.239 tmp.482 tmp.243 ra.481 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.239 ra.481 rbp)
         (rdx tmp.239 tmp.24 ra.481 rbp)
         (tmp.239 tmp.25 tmp.24 ra.481 rbp)
         ((tmp.25 tmp.24 ra.481 rbp)
          ((tmp.482 tmp.25 tmp.24 ra.481 rbp)
           (tmp.243 tmp.25 tmp.24 ra.481 rbp)
           ((tmp.25 tmp.24 ra.481 rbp)
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.239 ra.481 tmp.243 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.25 tmp.24 tmp.239 rbp tmp.243 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.239 r15 rdi rsi tmp.24 ra.481 rbp))
         (tmp.24 (tmp.25 tmp.239 ra.481 rbp tmp.243 tmp.482 rdx))
         (rsi (tmp.239 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.24 tmp.25))
         (tmp.25 (tmp.239 tmp.24 ra.481 rbp tmp.243 tmp.482))
         (tmp.243 (tmp.25 tmp.24 ra.481 rbp))
         (tmp.239 (tmp.25 tmp.24 rsi rdx ra.481 rbp)))))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (ra.483 tmp.241 tmp.25 tmp.24))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.241 ra.483 rbp)
         (rdx tmp.241 tmp.24 ra.483 rbp)
         (tmp.241 tmp.24 tmp.25 ra.483 rbp)
         ((tmp.24 tmp.25 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.25 tmp.24 tmp.241 ra.483 rax))
         (ra.483 (tmp.25 tmp.24 tmp.241 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.241 ra.483))
         (rsi (tmp.241 ra.483))
         (rdi (ra.483))
         (tmp.241 (tmp.25 tmp.24 rsi rdx ra.483 rbp))
         (tmp.24 (tmp.25 rdx tmp.241 ra.483 rbp))
         (tmp.25 (tmp.241 tmp.24 ra.483 rbp)))))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.63
      ((new-frames ())
       (locals (tmp.232 tmp.485 tmp.236 ra.484 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.232 ra.484 rbp)
         (rdx tmp.232 tmp.22 ra.484 rbp)
         (tmp.232 tmp.23 tmp.22 ra.484 rbp)
         ((tmp.23 tmp.22 ra.484 rbp)
          ((tmp.485 tmp.23 tmp.22 ra.484 rbp)
           (tmp.236 tmp.23 tmp.22 ra.484 rbp)
           ((tmp.23 tmp.22 ra.484 rbp)
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.232 ra.484 tmp.236 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.23 tmp.22 tmp.232 rbp tmp.236 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.232 r15 rdi rsi tmp.22 ra.484 rbp))
         (tmp.22 (tmp.23 tmp.232 ra.484 rbp tmp.236 tmp.485 rdx))
         (rsi (tmp.232 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.22 tmp.23))
         (tmp.23 (tmp.232 tmp.22 ra.484 rbp tmp.236 tmp.485))
         (tmp.236 (tmp.23 tmp.22 ra.484 rbp))
         (tmp.232 (tmp.23 tmp.22 rsi rdx ra.484 rbp)))))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.62
      ((new-frames ())
       (locals (ra.486 tmp.234 tmp.23 tmp.22))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.234 ra.486 rbp)
         (rdx tmp.234 tmp.22 ra.486 rbp)
         (tmp.234 tmp.22 tmp.23 ra.486 rbp)
         ((tmp.22 tmp.23 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.23 tmp.22 tmp.234 ra.486 rax))
         (ra.486 (tmp.23 tmp.22 tmp.234 rdi rsi rdx rbp rax))
         (rdx (tmp.22 tmp.234 ra.486))
         (rsi (tmp.234 ra.486))
         (rdi (ra.486))
         (tmp.234 (tmp.23 tmp.22 rsi rdx ra.486 rbp))
         (tmp.22 (tmp.23 rdx tmp.234 ra.486 rbp))
         (tmp.23 (tmp.234 tmp.22 ra.486 rbp)))))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.58
      ((new-frames ())
       (locals (tmp.225 tmp.488 tmp.229 ra.487 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.225 ra.487 rbp)
         (rdx tmp.225 tmp.20 ra.487 rbp)
         (tmp.225 tmp.21 tmp.20 ra.487 rbp)
         ((tmp.21 tmp.20 ra.487 rbp)
          ((tmp.488 tmp.21 tmp.20 ra.487 rbp)
           (tmp.229 tmp.21 tmp.20 ra.487 rbp)
           ((tmp.21 tmp.20 ra.487 rbp)
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.225 ra.487 tmp.229 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.21 tmp.20 tmp.225 rbp tmp.229 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.225 r15 rdi rsi tmp.20 ra.487 rbp))
         (tmp.20 (tmp.21 tmp.225 ra.487 rbp tmp.229 tmp.488 rdx))
         (rsi (tmp.225 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.20 tmp.21))
         (tmp.21 (tmp.225 tmp.20 ra.487 rbp tmp.229 tmp.488))
         (tmp.229 (tmp.21 tmp.20 ra.487 rbp))
         (tmp.225 (tmp.21 tmp.20 rsi rdx ra.487 rbp)))))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.57
      ((new-frames ())
       (locals (ra.489 tmp.227 tmp.21 tmp.20))
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.227 ra.489 rbp)
         (rdx tmp.227 tmp.20 ra.489 rbp)
         (tmp.227 tmp.20 tmp.21 ra.489 rbp)
         ((tmp.20 tmp.21 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.21 tmp.20 tmp.227 ra.489 rax))
         (ra.489 (tmp.21 tmp.20 tmp.227 rdi rsi rdx rbp rax))
         (rdx (tmp.20 tmp.227 ra.489))
         (rsi (tmp.227 ra.489))
         (rdi (ra.489))
         (tmp.227 (tmp.21 tmp.20 rsi rdx ra.489 rbp))
         (tmp.20 (tmp.21 rdx tmp.227 ra.489 rbp))
         (tmp.21 (tmp.227 tmp.20 ra.489 rbp)))))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.53
      ((new-frames ())
       (locals (tmp.218 tmp.491 tmp.222 ra.490 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.218 ra.490 rbp)
         (rdx tmp.218 tmp.18 ra.490 rbp)
         (tmp.218 tmp.19 tmp.18 ra.490 rbp)
         ((tmp.19 tmp.18 ra.490 rbp)
          ((tmp.491 tmp.19 tmp.18 ra.490 rbp)
           (tmp.222 tmp.19 tmp.18 ra.490 rbp)
           ((tmp.19 tmp.18 ra.490 rbp)
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.18 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.218 ra.490 tmp.222 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.19 tmp.18 tmp.218 rbp tmp.222 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.218 r15 rdi rsi tmp.18 ra.490 rbp))
         (tmp.18 (tmp.19 tmp.218 ra.490 rbp tmp.222 tmp.491 rdx))
         (rsi (tmp.218 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.18 tmp.19))
         (tmp.19 (tmp.218 tmp.18 ra.490 rbp tmp.222 tmp.491))
         (tmp.222 (tmp.19 tmp.18 ra.490 rbp))
         (tmp.218 (tmp.19 tmp.18 rsi rdx ra.490 rbp)))))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.52
      ((new-frames ())
       (locals (ra.492 tmp.220 tmp.19 tmp.18))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.220 ra.492 rbp)
         (rdx tmp.220 tmp.18 ra.492 rbp)
         (tmp.220 tmp.18 tmp.19 ra.492 rbp)
         ((tmp.18 tmp.19 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.19 tmp.18 tmp.220 ra.492 rax))
         (ra.492 (tmp.19 tmp.18 tmp.220 rdi rsi rdx rbp rax))
         (rdx (tmp.18 tmp.220 ra.492))
         (rsi (tmp.220 ra.492))
         (rdi (ra.492))
         (tmp.220 (tmp.19 tmp.18 rsi rdx ra.492 rbp))
         (tmp.18 (tmp.19 rdx tmp.220 ra.492 rbp))
         (tmp.19 (tmp.220 tmp.18 ra.492 rbp)))))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.48
      ((new-frames ())
       (locals (tmp.212 tmp.494 tmp.215 ra.493 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.212 ra.493 rbp)
         (rdx tmp.212 tmp.16 ra.493 rbp)
         (tmp.212 tmp.17 tmp.16 ra.493 rbp)
         ((tmp.17 tmp.16 ra.493 rbp)
          ((tmp.494 tmp.17 tmp.16 ra.493 rbp)
           (tmp.215 tmp.17 tmp.16 ra.493 rbp)
           ((tmp.17 tmp.16 ra.493 rbp)
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.16 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.17 tmp.16 tmp.212 ra.493 tmp.215 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.17 tmp.16 tmp.212 rbp tmp.215 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.16 ra.493 rbp))
         (tmp.16 (tmp.17 tmp.212 ra.493 rbp tmp.215 tmp.494 rdx))
         (rsi (tmp.212 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.16 tmp.17))
         (tmp.17 (tmp.212 tmp.16 ra.493 rbp tmp.215 tmp.494))
         (tmp.215 (tmp.17 tmp.16 ra.493 rbp))
         (tmp.212 (tmp.17 tmp.16 rsi rdx ra.493 rbp)))))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (ra.495 tmp.214 tmp.496 tmp.16 tmp.17))
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.214 ra.495 rbp)
         (rdx tmp.214 tmp.16 ra.495 rbp)
         (tmp.214 tmp.17 tmp.16 ra.495 rbp)
         ((tmp.17 tmp.16 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.17 tmp.16 tmp.214 ra.495 tmp.496 rax))
         (ra.495 (tmp.17 tmp.16 tmp.214 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.16 tmp.214 ra.495))
         (rsi (tmp.214 ra.495))
         (rdi (ra.495))
         (tmp.214 (tmp.17 tmp.16 rsi rdx ra.495 rbp))
         (tmp.16 (tmp.17 rdx tmp.214 ra.495 rbp))
         (tmp.17 (tmp.214 tmp.16 ra.495 rbp)))))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.44
      ((new-frames ())
       (locals (tmp.206 tmp.498 tmp.209 ra.497 tmp.14 tmp.15))
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.206 ra.497 rbp)
         (rdx tmp.206 tmp.14 ra.497 rbp)
         (tmp.206 tmp.15 tmp.14 ra.497 rbp)
         ((tmp.15 tmp.14 ra.497 rbp)
          ((tmp.498 tmp.15 tmp.14 ra.497 rbp)
           (tmp.209 tmp.15 tmp.14 ra.497 rbp)
           ((tmp.15 tmp.14 ra.497 rbp)
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.14 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.15 tmp.14 tmp.206 ra.497 tmp.209 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.15 tmp.14 tmp.206 rbp tmp.209 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.206 r15 rdi rsi tmp.14 ra.497 rbp))
         (tmp.14 (tmp.15 tmp.206 ra.497 rbp tmp.209 tmp.498 rdx))
         (rsi (tmp.206 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.14 tmp.15))
         (tmp.15 (tmp.206 tmp.14 ra.497 rbp tmp.209 tmp.498))
         (tmp.209 (tmp.15 tmp.14 ra.497 rbp))
         (tmp.206 (tmp.15 tmp.14 rsi rdx ra.497 rbp)))))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (ra.499 tmp.208 tmp.500 tmp.14 tmp.15))
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.208 ra.499 rbp)
         (rdx tmp.208 tmp.14 ra.499 rbp)
         (tmp.208 tmp.15 tmp.14 ra.499 rbp)
         ((tmp.15 tmp.14 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.15 tmp.14 tmp.208 ra.499 tmp.500 rax))
         (ra.499 (tmp.15 tmp.14 tmp.208 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.14 tmp.208 ra.499))
         (rsi (tmp.208 ra.499))
         (rdi (ra.499))
         (tmp.208 (tmp.15 tmp.14 rsi rdx ra.499 rbp))
         (tmp.14 (tmp.15 rdx tmp.208 ra.499 rbp))
         (tmp.15 (tmp.208 tmp.14 ra.499 rbp)))))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.40
      ((new-frames ())
       (locals (tmp.199 tmp.502 tmp.203 ra.501 tmp.13 tmp.12))
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.199 ra.501 rbp)
         (rdx tmp.199 tmp.12 ra.501 rbp)
         (tmp.199 tmp.12 tmp.13 ra.501 rbp)
         ((tmp.12 tmp.13 ra.501 rbp)
          ((tmp.502 tmp.12 tmp.13 ra.501 rbp)
           (tmp.203 tmp.12 tmp.13 ra.501 rbp)
           ((tmp.12 tmp.13 ra.501 rbp)
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.13 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.13 tmp.12 tmp.199 ra.501 tmp.203 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.13 tmp.12 tmp.199 rbp tmp.203 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.12 tmp.199 r15 rdi rsi tmp.13 ra.501 rbp))
         (tmp.13 (tmp.199 tmp.12 ra.501 rbp tmp.203 tmp.502 rdx))
         (rsi (tmp.199 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.13 tmp.12))
         (tmp.12 (tmp.13 rdx tmp.199 ra.501 rbp tmp.203 tmp.502))
         (tmp.203 (tmp.12 tmp.13 ra.501 rbp))
         (tmp.199 (tmp.13 tmp.12 rsi rdx ra.501 rbp)))))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.39
      ((new-frames ())
       (locals (ra.503 tmp.201 tmp.505 tmp.12 tmp.202 tmp.504 tmp.13))
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.201 ra.503 rbp)
         (rdx tmp.201 tmp.13 ra.503 rbp)
         (tmp.201 tmp.13 tmp.12 ra.503 rbp)
         ((tmp.13 tmp.12 ra.503 rbp)
          ((tmp.504 tmp.12 ra.503 rbp)
           (tmp.202 tmp.12 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.12 tmp.13 tmp.201 ra.503 tmp.505 tmp.202 tmp.504 rax))
         (ra.503
          (tmp.12 tmp.13 tmp.201 rdi rsi rdx rbp tmp.505 tmp.202 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.12))
         (tmp.12 (tmp.201 tmp.13 ra.503 rbp tmp.202 tmp.504))
         (tmp.202 (tmp.12 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.13 tmp.201 ra.503))
         (rsi (tmp.201 ra.503))
         (rdi (ra.503))
         (tmp.201 (tmp.12 tmp.13 rsi rdx ra.503 rbp))
         (tmp.13 (tmp.12 rdx tmp.201 ra.503 rbp)))))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) '(9 23))

  )


  (parameterize ([current-pass-list
                  (list
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.108
      ((new-frames ()))
      (begin
        (set! ra.359 r15)
        (set! tmp.319 (alloc 16))
        (set! tmp.360 (+ tmp.319 2))
        (set! tmp.152 tmp.360)
        (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.152 6 16)
        (set! unsafe-vector-ref.3 tmp.152)
        (set! tmp.320 (alloc 16))
        (set! tmp.361 (+ tmp.320 2))
        (set! tmp.153 tmp.361)
        (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.153 6 24)
        (set! unsafe-vector-set!.2 tmp.153)
        (set! tmp.321 (alloc 24))
        (set! tmp.362 (+ tmp.321 2))
        (set! tmp.154 tmp.362)
        (mset! tmp.154 -2 L.vector-init-loop.78.3)
        (mset! tmp.154 6 24)
        (set! vector-init-loop.78 tmp.154)
        (set! tmp.322 (alloc 24))
        (set! tmp.363 (+ tmp.322 2))
        (set! tmp.155 tmp.363)
        (mset! tmp.155 -2 L.make-init-vector.1.4)
        (mset! tmp.155 6 8)
        (set! make-init-vector.1 tmp.155)
        (set! tmp.323 (alloc 16))
        (set! tmp.364 (+ tmp.323 2))
        (set! tmp.156 tmp.364)
        (mset! tmp.156 -2 L.eq?.75.5)
        (mset! tmp.156 6 16)
        (set! eq?.75 tmp.156)
        (set! tmp.324 (alloc 16))
        (set! tmp.365 (+ tmp.324 2))
        (set! tmp.157 tmp.365)
        (mset! tmp.157 -2 L.cons.74.6)
        (mset! tmp.157 6 16)
        (set! cons.74 tmp.157)
        (set! tmp.325 (alloc 16))
        (set! tmp.366 (+ tmp.325 2))
        (set! tmp.158 tmp.366)
        (mset! tmp.158 -2 L.not.73.7)
        (mset! tmp.158 6 8)
        (set! not.73 tmp.158)
        (set! tmp.326 (alloc 16))
        (set! tmp.367 (+ tmp.326 2))
        (set! tmp.159 tmp.367)
        (mset! tmp.159 -2 L.vector?.72.8)
        (mset! tmp.159 6 8)
        (set! vector?.72 tmp.159)
        (set! tmp.327 (alloc 16))
        (set! tmp.368 (+ tmp.327 2))
        (set! tmp.160 tmp.368)
        (mset! tmp.160 -2 L.procedure?.71.9)
        (mset! tmp.160 6 8)
        (set! procedure?.71 tmp.160)
        (set! tmp.328 (alloc 16))
        (set! tmp.369 (+ tmp.328 2))
        (set! tmp.161 tmp.369)
        (mset! tmp.161 -2 L.pair?.70.10)
        (mset! tmp.161 6 8)
        (set! pair?.70 tmp.161)
        (set! tmp.329 (alloc 16))
        (set! tmp.370 (+ tmp.329 2))
        (set! tmp.162 tmp.370)
        (mset! tmp.162 -2 L.error?.69.11)
        (mset! tmp.162 6 8)
        (set! error?.69 tmp.162)
        (set! tmp.330 (alloc 16))
        (set! tmp.371 (+ tmp.330 2))
        (set! tmp.163 tmp.371)
        (mset! tmp.163 -2 L.ascii-char?.68.12)
        (mset! tmp.163 6 8)
        (set! ascii-char?.68 tmp.163)
        (set! tmp.331 (alloc 16))
        (set! tmp.372 (+ tmp.331 2))
        (set! tmp.164 tmp.372)
        (mset! tmp.164 -2 L.void?.67.13)
        (mset! tmp.164 6 8)
        (set! void?.67 tmp.164)
        (set! tmp.332 (alloc 16))
        (set! tmp.373 (+ tmp.332 2))
        (set! tmp.165 tmp.373)
        (mset! tmp.165 -2 L.empty?.66.14)
        (mset! tmp.165 6 8)
        (set! empty?.66 tmp.165)
        (set! tmp.333 (alloc 16))
        (set! tmp.374 (+ tmp.333 2))
        (set! tmp.166 tmp.374)
        (mset! tmp.166 -2 L.boolean?.65.15)
        (mset! tmp.166 6 8)
        (set! boolean?.65 tmp.166)
        (set! tmp.334 (alloc 16))
        (set! tmp.375 (+ tmp.334 2))
        (set! tmp.167 tmp.375)
        (mset! tmp.167 -2 L.fixnum?.64.16)
        (mset! tmp.167 6 8)
        (set! fixnum?.64 tmp.167)
        (set! tmp.335 (alloc 16))
        (set! tmp.376 (+ tmp.335 2))
        (set! tmp.168 tmp.376)
        (mset! tmp.168 -2 L.procedure-arity.63.17)
        (mset! tmp.168 6 8)
        (set! procedure-arity.63 tmp.168)
        (set! tmp.336 (alloc 16))
        (set! tmp.377 (+ tmp.336 2))
        (set! tmp.169 tmp.377)
        (mset! tmp.169 -2 L.cdr.62.18)
        (mset! tmp.169 6 8)
        (set! cdr.62 tmp.169)
        (set! tmp.337 (alloc 16))
        (set! tmp.378 (+ tmp.337 2))
        (set! tmp.170 tmp.378)
        (mset! tmp.170 -2 L.car.61.19)
        (mset! tmp.170 6 8)
        (set! car.61 tmp.170)
        (set! tmp.338 (alloc 24))
        (set! tmp.379 (+ tmp.338 2))
        (set! tmp.171 tmp.379)
        (mset! tmp.171 -2 L.vector-ref.60.20)
        (mset! tmp.171 6 16)
        (set! vector-ref.60 tmp.171)
        (set! tmp.339 (alloc 24))
        (set! tmp.380 (+ tmp.339 2))
        (set! tmp.172 tmp.380)
        (mset! tmp.172 -2 L.vector-set!.59.21)
        (mset! tmp.172 6 24)
        (set! vector-set!.59 tmp.172)
        (set! tmp.340 (alloc 16))
        (set! tmp.381 (+ tmp.340 2))
        (set! tmp.173 tmp.381)
        (mset! tmp.173 -2 L.vector-length.58.22)
        (mset! tmp.173 6 8)
        (set! vector-length.58 tmp.173)
        (set! tmp.341 (alloc 24))
        (set! tmp.382 (+ tmp.341 2))
        (set! tmp.174 tmp.382)
        (mset! tmp.174 -2 L.make-vector.57.23)
        (mset! tmp.174 6 8)
        (set! make-vector.57 tmp.174)
        (set! tmp.342 (alloc 16))
        (set! tmp.383 (+ tmp.342 2))
        (set! tmp.175 tmp.383)
        (mset! tmp.175 -2 L.>=.56.24)
        (mset! tmp.175 6 16)
        (set! >=.56 tmp.175)
        (set! tmp.343 (alloc 16))
        (set! tmp.384 (+ tmp.343 2))
        (set! tmp.176 tmp.384)
        (mset! tmp.176 -2 L.>.55.25)
        (mset! tmp.176 6 16)
        (set! >.55 tmp.176)
        (set! tmp.344 (alloc 16))
        (set! tmp.385 (+ tmp.344 2))
        (set! tmp.177 tmp.385)
        (mset! tmp.177 -2 L.<=.54.26)
        (mset! tmp.177 6 16)
        (set! <=.54 tmp.177)
        (set! tmp.345 (alloc 16))
        (set! tmp.386 (+ tmp.345 2))
        (set! tmp.178 tmp.386)
        (mset! tmp.178 -2 L.<.53.27)
        (mset! tmp.178 6 16)
        (set! <.53 tmp.178)
        (set! tmp.346 (alloc 16))
        (set! tmp.387 (+ tmp.346 2))
        (set! tmp.179 tmp.387)
        (mset! tmp.179 -2 L.-.52.28)
        (mset! tmp.179 6 16)
        (set! |-.52| tmp.179)
        (set! tmp.347 (alloc 16))
        (set! tmp.388 (+ tmp.347 2))
        (set! tmp.180 tmp.388)
        (mset! tmp.180 -2 L.+.51.29)
        (mset! tmp.180 6 16)
        (set! |+.51| tmp.180)
        (set! tmp.348 (alloc 16))
        (set! tmp.389 (+ tmp.348 2))
        (set! tmp.181 tmp.389)
        (mset! tmp.181 -2 L.*.50.30)
        (mset! tmp.181 6 16)
        (set! *.50 tmp.181)
        (mset! vector-init-loop.78 14 vector-init-loop.78)
        (mset! make-init-vector.1 14 vector-init-loop.78)
        (mset! vector-ref.60 14 unsafe-vector-ref.3)
        (mset! vector-set!.59 14 unsafe-vector-set!.2)
        (mset! make-vector.57 14 make-init-vector.1)
        (set! tmp.349 (alloc 64))
        (set! tmp.390 (+ tmp.349 2))
        (set! tmp.182 tmp.390)
        (mset! tmp.182 -2 L.filter.4.31)
        (mset! tmp.182 6 16)
        (set! filter.4 tmp.182)
        (set! tmp.350 (alloc 56))
        (set! tmp.391 (+ tmp.350 2))
        (set! tmp.183 tmp.391)
        (mset! tmp.183 -2 L.apply-pred.5.32)
        (mset! tmp.183 6 16)
        (set! apply-pred.5 tmp.183)
        (set! tmp.351 (alloc 32))
        (set! tmp.392 (+ tmp.351 2))
        (set! tmp.184 tmp.392)
        (mset! tmp.184 -2 L.make-bigger?.6.33)
        (mset! tmp.184 6 8)
        (set! make-bigger?.6 tmp.184)
        (mset! filter.4 14 cdr.62)
        (mset! filter.4 22 filter.4)
        (mset! filter.4 30 cons.74)
        (mset! filter.4 38 car.61)
        (mset! filter.4 46 apply-pred.5)
        (mset! filter.4 54 empty?.66)
        (mset! apply-pred.5 14 cdr.62)
        (mset! apply-pred.5 22 >.55)
        (mset! apply-pred.5 30 make-bigger?.6)
        (mset! apply-pred.5 38 car.61)
        (mset! apply-pred.5 46 eq?.75)
        (mset! make-bigger?.6 14 make-bigger?.6)
        (mset! make-bigger?.6 22 cons.74)
        (set! tmp.142 filter.4)
        (set! tmp.143 make-bigger?.6)
        (return-point L.rp.109
          (begin
            (set! rsi 64)
            (set! rdi make-bigger?.6)
            (set! r15 L.rp.109)
            (jump L.make-bigger?.6.33 rbp r15 rsi rdi)))
        (set! tmp.352 rax)
        (set! tmp.144 cons.74)
        (set! tmp.145 cons.74)
        (set! tmp.146 cons.74)
        (set! tmp.147 cons.74)
        (set! tmp.148 cons.74)
        (set! tmp.149 cons.74)
        (return-point L.rp.110
          (begin
            (set! rdx 22)
            (set! rsi 184)
            (set! rdi cons.74)
            (set! r15 L.rp.110)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.353 rax)
        (return-point L.rp.111
          (begin
            (set! rdx tmp.353)
            (set! rsi 8)
            (set! rdi cons.74)
            (set! r15 L.rp.111)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.354 rax)
        (return-point L.rp.112
          (begin
            (set! rdx tmp.354)
            (set! rsi 72)
            (set! rdi cons.74)
            (set! r15 L.rp.112)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.355 rax)
        (return-point L.rp.113
          (begin
            (set! rdx tmp.355)
            (set! rsi 64)
            (set! rdi cons.74)
            (set! r15 L.rp.113)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.356 rax)
        (return-point L.rp.114
          (begin
            (set! rdx tmp.356)
            (set! rsi 56)
            (set! rdi cons.74)
            (set! r15 L.rp.114)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.357 rax)
        (return-point L.rp.115
          (begin
            (set! rdx tmp.357)
            (set! rsi 32)
            (set! rdi cons.74)
            (set! r15 L.rp.115)
            (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
        (set! tmp.358 rax)
        (set! rdx tmp.358)
        (set! rsi tmp.352)
        (set! rdi filter.4)
        (set! r15 ra.359)
        (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
    (define L.make-bigger?.6.33
      ((new-frames ()))
      (begin
        (set! ra.393 r15)
        (set! c.122 rdi)
        (set! threshold.11 rsi)
        (set! make-bigger?.6 (mref c.122 14))
        (set! cons.74 (mref c.122 22))
        (set! tmp.141 cons.74)
        (set! rdx threshold.11)
        (set! rsi make-bigger?.6)
        (set! rdi cons.74)
        (set! r15 ra.393)
        (jump L.cons.74.6 rbp r15 rdx rsi rdi)))
    (define L.apply-pred.5.32
      ((new-frames ()))
      (begin
        (set! ra.394 r15)
        (set! c.121 rdi)
        (set! pred?.9 rsi)
        (set! x.10 rdx)
        (set! cdr.62 (mref c.121 14))
        (set! >.55 (mref c.121 22))
        (set! make-bigger?.6 (mref c.121 30))
        (set! car.61 (mref c.121 38))
        (set! eq?.75 (mref c.121 46))
        (set! tmp.137 eq?.75)
        (set! tmp.138 car.61)
        (return-point L.rp.116
          (begin
            (set! rsi pred?.9)
            (set! rdi car.61)
            (set! r15 L.rp.116)
            (jump L.car.61.19 rbp r15 rsi rdi)))
        (set! tmp.186 rax)
        (return-point L.rp.117
          (begin
            (set! rdx make-bigger?.6)
            (set! rsi tmp.186)
            (set! rdi eq?.75)
            (set! r15 L.rp.117)
            (jump L.eq?.75.5 rbp r15 rdx rsi rdi)))
        (set! tmp.187 rax)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.139 >.55)
            (set! tmp.140 cdr.62)
            (return-point L.rp.118
              (begin
                (set! rsi pred?.9)
                (set! rdi cdr.62)
                (set! r15 L.rp.118)
                (jump L.cdr.62.18 rbp r15 rsi rdi)))
            (set! tmp.188 rax)
            (set! rdx tmp.188)
            (set! rsi x.10)
            (set! rdi >.55)
            (set! r15 ra.394)
            (jump L.>.55.25 rbp r15 rdx rsi rdi))
          (begin (set! rax 25406) (jump ra.394 rbp rax)))))
    (define L.filter.4.31
      ((new-frames ()))
      (begin
        (set! ra.395 r15)
        (set! c.120 rdi)
        (set! pred?.7 rsi)
        (set! lox.8 rdx)
        (set! cdr.62 (mref c.120 14))
        (set! filter.4 (mref c.120 22))
        (set! cons.74 (mref c.120 30))
        (set! car.61 (mref c.120 38))
        (set! apply-pred.5 (mref c.120 46))
        (set! empty?.66 (mref c.120 54))
        (set! tmp.128 empty?.66)
        (return-point L.rp.119
          (begin
            (set! rsi lox.8)
            (set! rdi empty?.66)
            (set! r15 L.rp.119)
            (jump L.empty?.66.14 rbp r15 rsi rdi)))
        (set! tmp.190 rax)
        (if (neq? tmp.190 6)
          (begin (set! rax 22) (jump ra.395 rbp rax))
          (begin
            (set! tmp.129 apply-pred.5)
            (set! tmp.130 car.61)
            (return-point L.rp.120
              (begin
                (set! rsi lox.8)
                (set! rdi car.61)
                (set! r15 L.rp.120)
                (jump L.car.61.19 rbp r15 rsi rdi)))
            (set! tmp.192 rax)
            (return-point L.rp.121
              (begin
                (set! rdx tmp.192)
                (set! rsi pred?.7)
                (set! rdi apply-pred.5)
                (set! r15 L.rp.121)
                (jump L.apply-pred.5.32 rbp r15 rdx rsi rdi)))
            (set! tmp.193 rax)
            (if (neq? tmp.193 6)
              (begin
                (set! tmp.131 cons.74)
                (set! tmp.132 car.61)
                (return-point L.rp.122
                  (begin
                    (set! rsi lox.8)
                    (set! rdi car.61)
                    (set! r15 L.rp.122)
                    (jump L.car.61.19 rbp r15 rsi rdi)))
                (set! tmp.194 rax)
                (set! tmp.133 filter.4)
                (set! tmp.134 cdr.62)
                (return-point L.rp.123
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.123)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.195 rax)
                (return-point L.rp.124
                  (begin
                    (set! rdx tmp.195)
                    (set! rsi pred?.7)
                    (set! rdi filter.4)
                    (set! r15 L.rp.124)
                    (jump L.filter.4.31 rbp r15 rdx rsi rdi)))
                (set! tmp.196 rax)
                (set! rdx tmp.196)
                (set! rsi tmp.194)
                (set! rdi cons.74)
                (set! r15 ra.395)
                (jump L.cons.74.6 rbp r15 rdx rsi rdi))
              (begin
                (set! tmp.135 filter.4)
                (set! tmp.136 cdr.62)
                (return-point L.rp.125
                  (begin
                    (set! rsi lox.8)
                    (set! rdi cdr.62)
                    (set! r15 L.rp.125)
                    (jump L.cdr.62.18 rbp r15 rsi rdi)))
                (set! tmp.197 rax)
                (set! rdx tmp.197)
                (set! rsi pred?.7)
                (set! rdi filter.4)
                (set! r15 ra.395)
                (jump L.filter.4.31 rbp r15 rdx rsi rdi)))))))
    (define L.*.50.30
      ((new-frames ()))
      (begin
        (set! ra.396 r15)
        (set! c.119 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (set! tmp.397 (bitwise-and tmp.13 7))
        (set! tmp.204 tmp.397)
        (if (eq? tmp.204 0)
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.13)
            (set! rsi tmp.12)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.40 rbp r15 rdx rsi rdi)))))
    (define L.+.51.29
      ((new-frames ()))
      (begin
        (set! ra.398 r15)
        (set! c.118 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (set! tmp.399 (bitwise-and tmp.15 7))
        (set! tmp.210 tmp.399)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.15)
            (set! rsi tmp.14)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.44 rbp r15 rdx rsi rdi)))))
    (define L.-.52.28
      ((new-frames ()))
      (begin
        (set! ra.400 r15)
        (set! c.117 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (set! tmp.401 (bitwise-and tmp.17 7))
        (set! tmp.216 tmp.401)
        (if (eq? tmp.216 0)
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.17)
            (set! rsi tmp.16)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<.53.27
      ((new-frames ()))
      (begin
        (set! ra.402 r15)
        (set! c.116 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.403 (bitwise-and tmp.19 7))
        (set! tmp.223 tmp.403)
        (if (eq? tmp.223 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.<=.54.26
      ((new-frames ()))
      (begin
        (set! ra.404 r15)
        (set! c.115 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.405 (bitwise-and tmp.21 7))
        (set! tmp.230 tmp.405)
        (if (eq? tmp.230 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>.55.25
      ((new-frames ()))
      (begin
        (set! ra.406 r15)
        (set! c.114 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.407 (bitwise-and tmp.23 7))
        (set! tmp.237 tmp.407)
        (if (eq? tmp.237 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.>=.56.24
      ((new-frames ()))
      (begin
        (set! ra.408 r15)
        (set! c.113 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.409 (bitwise-and tmp.25 7))
        (set! tmp.244 tmp.409)
        (if (eq? tmp.244 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.68 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.57.23
      ((new-frames ()))
      (begin
        (set! ra.410 r15)
        (set! c.112 rdi)
        (set! tmp.26 rsi)
        (set! make-init-vector.1 (mref c.112 14))
        (set! tmp.411 (bitwise-and tmp.26 7))
        (set! tmp.247 tmp.411)
        (if (eq? tmp.247 0)
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.26)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.70 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.58.22
      ((new-frames ()))
      (begin
        (set! ra.412 r15)
        (set! c.111 rdi)
        (set! tmp.27 rsi)
        (set! tmp.413 (bitwise-and tmp.27 7))
        (set! tmp.250 tmp.413)
        (if (eq? tmp.250 3)
          (begin
            (set! rsi tmp.27)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.27)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.72 rbp r15 rsi rdi)))))
    (define L.vector-set!.59.21
      ((new-frames ()))
      (begin
        (set! ra.414 r15)
        (set! c.110 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.30 rcx)
        (set! unsafe-vector-set!.2 (mref c.110 14))
        (set! tmp.415 (bitwise-and tmp.29 7))
        (set! tmp.256 tmp.415)
        (if (eq? tmp.256 0)
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.29)
            (set! rcx tmp.30)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.76 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.60.20
      ((new-frames ()))
      (begin
        (set! ra.416 r15)
        (set! c.109 rdi)
        (set! tmp.31 rsi)
        (set! tmp.32 rdx)
        (set! unsafe-vector-ref.3 (mref c.109 14))
        (set! tmp.417 (bitwise-and tmp.32 7))
        (set! tmp.262 tmp.417)
        (if (eq? tmp.262 0)
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.32)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.31)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.80 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.61.19
      ((new-frames ()))
      (begin
        (set! ra.418 r15)
        (set! c.108 rdi)
        (set! tmp.33 rsi)
        (set! tmp.419 (bitwise-and tmp.33 7))
        (set! tmp.265 tmp.419)
        (if (eq? tmp.265 1)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.82 rbp r15 rsi rdi)))))
    (define L.cdr.62.18
      ((new-frames ()))
      (begin
        (set! ra.420 r15)
        (set! c.107 rdi)
        (set! tmp.34 rsi)
        (set! tmp.421 (bitwise-and tmp.34 7))
        (set! tmp.268 tmp.421)
        (if (eq? tmp.268 1)
          (begin
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.84 rbp r15 rsi rdi)))))
    (define L.procedure-arity.63.17
      ((new-frames ()))
      (begin
        (set! ra.422 r15)
        (set! c.106 rdi)
        (set! tmp.35 rsi)
        (set! tmp.423 (bitwise-and tmp.35 7))
        (set! tmp.271 tmp.423)
        (if (eq? tmp.271 2)
          (begin
            (set! rsi tmp.35)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.35)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.86 rbp r15 rsi rdi)))))
    (define L.fixnum?.64.16
      ((new-frames ()))
      (begin
        (set! ra.424 r15)
        (set! c.105 rdi)
        (set! tmp.36 rsi)
        (set! tmp.425 (bitwise-and tmp.36 7))
        (set! tmp.273 tmp.425)
        (if (eq? tmp.273 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.65.15
      ((new-frames ()))
      (begin
        (set! ra.426 r15)
        (set! c.104 rdi)
        (set! tmp.37 rsi)
        (set! tmp.427 (bitwise-and tmp.37 247))
        (set! tmp.275 tmp.427)
        (if (eq? tmp.275 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.66.14
      ((new-frames ()))
      (begin
        (set! ra.428 r15)
        (set! c.103 rdi)
        (set! tmp.38 rsi)
        (set! tmp.429 (bitwise-and tmp.38 255))
        (set! tmp.277 tmp.429)
        (if (eq? tmp.277 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.67.13
      ((new-frames ()))
      (begin
        (set! ra.430 r15)
        (set! c.102 rdi)
        (set! tmp.39 rsi)
        (set! tmp.431 (bitwise-and tmp.39 255))
        (set! tmp.279 tmp.431)
        (if (eq? tmp.279 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.68.12
      ((new-frames ()))
      (begin
        (set! ra.432 r15)
        (set! c.101 rdi)
        (set! tmp.40 rsi)
        (set! tmp.433 (bitwise-and tmp.40 255))
        (set! tmp.281 tmp.433)
        (if (eq? tmp.281 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.69.11
      ((new-frames ()))
      (begin
        (set! ra.434 r15)
        (set! c.100 rdi)
        (set! tmp.41 rsi)
        (set! tmp.435 (bitwise-and tmp.41 255))
        (set! tmp.283 tmp.435)
        (if (eq? tmp.283 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.70.10
      ((new-frames ()))
      (begin
        (set! ra.436 r15)
        (set! c.99 rdi)
        (set! tmp.42 rsi)
        (set! tmp.437 (bitwise-and tmp.42 7))
        (set! tmp.285 tmp.437)
        (if (eq? tmp.285 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.71.9
      ((new-frames ()))
      (begin
        (set! ra.438 r15)
        (set! c.98 rdi)
        (set! tmp.43 rsi)
        (set! tmp.439 (bitwise-and tmp.43 7))
        (set! tmp.287 tmp.439)
        (if (eq? tmp.287 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.72.8
      ((new-frames ()))
      (begin
        (set! ra.440 r15)
        (set! c.97 rdi)
        (set! tmp.44 rsi)
        (set! tmp.441 (bitwise-and tmp.44 7))
        (set! tmp.289 tmp.441)
        (if (eq? tmp.289 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.73.7
      ((new-frames ()))
      (begin
        (set! ra.442 r15)
        (set! c.96 rdi)
        (set! tmp.45 rsi)
        (if (neq? tmp.45 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.74.6
      ((new-frames ()))
      (begin
        (set! ra.443 r15)
        (set! c.95 rdi)
        (set! tmp.46 rsi)
        (set! tmp.47 rdx)
        (set! tmp.291 (alloc 16))
        (set! tmp.444 (+ tmp.291 1))
        (set! tmp.150 tmp.444)
        (mset! tmp.150 -1 tmp.46)
        (mset! tmp.150 7 tmp.47)
        (set! rax tmp.150)
        (jump ra.443 rbp rax)))
    (define L.eq?.75.5
      ((new-frames ()))
      (begin
        (set! ra.445 r15)
        (set! c.94 rdi)
        (set! tmp.48 rsi)
        (set! tmp.49 rdx)
        (if (eq? tmp.48 tmp.49)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ()))
      (begin
        (set! ra.446 r15)
        (set! c.93 rdi)
        (set! tmp.76 rsi)
        (set! vector-init-loop.78 (mref c.93 14))
        (set! tmp.447 (arithmetic-shift-right tmp.76 3))
        (set! tmp.293 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.293))
        (set! tmp.294 tmp.449)
        (set! tmp.450 (* tmp.294 8))
        (set! tmp.295 tmp.450)
        (set! tmp.296 (alloc tmp.295))
        (set! tmp.451 (+ tmp.296 3))
        (set! tmp.151 tmp.451)
        (mset! tmp.151 -3 tmp.76)
        (set! tmp.77 tmp.151)
        (set! tmp.124 vector-init-loop.78)
        (set! rcx tmp.77)
        (set! rdx 0)
        (set! rsi tmp.76)
        (set! rdi vector-init-loop.78)
        (set! r15 ra.446)
        (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.78.3
      ((new-frames ()))
      (begin
        (set! ra.452 r15)
        (set! c.92 rdi)
        (set! len.79 rsi)
        (set! i.81 rdx)
        (set! vec.80 rcx)
        (set! vector-init-loop.78 (mref c.92 14))
        (if (eq? len.79 i.81)
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.80)
            (set! rcx vector-init-loop.78)
            (set! rdx len.79)
            (set! rsi i.81)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.99 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()))
      (begin
        (set! ra.453 r15)
        (set! c.91 rdi)
        (set! tmp.87 rsi)
        (set! tmp.88 rdx)
        (set! tmp.89 rcx)
        (set! tmp.310 (mref tmp.87 -3))
        (if (< tmp.88 tmp.310)
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.87)
            (set! rdx tmp.89)
            (set! rsi tmp.88)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.103 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()))
      (begin
        (set! ra.454 r15)
        (set! c.90 rdi)
        (set! tmp.84 rsi)
        (set! tmp.85 rdx)
        (set! tmp.318 (mref tmp.84 -3))
        (if (< tmp.85 tmp.318)
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.84)
            (set! rsi tmp.85)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.107 rbp r15 rdx rsi rdi)))))
    (define L.jp.107
      ((new-frames ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.312 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.84)
              (set! rsi tmp.85)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.106 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.106
      ((new-frames ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.314 rdi)
        (set! tmp.85 rsi)
        (set! tmp.84 rdx)
        (if (neq? tmp.314 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.85 3))
            (set! tmp.315 tmp.457)
            (set! tmp.458 (* tmp.315 8))
            (set! tmp.316 tmp.458)
            (set! tmp.459 (+ tmp.316 5))
            (set! tmp.317 tmp.459)
            (set! rax (mref tmp.84 tmp.317))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.103
      ((new-frames ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.304 rdi)
        (set! tmp.88 rsi)
        (set! tmp.89 rdx)
        (set! tmp.87 rcx)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.89)
              (set! rdx tmp.87)
              (set! rsi tmp.88)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.102 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.102
      ((new-frames ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.306 rdi)
        (set! tmp.88 rsi)
        (set! tmp.87 rdx)
        (set! tmp.89 rcx)
        (if (neq? tmp.306 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.88 3))
            (set! tmp.307 tmp.462)
            (set! tmp.463 (* tmp.307 8))
            (set! tmp.308 tmp.463)
            (set! tmp.464 (+ tmp.308 5))
            (set! tmp.309 tmp.464)
            (mset! tmp.87 tmp.309 tmp.89)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.99
      ((new-frames ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.298 rdi)
        (set! i.81 rsi)
        (set! len.79 rdx)
        (set! vector-init-loop.78 rcx)
        (set! vec.80 r8)
        (if (neq? tmp.298 6)
          (begin (set! rax vec.80) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.81 3))
            (set! tmp.299 tmp.466)
            (set! tmp.467 (* tmp.299 8))
            (set! tmp.300 tmp.467)
            (set! tmp.468 (+ tmp.300 5))
            (set! tmp.301 tmp.468)
            (mset! vec.80 tmp.301 0)
            (set! tmp.123 vector-init-loop.78)
            (set! tmp.469 (+ i.81 8))
            (set! tmp.302 tmp.469)
            (set! rcx vec.80)
            (set! rdx tmp.302)
            (set! rsi len.79)
            (set! rdi vector-init-loop.78)
            (set! r15 ra.465)
            (jump L.vector-init-loop.78.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.86
      ((new-frames ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.270 rdi)
        (set! tmp.35 rsi)
        (if (neq? tmp.270 6)
          (begin (set! rax (mref tmp.35 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.84
      ((new-frames ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.267 rdi)
        (set! tmp.34 rsi)
        (if (neq? tmp.267 6)
          (begin (set! rax (mref tmp.34 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.82
      ((new-frames ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.264 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.264 6)
          (begin (set! rax (mref tmp.33 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.80
      ((new-frames ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.258 rdi)
        (set! tmp.31 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.32 rcx)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.31 7))
            (set! tmp.261 tmp.474)
            (if (eq? tmp.261 3)
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.31)
                (set! rdx tmp.32)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.79 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.79
      ((new-frames ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.260 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.32 rdx)
        (set! tmp.31 rcx)
        (if (neq? tmp.260 6)
          (begin
            (set! tmp.125 unsafe-vector-ref.3)
            (set! rdx tmp.32)
            (set! rsi tmp.31)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.76
      ((new-frames ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.252 rdi)
        (set! tmp.28 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.30 rcx)
        (set! tmp.29 r8)
        (if (neq? tmp.252 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.28 7))
            (set! tmp.255 tmp.477)
            (if (eq? tmp.255 3)
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.28)
                (set! rcx tmp.29)
                (set! rdx tmp.30)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.75 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.75
      ((new-frames ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.254 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.30 rdx)
        (set! tmp.29 rcx)
        (set! tmp.28 r8)
        (if (neq? tmp.254 6)
          (begin
            (set! tmp.126 unsafe-vector-set!.2)
            (set! rcx tmp.30)
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.72
      ((new-frames ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.249 rdi)
        (set! tmp.27 rsi)
        (if (neq? tmp.249 6)
          (begin (set! rax (mref tmp.27 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.70
      ((new-frames ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.246 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.26 rdx)
        (if (neq? tmp.246 6)
          (begin
            (set! tmp.127 make-init-vector.1)
            (set! rsi tmp.26)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.68
      ((new-frames ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.239 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.239 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.24 7))
            (set! tmp.243 tmp.482)
            (if (eq? tmp.243 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.67 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.67
      ((new-frames ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.241 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.241 6)
          (if (>= tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.63
      ((new-frames ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.232 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.232 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.22 7))
            (set! tmp.236 tmp.485)
            (if (eq? tmp.236 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.62
      ((new-frames ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.234 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.234 6)
          (if (> tmp.22 tmp.23)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.58
      ((new-frames ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.225 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.20 7))
            (set! tmp.229 tmp.488)
            (if (eq? tmp.229 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.57
      ((new-frames ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.227 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.227 6)
          (if (<= tmp.20 tmp.21)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.53
      ((new-frames ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.218 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.18 7))
            (set! tmp.222 tmp.491)
            (if (eq? tmp.222 0)
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.19)
                (set! rsi tmp.18)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.52
      ((new-frames ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.220 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.220 6)
          (if (< tmp.18 tmp.19)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.48
      ((new-frames ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.212 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.16 7))
            (set! tmp.215 tmp.494)
            (if (eq? tmp.215 0)
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.17)
                (set! rsi tmp.16)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.47
      ((new-frames ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.214 rdi)
        (set! tmp.16 rsi)
        (set! tmp.17 rdx)
        (if (neq? tmp.214 6)
          (begin
            (set! tmp.496 (- tmp.16 tmp.17))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.44
      ((new-frames ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.206 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.206 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.14 7))
            (set! tmp.209 tmp.498)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.15)
                (set! rsi tmp.14)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.43 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.43
      ((new-frames ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.208 rdi)
        (set! tmp.14 rsi)
        (set! tmp.15 rdx)
        (if (neq? tmp.208 6)
          (begin
            (set! tmp.500 (+ tmp.14 tmp.15))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.40
      ((new-frames ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.199 rdi)
        (set! tmp.12 rsi)
        (set! tmp.13 rdx)
        (if (neq? tmp.199 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.12 7))
            (set! tmp.203 tmp.502)
            (if (eq? tmp.203 0)
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.12)
                (set! rsi tmp.13)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.39 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.39
      ((new-frames ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.201 rdi)
        (set! tmp.13 rsi)
        (set! tmp.12 rdx)
        (if (neq? tmp.201 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.13 3))
            (set! tmp.202 tmp.504)
            (set! tmp.505 (* tmp.12 tmp.202))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))     ) '(9 23))

  )



    (parameterize ([current-pass-list
                  (list
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.make-bigger?.6.33
      (lambda (c.122 threshold.11)
        (let ((make-bigger?.6 (mref c.122 14)))
          (let ((cons.74 (mref c.122 22)))
            (let ((tmp.141 cons.74))
              (apply L.cons.74.6 cons.74 make-bigger?.6 threshold.11))))))
    (define L.apply-pred.5.32
      (lambda (c.121 pred?.9 x.10)
        (let ((cdr.62 (mref c.121 14)))
          (let ((>.55 (mref c.121 22)))
            (let ((make-bigger?.6 (mref c.121 30)))
              (let ((car.61 (mref c.121 38)))
                (let ((eq?.75 (mref c.121 46)))
                  (let ((tmp.137 eq?.75))
                    (let ((tmp.138 car.61))
                      (let ((tmp.186 (apply L.car.61.19 car.61 pred?.9)))
                        (let ((tmp.187
                               (apply
                                L.eq?.75.5
                                eq?.75
                                tmp.186
                                make-bigger?.6)))
                          (if (neq? tmp.187 6)
                            (let ((tmp.139 >.55))
                              (let ((tmp.140 cdr.62))
                                (let ((tmp.188
                                       (apply L.cdr.62.18 cdr.62 pred?.9)))
                                  (apply L.>.55.25 >.55 x.10 tmp.188))))
                            25406))))))))))))
    (define L.filter.4.31
      (lambda (c.120 pred?.7 lox.8)
        (let ((cdr.62 (mref c.120 14)))
          (let ((filter.4 (mref c.120 22)))
            (let ((cons.74 (mref c.120 30)))
              (let ((car.61 (mref c.120 38)))
                (let ((apply-pred.5 (mref c.120 46)))
                  (let ((empty?.66 (mref c.120 54)))
                    (let ((tmp.128 empty?.66))
                      (let ((tmp.190 (apply L.empty?.66.14 empty?.66 lox.8)))
                        (if (neq? tmp.190 6)
                          22
                          (let ((tmp.129 apply-pred.5))
                            (let ((tmp.130 car.61))
                              (let ((tmp.192 (apply L.car.61.19 car.61 lox.8)))
                                (let ((tmp.193
                                       (apply
                                        L.apply-pred.5.32
                                        apply-pred.5
                                        pred?.7
                                        tmp.192)))
                                  (if (neq? tmp.193 6)
                                    (let ((tmp.131 cons.74))
                                      (let ((tmp.132 car.61))
                                        (let ((tmp.194
                                               (apply
                                                L.car.61.19
                                                car.61
                                                lox.8)))
                                          (let ((tmp.133 filter.4))
                                            (let ((tmp.134 cdr.62))
                                              (let ((tmp.195
                                                     (apply
                                                      L.cdr.62.18
                                                      cdr.62
                                                      lox.8)))
                                                (let ((tmp.196
                                                       (apply
                                                        L.filter.4.31
                                                        filter.4
                                                        pred?.7
                                                        tmp.195)))
                                                  (apply
                                                   L.cons.74.6
                                                   cons.74
                                                   tmp.194
                                                   tmp.196))))))))
                                    (let ((tmp.135 filter.4))
                                      (let ((tmp.136 cdr.62))
                                        (let ((tmp.197
                                               (apply
                                                L.cdr.62.18
                                                cdr.62
                                                lox.8)))
                                          (apply
                                           L.filter.4.31
                                           filter.4
                                           pred?.7
                                           tmp.197))))))))))))))))))))
    (define L.*.50.30
      (lambda (c.119 tmp.12 tmp.13)
        (let ((tmp.204 (bitwise-and tmp.13 7)))
          (if (eq? tmp.204 0)
            (apply L.jp.40 14 tmp.12 tmp.13)
            (apply L.jp.40 6 tmp.12 tmp.13)))))
    (define L.+.51.29
      (lambda (c.118 tmp.14 tmp.15)
        (let ((tmp.210 (bitwise-and tmp.15 7)))
          (if (eq? tmp.210 0)
            (apply L.jp.44 14 tmp.14 tmp.15)
            (apply L.jp.44 6 tmp.14 tmp.15)))))
    (define L.-.52.28
      (lambda (c.117 tmp.16 tmp.17)
        (let ((tmp.216 (bitwise-and tmp.17 7)))
          (if (eq? tmp.216 0)
            (apply L.jp.48 14 tmp.16 tmp.17)
            (apply L.jp.48 6 tmp.16 tmp.17)))))
    (define L.<.53.27
      (lambda (c.116 tmp.18 tmp.19)
        (let ((tmp.223 (bitwise-and tmp.19 7)))
          (if (eq? tmp.223 0)
            (apply L.jp.53 14 tmp.18 tmp.19)
            (apply L.jp.53 6 tmp.18 tmp.19)))))
    (define L.<=.54.26
      (lambda (c.115 tmp.20 tmp.21)
        (let ((tmp.230 (bitwise-and tmp.21 7)))
          (if (eq? tmp.230 0)
            (apply L.jp.58 14 tmp.20 tmp.21)
            (apply L.jp.58 6 tmp.20 tmp.21)))))
    (define L.>.55.25
      (lambda (c.114 tmp.22 tmp.23)
        (let ((tmp.237 (bitwise-and tmp.23 7)))
          (if (eq? tmp.237 0)
            (apply L.jp.63 14 tmp.22 tmp.23)
            (apply L.jp.63 6 tmp.22 tmp.23)))))
    (define L.>=.56.24
      (lambda (c.113 tmp.24 tmp.25)
        (let ((tmp.244 (bitwise-and tmp.25 7)))
          (if (eq? tmp.244 0)
            (apply L.jp.68 14 tmp.24 tmp.25)
            (apply L.jp.68 6 tmp.24 tmp.25)))))
    (define L.make-vector.57.23
      (lambda (c.112 tmp.26)
        (let ((make-init-vector.1 (mref c.112 14)))
          (let ((tmp.247 (bitwise-and tmp.26 7)))
            (if (eq? tmp.247 0)
              (apply L.jp.70 14 make-init-vector.1 tmp.26)
              (apply L.jp.70 6 make-init-vector.1 tmp.26))))))
    (define L.vector-length.58.22
      (lambda (c.111 tmp.27)
        (let ((tmp.250 (bitwise-and tmp.27 7)))
          (if (eq? tmp.250 3)
            (apply L.jp.72 14 tmp.27)
            (apply L.jp.72 6 tmp.27)))))
    (define L.vector-set!.59.21
      (lambda (c.110 tmp.28 tmp.29 tmp.30)
        (let ((unsafe-vector-set!.2 (mref c.110 14)))
          (let ((tmp.256 (bitwise-and tmp.29 7)))
            (if (eq? tmp.256 0)
              (apply L.jp.76 14 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29)
              (apply L.jp.76 6 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29))))))
    (define L.vector-ref.60.20
      (lambda (c.109 tmp.31 tmp.32)
        (let ((unsafe-vector-ref.3 (mref c.109 14)))
          (let ((tmp.262 (bitwise-and tmp.32 7)))
            (if (eq? tmp.262 0)
              (apply L.jp.80 14 tmp.31 unsafe-vector-ref.3 tmp.32)
              (apply L.jp.80 6 tmp.31 unsafe-vector-ref.3 tmp.32))))))
    (define L.car.61.19
      (lambda (c.108 tmp.33)
        (let ((tmp.265 (bitwise-and tmp.33 7)))
          (if (eq? tmp.265 1)
            (apply L.jp.82 14 tmp.33)
            (apply L.jp.82 6 tmp.33)))))
    (define L.cdr.62.18
      (lambda (c.107 tmp.34)
        (let ((tmp.268 (bitwise-and tmp.34 7)))
          (if (eq? tmp.268 1)
            (apply L.jp.84 14 tmp.34)
            (apply L.jp.84 6 tmp.34)))))
    (define L.procedure-arity.63.17
      (lambda (c.106 tmp.35)
        (let ((tmp.271 (bitwise-and tmp.35 7)))
          (if (eq? tmp.271 2)
            (apply L.jp.86 14 tmp.35)
            (apply L.jp.86 6 tmp.35)))))
    (define L.fixnum?.64.16
      (lambda (c.105 tmp.36)
        (let ((tmp.273 (bitwise-and tmp.36 7))) (if (eq? tmp.273 0) 14 6))))
    (define L.boolean?.65.15
      (lambda (c.104 tmp.37)
        (let ((tmp.275 (bitwise-and tmp.37 247))) (if (eq? tmp.275 6) 14 6))))
    (define L.empty?.66.14
      (lambda (c.103 tmp.38)
        (let ((tmp.277 (bitwise-and tmp.38 255))) (if (eq? tmp.277 22) 14 6))))
    (define L.void?.67.13
      (lambda (c.102 tmp.39)
        (let ((tmp.279 (bitwise-and tmp.39 255))) (if (eq? tmp.279 30) 14 6))))
    (define L.ascii-char?.68.12
      (lambda (c.101 tmp.40)
        (let ((tmp.281 (bitwise-and tmp.40 255))) (if (eq? tmp.281 46) 14 6))))
    (define L.error?.69.11
      (lambda (c.100 tmp.41)
        (let ((tmp.283 (bitwise-and tmp.41 255))) (if (eq? tmp.283 62) 14 6))))
    (define L.pair?.70.10
      (lambda (c.99 tmp.42)
        (let ((tmp.285 (bitwise-and tmp.42 7))) (if (eq? tmp.285 1) 14 6))))
    (define L.procedure?.71.9
      (lambda (c.98 tmp.43)
        (let ((tmp.287 (bitwise-and tmp.43 7))) (if (eq? tmp.287 2) 14 6))))
    (define L.vector?.72.8
      (lambda (c.97 tmp.44)
        (let ((tmp.289 (bitwise-and tmp.44 7))) (if (eq? tmp.289 3) 14 6))))
    (define L.not.73.7 (lambda (c.96 tmp.45) (if (neq? tmp.45 6) 6 14)))
    (define L.cons.74.6
      (lambda (c.95 tmp.46 tmp.47)
        (let ((tmp.291 (alloc 16)))
          (let ((tmp.150 (+ tmp.291 1)))
            (begin
              (mset! tmp.150 -1 tmp.46)
              (mset! tmp.150 7 tmp.47)
              tmp.150)))))
    (define L.eq?.75.5
      (lambda (c.94 tmp.48 tmp.49) (if (eq? tmp.48 tmp.49) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.93 tmp.76)
        (let ((vector-init-loop.78 (mref c.93 14)))
          (let ((tmp.293 (arithmetic-shift-right tmp.76 3)))
            (let ((tmp.294 (+ 1 tmp.293)))
              (let ((tmp.295 (* tmp.294 8)))
                (let ((tmp.296 (alloc tmp.295)))
                  (let ((tmp.151 (+ tmp.296 3)))
                    (begin
                      (mset! tmp.151 -3 tmp.76)
                      (let ((tmp.77 tmp.151))
                        (let ((tmp.124 vector-init-loop.78))
                          (apply
                           L.vector-init-loop.78.3
                           vector-init-loop.78
                           tmp.76
                           0
                           tmp.77))))))))))))
    (define L.vector-init-loop.78.3
      (lambda (c.92 len.79 i.81 vec.80)
        (let ((vector-init-loop.78 (mref c.92 14)))
          (if (eq? len.79 i.81)
            (apply L.jp.99 14 i.81 len.79 vector-init-loop.78 vec.80)
            (apply L.jp.99 6 i.81 len.79 vector-init-loop.78 vec.80)))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.91 tmp.87 tmp.88 tmp.89)
        (let ((tmp.310 (mref tmp.87 -3)))
          (if (< tmp.88 tmp.310)
            (apply L.jp.103 14 tmp.88 tmp.89 tmp.87)
            (apply L.jp.103 6 tmp.88 tmp.89 tmp.87)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.90 tmp.84 tmp.85)
        (let ((tmp.318 (mref tmp.84 -3)))
          (if (< tmp.85 tmp.318)
            (apply L.jp.107 14 tmp.85 tmp.84)
            (apply L.jp.107 6 tmp.85 tmp.84)))))
    (define L.jp.107
      (lambda (tmp.312 tmp.85 tmp.84)
        (if (neq? tmp.312 6)
          (if (>= tmp.85 0)
            (apply L.jp.106 14 tmp.85 tmp.84)
            (apply L.jp.106 6 tmp.85 tmp.84))
          2622)))
    (define L.jp.106
      (lambda (tmp.314 tmp.85 tmp.84)
        (if (neq? tmp.314 6)
          (let ((tmp.315 (arithmetic-shift-right tmp.85 3)))
            (let ((tmp.316 (* tmp.315 8)))
              (let ((tmp.317 (+ tmp.316 5))) (mref tmp.84 tmp.317))))
          2622)))
    (define L.jp.103
      (lambda (tmp.304 tmp.88 tmp.89 tmp.87)
        (if (neq? tmp.304 6)
          (if (>= tmp.88 0)
            (apply L.jp.102 14 tmp.88 tmp.87 tmp.89)
            (apply L.jp.102 6 tmp.88 tmp.87 tmp.89))
          2366)))
    (define L.jp.102
      (lambda (tmp.306 tmp.88 tmp.87 tmp.89)
        (if (neq? tmp.306 6)
          (let ((tmp.307 (arithmetic-shift-right tmp.88 3)))
            (let ((tmp.308 (* tmp.307 8)))
              (let ((tmp.309 (+ tmp.308 5)))
                (begin (mset! tmp.87 tmp.309 tmp.89) 30))))
          2366)))
    (define L.jp.99
      (lambda (tmp.298 i.81 len.79 vector-init-loop.78 vec.80)
        (if (neq? tmp.298 6)
          vec.80
          (let ((tmp.299 (arithmetic-shift-right i.81 3)))
            (let ((tmp.300 (* tmp.299 8)))
              (let ((tmp.301 (+ tmp.300 5)))
                (begin
                  (mset! vec.80 tmp.301 0)
                  (let ((tmp.123 vector-init-loop.78))
                    (let ((tmp.302 (+ i.81 8)))
                      (apply
                       L.vector-init-loop.78.3
                       vector-init-loop.78
                       len.79
                       tmp.302
                       vec.80))))))))))
    (define L.jp.86
      (lambda (tmp.270 tmp.35) (if (neq? tmp.270 6) (mref tmp.35 6) 3390)))
    (define L.jp.84
      (lambda (tmp.267 tmp.34) (if (neq? tmp.267 6) (mref tmp.34 7) 3134)))
    (define L.jp.82
      (lambda (tmp.264 tmp.33) (if (neq? tmp.264 6) (mref tmp.33 -1) 2878)))
    (define L.jp.80
      (lambda (tmp.258 tmp.31 unsafe-vector-ref.3 tmp.32)
        (if (neq? tmp.258 6)
          (let ((tmp.261 (bitwise-and tmp.31 7)))
            (if (eq? tmp.261 3)
              (apply L.jp.79 14 unsafe-vector-ref.3 tmp.32 tmp.31)
              (apply L.jp.79 6 unsafe-vector-ref.3 tmp.32 tmp.31)))
          2622)))
    (define L.jp.79
      (lambda (tmp.260 unsafe-vector-ref.3 tmp.32 tmp.31)
        (if (neq? tmp.260 6)
          (let ((tmp.125 unsafe-vector-ref.3))
            (apply L.unsafe-vector-ref.3.1 unsafe-vector-ref.3 tmp.31 tmp.32))
          2622)))
    (define L.jp.76
      (lambda (tmp.252 tmp.28 unsafe-vector-set!.2 tmp.30 tmp.29)
        (if (neq? tmp.252 6)
          (let ((tmp.255 (bitwise-and tmp.28 7)))
            (if (eq? tmp.255 3)
              (apply L.jp.75 14 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28)
              (apply L.jp.75 6 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28)))
          2366)))
    (define L.jp.75
      (lambda (tmp.254 unsafe-vector-set!.2 tmp.30 tmp.29 tmp.28)
        (if (neq? tmp.254 6)
          (let ((tmp.126 unsafe-vector-set!.2))
            (apply
             L.unsafe-vector-set!.2.2
             unsafe-vector-set!.2
             tmp.28
             tmp.29
             tmp.30))
          2366)))
    (define L.jp.72
      (lambda (tmp.249 tmp.27) (if (neq? tmp.249 6) (mref tmp.27 -3) 2110)))
    (define L.jp.70
      (lambda (tmp.246 make-init-vector.1 tmp.26)
        (if (neq? tmp.246 6)
          (let ((tmp.127 make-init-vector.1))
            (apply L.make-init-vector.1.4 make-init-vector.1 tmp.26))
          1854)))
    (define L.jp.68
      (lambda (tmp.239 tmp.24 tmp.25)
        (if (neq? tmp.239 6)
          (let ((tmp.243 (bitwise-and tmp.24 7)))
            (if (eq? tmp.243 0)
              (apply L.jp.67 14 tmp.24 tmp.25)
              (apply L.jp.67 6 tmp.24 tmp.25)))
          1598)))
    (define L.jp.67
      (lambda (tmp.241 tmp.24 tmp.25)
        (if (neq? tmp.241 6) (if (>= tmp.24 tmp.25) 14 6) 1598)))
    (define L.jp.63
      (lambda (tmp.232 tmp.22 tmp.23)
        (if (neq? tmp.232 6)
          (let ((tmp.236 (bitwise-and tmp.22 7)))
            (if (eq? tmp.236 0)
              (apply L.jp.62 14 tmp.22 tmp.23)
              (apply L.jp.62 6 tmp.22 tmp.23)))
          1342)))
    (define L.jp.62
      (lambda (tmp.234 tmp.22 tmp.23)
        (if (neq? tmp.234 6) (if (> tmp.22 tmp.23) 14 6) 1342)))
    (define L.jp.58
      (lambda (tmp.225 tmp.20 tmp.21)
        (if (neq? tmp.225 6)
          (let ((tmp.229 (bitwise-and tmp.20 7)))
            (if (eq? tmp.229 0)
              (apply L.jp.57 14 tmp.20 tmp.21)
              (apply L.jp.57 6 tmp.20 tmp.21)))
          1086)))
    (define L.jp.57
      (lambda (tmp.227 tmp.20 tmp.21)
        (if (neq? tmp.227 6) (if (<= tmp.20 tmp.21) 14 6) 1086)))
    (define L.jp.53
      (lambda (tmp.218 tmp.18 tmp.19)
        (if (neq? tmp.218 6)
          (let ((tmp.222 (bitwise-and tmp.18 7)))
            (if (eq? tmp.222 0)
              (apply L.jp.52 14 tmp.18 tmp.19)
              (apply L.jp.52 6 tmp.18 tmp.19)))
          830)))
    (define L.jp.52
      (lambda (tmp.220 tmp.18 tmp.19)
        (if (neq? tmp.220 6) (if (< tmp.18 tmp.19) 14 6) 830)))
    (define L.jp.48
      (lambda (tmp.212 tmp.16 tmp.17)
        (if (neq? tmp.212 6)
          (let ((tmp.215 (bitwise-and tmp.16 7)))
            (if (eq? tmp.215 0)
              (apply L.jp.47 14 tmp.16 tmp.17)
              (apply L.jp.47 6 tmp.16 tmp.17)))
          574)))
    (define L.jp.47
      (lambda (tmp.214 tmp.16 tmp.17)
        (if (neq? tmp.214 6) (- tmp.16 tmp.17) 574)))
    (define L.jp.44
      (lambda (tmp.206 tmp.14 tmp.15)
        (if (neq? tmp.206 6)
          (let ((tmp.209 (bitwise-and tmp.14 7)))
            (if (eq? tmp.209 0)
              (apply L.jp.43 14 tmp.14 tmp.15)
              (apply L.jp.43 6 tmp.14 tmp.15)))
          318)))
    (define L.jp.43
      (lambda (tmp.208 tmp.14 tmp.15)
        (if (neq? tmp.208 6) (+ tmp.14 tmp.15) 318)))
    (define L.jp.40
      (lambda (tmp.199 tmp.12 tmp.13)
        (if (neq? tmp.199 6)
          (let ((tmp.203 (bitwise-and tmp.12 7)))
            (if (eq? tmp.203 0)
              (apply L.jp.39 14 tmp.13 tmp.12)
              (apply L.jp.39 6 tmp.13 tmp.12)))
          62)))
    (define L.jp.39
      (lambda (tmp.201 tmp.13 tmp.12)
        (if (neq? tmp.201 6)
          (let ((tmp.202 (arithmetic-shift-right tmp.13 3)))
            (* tmp.12 tmp.202))
          62)))
    (let ((tmp.319 (alloc 16)))
      (let ((tmp.152 (+ tmp.319 2)))
        (begin
          (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
          (mset! tmp.152 6 16)
          (let ((unsafe-vector-ref.3 tmp.152))
            (let ((tmp.320 (alloc 16)))
              (let ((tmp.153 (+ tmp.320 2)))
                (begin
                  (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
                  (mset! tmp.153 6 24)
                  (let ((unsafe-vector-set!.2 tmp.153))
                    (let ((tmp.321 (alloc 24)))
                      (let ((tmp.154 (+ tmp.321 2)))
                        (begin
                          (mset! tmp.154 -2 L.vector-init-loop.78.3)
                          (mset! tmp.154 6 24)
                          (let ((vector-init-loop.78 tmp.154))
                            (let ((tmp.322 (alloc 24)))
                              (let ((tmp.155 (+ tmp.322 2)))
                                (begin
                                  (mset! tmp.155 -2 L.make-init-vector.1.4)
                                  (mset! tmp.155 6 8)
                                  (let ((make-init-vector.1 tmp.155))
                                    (let ((tmp.323 (alloc 16)))
                                      (let ((tmp.156 (+ tmp.323 2)))
                                        (begin
                                          (mset! tmp.156 -2 L.eq?.75.5)
                                          (mset! tmp.156 6 16)
                                          (let ((eq?.75 tmp.156))
                                            (let ((tmp.324 (alloc 16)))
                                              (let ((tmp.157 (+ tmp.324 2)))
                                                (begin
                                                  (mset!
                                                   tmp.157
                                                   -2
                                                   L.cons.74.6)
                                                  (mset! tmp.157 6 16)
                                                  (let ((cons.74 tmp.157))
                                                    (let ((tmp.325 (alloc 16)))
                                                      (let ((tmp.158
                                                             (+ tmp.325 2)))
                                                        (begin
                                                          (mset!
                                                           tmp.158
                                                           -2
                                                           L.not.73.7)
                                                          (mset! tmp.158 6 8)
                                                          (let ((not.73
                                                                 tmp.158))
                                                            (let ((tmp.326
                                                                   (alloc 16)))
                                                              (let ((tmp.159
                                                                     (+
                                                                      tmp.326
                                                                      2)))
                                                                (begin
                                                                  (mset!
                                                                   tmp.159
                                                                   -2
                                                                   L.vector?.72.8)
                                                                  (mset!
                                                                   tmp.159
                                                                   6
                                                                   8)
                                                                  (let ((vector?.72
                                                                         tmp.159))
                                                                    (let ((tmp.327
                                                                           (alloc
                                                                            16)))
                                                                      (let ((tmp.160
                                                                             (+
                                                                              tmp.327
                                                                              2)))
                                                                        (begin
                                                                          (mset!
                                                                           tmp.160
                                                                           -2
                                                                           L.procedure?.71.9)
                                                                          (mset!
                                                                           tmp.160
                                                                           6
                                                                           8)
                                                                          (let ((procedure?.71
                                                                                 tmp.160))
                                                                            (let ((tmp.328
                                                                                   (alloc
                                                                                    16)))
                                                                              (let ((tmp.161
                                                                                     (+
                                                                                      tmp.328
                                                                                      2)))
                                                                                (begin
                                                                                  (mset!
                                                                                   tmp.161
                                                                                   -2
                                                                                   L.pair?.70.10)
                                                                                  (mset!
                                                                                   tmp.161
                                                                                   6
                                                                                   8)
                                                                                  (let ((pair?.70
                                                                                         tmp.161))
                                                                                    (let ((tmp.329
                                                                                           (alloc
                                                                                            16)))
                                                                                      (let ((tmp.162
                                                                                             (+
                                                                                              tmp.329
                                                                                              2)))
                                                                                        (begin
                                                                                          (mset!
                                                                                           tmp.162
                                                                                           -2
                                                                                           L.error?.69.11)
                                                                                          (mset!
                                                                                           tmp.162
                                                                                           6
                                                                                           8)
                                                                                          (let ((error?.69
                                                                                                 tmp.162))
                                                                                            (let ((tmp.330
                                                                                                   (alloc
                                                                                                    16)))
                                                                                              (let ((tmp.163
                                                                                                     (+
                                                                                                      tmp.330
                                                                                                      2)))
                                                                                                (begin
                                                                                                  (mset!
                                                                                                   tmp.163
                                                                                                   -2
                                                                                                   L.ascii-char?.68.12)
                                                                                                  (mset!
                                                                                                   tmp.163
                                                                                                   6
                                                                                                   8)
                                                                                                  (let ((ascii-char?.68
                                                                                                         tmp.163))
                                                                                                    (let ((tmp.331
                                                                                                           (alloc
                                                                                                            16)))
                                                                                                      (let ((tmp.164
                                                                                                             (+
                                                                                                              tmp.331
                                                                                                              2)))
                                                                                                        (begin
                                                                                                          (mset!
                                                                                                           tmp.164
                                                                                                           -2
                                                                                                           L.void?.67.13)
                                                                                                          (mset!
                                                                                                           tmp.164
                                                                                                           6
                                                                                                           8)
                                                                                                          (let ((void?.67
                                                                                                                 tmp.164))
                                                                                                            (let ((tmp.332
                                                                                                                   (alloc
                                                                                                                    16)))
                                                                                                              (let ((tmp.165
                                                                                                                     (+
                                                                                                                      tmp.332
                                                                                                                      2)))
                                                                                                                (begin
                                                                                                                  (mset!
                                                                                                                   tmp.165
                                                                                                                   -2
                                                                                                                   L.empty?.66.14)
                                                                                                                  (mset!
                                                                                                                   tmp.165
                                                                                                                   6
                                                                                                                   8)
                                                                                                                  (let ((empty?.66
                                                                                                                         tmp.165))
                                                                                                                    (let ((tmp.333
                                                                                                                           (alloc
                                                                                                                            16)))
                                                                                                                      (let ((tmp.166
                                                                                                                             (+
                                                                                                                              tmp.333
                                                                                                                              2)))
                                                                                                                        (begin
                                                                                                                          (mset!
                                                                                                                           tmp.166
                                                                                                                           -2
                                                                                                                           L.boolean?.65.15)
                                                                                                                          (mset!
                                                                                                                           tmp.166
                                                                                                                           6
                                                                                                                           8)
                                                                                                                          (let ((boolean?.65
                                                                                                                                 tmp.166))
                                                                                                                            (let ((tmp.334
                                                                                                                                   (alloc
                                                                                                                                    16)))
                                                                                                                              (let ((tmp.167
                                                                                                                                     (+
                                                                                                                                      tmp.334
                                                                                                                                      2)))
                                                                                                                                (begin
                                                                                                                                  (mset!
                                                                                                                                   tmp.167
                                                                                                                                   -2
                                                                                                                                   L.fixnum?.64.16)
                                                                                                                                  (mset!
                                                                                                                                   tmp.167
                                                                                                                                   6
                                                                                                                                   8)
                                                                                                                                  (let ((fixnum?.64
                                                                                                                                         tmp.167))
                                                                                                                                    (let ((tmp.335
                                                                                                                                           (alloc
                                                                                                                                            16)))
                                                                                                                                      (let ((tmp.168
                                                                                                                                             (+
                                                                                                                                              tmp.335
                                                                                                                                              2)))
                                                                                                                                        (begin
                                                                                                                                          (mset!
                                                                                                                                           tmp.168
                                                                                                                                           -2
                                                                                                                                           L.procedure-arity.63.17)
                                                                                                                                          (mset!
                                                                                                                                           tmp.168
                                                                                                                                           6
                                                                                                                                           8)
                                                                                                                                          (let ((procedure-arity.63
                                                                                                                                                 tmp.168))
                                                                                                                                            (let ((tmp.336
                                                                                                                                                   (alloc
                                                                                                                                                    16)))
                                                                                                                                              (let ((tmp.169
                                                                                                                                                     (+
                                                                                                                                                      tmp.336
                                                                                                                                                      2)))
                                                                                                                                                (begin
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.169
                                                                                                                                                   -2
                                                                                                                                                   L.cdr.62.18)
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.169
                                                                                                                                                   6
                                                                                                                                                   8)
                                                                                                                                                  (let ((cdr.62
                                                                                                                                                         tmp.169))
                                                                                                                                                    (let ((tmp.337
                                                                                                                                                           (alloc
                                                                                                                                                            16)))
                                                                                                                                                      (let ((tmp.170
                                                                                                                                                             (+
                                                                                                                                                              tmp.337
                                                                                                                                                              2)))
                                                                                                                                                        (begin
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.170
                                                                                                                                                           -2
                                                                                                                                                           L.car.61.19)
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.170
                                                                                                                                                           6
                                                                                                                                                           8)
                                                                                                                                                          (let ((car.61
                                                                                                                                                                 tmp.170))
                                                                                                                                                            (let ((tmp.338
                                                                                                                                                                   (alloc
                                                                                                                                                                    24)))
                                                                                                                                                              (let ((tmp.171
                                                                                                                                                                     (+
                                                                                                                                                                      tmp.338
                                                                                                                                                                      2)))
                                                                                                                                                                (begin
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.171
                                                                                                                                                                   -2
                                                                                                                                                                   L.vector-ref.60.20)
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.171
                                                                                                                                                                   6
                                                                                                                                                                   16)
                                                                                                                                                                  (let ((vector-ref.60
                                                                                                                                                                         tmp.171))
                                                                                                                                                                    (let ((tmp.339
                                                                                                                                                                           (alloc
                                                                                                                                                                            24)))
                                                                                                                                                                      (let ((tmp.172
                                                                                                                                                                             (+
                                                                                                                                                                              tmp.339
                                                                                                                                                                              2)))
                                                                                                                                                                        (begin
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.172
                                                                                                                                                                           -2
                                                                                                                                                                           L.vector-set!.59.21)
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.172
                                                                                                                                                                           6
                                                                                                                                                                           24)
                                                                                                                                                                          (let ((vector-set!.59
                                                                                                                                                                                 tmp.172))
                                                                                                                                                                            (let ((tmp.340
                                                                                                                                                                                   (alloc
                                                                                                                                                                                    16)))
                                                                                                                                                                              (let ((tmp.173
                                                                                                                                                                                     (+
                                                                                                                                                                                      tmp.340
                                                                                                                                                                                      2)))
                                                                                                                                                                                (begin
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.173
                                                                                                                                                                                   -2
                                                                                                                                                                                   L.vector-length.58.22)
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.173
                                                                                                                                                                                   6
                                                                                                                                                                                   8)
                                                                                                                                                                                  (let ((vector-length.58
                                                                                                                                                                                         tmp.173))
                                                                                                                                                                                    (let ((tmp.341
                                                                                                                                                                                           (alloc
                                                                                                                                                                                            24)))
                                                                                                                                                                                      (let ((tmp.174
                                                                                                                                                                                             (+
                                                                                                                                                                                              tmp.341
                                                                                                                                                                                              2)))
                                                                                                                                                                                        (begin
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.174
                                                                                                                                                                                           -2
                                                                                                                                                                                           L.make-vector.57.23)
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.174
                                                                                                                                                                                           6
                                                                                                                                                                                           8)
                                                                                                                                                                                          (let ((make-vector.57
                                                                                                                                                                                                 tmp.174))
                                                                                                                                                                                            (let ((tmp.342
                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                    16)))
                                                                                                                                                                                              (let ((tmp.175
                                                                                                                                                                                                     (+
                                                                                                                                                                                                      tmp.342
                                                                                                                                                                                                      2)))
                                                                                                                                                                                                (begin
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.175
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   L.>=.56.24)
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.175
                                                                                                                                                                                                   6
                                                                                                                                                                                                   16)
                                                                                                                                                                                                  (let ((>=.56
                                                                                                                                                                                                         tmp.175))
                                                                                                                                                                                                    (let ((tmp.343
                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                            16)))
                                                                                                                                                                                                      (let ((tmp.176
                                                                                                                                                                                                             (+
                                                                                                                                                                                                              tmp.343
                                                                                                                                                                                                              2)))
                                                                                                                                                                                                        (begin
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.176
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           L.>.55.25)
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.176
                                                                                                                                                                                                           6
                                                                                                                                                                                                           16)
                                                                                                                                                                                                          (let ((>.55
                                                                                                                                                                                                                 tmp.176))
                                                                                                                                                                                                            (let ((tmp.344
                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                              (let ((tmp.177
                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                      tmp.344
                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.177
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   L.<=.54.26)
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.177
                                                                                                                                                                                                                   6
                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                  (let ((<=.54
                                                                                                                                                                                                                         tmp.177))
                                                                                                                                                                                                                    (let ((tmp.345
                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                      (let ((tmp.178
                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                              tmp.345
                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.178
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           L.<.53.27)
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.178
                                                                                                                                                                                                                           6
                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                          (let ((<.53
                                                                                                                                                                                                                                 tmp.178))
                                                                                                                                                                                                                            (let ((tmp.346
                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                              (let ((tmp.179
                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                      tmp.346
                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.179
                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                   L.-.52.28)
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.179
                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                  (let ((|-.52|
                                                                                                                                                                                                                                         tmp.179))
                                                                                                                                                                                                                                    (let ((tmp.347
                                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                                      (let ((tmp.180
                                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                                              tmp.347
                                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.180
                                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                                           L.+.51.29)
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.180
                                                                                                                                                                                                                                           6
                                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                                          (let ((|+.51|
                                                                                                                                                                                                                                                 tmp.180))
                                                                                                                                                                                                                                            (let ((tmp.348
                                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                                              (let ((tmp.181
                                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                                      tmp.348
                                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.181
                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                   L.*.50.30)
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.181
                                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                                  (let ((*.50
                                                                                                                                                                                                                                                         tmp.181))
                                                                                                                                                                                                                                                    (begin
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-init-loop.78
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.78)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-init-vector.1
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.78)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-ref.60
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-ref.3)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-set!.59
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-set!.2)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-vector.57
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       make-init-vector.1)
                                                                                                                                                                                                                                                      (let ((tmp.349
                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                              64)))
                                                                                                                                                                                                                                                        (let ((tmp.182
                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                tmp.349
                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.182
                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                             L.filter.4.31)
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.182
                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                             16)
                                                                                                                                                                                                                                                            (let ((filter.4
                                                                                                                                                                                                                                                                   tmp.182))
                                                                                                                                                                                                                                                              (let ((tmp.350
                                                                                                                                                                                                                                                                     (alloc
                                                                                                                                                                                                                                                                      56)))
                                                                                                                                                                                                                                                                (let ((tmp.183
                                                                                                                                                                                                                                                                       (+
                                                                                                                                                                                                                                                                        tmp.350
                                                                                                                                                                                                                                                                        2)))
                                                                                                                                                                                                                                                                  (begin
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.183
                                                                                                                                                                                                                                                                     -2
                                                                                                                                                                                                                                                                     L.apply-pred.5.32)
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.183
                                                                                                                                                                                                                                                                     6
                                                                                                                                                                                                                                                                     16)
                                                                                                                                                                                                                                                                    (let ((apply-pred.5
                                                                                                                                                                                                                                                                           tmp.183))
                                                                                                                                                                                                                                                                      (let ((tmp.351
                                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                                              32)))
                                                                                                                                                                                                                                                                        (let ((tmp.184
                                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                                tmp.351
                                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.184
                                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                                             L.make-bigger?.6.33)
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.184
                                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                                             8)
                                                                                                                                                                                                                                                                            (let ((make-bigger?.6
                                                                                                                                                                                                                                                                                   tmp.184))
                                                                                                                                                                                                                                                                              (begin
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 cdr.62)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 filter.4)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 30
                                                                                                                                                                                                                                                                                 cons.74)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 38
                                                                                                                                                                                                                                                                                 car.61)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 46
                                                                                                                                                                                                                                                                                 apply-pred.5)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 filter.4
                                                                                                                                                                                                                                                                                 54
                                                                                                                                                                                                                                                                                 empty?.66)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 apply-pred.5
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 cdr.62)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 apply-pred.5
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 >.55)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 apply-pred.5
                                                                                                                                                                                                                                                                                 30
                                                                                                                                                                                                                                                                                 make-bigger?.6)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 apply-pred.5
                                                                                                                                                                                                                                                                                 38
                                                                                                                                                                                                                                                                                 car.61)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 apply-pred.5
                                                                                                                                                                                                                                                                                 46
                                                                                                                                                                                                                                                                                 eq?.75)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 make-bigger?.6
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 make-bigger?.6)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 make-bigger?.6
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 cons.74)
                                                                                                                                                                                                                                                                                (let ((tmp.142
                                                                                                                                                                                                                                                                                       filter.4))
                                                                                                                                                                                                                                                                                  (let ((tmp.143
                                                                                                                                                                                                                                                                                         make-bigger?.6))
                                                                                                                                                                                                                                                                                    (let ((tmp.352
                                                                                                                                                                                                                                                                                           (apply
                                                                                                                                                                                                                                                                                            L.make-bigger?.6.33
                                                                                                                                                                                                                                                                                            make-bigger?.6
                                                                                                                                                                                                                                                                                            64)))
                                                                                                                                                                                                                                                                                      (let ((tmp.144
                                                                                                                                                                                                                                                                                             cons.74))
                                                                                                                                                                                                                                                                                        (let ((tmp.145
                                                                                                                                                                                                                                                                                               cons.74))
                                                                                                                                                                                                                                                                                          (let ((tmp.146
                                                                                                                                                                                                                                                                                                 cons.74))
                                                                                                                                                                                                                                                                                            (let ((tmp.147
                                                                                                                                                                                                                                                                                                   cons.74))
                                                                                                                                                                                                                                                                                              (let ((tmp.148
                                                                                                                                                                                                                                                                                                     cons.74))
                                                                                                                                                                                                                                                                                                (let ((tmp.149
                                                                                                                                                                                                                                                                                                       cons.74))
                                                                                                                                                                                                                                                                                                  (let ((tmp.353
                                                                                                                                                                                                                                                                                                         (apply
                                                                                                                                                                                                                                                                                                          L.cons.74.6
                                                                                                                                                                                                                                                                                                          cons.74
                                                                                                                                                                                                                                                                                                          184
                                                                                                                                                                                                                                                                                                          22)))
                                                                                                                                                                                                                                                                                                    (let ((tmp.354
                                                                                                                                                                                                                                                                                                           (apply
                                                                                                                                                                                                                                                                                                            L.cons.74.6
                                                                                                                                                                                                                                                                                                            cons.74
                                                                                                                                                                                                                                                                                                            8
                                                                                                                                                                                                                                                                                                            tmp.353)))
                                                                                                                                                                                                                                                                                                      (let ((tmp.355
                                                                                                                                                                                                                                                                                                             (apply
                                                                                                                                                                                                                                                                                                              L.cons.74.6
                                                                                                                                                                                                                                                                                                              cons.74
                                                                                                                                                                                                                                                                                                              72
                                                                                                                                                                                                                                                                                                              tmp.354)))
                                                                                                                                                                                                                                                                                                        (let ((tmp.356
                                                                                                                                                                                                                                                                                                               (apply
                                                                                                                                                                                                                                                                                                                L.cons.74.6
                                                                                                                                                                                                                                                                                                                cons.74
                                                                                                                                                                                                                                                                                                                64
                                                                                                                                                                                                                                                                                                                tmp.355)))
                                                                                                                                                                                                                                                                                                          (let ((tmp.357
                                                                                                                                                                                                                                                                                                                 (apply
                                                                                                                                                                                                                                                                                                                  L.cons.74.6
                                                                                                                                                                                                                                                                                                                  cons.74
                                                                                                                                                                                                                                                                                                                  56
                                                                                                                                                                                                                                                                                                                  tmp.356)))
                                                                                                                                                                                                                                                                                                            (let ((tmp.358
                                                                                                                                                                                                                                                                                                                   (apply
                                                                                                                                                                                                                                                                                                                    L.cons.74.6
                                                                                                                                                                                                                                                                                                                    cons.74
                                                                                                                                                                                                                                                                                                                    32
                                                                                                                                                                                                                                                                                                                    tmp.357)))
                                                                                                                                                                                                                                                                                                              (apply
                                                                                                                                                                                                                                                                                                               L.filter.4.31
                                                                                                                                                                                                                                                                                                               filter.4
                                                                                                                                                                                                                                                                                                               tmp.352
                                                                                                                                                                                                                                                                                                               tmp.358)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
     ) '(9 23))

  )



  (parameterize ([current-pass-list
                  (list
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.make-bigger?.6.33
      (lambda (c.122 threshold.11)
        (let ((make-bigger?.6 (mref c.122 14)))
          (let ((cons.74 (mref c.122 22)))
            (let ((tmp.141 cons.74))
              (apply L.cons.74.6 cons.74 make-bigger?.6 threshold.11))))))
    (define L.apply-pred.5.32
      (lambda (c.121 pred?.9 x.10)
        (let ((cdr.62 (mref c.121 14)))
          (let ((>.55 (mref c.121 22)))
            (let ((make-bigger?.6 (mref c.121 30)))
              (let ((car.61 (mref c.121 38)))
                (let ((eq?.75 (mref c.121 46)))
                  (if (neq?
                       (let ((tmp.137 eq?.75))
                         (apply
                          L.eq?.75.5
                          eq?.75
                          (let ((tmp.138 car.61))
                            (apply L.car.61.19 car.61 pred?.9))
                          make-bigger?.6))
                       6)
                    (let ((tmp.139 >.55))
                      (apply
                       L.>.55.25
                       >.55
                       x.10
                       (let ((tmp.140 cdr.62))
                         (apply L.cdr.62.18 cdr.62 pred?.9))))
                    25406))))))))
    (define L.filter.4.31
      (lambda (c.120 pred?.7 lox.8)
        (let ((cdr.62 (mref c.120 14)))
          (let ((filter.4 (mref c.120 22)))
            (let ((cons.74 (mref c.120 30)))
              (let ((car.61 (mref c.120 38)))
                (let ((apply-pred.5 (mref c.120 46)))
                  (let ((empty?.66 (mref c.120 54)))
                    (if (neq?
                         (let ((tmp.128 empty?.66))
                           (apply L.empty?.66.14 empty?.66 lox.8))
                         6)
                      22
                      (if (neq?
                           (let ((tmp.129 apply-pred.5))
                             (apply
                              L.apply-pred.5.32
                              apply-pred.5
                              pred?.7
                              (let ((tmp.130 car.61))
                                (apply L.car.61.19 car.61 lox.8))))
                           6)
                        (let ((tmp.131 cons.74))
                          (apply
                           L.cons.74.6
                           cons.74
                           (let ((tmp.132 car.61))
                             (apply L.car.61.19 car.61 lox.8))
                           (let ((tmp.133 filter.4))
                             (apply
                              L.filter.4.31
                              filter.4
                              pred?.7
                              (let ((tmp.134 cdr.62))
                                (apply L.cdr.62.18 cdr.62 lox.8))))))
                        (let ((tmp.135 filter.4))
                          (apply
                           L.filter.4.31
                           filter.4
                           pred?.7
                           (let ((tmp.136 cdr.62))
                             (apply L.cdr.62.18 cdr.62 lox.8))))))))))))))
    (define L.*.50.30
      (lambda (c.119 tmp.12 tmp.13)
        (if (neq? (if (eq? (bitwise-and tmp.13 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.12 7) 0) 14 6) 6)
            (* tmp.12 (arithmetic-shift-right tmp.13 3))
            62)
          62)))
    (define L.+.51.29
      (lambda (c.118 tmp.14 tmp.15)
        (if (neq? (if (eq? (bitwise-and tmp.15 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.14 7) 0) 14 6) 6)
            (+ tmp.14 tmp.15)
            318)
          318)))
    (define L.-.52.28
      (lambda (c.117 tmp.16 tmp.17)
        (if (neq? (if (eq? (bitwise-and tmp.17 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.16 7) 0) 14 6) 6)
            (- tmp.16 tmp.17)
            574)
          574)))
    (define L.<.53.27
      (lambda (c.116 tmp.18 tmp.19)
        (if (neq? (if (eq? (bitwise-and tmp.19 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.18 7) 0) 14 6) 6)
            (if (< tmp.18 tmp.19) 14 6)
            830)
          830)))
    (define L.<=.54.26
      (lambda (c.115 tmp.20 tmp.21)
        (if (neq? (if (eq? (bitwise-and tmp.21 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.20 7) 0) 14 6) 6)
            (if (<= tmp.20 tmp.21) 14 6)
            1086)
          1086)))
    (define L.>.55.25
      (lambda (c.114 tmp.22 tmp.23)
        (if (neq? (if (eq? (bitwise-and tmp.23 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.22 7) 0) 14 6) 6)
            (if (> tmp.22 tmp.23) 14 6)
            1342)
          1342)))
    (define L.>=.56.24
      (lambda (c.113 tmp.24 tmp.25)
        (if (neq? (if (eq? (bitwise-and tmp.25 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.24 7) 0) 14 6) 6)
            (if (>= tmp.24 tmp.25) 14 6)
            1598)
          1598)))
    (define L.make-vector.57.23
      (lambda (c.112 tmp.26)
        (let ((make-init-vector.1 (mref c.112 14)))
          (if (neq? (if (eq? (bitwise-and tmp.26 7) 0) 14 6) 6)
            (let ((tmp.127 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.26))
            1854))))
    (define L.vector-length.58.22
      (lambda (c.111 tmp.27)
        (if (neq? (if (eq? (bitwise-and tmp.27 7) 3) 14 6) 6)
          (mref tmp.27 -3)
          2110)))
    (define L.vector-set!.59.21
      (lambda (c.110 tmp.28 tmp.29 tmp.30)
        (let ((unsafe-vector-set!.2 (mref c.110 14)))
          (if (neq? (if (eq? (bitwise-and tmp.29 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.28 7) 3) 14 6) 6)
              (let ((tmp.126 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.28
                 tmp.29
                 tmp.30))
              2366)
            2366))))
    (define L.vector-ref.60.20
      (lambda (c.109 tmp.31 tmp.32)
        (let ((unsafe-vector-ref.3 (mref c.109 14)))
          (if (neq? (if (eq? (bitwise-and tmp.32 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.31 7) 3) 14 6) 6)
              (let ((tmp.125 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.31
                 tmp.32))
              2622)
            2622))))
    (define L.car.61.19
      (lambda (c.108 tmp.33)
        (if (neq? (if (eq? (bitwise-and tmp.33 7) 1) 14 6) 6)
          (mref tmp.33 -1)
          2878)))
    (define L.cdr.62.18
      (lambda (c.107 tmp.34)
        (if (neq? (if (eq? (bitwise-and tmp.34 7) 1) 14 6) 6)
          (mref tmp.34 7)
          3134)))
    (define L.procedure-arity.63.17
      (lambda (c.106 tmp.35)
        (if (neq? (if (eq? (bitwise-and tmp.35 7) 2) 14 6) 6)
          (mref tmp.35 6)
          3390)))
    (define L.fixnum?.64.16
      (lambda (c.105 tmp.36) (if (eq? (bitwise-and tmp.36 7) 0) 14 6)))
    (define L.boolean?.65.15
      (lambda (c.104 tmp.37) (if (eq? (bitwise-and tmp.37 247) 6) 14 6)))
    (define L.empty?.66.14
      (lambda (c.103 tmp.38) (if (eq? (bitwise-and tmp.38 255) 22) 14 6)))
    (define L.void?.67.13
      (lambda (c.102 tmp.39) (if (eq? (bitwise-and tmp.39 255) 30) 14 6)))
    (define L.ascii-char?.68.12
      (lambda (c.101 tmp.40) (if (eq? (bitwise-and tmp.40 255) 46) 14 6)))
    (define L.error?.69.11
      (lambda (c.100 tmp.41) (if (eq? (bitwise-and tmp.41 255) 62) 14 6)))
    (define L.pair?.70.10
      (lambda (c.99 tmp.42) (if (eq? (bitwise-and tmp.42 7) 1) 14 6)))
    (define L.procedure?.71.9
      (lambda (c.98 tmp.43) (if (eq? (bitwise-and tmp.43 7) 2) 14 6)))
    (define L.vector?.72.8
      (lambda (c.97 tmp.44) (if (eq? (bitwise-and tmp.44 7) 3) 14 6)))
    (define L.not.73.7 (lambda (c.96 tmp.45) (if (neq? tmp.45 6) 6 14)))
    (define L.cons.74.6
      (lambda (c.95 tmp.46 tmp.47)
        (let ((tmp.150 (+ (alloc 16) 1)))
          (begin (mset! tmp.150 -1 tmp.46) (mset! tmp.150 7 tmp.47) tmp.150))))
    (define L.eq?.75.5
      (lambda (c.94 tmp.48 tmp.49) (if (eq? tmp.48 tmp.49) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.93 tmp.76)
        (let ((vector-init-loop.78 (mref c.93 14)))
          (let ((tmp.77
                 (let ((tmp.151
                        (+
                         (alloc (* (+ 1 (arithmetic-shift-right tmp.76 3)) 8))
                         3)))
                   (begin (mset! tmp.151 -3 tmp.76) tmp.151))))
            (let ((tmp.124 vector-init-loop.78))
              (apply
               L.vector-init-loop.78.3
               vector-init-loop.78
               tmp.76
               0
               tmp.77))))))
    (define L.vector-init-loop.78.3
      (lambda (c.92 len.79 i.81 vec.80)
        (let ((vector-init-loop.78 (mref c.92 14)))
          (if (neq? (if (eq? len.79 i.81) 14 6) 6)
            vec.80
            (begin
              (mset! vec.80 (+ (* (arithmetic-shift-right i.81 3) 8) 5) 0)
              (let ((tmp.123 vector-init-loop.78))
                (apply
                 L.vector-init-loop.78.3
                 vector-init-loop.78
                 len.79
                 (+ i.81 8)
                 vec.80)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.91 tmp.87 tmp.88 tmp.89)
        (if (neq? (if (< tmp.88 (mref tmp.87 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.88 0) 14 6) 6)
            (begin
              (mset!
               tmp.87
               (+ (* (arithmetic-shift-right tmp.88 3) 8) 5)
               tmp.89)
              30)
            2366)
          2366)))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.90 tmp.84 tmp.85)
        (if (neq? (if (< tmp.85 (mref tmp.84 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.85 0) 14 6) 6)
            (mref tmp.84 (+ (* (arithmetic-shift-right tmp.85 3) 8) 5))
            2622)
          2622)))
    (let ((unsafe-vector-ref.3
           (let ((tmp.152 (+ (alloc 16) 2)))
             (begin
               (mset! tmp.152 -2 L.unsafe-vector-ref.3.1)
               (mset! tmp.152 6 16)
               tmp.152))))
      (let ((unsafe-vector-set!.2
             (let ((tmp.153 (+ (alloc 16) 2)))
               (begin
                 (mset! tmp.153 -2 L.unsafe-vector-set!.2.2)
                 (mset! tmp.153 6 24)
                 tmp.153))))
        (let ((vector-init-loop.78
               (let ((tmp.154 (+ (alloc 24) 2)))
                 (begin
                   (mset! tmp.154 -2 L.vector-init-loop.78.3)
                   (mset! tmp.154 6 24)
                   tmp.154))))
          (let ((make-init-vector.1
                 (let ((tmp.155 (+ (alloc 24) 2)))
                   (begin
                     (mset! tmp.155 -2 L.make-init-vector.1.4)
                     (mset! tmp.155 6 8)
                     tmp.155))))
            (let ((eq?.75
                   (let ((tmp.156 (+ (alloc 16) 2)))
                     (begin
                       (mset! tmp.156 -2 L.eq?.75.5)
                       (mset! tmp.156 6 16)
                       tmp.156))))
              (let ((cons.74
                     (let ((tmp.157 (+ (alloc 16) 2)))
                       (begin
                         (mset! tmp.157 -2 L.cons.74.6)
                         (mset! tmp.157 6 16)
                         tmp.157))))
                (let ((not.73
                       (let ((tmp.158 (+ (alloc 16) 2)))
                         (begin
                           (mset! tmp.158 -2 L.not.73.7)
                           (mset! tmp.158 6 8)
                           tmp.158))))
                  (let ((vector?.72
                         (let ((tmp.159 (+ (alloc 16) 2)))
                           (begin
                             (mset! tmp.159 -2 L.vector?.72.8)
                             (mset! tmp.159 6 8)
                             tmp.159))))
                    (let ((procedure?.71
                           (let ((tmp.160 (+ (alloc 16) 2)))
                             (begin
                               (mset! tmp.160 -2 L.procedure?.71.9)
                               (mset! tmp.160 6 8)
                               tmp.160))))
                      (let ((pair?.70
                             (let ((tmp.161 (+ (alloc 16) 2)))
                               (begin
                                 (mset! tmp.161 -2 L.pair?.70.10)
                                 (mset! tmp.161 6 8)
                                 tmp.161))))
                        (let ((error?.69
                               (let ((tmp.162 (+ (alloc 16) 2)))
                                 (begin
                                   (mset! tmp.162 -2 L.error?.69.11)
                                   (mset! tmp.162 6 8)
                                   tmp.162))))
                          (let ((ascii-char?.68
                                 (let ((tmp.163 (+ (alloc 16) 2)))
                                   (begin
                                     (mset! tmp.163 -2 L.ascii-char?.68.12)
                                     (mset! tmp.163 6 8)
                                     tmp.163))))
                            (let ((void?.67
                                   (let ((tmp.164 (+ (alloc 16) 2)))
                                     (begin
                                       (mset! tmp.164 -2 L.void?.67.13)
                                       (mset! tmp.164 6 8)
                                       tmp.164))))
                              (let ((empty?.66
                                     (let ((tmp.165 (+ (alloc 16) 2)))
                                       (begin
                                         (mset! tmp.165 -2 L.empty?.66.14)
                                         (mset! tmp.165 6 8)
                                         tmp.165))))
                                (let ((boolean?.65
                                       (let ((tmp.166 (+ (alloc 16) 2)))
                                         (begin
                                           (mset! tmp.166 -2 L.boolean?.65.15)
                                           (mset! tmp.166 6 8)
                                           tmp.166))))
                                  (let ((fixnum?.64
                                         (let ((tmp.167 (+ (alloc 16) 2)))
                                           (begin
                                             (mset! tmp.167 -2 L.fixnum?.64.16)
                                             (mset! tmp.167 6 8)
                                             tmp.167))))
                                    (let ((procedure-arity.63
                                           (let ((tmp.168 (+ (alloc 16) 2)))
                                             (begin
                                               (mset!
                                                tmp.168
                                                -2
                                                L.procedure-arity.63.17)
                                               (mset! tmp.168 6 8)
                                               tmp.168))))
                                      (let ((cdr.62
                                             (let ((tmp.169 (+ (alloc 16) 2)))
                                               (begin
                                                 (mset! tmp.169 -2 L.cdr.62.18)
                                                 (mset! tmp.169 6 8)
                                                 tmp.169))))
                                        (let ((car.61
                                               (let ((tmp.170
                                                      (+ (alloc 16) 2)))
                                                 (begin
                                                   (mset!
                                                    tmp.170
                                                    -2
                                                    L.car.61.19)
                                                   (mset! tmp.170 6 8)
                                                   tmp.170))))
                                          (let ((vector-ref.60
                                                 (let ((tmp.171
                                                        (+ (alloc 24) 2)))
                                                   (begin
                                                     (mset!
                                                      tmp.171
                                                      -2
                                                      L.vector-ref.60.20)
                                                     (mset! tmp.171 6 16)
                                                     tmp.171))))
                                            (let ((vector-set!.59
                                                   (let ((tmp.172
                                                          (+ (alloc 24) 2)))
                                                     (begin
                                                       (mset!
                                                        tmp.172
                                                        -2
                                                        L.vector-set!.59.21)
                                                       (mset! tmp.172 6 24)
                                                       tmp.172))))
                                              (let ((vector-length.58
                                                     (let ((tmp.173
                                                            (+ (alloc 16) 2)))
                                                       (begin
                                                         (mset!
                                                          tmp.173
                                                          -2
                                                          L.vector-length.58.22)
                                                         (mset! tmp.173 6 8)
                                                         tmp.173))))
                                                (let ((make-vector.57
                                                       (let ((tmp.174
                                                              (+
                                                               (alloc 24)
                                                               2)))
                                                         (begin
                                                           (mset!
                                                            tmp.174
                                                            -2
                                                            L.make-vector.57.23)
                                                           (mset! tmp.174 6 8)
                                                           tmp.174))))
                                                  (let ((>=.56
                                                         (let ((tmp.175
                                                                (+
                                                                 (alloc 16)
                                                                 2)))
                                                           (begin
                                                             (mset!
                                                              tmp.175
                                                              -2
                                                              L.>=.56.24)
                                                             (mset!
                                                              tmp.175
                                                              6
                                                              16)
                                                             tmp.175))))
                                                    (let ((>.55
                                                           (let ((tmp.176
                                                                  (+
                                                                   (alloc 16)
                                                                   2)))
                                                             (begin
                                                               (mset!
                                                                tmp.176
                                                                -2
                                                                L.>.55.25)
                                                               (mset!
                                                                tmp.176
                                                                6
                                                                16)
                                                               tmp.176))))
                                                      (let ((<=.54
                                                             (let ((tmp.177
                                                                    (+
                                                                     (alloc 16)
                                                                     2)))
                                                               (begin
                                                                 (mset!
                                                                  tmp.177
                                                                  -2
                                                                  L.<=.54.26)
                                                                 (mset!
                                                                  tmp.177
                                                                  6
                                                                  16)
                                                                 tmp.177))))
                                                        (let ((<.53
                                                               (let ((tmp.178
                                                                      (+
                                                                       (alloc
                                                                        16)
                                                                       2)))
                                                                 (begin
                                                                   (mset!
                                                                    tmp.178
                                                                    -2
                                                                    L.<.53.27)
                                                                   (mset!
                                                                    tmp.178
                                                                    6
                                                                    16)
                                                                   tmp.178))))
                                                          (let ((|-.52|
                                                                 (let ((tmp.179
                                                                        (+
                                                                         (alloc
                                                                          16)
                                                                         2)))
                                                                   (begin
                                                                     (mset!
                                                                      tmp.179
                                                                      -2
                                                                      L.-.52.28)
                                                                     (mset!
                                                                      tmp.179
                                                                      6
                                                                      16)
                                                                     tmp.179))))
                                                            (let ((|+.51|
                                                                   (let ((tmp.180
                                                                          (+
                                                                           (alloc
                                                                            16)
                                                                           2)))
                                                                     (begin
                                                                       (mset!
                                                                        tmp.180
                                                                        -2
                                                                        L.+.51.29)
                                                                       (mset!
                                                                        tmp.180
                                                                        6
                                                                        16)
                                                                       tmp.180))))
                                                              (let ((*.50
                                                                     (let ((tmp.181
                                                                            (+
                                                                             (alloc
                                                                              16)
                                                                             2)))
                                                                       (begin
                                                                         (mset!
                                                                          tmp.181
                                                                          -2
                                                                          L.*.50.30)
                                                                         (mset!
                                                                          tmp.181
                                                                          6
                                                                          16)
                                                                         tmp.181))))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-init-loop.78
                                                                     14
                                                                     vector-init-loop.78))
                                                                  (begin
                                                                    (mset!
                                                                     make-init-vector.1
                                                                     14
                                                                     vector-init-loop.78))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-ref.60
                                                                     14
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (mset!
                                                                     vector-set!.59
                                                                     14
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     make-vector.57
                                                                     14
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (let ((filter.4
                                                                           (let ((tmp.182
                                                                                  (+
                                                                                   (alloc
                                                                                    64)
                                                                                   2)))
                                                                             (begin
                                                                               (mset!
                                                                                tmp.182
                                                                                -2
                                                                                L.filter.4.31)
                                                                               (mset!
                                                                                tmp.182
                                                                                6
                                                                                16)
                                                                               tmp.182))))
                                                                      (let ((apply-pred.5
                                                                             (let ((tmp.183
                                                                                    (+
                                                                                     (alloc
                                                                                      56)
                                                                                     2)))
                                                                               (begin
                                                                                 (mset!
                                                                                  tmp.183
                                                                                  -2
                                                                                  L.apply-pred.5.32)
                                                                                 (mset!
                                                                                  tmp.183
                                                                                  6
                                                                                  16)
                                                                                 tmp.183))))
                                                                        (let ((make-bigger?.6
                                                                               (let ((tmp.184
                                                                                      (+
                                                                                       (alloc
                                                                                        32)
                                                                                       2)))
                                                                                 (begin
                                                                                   (mset!
                                                                                    tmp.184
                                                                                    -2
                                                                                    L.make-bigger?.6.33)
                                                                                   (mset!
                                                                                    tmp.184
                                                                                    6
                                                                                    8)
                                                                                   tmp.184))))
                                                                          (begin
                                                                            (begin
                                                                              (mset!
                                                                               filter.4
                                                                               14
                                                                               cdr.62)
                                                                              (mset!
                                                                               filter.4
                                                                               22
                                                                               filter.4)
                                                                              (mset!
                                                                               filter.4
                                                                               30
                                                                               cons.74)
                                                                              (mset!
                                                                               filter.4
                                                                               38
                                                                               car.61)
                                                                              (mset!
                                                                               filter.4
                                                                               46
                                                                               apply-pred.5)
                                                                              (mset!
                                                                               filter.4
                                                                               54
                                                                               empty?.66))
                                                                            (begin
                                                                              (mset!
                                                                               apply-pred.5
                                                                               14
                                                                               cdr.62)
                                                                              (mset!
                                                                               apply-pred.5
                                                                               22
                                                                               >.55)
                                                                              (mset!
                                                                               apply-pred.5
                                                                               30
                                                                               make-bigger?.6)
                                                                              (mset!
                                                                               apply-pred.5
                                                                               38
                                                                               car.61)
                                                                              (mset!
                                                                               apply-pred.5
                                                                               46
                                                                               eq?.75))
                                                                            (begin
                                                                              (mset!
                                                                               make-bigger?.6
                                                                               14
                                                                               make-bigger?.6)
                                                                              (mset!
                                                                               make-bigger?.6
                                                                               22
                                                                               cons.74))
                                                                            (let ((tmp.142
                                                                                   filter.4))
                                                                              (apply
                                                                               L.filter.4.31
                                                                               filter.4
                                                                               (let ((tmp.143
                                                                                      make-bigger?.6))
                                                                                 (apply
                                                                                  L.make-bigger?.6.33
                                                                                  make-bigger?.6
                                                                                  64))
                                                                               (let ((tmp.144
                                                                                      cons.74))
                                                                                 (apply
                                                                                  L.cons.74.6
                                                                                  cons.74
                                                                                  32
                                                                                  (let ((tmp.145
                                                                                         cons.74))
                                                                                    (apply
                                                                                     L.cons.74.6
                                                                                     cons.74
                                                                                     56
                                                                                     (let ((tmp.146
                                                                                            cons.74))
                                                                                       (apply
                                                                                        L.cons.74.6
                                                                                        cons.74
                                                                                        64
                                                                                        (let ((tmp.147
                                                                                               cons.74))
                                                                                          (apply
                                                                                           L.cons.74.6
                                                                                           cons.74
                                                                                           72
                                                                                           (let ((tmp.148
                                                                                                  cons.74))
                                                                                             (apply
                                                                                              L.cons.74.6
                                                                                              cons.74
                                                                                              8
                                                                                              (let ((tmp.149
                                                                                                     cons.74))
                                                                                                (apply
                                                                                                 L.cons.74.6
                                                                                                 cons.74
                                                                                                 184
                                                                                                 22)))))))))))))))))))))))))))))))))))))))))))))))))))
     ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.make-bigger?.6.33
      (lambda (c.122 threshold.11)
        (let ((make-bigger?.6 (unsafe-procedure-ref c.122 0)))
          (let ((cons.74 (unsafe-procedure-ref c.122 1)))
            (let ((tmp.141 cons.74))
              (apply L.cons.74.6 cons.74 make-bigger?.6 threshold.11))))))
    (define L.apply-pred.5.32
      (lambda (c.121 pred?.9 x.10)
        (let ((cdr.62 (unsafe-procedure-ref c.121 0)))
          (let ((>.55 (unsafe-procedure-ref c.121 1)))
            (let ((make-bigger?.6 (unsafe-procedure-ref c.121 2)))
              (let ((car.61 (unsafe-procedure-ref c.121 3)))
                (let ((eq?.75 (unsafe-procedure-ref c.121 4)))
                  (if (let ((tmp.137 eq?.75))
                        (apply
                         L.eq?.75.5
                         eq?.75
                         (let ((tmp.138 car.61))
                           (apply L.car.61.19 car.61 pred?.9))
                         make-bigger?.6))
                    (let ((tmp.139 >.55))
                      (apply
                       L.>.55.25
                       >.55
                       x.10
                       (let ((tmp.140 cdr.62))
                         (apply L.cdr.62.18 cdr.62 pred?.9))))
                    (error 99)))))))))
    (define L.filter.4.31
      (lambda (c.120 pred?.7 lox.8)
        (let ((cdr.62 (unsafe-procedure-ref c.120 0)))
          (let ((filter.4 (unsafe-procedure-ref c.120 1)))
            (let ((cons.74 (unsafe-procedure-ref c.120 2)))
              (let ((car.61 (unsafe-procedure-ref c.120 3)))
                (let ((apply-pred.5 (unsafe-procedure-ref c.120 4)))
                  (let ((empty?.66 (unsafe-procedure-ref c.120 5)))
                    (if (let ((tmp.128 empty?.66))
                          (apply L.empty?.66.14 empty?.66 lox.8))
                      ()
                      (if (let ((tmp.129 apply-pred.5))
                            (apply
                             L.apply-pred.5.32
                             apply-pred.5
                             pred?.7
                             (let ((tmp.130 car.61))
                               (apply L.car.61.19 car.61 lox.8))))
                        (let ((tmp.131 cons.74))
                          (apply
                           L.cons.74.6
                           cons.74
                           (let ((tmp.132 car.61))
                             (apply L.car.61.19 car.61 lox.8))
                           (let ((tmp.133 filter.4))
                             (apply
                              L.filter.4.31
                              filter.4
                              pred?.7
                              (let ((tmp.134 cdr.62))
                                (apply L.cdr.62.18 cdr.62 lox.8))))))
                        (let ((tmp.135 filter.4))
                          (apply
                           L.filter.4.31
                           filter.4
                           pred?.7
                           (let ((tmp.136 cdr.62))
                             (apply L.cdr.62.18 cdr.62 lox.8))))))))))))))
    (define L.*.50.30
      (lambda (c.119 tmp.12 tmp.13)
        (if (fixnum? tmp.13)
          (if (fixnum? tmp.12) (unsafe-fx* tmp.12 tmp.13) (error 0))
          (error 0))))
    (define L.+.51.29
      (lambda (c.118 tmp.14 tmp.15)
        (if (fixnum? tmp.15)
          (if (fixnum? tmp.14) (unsafe-fx+ tmp.14 tmp.15) (error 1))
          (error 1))))
    (define L.-.52.28
      (lambda (c.117 tmp.16 tmp.17)
        (if (fixnum? tmp.17)
          (if (fixnum? tmp.16) (unsafe-fx- tmp.16 tmp.17) (error 2))
          (error 2))))
    (define L.<.53.27
      (lambda (c.116 tmp.18 tmp.19)
        (if (fixnum? tmp.19)
          (if (fixnum? tmp.18) (unsafe-fx< tmp.18 tmp.19) (error 3))
          (error 3))))
    (define L.<=.54.26
      (lambda (c.115 tmp.20 tmp.21)
        (if (fixnum? tmp.21)
          (if (fixnum? tmp.20) (unsafe-fx<= tmp.20 tmp.21) (error 4))
          (error 4))))
    (define L.>.55.25
      (lambda (c.114 tmp.22 tmp.23)
        (if (fixnum? tmp.23)
          (if (fixnum? tmp.22) (unsafe-fx> tmp.22 tmp.23) (error 5))
          (error 5))))
    (define L.>=.56.24
      (lambda (c.113 tmp.24 tmp.25)
        (if (fixnum? tmp.25)
          (if (fixnum? tmp.24) (unsafe-fx>= tmp.24 tmp.25) (error 6))
          (error 6))))
    (define L.make-vector.57.23
      (lambda (c.112 tmp.26)
        (let ((make-init-vector.1 (unsafe-procedure-ref c.112 0)))
          (if (fixnum? tmp.26)
            (let ((tmp.127 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.26))
            (error 7)))))
    (define L.vector-length.58.22
      (lambda (c.111 tmp.27)
        (if (vector? tmp.27) (unsafe-vector-length tmp.27) (error 8))))
    (define L.vector-set!.59.21
      (lambda (c.110 tmp.28 tmp.29 tmp.30)
        (let ((unsafe-vector-set!.2 (unsafe-procedure-ref c.110 0)))
          (if (fixnum? tmp.29)
            (if (vector? tmp.28)
              (let ((tmp.126 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.28
                 tmp.29
                 tmp.30))
              (error 9))
            (error 9)))))
    (define L.vector-ref.60.20
      (lambda (c.109 tmp.31 tmp.32)
        (let ((unsafe-vector-ref.3 (unsafe-procedure-ref c.109 0)))
          (if (fixnum? tmp.32)
            (if (vector? tmp.31)
              (let ((tmp.125 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.31
                 tmp.32))
              (error 10))
            (error 10)))))
    (define L.car.61.19
      (lambda (c.108 tmp.33)
        (if (pair? tmp.33) (unsafe-car tmp.33) (error 11))))
    (define L.cdr.62.18
      (lambda (c.107 tmp.34)
        (if (pair? tmp.34) (unsafe-cdr tmp.34) (error 12))))
    (define L.procedure-arity.63.17
      (lambda (c.106 tmp.35)
        (if (procedure? tmp.35) (unsafe-procedure-arity tmp.35) (error 13))))
    (define L.fixnum?.64.16 (lambda (c.105 tmp.36) (fixnum? tmp.36)))
    (define L.boolean?.65.15 (lambda (c.104 tmp.37) (boolean? tmp.37)))
    (define L.empty?.66.14 (lambda (c.103 tmp.38) (empty? tmp.38)))
    (define L.void?.67.13 (lambda (c.102 tmp.39) (void? tmp.39)))
    (define L.ascii-char?.68.12 (lambda (c.101 tmp.40) (ascii-char? tmp.40)))
    (define L.error?.69.11 (lambda (c.100 tmp.41) (error? tmp.41)))
    (define L.pair?.70.10 (lambda (c.99 tmp.42) (pair? tmp.42)))
    (define L.procedure?.71.9 (lambda (c.98 tmp.43) (procedure? tmp.43)))
    (define L.vector?.72.8 (lambda (c.97 tmp.44) (vector? tmp.44)))
    (define L.not.73.7 (lambda (c.96 tmp.45) (not tmp.45)))
    (define L.cons.74.6 (lambda (c.95 tmp.46 tmp.47) (cons tmp.46 tmp.47)))
    (define L.eq?.75.5 (lambda (c.94 tmp.48 tmp.49) (eq? tmp.48 tmp.49)))
    (define L.make-init-vector.1.4
      (lambda (c.93 tmp.76)
        (let ((vector-init-loop.78 (unsafe-procedure-ref c.93 0)))
          (let ((tmp.77 (unsafe-make-vector tmp.76)))
            (let ((tmp.124 vector-init-loop.78))
              (apply
               L.vector-init-loop.78.3
               vector-init-loop.78
               tmp.76
               0
               tmp.77))))))
    (define L.vector-init-loop.78.3
      (lambda (c.92 len.79 i.81 vec.80)
        (let ((vector-init-loop.78 (unsafe-procedure-ref c.92 0)))
          (if (eq? len.79 i.81)
            vec.80
            (begin
              (unsafe-vector-set! vec.80 i.81 0)
              (let ((tmp.123 vector-init-loop.78))
                (apply
                 L.vector-init-loop.78.3
                 vector-init-loop.78
                 len.79
                 (unsafe-fx+ i.81 1)
                 vec.80)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.91 tmp.87 tmp.88 tmp.89)
        (if (unsafe-fx< tmp.88 (unsafe-vector-length tmp.87))
          (if (unsafe-fx>= tmp.88 0)
            (begin (unsafe-vector-set! tmp.87 tmp.88 tmp.89) (void))
            (error 9))
          (error 9))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.90 tmp.84 tmp.85)
        (if (unsafe-fx< tmp.85 (unsafe-vector-length tmp.84))
          (if (unsafe-fx>= tmp.85 0)
            (unsafe-vector-ref tmp.84 tmp.85)
            (error 10))
          (error 10))))
    (let ((unsafe-vector-ref.3 (make-procedure L.unsafe-vector-ref.3.1 2 0)))
      (let ((unsafe-vector-set!.2
             (make-procedure L.unsafe-vector-set!.2.2 3 0)))
        (let ((vector-init-loop.78
               (make-procedure L.vector-init-loop.78.3 3 1)))
          (let ((make-init-vector.1
                 (make-procedure L.make-init-vector.1.4 1 1)))
            (let ((eq?.75 (make-procedure L.eq?.75.5 2 0)))
              (let ((cons.74 (make-procedure L.cons.74.6 2 0)))
                (let ((not.73 (make-procedure L.not.73.7 1 0)))
                  (let ((vector?.72 (make-procedure L.vector?.72.8 1 0)))
                    (let ((procedure?.71
                           (make-procedure L.procedure?.71.9 1 0)))
                      (let ((pair?.70 (make-procedure L.pair?.70.10 1 0)))
                        (let ((error?.69 (make-procedure L.error?.69.11 1 0)))
                          (let ((ascii-char?.68
                                 (make-procedure L.ascii-char?.68.12 1 0)))
                            (let ((void?.67
                                   (make-procedure L.void?.67.13 1 0)))
                              (let ((empty?.66
                                     (make-procedure L.empty?.66.14 1 0)))
                                (let ((boolean?.65
                                       (make-procedure L.boolean?.65.15 1 0)))
                                  (let ((fixnum?.64
                                         (make-procedure L.fixnum?.64.16 1 0)))
                                    (let ((procedure-arity.63
                                           (make-procedure
                                            L.procedure-arity.63.17
                                            1
                                            0)))
                                      (let ((cdr.62
                                             (make-procedure L.cdr.62.18 1 0)))
                                        (let ((car.61
                                               (make-procedure
                                                L.car.61.19
                                                1
                                                0)))
                                          (let ((vector-ref.60
                                                 (make-procedure
                                                  L.vector-ref.60.20
                                                  2
                                                  1)))
                                            (let ((vector-set!.59
                                                   (make-procedure
                                                    L.vector-set!.59.21
                                                    3
                                                    1)))
                                              (let ((vector-length.58
                                                     (make-procedure
                                                      L.vector-length.58.22
                                                      1
                                                      0)))
                                                (let ((make-vector.57
                                                       (make-procedure
                                                        L.make-vector.57.23
                                                        1
                                                        1)))
                                                  (let ((>=.56
                                                         (make-procedure
                                                          L.>=.56.24
                                                          2
                                                          0)))
                                                    (let ((>.55
                                                           (make-procedure
                                                            L.>.55.25
                                                            2
                                                            0)))
                                                      (let ((<=.54
                                                             (make-procedure
                                                              L.<=.54.26
                                                              2
                                                              0)))
                                                        (let ((<.53
                                                               (make-procedure
                                                                L.<.53.27
                                                                2
                                                                0)))
                                                          (let ((|-.52|
                                                                 (make-procedure
                                                                  L.-.52.28
                                                                  2
                                                                  0)))
                                                            (let ((|+.51|
                                                                   (make-procedure
                                                                    L.+.51.29
                                                                    2
                                                                    0)))
                                                              (let ((*.50
                                                                     (make-procedure
                                                                      L.*.50.30
                                                                      2
                                                                      0)))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-init-loop.78
                                                                     0
                                                                     vector-init-loop.78))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-init-vector.1
                                                                     0
                                                                     vector-init-loop.78))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-ref.60
                                                                     0
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-set!.59
                                                                     0
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-vector.57
                                                                     0
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (let ((filter.4
                                                                           (make-procedure
                                                                            L.filter.4.31
                                                                            2
                                                                            6)))
                                                                      (let ((apply-pred.5
                                                                             (make-procedure
                                                                              L.apply-pred.5.32
                                                                              2
                                                                              5)))
                                                                        (let ((make-bigger?.6
                                                                               (make-procedure
                                                                                L.make-bigger?.6.33
                                                                                1
                                                                                2)))
                                                                          (begin
                                                                            (begin
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               0
                                                                               cdr.62)
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               1
                                                                               filter.4)
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               2
                                                                               cons.74)
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               3
                                                                               car.61)
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               4
                                                                               apply-pred.5)
                                                                              (unsafe-procedure-set!
                                                                               filter.4
                                                                               5
                                                                               empty?.66))
                                                                            (begin
                                                                              (unsafe-procedure-set!
                                                                               apply-pred.5
                                                                               0
                                                                               cdr.62)
                                                                              (unsafe-procedure-set!
                                                                               apply-pred.5
                                                                               1
                                                                               >.55)
                                                                              (unsafe-procedure-set!
                                                                               apply-pred.5
                                                                               2
                                                                               make-bigger?.6)
                                                                              (unsafe-procedure-set!
                                                                               apply-pred.5
                                                                               3
                                                                               car.61)
                                                                              (unsafe-procedure-set!
                                                                               apply-pred.5
                                                                               4
                                                                               eq?.75))
                                                                            (begin
                                                                              (unsafe-procedure-set!
                                                                               make-bigger?.6
                                                                               0
                                                                               make-bigger?.6)
                                                                              (unsafe-procedure-set!
                                                                               make-bigger?.6
                                                                               1
                                                                               cons.74))
                                                                            (let ((tmp.142
                                                                                   filter.4))
                                                                              (apply
                                                                               L.filter.4.31
                                                                               filter.4
                                                                               (let ((tmp.143
                                                                                      make-bigger?.6))
                                                                                 (apply
                                                                                  L.make-bigger?.6.33
                                                                                  make-bigger?.6
                                                                                  8))
                                                                               (let ((tmp.144
                                                                                      cons.74))
                                                                                 (apply
                                                                                  L.cons.74.6
                                                                                  cons.74
                                                                                  4
                                                                                  (let ((tmp.145
                                                                                         cons.74))
                                                                                    (apply
                                                                                     L.cons.74.6
                                                                                     cons.74
                                                                                     7
                                                                                     (let ((tmp.146
                                                                                            cons.74))
                                                                                       (apply
                                                                                        L.cons.74.6
                                                                                        cons.74
                                                                                        8
                                                                                        (let ((tmp.147
                                                                                               cons.74))
                                                                                          (apply
                                                                                           L.cons.74.6
                                                                                           cons.74
                                                                                           9
                                                                                           (let ((tmp.148
                                                                                                  cons.74))
                                                                                             (apply
                                                                                              L.cons.74.6
                                                                                              cons.74
                                                                                              1
                                                                                              (let ((tmp.149
                                                                                                     cons.74))
                                                                                                (apply
                                                                                                 L.cons.74.6
                                                                                                 cons.74
                                                                                                 23
                                                                                                 ())))))))))))))))))))))))))))))))))))))))))))))))))))

          ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.make-bigger?.6.33
      (lambda (c.122 threshold.11)
        (let ((make-bigger?.6 (closure-ref c.122 0))
              (cons.74 (closure-ref c.122 1)))
          (let ((tmp.141 cons.74))
            (unsafe-apply L.cons.74.6 cons.74 make-bigger?.6 threshold.11)))))
    (define L.apply-pred.5.32
      (lambda (c.121 pred?.9 x.10)
        (let ((cdr.62 (closure-ref c.121 0))
              (>.55 (closure-ref c.121 1))
              (make-bigger?.6 (closure-ref c.121 2))
              (car.61 (closure-ref c.121 3))
              (eq?.75 (closure-ref c.121 4)))
          (if (let ((tmp.137 eq?.75))
                (unsafe-apply
                 L.eq?.75.5
                 eq?.75
                 (let ((tmp.138 car.61))
                   (unsafe-apply L.car.61.19 car.61 pred?.9))
                 make-bigger?.6))
            (let ((tmp.139 >.55))
              (unsafe-apply
               L.>.55.25
               >.55
               x.10
               (let ((tmp.140 cdr.62))
                 (unsafe-apply L.cdr.62.18 cdr.62 pred?.9))))
            (error 99)))))
    (define L.filter.4.31
      (lambda (c.120 pred?.7 lox.8)
        (let ((cdr.62 (closure-ref c.120 0))
              (filter.4 (closure-ref c.120 1))
              (cons.74 (closure-ref c.120 2))
              (car.61 (closure-ref c.120 3))
              (apply-pred.5 (closure-ref c.120 4))
              (empty?.66 (closure-ref c.120 5)))
          (if (let ((tmp.128 empty?.66))
                (unsafe-apply L.empty?.66.14 empty?.66 lox.8))
            ()
            (if (let ((tmp.129 apply-pred.5))
                  (unsafe-apply
                   L.apply-pred.5.32
                   apply-pred.5
                   pred?.7
                   (let ((tmp.130 car.61))
                     (unsafe-apply L.car.61.19 car.61 lox.8))))
              (let ((tmp.131 cons.74))
                (unsafe-apply
                 L.cons.74.6
                 cons.74
                 (let ((tmp.132 car.61))
                   (unsafe-apply L.car.61.19 car.61 lox.8))
                 (let ((tmp.133 filter.4))
                   (unsafe-apply
                    L.filter.4.31
                    filter.4
                    pred?.7
                    (let ((tmp.134 cdr.62))
                      (unsafe-apply L.cdr.62.18 cdr.62 lox.8))))))
              (let ((tmp.135 filter.4))
                (unsafe-apply
                 L.filter.4.31
                 filter.4
                 pred?.7
                 (let ((tmp.136 cdr.62))
                   (unsafe-apply L.cdr.62.18 cdr.62 lox.8)))))))))
    (define L.*.50.30
      (lambda (c.119 tmp.12 tmp.13)
        (let ()
          (if (fixnum? tmp.13)
            (if (fixnum? tmp.12) (unsafe-fx* tmp.12 tmp.13) (error 0))
            (error 0)))))
    (define L.+.51.29
      (lambda (c.118 tmp.14 tmp.15)
        (let ()
          (if (fixnum? tmp.15)
            (if (fixnum? tmp.14) (unsafe-fx+ tmp.14 tmp.15) (error 1))
            (error 1)))))
    (define L.-.52.28
      (lambda (c.117 tmp.16 tmp.17)
        (let ()
          (if (fixnum? tmp.17)
            (if (fixnum? tmp.16) (unsafe-fx- tmp.16 tmp.17) (error 2))
            (error 2)))))
    (define L.<.53.27
      (lambda (c.116 tmp.18 tmp.19)
        (let ()
          (if (fixnum? tmp.19)
            (if (fixnum? tmp.18) (unsafe-fx< tmp.18 tmp.19) (error 3))
            (error 3)))))
    (define L.<=.54.26
      (lambda (c.115 tmp.20 tmp.21)
        (let ()
          (if (fixnum? tmp.21)
            (if (fixnum? tmp.20) (unsafe-fx<= tmp.20 tmp.21) (error 4))
            (error 4)))))
    (define L.>.55.25
      (lambda (c.114 tmp.22 tmp.23)
        (let ()
          (if (fixnum? tmp.23)
            (if (fixnum? tmp.22) (unsafe-fx> tmp.22 tmp.23) (error 5))
            (error 5)))))
    (define L.>=.56.24
      (lambda (c.113 tmp.24 tmp.25)
        (let ()
          (if (fixnum? tmp.25)
            (if (fixnum? tmp.24) (unsafe-fx>= tmp.24 tmp.25) (error 6))
            (error 6)))))
    (define L.make-vector.57.23
      (lambda (c.112 tmp.26)
        (let ((make-init-vector.1 (closure-ref c.112 0)))
          (if (fixnum? tmp.26)
            (let ((tmp.127 make-init-vector.1))
              (unsafe-apply L.make-init-vector.1.4 make-init-vector.1 tmp.26))
            (error 7)))))
    (define L.vector-length.58.22
      (lambda (c.111 tmp.27)
        (let ()
          (if (vector? tmp.27) (unsafe-vector-length tmp.27) (error 8)))))
    (define L.vector-set!.59.21
      (lambda (c.110 tmp.28 tmp.29 tmp.30)
        (let ((unsafe-vector-set!.2 (closure-ref c.110 0)))
          (if (fixnum? tmp.29)
            (if (vector? tmp.28)
              (let ((tmp.126 unsafe-vector-set!.2))
                (unsafe-apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.28
                 tmp.29
                 tmp.30))
              (error 9))
            (error 9)))))
    (define L.vector-ref.60.20
      (lambda (c.109 tmp.31 tmp.32)
        (let ((unsafe-vector-ref.3 (closure-ref c.109 0)))
          (if (fixnum? tmp.32)
            (if (vector? tmp.31)
              (let ((tmp.125 unsafe-vector-ref.3))
                (unsafe-apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.31
                 tmp.32))
              (error 10))
            (error 10)))))
    (define L.car.61.19
      (lambda (c.108 tmp.33)
        (let () (if (pair? tmp.33) (unsafe-car tmp.33) (error 11)))))
    (define L.cdr.62.18
      (lambda (c.107 tmp.34)
        (let () (if (pair? tmp.34) (unsafe-cdr tmp.34) (error 12)))))
    (define L.procedure-arity.63.17
      (lambda (c.106 tmp.35)
        (let ()
          (if (procedure? tmp.35)
            (unsafe-procedure-arity tmp.35)
            (error 13)))))
    (define L.fixnum?.64.16 (lambda (c.105 tmp.36) (let () (fixnum? tmp.36))))
    (define L.boolean?.65.15
      (lambda (c.104 tmp.37) (let () (boolean? tmp.37))))
    (define L.empty?.66.14 (lambda (c.103 tmp.38) (let () (empty? tmp.38))))
    (define L.void?.67.13 (lambda (c.102 tmp.39) (let () (void? tmp.39))))
    (define L.ascii-char?.68.12
      (lambda (c.101 tmp.40) (let () (ascii-char? tmp.40))))
    (define L.error?.69.11 (lambda (c.100 tmp.41) (let () (error? tmp.41))))
    (define L.pair?.70.10 (lambda (c.99 tmp.42) (let () (pair? tmp.42))))
    (define L.procedure?.71.9
      (lambda (c.98 tmp.43) (let () (procedure? tmp.43))))
    (define L.vector?.72.8 (lambda (c.97 tmp.44) (let () (vector? tmp.44))))
    (define L.not.73.7 (lambda (c.96 tmp.45) (let () (not tmp.45))))
    (define L.cons.74.6
      (lambda (c.95 tmp.46 tmp.47) (let () (cons tmp.46 tmp.47))))
    (define L.eq?.75.5
      (lambda (c.94 tmp.48 tmp.49) (let () (eq? tmp.48 tmp.49))))
    (define L.make-init-vector.1.4
      (lambda (c.93 tmp.76)
        (let ((vector-init-loop.78 (closure-ref c.93 0)))
          (let ((tmp.77 (unsafe-make-vector tmp.76)))
            (let ((tmp.124 vector-init-loop.78))
              (unsafe-apply
               L.vector-init-loop.78.3
               vector-init-loop.78
               tmp.76
               0
               tmp.77))))))
    (define L.vector-init-loop.78.3
      (lambda (c.92 len.79 i.81 vec.80)
        (let ((vector-init-loop.78 (closure-ref c.92 0)))
          (if (eq? len.79 i.81)
            vec.80
            (begin
              (unsafe-vector-set! vec.80 i.81 0)
              (let ((tmp.123 vector-init-loop.78))
                (unsafe-apply
                 L.vector-init-loop.78.3
                 vector-init-loop.78
                 len.79
                 (unsafe-fx+ i.81 1)
                 vec.80)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.91 tmp.87 tmp.88 tmp.89)
        (let ()
          (if (unsafe-fx< tmp.88 (unsafe-vector-length tmp.87))
            (if (unsafe-fx>= tmp.88 0)
              (begin (unsafe-vector-set! tmp.87 tmp.88 tmp.89) (void))
              (error 9))
            (error 9)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.90 tmp.84 tmp.85)
        (let ()
          (if (unsafe-fx< tmp.85 (unsafe-vector-length tmp.84))
            (if (unsafe-fx>= tmp.85 0)
              (unsafe-vector-ref tmp.84 tmp.85)
              (error 10))
            (error 10)))))
    (cletrec
     ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
      (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
      (vector-init-loop.78
       (make-closure L.vector-init-loop.78.3 3 vector-init-loop.78))
      (make-init-vector.1
       (make-closure L.make-init-vector.1.4 1 vector-init-loop.78))
      (eq?.75 (make-closure L.eq?.75.5 2))
      (cons.74 (make-closure L.cons.74.6 2))
      (not.73 (make-closure L.not.73.7 1))
      (vector?.72 (make-closure L.vector?.72.8 1))
      (procedure?.71 (make-closure L.procedure?.71.9 1))
      (pair?.70 (make-closure L.pair?.70.10 1))
      (error?.69 (make-closure L.error?.69.11 1))
      (ascii-char?.68 (make-closure L.ascii-char?.68.12 1))
      (void?.67 (make-closure L.void?.67.13 1))
      (empty?.66 (make-closure L.empty?.66.14 1))
      (boolean?.65 (make-closure L.boolean?.65.15 1))
      (fixnum?.64 (make-closure L.fixnum?.64.16 1))
      (procedure-arity.63 (make-closure L.procedure-arity.63.17 1))
      (cdr.62 (make-closure L.cdr.62.18 1))
      (car.61 (make-closure L.car.61.19 1))
      (vector-ref.60 (make-closure L.vector-ref.60.20 2 unsafe-vector-ref.3))
      (vector-set!.59
       (make-closure L.vector-set!.59.21 3 unsafe-vector-set!.2))
      (vector-length.58 (make-closure L.vector-length.58.22 1))
      (make-vector.57 (make-closure L.make-vector.57.23 1 make-init-vector.1))
      (>=.56 (make-closure L.>=.56.24 2))
      (>.55 (make-closure L.>.55.25 2))
      (<=.54 (make-closure L.<=.54.26 2))
      (<.53 (make-closure L.<.53.27 2))
      (|-.52| (make-closure L.-.52.28 2))
      (|+.51| (make-closure L.+.51.29 2))
      (*.50 (make-closure L.*.50.30 2)))
     (let ()
       (let ()
         (cletrec
          ()
          (let ()
            (let ()
              (let ()
                (cletrec
                 ((filter.4
                   (make-closure
                    L.filter.4.31
                    2
                    cdr.62
                    filter.4
                    cons.74
                    car.61
                    apply-pred.5
                    empty?.66))
                  (apply-pred.5
                   (make-closure
                    L.apply-pred.5.32
                    2
                    cdr.62
                    >.55
                    make-bigger?.6
                    car.61
                    eq?.75))
                  (make-bigger?.6
                   (make-closure
                    L.make-bigger?.6.33
                    1
                    make-bigger?.6
                    cons.74)))
                 (let ()
                   (let ((tmp.142 filter.4))
                     (unsafe-apply
                      L.filter.4.31
                      filter.4
                      (let ((tmp.143 make-bigger?.6))
                        (unsafe-apply L.make-bigger?.6.33 make-bigger?.6 8))
                      (let ((tmp.144 cons.74))
                        (unsafe-apply
                         L.cons.74.6
                         cons.74
                         4
                         (let ((tmp.145 cons.74))
                           (unsafe-apply
                            L.cons.74.6
                            cons.74
                            7
                            (let ((tmp.146 cons.74))
                              (unsafe-apply
                               L.cons.74.6
                               cons.74
                               8
                               (let ((tmp.147 cons.74))
                                 (unsafe-apply
                                  L.cons.74.6
                                  cons.74
                                  9
                                  (let ((tmp.148 cons.74))
                                    (unsafe-apply
                                     L.cons.74.6
                                     cons.74
                                     1
                                     (let ((tmp.149 cons.74))
                                       (unsafe-apply
                                        L.cons.74.6
                                        cons.74
                                        23
                                        ()))))))))))))))))))))))))
     ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.90 tmp.84 tmp.85)
                (let ()
                  (if (unsafe-fx< tmp.85 (unsafe-vector-length tmp.84))
                    (if (unsafe-fx>= tmp.85 0)
                      (unsafe-vector-ref tmp.84 tmp.85)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.91 tmp.87 tmp.88 tmp.89)
                (let ()
                  (if (unsafe-fx< tmp.88 (unsafe-vector-length tmp.87))
                    (if (unsafe-fx>= tmp.88 0)
                      (begin (unsafe-vector-set! tmp.87 tmp.88 tmp.89) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.78.3
              (lambda (c.92 len.79 i.81 vec.80)
                (let ((vector-init-loop.78 (closure-ref c.92 0)))
                  (if (eq? len.79 i.81)
                    vec.80
                    (begin
                      (unsafe-vector-set! vec.80 i.81 0)
                      (let ((tmp.123 vector-init-loop.78))
                        (unsafe-apply
                         L.vector-init-loop.78.3
                         vector-init-loop.78
                         len.79
                         (unsafe-fx+ i.81 1)
                         vec.80)))))))
             (L.make-init-vector.1.4
              (lambda (c.93 tmp.76)
                (let ((vector-init-loop.78 (closure-ref c.93 0)))
                  (let ((tmp.77 (unsafe-make-vector tmp.76)))
                    (let ((tmp.124 vector-init-loop.78))
                      (unsafe-apply
                       L.vector-init-loop.78.3
                       vector-init-loop.78
                       tmp.76
                       0
                       tmp.77))))))
             (L.eq?.75.5
              (lambda (c.94 tmp.48 tmp.49) (let () (eq? tmp.48 tmp.49))))
             (L.cons.74.6
              (lambda (c.95 tmp.46 tmp.47) (let () (cons tmp.46 tmp.47))))
             (L.not.73.7 (lambda (c.96 tmp.45) (let () (not tmp.45))))
             (L.vector?.72.8 (lambda (c.97 tmp.44) (let () (vector? tmp.44))))
             (L.procedure?.71.9
              (lambda (c.98 tmp.43) (let () (procedure? tmp.43))))
             (L.pair?.70.10 (lambda (c.99 tmp.42) (let () (pair? tmp.42))))
             (L.error?.69.11 (lambda (c.100 tmp.41) (let () (error? tmp.41))))
             (L.ascii-char?.68.12
              (lambda (c.101 tmp.40) (let () (ascii-char? tmp.40))))
             (L.void?.67.13 (lambda (c.102 tmp.39) (let () (void? tmp.39))))
             (L.empty?.66.14 (lambda (c.103 tmp.38) (let () (empty? tmp.38))))
             (L.boolean?.65.15
              (lambda (c.104 tmp.37) (let () (boolean? tmp.37))))
             (L.fixnum?.64.16
              (lambda (c.105 tmp.36) (let () (fixnum? tmp.36))))
             (L.procedure-arity.63.17
              (lambda (c.106 tmp.35)
                (let ()
                  (if (procedure? tmp.35)
                    (unsafe-procedure-arity tmp.35)
                    (error 13)))))
             (L.cdr.62.18
              (lambda (c.107 tmp.34)
                (let () (if (pair? tmp.34) (unsafe-cdr tmp.34) (error 12)))))
             (L.car.61.19
              (lambda (c.108 tmp.33)
                (let () (if (pair? tmp.33) (unsafe-car tmp.33) (error 11)))))
             (L.vector-ref.60.20
              (lambda (c.109 tmp.31 tmp.32)
                (let ((unsafe-vector-ref.3 (closure-ref c.109 0)))
                  (if (fixnum? tmp.32)
                    (if (vector? tmp.31)
                      (let ((tmp.125 unsafe-vector-ref.3))
                        (unsafe-apply
                         L.unsafe-vector-ref.3.1
                         unsafe-vector-ref.3
                         tmp.31
                         tmp.32))
                      (error 10))
                    (error 10)))))
             (L.vector-set!.59.21
              (lambda (c.110 tmp.28 tmp.29 tmp.30)
                (let ((unsafe-vector-set!.2 (closure-ref c.110 0)))
                  (if (fixnum? tmp.29)
                    (if (vector? tmp.28)
                      (let ((tmp.126 unsafe-vector-set!.2))
                        (unsafe-apply
                         L.unsafe-vector-set!.2.2
                         unsafe-vector-set!.2
                         tmp.28
                         tmp.29
                         tmp.30))
                      (error 9))
                    (error 9)))))
             (L.vector-length.58.22
              (lambda (c.111 tmp.27)
                (let ()
                  (if (vector? tmp.27)
                    (unsafe-vector-length tmp.27)
                    (error 8)))))
             (L.make-vector.57.23
              (lambda (c.112 tmp.26)
                (let ((make-init-vector.1 (closure-ref c.112 0)))
                  (if (fixnum? tmp.26)
                    (let ((tmp.127 make-init-vector.1))
                      (unsafe-apply
                       L.make-init-vector.1.4
                       make-init-vector.1
                       tmp.26))
                    (error 7)))))
             (L.>=.56.24
              (lambda (c.113 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx>= tmp.24 tmp.25) (error 6))
                    (error 6)))))
             (L.>.55.25
              (lambda (c.114 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx> tmp.22 tmp.23) (error 5))
                    (error 5)))))
             (L.<=.54.26
              (lambda (c.115 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx<= tmp.20 tmp.21) (error 4))
                    (error 4)))))
             (L.<.53.27
              (lambda (c.116 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx< tmp.18 tmp.19) (error 3))
                    (error 3)))))
             (L.-.52.28
              (lambda (c.117 tmp.16 tmp.17)
                (let ()
                  (if (fixnum? tmp.17)
                    (if (fixnum? tmp.16) (unsafe-fx- tmp.16 tmp.17) (error 2))
                    (error 2)))))
             (L.+.51.29
              (lambda (c.118 tmp.14 tmp.15)
                (let ()
                  (if (fixnum? tmp.15)
                    (if (fixnum? tmp.14) (unsafe-fx+ tmp.14 tmp.15) (error 1))
                    (error 1)))))
             (L.*.50.30
              (lambda (c.119 tmp.12 tmp.13)
                (let ()
                  (if (fixnum? tmp.13)
                    (if (fixnum? tmp.12) (unsafe-fx* tmp.12 tmp.13) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.78
         (make-closure L.vector-init-loop.78.3 3 vector-init-loop.78))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.78))
        (eq?.75 (make-closure L.eq?.75.5 2))
        (cons.74 (make-closure L.cons.74.6 2))
        (not.73 (make-closure L.not.73.7 1))
        (vector?.72 (make-closure L.vector?.72.8 1))
        (procedure?.71 (make-closure L.procedure?.71.9 1))
        (pair?.70 (make-closure L.pair?.70.10 1))
        (error?.69 (make-closure L.error?.69.11 1))
        (ascii-char?.68 (make-closure L.ascii-char?.68.12 1))
        (void?.67 (make-closure L.void?.67.13 1))
        (empty?.66 (make-closure L.empty?.66.14 1))
        (boolean?.65 (make-closure L.boolean?.65.15 1))
        (fixnum?.64 (make-closure L.fixnum?.64.16 1))
        (procedure-arity.63 (make-closure L.procedure-arity.63.17 1))
        (cdr.62 (make-closure L.cdr.62.18 1))
        (car.61 (make-closure L.car.61.19 1))
        (vector-ref.60 (make-closure L.vector-ref.60.20 2 unsafe-vector-ref.3))
        (vector-set!.59
         (make-closure L.vector-set!.59.21 3 unsafe-vector-set!.2))
        (vector-length.58 (make-closure L.vector-length.58.22 1))
        (make-vector.57
         (make-closure L.make-vector.57.23 1 make-init-vector.1))
        (>=.56 (make-closure L.>=.56.24 2))
        (>.55 (make-closure L.>.55.25 2))
        (<=.54 (make-closure L.<=.54.26 2))
        (<.53 (make-closure L.<.53.27 2))
        (|-.52| (make-closure L.-.52.28 2))
        (|+.51| (make-closure L.+.51.29 2))
        (*.50 (make-closure L.*.50.30 2)))
       (let ()
         (let ()
           (letrec ()
             (cletrec
              ()
              (let ()
                (let ()
                  (let ()
                    (letrec ((L.filter.4.31
                              (lambda (c.120 pred?.7 lox.8)
                                (let ((cdr.62 (closure-ref c.120 0))
                                      (filter.4 (closure-ref c.120 1))
                                      (cons.74 (closure-ref c.120 2))
                                      (car.61 (closure-ref c.120 3))
                                      (apply-pred.5 (closure-ref c.120 4))
                                      (empty?.66 (closure-ref c.120 5)))
                                  (if (let ((tmp.128 empty?.66))
                                        (unsafe-apply
                                         L.empty?.66.14
                                         empty?.66
                                         lox.8))
                                    ()
                                    (if (let ((tmp.129 apply-pred.5))
                                          (unsafe-apply
                                           L.apply-pred.5.32
                                           apply-pred.5
                                           pred?.7
                                           (let ((tmp.130 car.61))
                                             (unsafe-apply
                                              L.car.61.19
                                              car.61
                                              lox.8))))
                                      (let ((tmp.131 cons.74))
                                        (unsafe-apply
                                         L.cons.74.6
                                         cons.74
                                         (let ((tmp.132 car.61))
                                           (unsafe-apply
                                            L.car.61.19
                                            car.61
                                            lox.8))
                                         (let ((tmp.133 filter.4))
                                           (unsafe-apply
                                            L.filter.4.31
                                            filter.4
                                            pred?.7
                                            (let ((tmp.134 cdr.62))
                                              (unsafe-apply
                                               L.cdr.62.18
                                               cdr.62
                                               lox.8))))))
                                      (let ((tmp.135 filter.4))
                                        (unsafe-apply
                                         L.filter.4.31
                                         filter.4
                                         pred?.7
                                         (let ((tmp.136 cdr.62))
                                           (unsafe-apply
                                            L.cdr.62.18
                                            cdr.62
                                            lox.8)))))))))
                             (L.apply-pred.5.32
                              (lambda (c.121 pred?.9 x.10)
                                (let ((cdr.62 (closure-ref c.121 0))
                                      (>.55 (closure-ref c.121 1))
                                      (make-bigger?.6 (closure-ref c.121 2))
                                      (car.61 (closure-ref c.121 3))
                                      (eq?.75 (closure-ref c.121 4)))
                                  (if (let ((tmp.137 eq?.75))
                                        (unsafe-apply
                                         L.eq?.75.5
                                         eq?.75
                                         (let ((tmp.138 car.61))
                                           (unsafe-apply
                                            L.car.61.19
                                            car.61
                                            pred?.9))
                                         make-bigger?.6))
                                    (let ((tmp.139 >.55))
                                      (unsafe-apply
                                       L.>.55.25
                                       >.55
                                       x.10
                                       (let ((tmp.140 cdr.62))
                                         (unsafe-apply
                                          L.cdr.62.18
                                          cdr.62
                                          pred?.9))))
                                    (error 99)))))
                             (L.make-bigger?.6.33
                              (lambda (c.122 threshold.11)
                                (let ((make-bigger?.6 (closure-ref c.122 0))
                                      (cons.74 (closure-ref c.122 1)))
                                  (let ((tmp.141 cons.74))
                                    (unsafe-apply
                                     L.cons.74.6
                                     cons.74
                                     make-bigger?.6
                                     threshold.11))))))
                      (cletrec
                       ((filter.4
                         (make-closure
                          L.filter.4.31
                          2
                          cdr.62
                          filter.4
                          cons.74
                          car.61
                          apply-pred.5
                          empty?.66))
                        (apply-pred.5
                         (make-closure
                          L.apply-pred.5.32
                          2
                          cdr.62
                          >.55
                          make-bigger?.6
                          car.61
                          eq?.75))
                        (make-bigger?.6
                         (make-closure
                          L.make-bigger?.6.33
                          1
                          make-bigger?.6
                          cons.74)))
                       (let ()
                         (let ((tmp.142 filter.4))
                           (unsafe-apply
                            L.filter.4.31
                            filter.4
                            (let ((tmp.143 make-bigger?.6))
                              (unsafe-apply
                               L.make-bigger?.6.33
                               make-bigger?.6
                               8))
                            (let ((tmp.144 cons.74))
                              (unsafe-apply
                               L.cons.74.6
                               cons.74
                               4
                               (let ((tmp.145 cons.74))
                                 (unsafe-apply
                                  L.cons.74.6
                                  cons.74
                                  7
                                  (let ((tmp.146 cons.74))
                                    (unsafe-apply
                                     L.cons.74.6
                                     cons.74
                                     8
                                     (let ((tmp.147 cons.74))
                                       (unsafe-apply
                                        L.cons.74.6
                                        cons.74
                                        9
                                        (let ((tmp.148 cons.74))
                                          (unsafe-apply
                                           L.cons.74.6
                                           cons.74
                                           1
                                           (let ((tmp.149 cons.74))
                                             (unsafe-apply
                                              L.cons.74.6
                                              cons.74
                                              23
                                              ())))))))))))))))))))))))))))
     ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.90 tmp.84 tmp.85)
                (let ()
                  (if (unsafe-fx< tmp.85 (unsafe-vector-length tmp.84))
                    (if (unsafe-fx>= tmp.85 0)
                      (unsafe-vector-ref tmp.84 tmp.85)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.91 tmp.87 tmp.88 tmp.89)
                (let ()
                  (if (unsafe-fx< tmp.88 (unsafe-vector-length tmp.87))
                    (if (unsafe-fx>= tmp.88 0)
                      (begin (unsafe-vector-set! tmp.87 tmp.88 tmp.89) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.78.3
              (lambda (c.92 len.79 i.81 vec.80)
                (let ((vector-init-loop.78 (closure-ref c.92 0)))
                  (if (eq? len.79 i.81)
                    vec.80
                    (begin
                      (unsafe-vector-set! vec.80 i.81 0)
                      (closure-apply
                       vector-init-loop.78
                       vector-init-loop.78
                       len.79
                       (unsafe-fx+ i.81 1)
                       vec.80))))))
             (L.make-init-vector.1.4
              (lambda (c.93 tmp.76)
                (let ((vector-init-loop.78 (closure-ref c.93 0)))
                  (let ((tmp.77 (unsafe-make-vector tmp.76)))
                    (closure-apply
                     vector-init-loop.78
                     vector-init-loop.78
                     tmp.76
                     0
                     tmp.77)))))
             (L.eq?.75.5
              (lambda (c.94 tmp.48 tmp.49) (let () (eq? tmp.48 tmp.49))))
             (L.cons.74.6
              (lambda (c.95 tmp.46 tmp.47) (let () (cons tmp.46 tmp.47))))
             (L.not.73.7 (lambda (c.96 tmp.45) (let () (not tmp.45))))
             (L.vector?.72.8 (lambda (c.97 tmp.44) (let () (vector? tmp.44))))
             (L.procedure?.71.9
              (lambda (c.98 tmp.43) (let () (procedure? tmp.43))))
             (L.pair?.70.10 (lambda (c.99 tmp.42) (let () (pair? tmp.42))))
             (L.error?.69.11 (lambda (c.100 tmp.41) (let () (error? tmp.41))))
             (L.ascii-char?.68.12
              (lambda (c.101 tmp.40) (let () (ascii-char? tmp.40))))
             (L.void?.67.13 (lambda (c.102 tmp.39) (let () (void? tmp.39))))
             (L.empty?.66.14 (lambda (c.103 tmp.38) (let () (empty? tmp.38))))
             (L.boolean?.65.15
              (lambda (c.104 tmp.37) (let () (boolean? tmp.37))))
             (L.fixnum?.64.16
              (lambda (c.105 tmp.36) (let () (fixnum? tmp.36))))
             (L.procedure-arity.63.17
              (lambda (c.106 tmp.35)
                (let ()
                  (if (procedure? tmp.35)
                    (unsafe-procedure-arity tmp.35)
                    (error 13)))))
             (L.cdr.62.18
              (lambda (c.107 tmp.34)
                (let () (if (pair? tmp.34) (unsafe-cdr tmp.34) (error 12)))))
             (L.car.61.19
              (lambda (c.108 tmp.33)
                (let () (if (pair? tmp.33) (unsafe-car tmp.33) (error 11)))))
             (L.vector-ref.60.20
              (lambda (c.109 tmp.31 tmp.32)
                (let ((unsafe-vector-ref.3 (closure-ref c.109 0)))
                  (if (fixnum? tmp.32)
                    (if (vector? tmp.31)
                      (closure-apply
                       unsafe-vector-ref.3
                       unsafe-vector-ref.3
                       tmp.31
                       tmp.32)
                      (error 10))
                    (error 10)))))
             (L.vector-set!.59.21
              (lambda (c.110 tmp.28 tmp.29 tmp.30)
                (let ((unsafe-vector-set!.2 (closure-ref c.110 0)))
                  (if (fixnum? tmp.29)
                    (if (vector? tmp.28)
                      (closure-apply
                       unsafe-vector-set!.2
                       unsafe-vector-set!.2
                       tmp.28
                       tmp.29
                       tmp.30)
                      (error 9))
                    (error 9)))))
             (L.vector-length.58.22
              (lambda (c.111 tmp.27)
                (let ()
                  (if (vector? tmp.27)
                    (unsafe-vector-length tmp.27)
                    (error 8)))))
             (L.make-vector.57.23
              (lambda (c.112 tmp.26)
                (let ((make-init-vector.1 (closure-ref c.112 0)))
                  (if (fixnum? tmp.26)
                    (closure-apply
                     make-init-vector.1
                     make-init-vector.1
                     tmp.26)
                    (error 7)))))
             (L.>=.56.24
              (lambda (c.113 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx>= tmp.24 tmp.25) (error 6))
                    (error 6)))))
             (L.>.55.25
              (lambda (c.114 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx> tmp.22 tmp.23) (error 5))
                    (error 5)))))
             (L.<=.54.26
              (lambda (c.115 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx<= tmp.20 tmp.21) (error 4))
                    (error 4)))))
             (L.<.53.27
              (lambda (c.116 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx< tmp.18 tmp.19) (error 3))
                    (error 3)))))
             (L.-.52.28
              (lambda (c.117 tmp.16 tmp.17)
                (let ()
                  (if (fixnum? tmp.17)
                    (if (fixnum? tmp.16) (unsafe-fx- tmp.16 tmp.17) (error 2))
                    (error 2)))))
             (L.+.51.29
              (lambda (c.118 tmp.14 tmp.15)
                (let ()
                  (if (fixnum? tmp.15)
                    (if (fixnum? tmp.14) (unsafe-fx+ tmp.14 tmp.15) (error 1))
                    (error 1)))))
             (L.*.50.30
              (lambda (c.119 tmp.12 tmp.13)
                (let ()
                  (if (fixnum? tmp.13)
                    (if (fixnum? tmp.12) (unsafe-fx* tmp.12 tmp.13) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.78
         (make-closure L.vector-init-loop.78.3 3 vector-init-loop.78))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.78))
        (eq?.75 (make-closure L.eq?.75.5 2))
        (cons.74 (make-closure L.cons.74.6 2))
        (not.73 (make-closure L.not.73.7 1))
        (vector?.72 (make-closure L.vector?.72.8 1))
        (procedure?.71 (make-closure L.procedure?.71.9 1))
        (pair?.70 (make-closure L.pair?.70.10 1))
        (error?.69 (make-closure L.error?.69.11 1))
        (ascii-char?.68 (make-closure L.ascii-char?.68.12 1))
        (void?.67 (make-closure L.void?.67.13 1))
        (empty?.66 (make-closure L.empty?.66.14 1))
        (boolean?.65 (make-closure L.boolean?.65.15 1))
        (fixnum?.64 (make-closure L.fixnum?.64.16 1))
        (procedure-arity.63 (make-closure L.procedure-arity.63.17 1))
        (cdr.62 (make-closure L.cdr.62.18 1))
        (car.61 (make-closure L.car.61.19 1))
        (vector-ref.60 (make-closure L.vector-ref.60.20 2 unsafe-vector-ref.3))
        (vector-set!.59
         (make-closure L.vector-set!.59.21 3 unsafe-vector-set!.2))
        (vector-length.58 (make-closure L.vector-length.58.22 1))
        (make-vector.57
         (make-closure L.make-vector.57.23 1 make-init-vector.1))
        (>=.56 (make-closure L.>=.56.24 2))
        (>.55 (make-closure L.>.55.25 2))
        (<=.54 (make-closure L.<=.54.26 2))
        (<.53 (make-closure L.<.53.27 2))
        (|-.52| (make-closure L.-.52.28 2))
        (|+.51| (make-closure L.+.51.29 2))
        (*.50 (make-closure L.*.50.30 2)))
       (let ()
         (let ()
           (letrec ()
             (cletrec
              ()
              (let ()
                (let ()
                  (let ()
                    (letrec ((L.filter.4.31
                              (lambda (c.120 pred?.7 lox.8)
                                (let ((cdr.62 (closure-ref c.120 0))
                                      (filter.4 (closure-ref c.120 1))
                                      (cons.74 (closure-ref c.120 2))
                                      (car.61 (closure-ref c.120 3))
                                      (apply-pred.5 (closure-ref c.120 4))
                                      (empty?.66 (closure-ref c.120 5)))
                                  (if (closure-apply empty?.66 empty?.66 lox.8)
                                    ()
                                    (if (closure-apply
                                         apply-pred.5
                                         apply-pred.5
                                         pred?.7
                                         (closure-apply car.61 car.61 lox.8))
                                      (closure-apply
                                       cons.74
                                       cons.74
                                       (closure-apply car.61 car.61 lox.8)
                                       (closure-apply
                                        filter.4
                                        filter.4
                                        pred?.7
                                        (closure-apply cdr.62 cdr.62 lox.8)))
                                      (closure-apply
                                       filter.4
                                       filter.4
                                       pred?.7
                                       (closure-apply
                                        cdr.62
                                        cdr.62
                                        lox.8)))))))
                             (L.apply-pred.5.32
                              (lambda (c.121 pred?.9 x.10)
                                (let ((cdr.62 (closure-ref c.121 0))
                                      (>.55 (closure-ref c.121 1))
                                      (make-bigger?.6 (closure-ref c.121 2))
                                      (car.61 (closure-ref c.121 3))
                                      (eq?.75 (closure-ref c.121 4)))
                                  (if (closure-apply
                                       eq?.75
                                       eq?.75
                                       (closure-apply car.61 car.61 pred?.9)
                                       make-bigger?.6)
                                    (closure-apply
                                     >.55
                                     >.55
                                     x.10
                                     (closure-apply cdr.62 cdr.62 pred?.9))
                                    (error 99)))))
                             (L.make-bigger?.6.33
                              (lambda (c.122 threshold.11)
                                (let ((make-bigger?.6 (closure-ref c.122 0))
                                      (cons.74 (closure-ref c.122 1)))
                                  (closure-apply
                                   cons.74
                                   cons.74
                                   make-bigger?.6
                                   threshold.11)))))
                      (cletrec
                       ((filter.4
                         (make-closure
                          L.filter.4.31
                          2
                          cdr.62
                          filter.4
                          cons.74
                          car.61
                          apply-pred.5
                          empty?.66))
                        (apply-pred.5
                         (make-closure
                          L.apply-pred.5.32
                          2
                          cdr.62
                          >.55
                          make-bigger?.6
                          car.61
                          eq?.75))
                        (make-bigger?.6
                         (make-closure
                          L.make-bigger?.6.33
                          1
                          make-bigger?.6
                          cons.74)))
                       (let ()
                         (closure-apply
                          filter.4
                          filter.4
                          (closure-apply make-bigger?.6 make-bigger?.6 8)
                          (closure-apply
                           cons.74
                           cons.74
                           4
                           (closure-apply
                            cons.74
                            cons.74
                            7
                            (closure-apply
                             cons.74
                             cons.74
                             8
                             (closure-apply
                              cons.74
                              cons.74
                              9
                              (closure-apply
                               cons.74
                               cons.74
                               1
                               (closure-apply
                                cons.74
                                cons.74
                                23
                                ()))))))))))))))))))))
     ) '(9 23))

  )
  (parameterize ([current-pass-list
                  (list
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (let ()
      (let ()
        (letrec ()
          (let ()
            (let ()
              (let ()
                (letrec ((filter.4
                          (lambda (pred?.7 lox.8)
                            (if (apply empty? lox.8)
                              ()
                              (if (apply
                                   apply-pred.5
                                   pred?.7
                                   (apply car lox.8))
                                (apply
                                 cons
                                 (apply car lox.8)
                                 (apply filter.4 pred?.7 (apply cdr lox.8)))
                                (apply filter.4 pred?.7 (apply cdr lox.8))))))
                         (apply-pred.5
                          (lambda (pred?.9 x.10)
                            (if (apply eq? (apply car pred?.9) make-bigger?.6)
                              (apply > x.10 (apply cdr pred?.9))
                              (error 99))))
                         (make-bigger?.6
                          (lambda (threshold.11)
                            (apply cons make-bigger?.6 threshold.11))))
                  (let ()
                    (apply
                     filter.4
                     (apply make-bigger?.6 8)
                     (apply
                      cons
                      4
                      (apply
                       cons
                       7
                       (apply
                        cons
                        8
                        (apply
                         cons
                         9
                         (apply cons 1 (apply cons 23 ()))))))))))))))))
     ) '(9 23))

  )


  (parameterize ([current-pass-list
                  (list
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (let (info ((assigned ())))
      ()
      (let (info ((assigned ())))
        ()
        (letrec ()
          (let (info ((assigned ())))
            ()
            (begin
              (let (info ((assigned ())))
                ()
                (let (info ((assigned ())))
                  ()
                  (letrec ((filter.4
                            (lambda (pred?.7 lox.8)
                              (if (apply empty? lox.8)
                                ()
                                (if (apply
                                     apply-pred.5
                                     pred?.7
                                     (apply car lox.8))
                                  (apply
                                   cons
                                   (apply car lox.8)
                                   (apply filter.4 pred?.7 (apply cdr lox.8)))
                                  (apply
                                   filter.4
                                   pred?.7
                                   (apply cdr lox.8))))))
                           (apply-pred.5
                            (lambda (pred?.9 x.10)
                              (if (apply
                                   eq?
                                   (apply car pred?.9)
                                   make-bigger?.6)
                                (apply > x.10 (apply cdr pred?.9))
                                (error 99))))
                           (make-bigger?.6
                            (lambda (threshold.11)
                              (apply cons make-bigger?.6 threshold.11))))
                    (let (info ((assigned ())))
                      ()
                      (begin
                        (apply
                         filter.4
                         (apply make-bigger?.6 8)
                         (apply
                          cons
                          4
                          (apply
                           cons
                           7
                           (apply
                            cons
                            8
                            (apply
                             cons
                             9
                             (apply cons 1 (apply cons 23 ()))))))))))))))))))
     ) '(9 23)))

  (parameterize ([current-pass-list
                  (list
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ()
      (letrec ((filter.4
                (lambda (pred?.7 lox.8)
                  (if (apply empty? lox.8)
                    ()
                    (if (apply apply-pred.5 pred?.7 (apply car lox.8))
                      (apply
                       cons
                       (apply car lox.8)
                       (apply filter.4 pred?.7 (apply cdr lox.8)))
                      (apply filter.4 pred?.7 (apply cdr lox.8))))))
               (apply-pred.5
                (lambda (pred?.9 x.10)
                  (if (apply eq? (apply car pred?.9) make-bigger?.6)
                    (apply > x.10 (apply cdr pred?.9))
                    (error 99))))
               (make-bigger?.6
                (lambda (threshold.11)
                  (apply cons make-bigger?.6 threshold.11))))
        (apply
         filter.4
         (apply make-bigger?.6 8)
         (apply
          cons
          4
          (apply
           cons
           7
           (apply
            cons
            8
            (apply cons 9 (apply cons 1 (apply cons 23 ()))))))))))
     ) '(9 23)))

  (parameterize ([current-pass-list
                  (list
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((filter.4
              (lambda (pred?.7 lox.8)
                (if (apply empty? lox.8)
                  ()
                  (if (apply apply-pred.5 pred?.7 (apply car lox.8))
                    (apply
                     cons
                     (apply car lox.8)
                     (apply filter.4 pred?.7 (apply cdr lox.8)))
                    (apply filter.4 pred?.7 (apply cdr lox.8))))))
             (apply-pred.5
              (lambda (pred?.9 x.10)
                (if (apply eq? (apply car pred?.9) make-bigger?.6)
                  (apply > x.10 (apply cdr pred?.9))
                  (error 99))))
             (make-bigger?.6
              (lambda (threshold.11)
                (apply cons make-bigger?.6 threshold.11))))
      (apply
       filter.4
       (apply make-bigger?.6 8)
       (apply
        cons
        4
        (apply
         cons
         7
         (apply cons 8 (apply cons 9 (apply cons 1 (apply cons 23 ())))))))))
     ) '(9 23)))


  (parameterize ([current-pass-list
                  (list
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((filter.4
              (lambda (pred?.7 lox.8)
                (if (empty? lox.8)
                  '()
                  (if (apply-pred.5 pred?.7 (car lox.8))
                    (cons (car lox.8) (filter.4 pred?.7 (cdr lox.8)))
                    (filter.4 pred?.7 (cdr lox.8))))))
             (apply-pred.5
              (lambda (pred?.9 x.10)
                (if (eq? (car pred?.9) 'make-bigger?.6)
                  (> x.10 (cdr pred?.9))
                  (error 99))))
             (make-bigger?.6
              (lambda (threshold.11) (cons 'make-bigger?.6 threshold.11))))
      (filter.4 (make-bigger?.6 8) '(4 7 8 9 1 23))))
     ) '(9 23)))
     |#

  (parameterize ([current-pass-list
                  (list
                   uniquify
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((filter
              (lambda (pred? lox)
                (if (empty? lox)
                  '()
                  (if (apply-pred pred? (car lox))
                    (cons (car lox) (filter pred? (cdr lox)))
                    (filter pred? (cdr lox))))))
             (apply-pred
              (lambda (pred? x)
                (if (eq? (car pred?) #\m)
                  (> x (cdr pred?))
                  (error 99))))
             (make-bigger?
              (lambda (threshold) (cons #\m threshold))))
      (filter (make-bigger? 8) '(4 7 8 9 1 23))))
     ) '(9 23))

  )
  
  )