#lang racket
(require
  "../a10.rkt"
  "../a10-implement-safe-primops.rkt"
  "../a10-compiler-lib.rkt"
  "../a10-graph-lib.rkt")
(module+ test
  (require rackunit))


(module+ test

(parameterize ([current-pass-list
                  (list
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.104 (set! (rbp + 24) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.unsafe-vector-ref.3.1)
    (set! (r15 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (set! (r14 + -2) L.unsafe-vector-set!.2.2)
    (set! (r14 + 6) 24)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.vector-init-loop.84.3)
    (set! (r13 + 6) 24)
    (set! r10 r13)
    (set! r9 r10)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.make-init-vector.1.4)
    (set! (r13 + 6) 8)
    (set! r10 r13)
    (set! r8 r10)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 16))
    (set! r13 (+ r13 2))
    (nop)
    (set! (r13 + -2) L.eq?.81.5)
    (set! (r13 + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.cons.80.6)
    (set! (rdi + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.not.79.7)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.vector?.78.8)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.procedure?.77.9)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.pair?.76.10)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.error?.75.11)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.ascii-char?.74.12)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.void?.73.13)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.empty?.72.14)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.boolean?.71.15)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.fixnum?.70.16)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.procedure-arity.69.17)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.cdr.68.18)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.car.67.19)
    (set! (rdi + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 24))
    (set! rdi (+ rdi 2))
    (nop)
    (set! (rdi + -2) L.vector-ref.66.20)
    (set! (rdi + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 24))
    (set! rsi (+ rsi 2))
    (nop)
    (set! (rsi + -2) L.vector-set!.65.21)
    (set! (rsi + 6) 24)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.vector-length.64.22)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 24))
    (set! rdx (+ rdx 2))
    (nop)
    (set! (rdx + -2) L.make-vector.63.23)
    (set! (rdx + 6) 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.>=.62.24)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.>.61.25)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.<=.60.26)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.<.59.27)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.-.58.28)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (set! (rcx + -2) L.+.57.29)
    (set! (rcx + 6) 16)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 16))
    (set! rbx (+ rbx 2))
    (nop)
    (set! (rbx + -2) L.*.56.30)
    (set! (rbx + 6) 16)
    (nop)
    (set! (r9 + 14) r9)
    (set! (r8 + 14) r9)
    (set! (rdi + 14) r15)
    (set! (rsi + 14) r14)
    (set! (rdx + 14) r8)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 24))
    (set! r15 (+ r15 2))
    (nop)
    (set! (r15 + -2) L.sum.4.31)
    (set! (r15 + 6) 64)
    (set! (rbp + 32) r15)
    (set! r10 (rbp + 32))
    (set! (r10 + 14) rcx)
    (set! r15 80)
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 40))
    (set! rdx 16)
    (set! rsi 8)
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.105)
    (jump L.eq?.81.5)
    (define L.jp.34 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.251)
    (jump L.nest_f.252)
    (define L.nest_t.251 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.252 (set! rax 62))
    (jump r15)
    (define L.jp.35 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.249)
    (jump L.nest_f.250)
    (define L.nest_t.247 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.34)
    (define L.nest_f.248 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.34)
    (define L.nest_t.249 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.247)
    (jump L.nest_f.248)
    (define L.nest_f.250 (set! rax 62))
    (jump r15)
    (define L.jp.38 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.245)
    (jump L.nest_f.246)
    (define L.nest_t.245 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.246 (set! rax 318))
    (jump r15)
    (define L.jp.39 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.243)
    (jump L.nest_f.244)
    (define L.nest_t.241 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.38)
    (define L.nest_f.242 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.38)
    (define L.nest_t.243 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.241)
    (jump L.nest_f.242)
    (define L.nest_f.244 (set! rax 318))
    (jump r15)
    (define L.jp.42 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.239)
    (jump L.nest_f.240)
    (define L.nest_t.239 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.240 (set! rax 574))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.237)
    (jump L.nest_f.238)
    (define L.nest_t.235 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.236 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.237 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.235)
    (jump L.nest_f.236)
    (define L.nest_f.238 (set! rax 574))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.233)
    (jump L.nest_f.234)
    (define L.nest_t.231 (set! rax 14))
    (jump r15)
    (define L.nest_f.232 (set! rax 6))
    (jump r15)
    (define L.nest_t.233 (compare r13 r9))
    (jump-if < L.nest_t.231)
    (jump L.nest_f.232)
    (define L.nest_f.234 (set! rax 830))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.229)
    (jump L.nest_f.230)
    (define L.nest_t.227 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.228 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.229 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.227)
    (jump L.nest_f.228)
    (define L.nest_f.230 (set! rax 830))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.225)
    (jump L.nest_f.226)
    (define L.nest_t.223 (set! rax 14))
    (jump r15)
    (define L.nest_f.224 (set! rax 6))
    (jump r15)
    (define L.nest_t.225 (compare r13 r9))
    (jump-if <= L.nest_t.223)
    (jump L.nest_f.224)
    (define L.nest_f.226 (set! rax 1086))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.221)
    (jump L.nest_f.222)
    (define L.nest_t.219 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.220 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.221 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.219)
    (jump L.nest_f.220)
    (define L.nest_f.222 (set! rax 1086))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.217)
    (jump L.nest_f.218)
    (define L.nest_t.215 (set! rax 14))
    (jump r15)
    (define L.nest_f.216 (set! rax 6))
    (jump r15)
    (define L.nest_t.217 (compare r13 r9))
    (jump-if > L.nest_t.215)
    (jump L.nest_f.216)
    (define L.nest_f.218 (set! rax 1342))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.213)
    (jump L.nest_f.214)
    (define L.nest_t.211 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.212 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.213 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.211)
    (jump L.nest_f.212)
    (define L.nest_f.214 (set! rax 1342))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.209)
    (jump L.nest_f.210)
    (define L.nest_t.207 (set! rax 14))
    (jump r15)
    (define L.nest_f.208 (set! rax 6))
    (jump r15)
    (define L.nest_t.209 (compare r13 r9))
    (jump-if >= L.nest_t.207)
    (jump L.nest_f.208)
    (define L.nest_f.210 (set! rax 1598))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.205)
    (jump L.nest_f.206)
    (define L.nest_t.203 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.204 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.205 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.203)
    (jump L.nest_f.204)
    (define L.nest_f.206 (set! rax 1598))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.201)
    (jump L.nest_f.202)
    (define L.nest_t.201 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.202 (set! rax 1854))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.199)
    (jump L.nest_f.200)
    (define L.nest_t.199 (set! rax (r13 + -3)))
    (jump r15)
    (define L.nest_f.200 (set! rax 2110))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.197)
    (jump L.nest_f.198)
    (define L.nest_t.197 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.198 (set! rax 2366))
    (jump r15)
    (define L.jp.71 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.195)
    (jump L.nest_f.196)
    (define L.nest_t.193 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.194 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.195 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.193)
    (jump L.nest_f.194)
    (define L.nest_f.196 (set! rax 2366))
    (jump r15)
    (define L.jp.74 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.191)
    (jump L.nest_f.192)
    (define L.nest_t.191 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.192 (set! rax 2622))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.189)
    (jump L.nest_f.190)
    (define L.nest_t.187 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.74)
    (define L.nest_f.188 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.74)
    (define L.nest_t.189 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.187)
    (jump L.nest_f.188)
    (define L.nest_f.190 (set! rax 2622))
    (jump r15)
    (define L.jp.77 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.185)
    (jump L.nest_f.186)
    (define L.nest_t.185 (set! rax (r13 + -1)))
    (jump r15)
    (define L.nest_f.186 (set! rax 2878))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.183)
    (jump L.nest_f.184)
    (define L.nest_t.183 (set! rax (r13 + 7)))
    (jump r15)
    (define L.nest_f.184 (set! rax 3134))
    (jump r15)
    (define L.jp.81 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.181)
    (jump L.nest_f.182)
    (define L.nest_t.181 (set! rax (r13 + 6)))
    (jump r15)
    (define L.nest_f.182 (set! rax 3390))
    (jump r15)
    (define L.jp.94 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.179)
    (jump L.nest_f.180)
    (define L.nest_t.179 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.180 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (set! (r8 + rdi) 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.jp.97 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.177)
    (jump L.nest_f.178)
    (define L.nest_t.177 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (set! (r14 + r9) r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.178 (set! rax 2366))
    (jump r15)
    (define L.jp.98 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.175)
    (jump L.nest_f.176)
    (define L.nest_t.173 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.97)
    (define L.nest_f.174 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.97)
    (define L.nest_t.175 (compare r13 0))
    (jump-if >= L.nest_t.173)
    (jump L.nest_f.174)
    (define L.nest_f.176 (set! rax 2366))
    (jump r15)
    (define L.jp.101 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.171)
    (jump L.nest_f.172)
    (define L.nest_t.171 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (r14 + r13))
    (jump r15)
    (define L.nest_f.172 (set! rax 2622))
    (jump r15)
    (define L.jp.102 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.169)
    (jump L.nest_f.170)
    (define L.nest_t.167 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.101)
    (define L.nest_f.168 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.101)
    (define L.nest_t.169 (compare r13 0))
    (jump-if >= L.nest_t.167)
    (jump L.nest_f.168)
    (define L.nest_f.170 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r14 + -3))
    (compare r13 r9)
    (jump-if < L.nest_t.165)
    (jump L.nest_f.166)
    (define L.nest_t.165 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.166 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (r14 + -3))
    (compare r13 r8)
    (jump-if < L.nest_t.163)
    (jump L.nest_f.164)
    (define L.nest_t.163 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.98)
    (define L.nest_f.164 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.98)
    (define L.vector-init-loop.84.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (r9 + 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.161)
    (jump L.nest_f.162)
    (define L.nest_t.161 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.94)
    (define L.nest_f.162 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.94)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (set! (r9 + -3) r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.eq?.81.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.159)
    (jump L.nest_f.160)
    (define L.nest_t.159 (set! rax 14))
    (jump r15)
    (define L.nest_f.160 (set! rax 6))
    (jump r15)
    (define L.cons.80.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (set! (r9 + -1) r14)
    (set! (r9 + 7) r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.79.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.157)
    (jump L.nest_f.158)
    (define L.nest_t.157 (set! rax 6))
    (jump r15)
    (define L.nest_f.158 (set! rax 14))
    (jump r15)
    (define L.vector?.78.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.155)
    (jump L.nest_f.156)
    (define L.nest_t.155 (set! rax 14))
    (jump r15)
    (define L.nest_f.156 (set! rax 6))
    (jump r15)
    (define L.procedure?.77.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.153)
    (jump L.nest_f.154)
    (define L.nest_t.153 (set! rax 14))
    (jump r15)
    (define L.nest_f.154 (set! rax 6))
    (jump r15)
    (define L.pair?.76.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.151)
    (jump L.nest_f.152)
    (define L.nest_t.151 (set! rax 14))
    (jump r15)
    (define L.nest_f.152 (set! rax 6))
    (jump r15)
    (define L.error?.75.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.149)
    (jump L.nest_f.150)
    (define L.nest_t.149 (set! rax 14))
    (jump r15)
    (define L.nest_f.150 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.74.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.147)
    (jump L.nest_f.148)
    (define L.nest_t.147 (set! rax 14))
    (jump r15)
    (define L.nest_f.148 (set! rax 6))
    (jump r15)
    (define L.void?.73.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.145)
    (jump L.nest_f.146)
    (define L.nest_t.145 (set! rax 14))
    (jump r15)
    (define L.nest_f.146 (set! rax 6))
    (jump r15)
    (define L.empty?.72.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.143)
    (jump L.nest_f.144)
    (define L.nest_t.143 (set! rax 14))
    (jump r15)
    (define L.nest_f.144 (set! rax 6))
    (jump r15)
    (define L.boolean?.71.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.141)
    (jump L.nest_f.142)
    (define L.nest_t.141 (set! rax 14))
    (jump r15)
    (define L.nest_f.142 (set! rax 6))
    (jump r15)
    (define L.fixnum?.70.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.139)
    (jump L.nest_f.140)
    (define L.nest_t.139 (set! rax 14))
    (jump r15)
    (define L.nest_f.140 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.69.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.137)
    (jump L.nest_f.138)
    (define L.nest_t.137 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.81)
    (define L.nest_f.138 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.81)
    (define L.cdr.68.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.135)
    (jump L.nest_f.136)
    (define L.nest_t.135 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.136 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.car.67.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.133)
    (jump L.nest_f.134)
    (define L.nest_t.133 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.77)
    (define L.nest_f.134 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.77)
    (define L.vector-ref.66.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (r9 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.131)
    (jump L.nest_f.132)
    (define L.nest_t.131 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.132 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.vector-set!.65.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (r8 + 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.129)
    (jump L.nest_f.130)
    (define L.nest_t.129 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.130 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.vector-length.64.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.127)
    (jump L.nest_f.128)
    (define L.nest_t.127 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.128 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.make-vector.63.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (r13 + 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.125)
    (jump L.nest_f.126)
    (define L.nest_t.125 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.126 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.>=.62.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.123)
    (jump L.nest_f.124)
    (define L.nest_t.123 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.124 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.>.61.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.121)
    (jump L.nest_f.122)
    (define L.nest_t.121 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.122 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<=.60.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.119)
    (jump L.nest_f.120)
    (define L.nest_t.119 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.120 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.<.59.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.117)
    (jump L.nest_f.118)
    (define L.nest_t.117 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.118 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.-.58.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.115)
    (jump L.nest_f.116)
    (define L.nest_t.115 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.116 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.+.57.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.113)
    (jump L.nest_f.114)
    (define L.nest_t.113 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.114 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.*.56.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.111)
    (jump L.nest_f.112)
    (define L.nest_t.111 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.35)
    (define L.nest_f.112 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.35)
    (define L.sum.4.31 (set! (rbp + 24) r15))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r15 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (nop)
    (set! r9 (rbp + 0))
    (set! r10 (rbp + 8))
    (set! (rbp + 32) r10)
    (set! r10 (rbp + 16))
    (set! (rbp + 8) r10)
    (set! r10 (r14 + 14))
    (set! (rbp + 0) r10)
    (set! r14 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! r10 r13)
    (set! rdx r10)
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -40))
    (set! r15 L.rp.107)
    (jump L.+.57.29)
    (define L.rp.107 (set! rbp (- rbp 40)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! rdx (rbp + -32))
    (set! rsi (rbp + -8))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.108)
    (jump L.+.57.29)
    (define L.rp.108 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r14 (rbp + 0))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 0))
    (set! r15 (rbp + 24))
    (jump L.+.57.29)
    (define L.rp.105 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.109)
    (jump L.nest_f.110)
    (define L.rp.106 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rax r10)
    (set! r10 (rbp + 24))
    (jump r10)
    (define L.nest_t.109 (set! r15 (rbp + 32)))
    (set! rbp (+ rbp 40))
    (set! (rbp + 16) 64)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.106)
    (jump L.sum.4.31)
    (define L.nest_f.110 (set! r15 40))
    (set! r14 (rbp + 32))
    (set! (rbp + 16) r15)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + 32))
    (set! r15 (rbp + 24))
    (jump L.sum.4.31))
     ) 15))

(parameterize ([current-pass-list
                  (list
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.104 (set! (rbp + 24) r15))
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r10 r12)
    (set! r14 r10)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (nop)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.vector-init-loop.84.3)
    (mset! r13 6 24)
    (set! r10 r13)
    (set! r9 r10)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.make-init-vector.1.4)
    (mset! r13 6 8)
    (set! r10 r13)
    (set! r8 r10)
    (set! r10 r12)
    (set! r13 r10)
    (set! r12 (+ r12 16))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.eq?.81.5)
    (mset! r13 6 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cons.80.6)
    (mset! rdi 6 16)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.not.79.7)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector?.78.8)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure?.77.9)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.pair?.76.10)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.error?.75.11)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.ascii-char?.74.12)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.void?.73.13)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.empty?.72.14)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.boolean?.71.15)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.fixnum?.70.16)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure-arity.69.17)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cdr.68.18)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.car.67.19)
    (mset! rdi 6 8)
    (nop)
    (set! r10 r12)
    (set! rdi r10)
    (set! r12 (+ r12 24))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector-ref.66.20)
    (mset! rdi 6 16)
    (nop)
    (set! r10 r12)
    (set! rsi r10)
    (set! r12 (+ r12 24))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.vector-set!.65.21)
    (mset! rsi 6 24)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.vector-length.64.22)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rdx r10)
    (set! r12 (+ r12 24))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.make-vector.63.23)
    (mset! rdx 6 8)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.>=.62.24)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.>.61.25)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.<=.60.26)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.<.59.27)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.-.58.28)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rcx r10)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.+.57.29)
    (mset! rcx 6 16)
    (nop)
    (set! r10 r12)
    (set! rbx r10)
    (set! r12 (+ r12 16))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.*.56.30)
    (mset! rbx 6 16)
    (nop)
    (mset! r9 14 r9)
    (mset! r8 14 r9)
    (mset! rdi 14 r15)
    (mset! rsi 14 r14)
    (mset! rdx 14 r8)
    (set! r10 r12)
    (set! r15 r10)
    (set! r12 (+ r12 24))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.sum.4.31)
    (mset! r15 6 64)
    (set! (rbp + 32) r15)
    (set! r10 (rbp + 32))
    (mset! r10 14 rcx)
    (set! r15 80)
    (set! r10 r13)
    (set! r15 r10)
    (set! rbp (+ rbp 40))
    (set! rdx 16)
    (set! rsi 8)
    (set! r10 r13)
    (set! rdi r10)
    (set! r15 L.rp.105)
    (jump L.eq?.81.5)
    (define L.jp.34 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.251)
    (jump L.nest_f.252)
    (define L.nest_t.251 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r14 (* r14 r13))
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.252 (set! rax 62))
    (jump r15)
    (define L.jp.35 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.249)
    (jump L.nest_f.250)
    (define L.nest_t.247 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.34)
    (define L.nest_f.248 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.34)
    (define L.nest_t.249 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.247)
    (jump L.nest_f.248)
    (define L.nest_f.250 (set! rax 62))
    (jump r15)
    (define L.jp.38 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.245)
    (jump L.nest_f.246)
    (define L.nest_t.245 (set! r10 r13))
    (set! r10 (+ r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.246 (set! rax 318))
    (jump r15)
    (define L.jp.39 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.243)
    (jump L.nest_f.244)
    (define L.nest_t.241 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.38)
    (define L.nest_f.242 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.38)
    (define L.nest_t.243 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.241)
    (jump L.nest_f.242)
    (define L.nest_f.244 (set! rax 318))
    (jump r15)
    (define L.jp.42 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.239)
    (jump L.nest_f.240)
    (define L.nest_t.239 (set! r10 r13))
    (set! r10 (- r10 r9))
    (set! r14 r10)
    (set! r10 r14)
    (set! rax r10)
    (jump r15)
    (define L.nest_f.240 (set! rax 574))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.237)
    (jump L.nest_f.238)
    (define L.nest_t.235 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.236 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.237 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.235)
    (jump L.nest_f.236)
    (define L.nest_f.238 (set! rax 574))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.233)
    (jump L.nest_f.234)
    (define L.nest_t.231 (set! rax 14))
    (jump r15)
    (define L.nest_f.232 (set! rax 6))
    (jump r15)
    (define L.nest_t.233 (compare r13 r9))
    (jump-if < L.nest_t.231)
    (jump L.nest_f.232)
    (define L.nest_f.234 (set! rax 830))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.229)
    (jump L.nest_f.230)
    (define L.nest_t.227 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.228 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.229 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.227)
    (jump L.nest_f.228)
    (define L.nest_f.230 (set! rax 830))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.225)
    (jump L.nest_f.226)
    (define L.nest_t.223 (set! rax 14))
    (jump r15)
    (define L.nest_f.224 (set! rax 6))
    (jump r15)
    (define L.nest_t.225 (compare r13 r9))
    (jump-if <= L.nest_t.223)
    (jump L.nest_f.224)
    (define L.nest_f.226 (set! rax 1086))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.221)
    (jump L.nest_f.222)
    (define L.nest_t.219 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.220 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.221 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.219)
    (jump L.nest_f.220)
    (define L.nest_f.222 (set! rax 1086))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.217)
    (jump L.nest_f.218)
    (define L.nest_t.215 (set! rax 14))
    (jump r15)
    (define L.nest_f.216 (set! rax 6))
    (jump r15)
    (define L.nest_t.217 (compare r13 r9))
    (jump-if > L.nest_t.215)
    (jump L.nest_f.216)
    (define L.nest_f.218 (set! rax 1342))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.213)
    (jump L.nest_f.214)
    (define L.nest_t.211 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.212 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.213 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.211)
    (jump L.nest_f.212)
    (define L.nest_f.214 (set! rax 1342))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.209)
    (jump L.nest_f.210)
    (define L.nest_t.207 (set! rax 14))
    (jump r15)
    (define L.nest_f.208 (set! rax 6))
    (jump r15)
    (define L.nest_t.209 (compare r13 r9))
    (jump-if >= L.nest_t.207)
    (jump L.nest_f.208)
    (define L.nest_f.210 (set! rax 1598))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.205)
    (jump L.nest_f.206)
    (define L.nest_t.203 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.204 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.205 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.203)
    (jump L.nest_f.204)
    (define L.nest_f.206 (set! rax 1598))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.201)
    (jump L.nest_f.202)
    (define L.nest_t.201 (nop))
    (set! r10 r9)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.202 (set! rax 1854))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.199)
    (jump L.nest_f.200)
    (define L.nest_t.199 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.200 (set! rax 2110))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.197)
    (jump L.nest_f.198)
    (define L.nest_t.197 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.198 (set! rax 2366))
    (jump r15)
    (define L.jp.71 (nop))
    (nop)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r10 r8)
    (set! rsi r10)
    (compare rdi 6)
    (jump-if neq? L.nest_t.195)
    (jump L.nest_f.196)
    (define L.nest_t.193 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.194 (set! r10 r14))
    (set! r8 r10)
    (set! r10 rsi)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.195 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.193)
    (jump L.nest_f.194)
    (define L.nest_f.196 (set! rax 2366))
    (jump r15)
    (define L.jp.74 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.191)
    (jump L.nest_f.192)
    (define L.nest_t.191 (nop))
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r8)
    (set! rsi r10)
    (set! r10 r14)
    (set! rdi r10)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.192 (set! rax 2622))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (compare r8 6)
    (jump-if neq? L.nest_t.189)
    (jump L.nest_f.190)
    (define L.nest_t.187 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.74)
    (define L.nest_f.188 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.74)
    (define L.nest_t.189 (set! r10 r14))
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.187)
    (jump L.nest_f.188)
    (define L.nest_f.190 (set! rax 2622))
    (jump r15)
    (define L.jp.77 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.185)
    (jump L.nest_f.186)
    (define L.nest_t.185 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.186 (set! rax 2878))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.183)
    (jump L.nest_f.184)
    (define L.nest_t.183 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.184 (set! rax 3134))
    (jump r15)
    (define L.jp.81 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.181)
    (jump L.nest_f.182)
    (define L.nest_t.181 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.182 (set! rax 3390))
    (jump r15)
    (define L.jp.94 (nop))
    (nop)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.179)
    (jump L.nest_f.180)
    (define L.nest_t.179 (set! r10 r8))
    (set! rax r10)
    (jump r15)
    (define L.nest_f.180 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! rdi r10)
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! r10 r8)
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.jp.97 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r8 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (set! r10 rcx)
    (set! r13 r10)
    (compare r9 6)
    (jump-if neq? L.nest_t.177)
    (jump L.nest_f.178)
    (define L.nest_t.177 (set! r10 r8))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.178 (set! rax 2366))
    (jump r15)
    (define L.jp.98 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.175)
    (jump L.nest_f.176)
    (define L.nest_t.173 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.97)
    (define L.nest_f.174 (set! r10 r9))
    (set! rcx r10)
    (set! r10 r8)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.97)
    (define L.nest_t.175 (compare r13 0))
    (jump-if >= L.nest_t.173)
    (jump L.nest_f.174)
    (define L.nest_f.176 (set! rax 2366))
    (jump r15)
    (define L.jp.101 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r9 r10)
    (set! r10 rdx)
    (set! r14 r10)
    (compare r13 6)
    (jump-if neq? L.nest_t.171)
    (jump L.nest_f.172)
    (define L.nest_t.171 (set! r10 r9))
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r13 r10)
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.172 (set! rax 2622))
    (jump r15)
    (define L.jp.102 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r13 r10)
    (set! r10 rdx)
    (set! r9 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.169)
    (jump L.nest_f.170)
    (define L.nest_t.167 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.101)
    (define L.nest_f.168 (set! r10 r9))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.101)
    (define L.nest_t.169 (compare r13 0))
    (jump-if >= L.nest_t.167)
    (jump L.nest_f.168)
    (define L.nest_f.170 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.165)
    (jump L.nest_f.166)
    (define L.nest_t.165 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.166 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.163)
    (jump L.nest_f.164)
    (define L.nest_t.163 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.98)
    (define L.nest_f.164 (set! r10 r14))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.98)
    (define L.vector-init-loop.84.3 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r8 r10)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.161)
    (jump L.nest_f.162)
    (define L.nest_t.161 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.94)
    (define L.nest_f.162 (nop))
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 r14)
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.94)
    (define L.make-init-vector.1.4 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (arithmetic-shift-right r10 3))
    (set! r9 r10)
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r10 r12)
    (set! r8 r10)
    (set! r12 (+ r12 r9))
    (set! r10 r8)
    (set! r10 (+ r10 3))
    (set! r9 r10)
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! r10 r9)
    (set! rcx r10)
    (set! rdx 0)
    (set! r10 r14)
    (set! rsi r10)
    (set! r10 r13)
    (set! rdi r10)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.eq?.81.5 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (compare r14 r13)
    (jump-if eq? L.nest_t.159)
    (jump L.nest_f.160)
    (define L.nest_t.159 (set! rax 14))
    (jump r15)
    (define L.nest_f.160 (set! rax 6))
    (jump r15)
    (define L.cons.80.6 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r12)
    (set! r9 r10)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! r10 r9)
    (set! rax r10)
    (jump r15)
    (define L.not.79.7 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (compare r14 6)
    (jump-if neq? L.nest_t.157)
    (jump L.nest_f.158)
    (define L.nest_t.157 (set! rax 6))
    (jump r15)
    (define L.nest_f.158 (set! rax 14))
    (jump r15)
    (define L.vector?.78.8 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.155)
    (jump L.nest_f.156)
    (define L.nest_t.155 (set! rax 14))
    (jump r15)
    (define L.nest_f.156 (set! rax 6))
    (jump r15)
    (define L.procedure?.77.9 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.153)
    (jump L.nest_f.154)
    (define L.nest_t.153 (set! rax 14))
    (jump r15)
    (define L.nest_f.154 (set! rax 6))
    (jump r15)
    (define L.pair?.76.10 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.151)
    (jump L.nest_f.152)
    (define L.nest_t.151 (set! rax 14))
    (jump r15)
    (define L.nest_f.152 (set! rax 6))
    (jump r15)
    (define L.error?.75.11 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.149)
    (jump L.nest_f.150)
    (define L.nest_t.149 (set! rax 14))
    (jump r15)
    (define L.nest_f.150 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.74.12 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.147)
    (jump L.nest_f.148)
    (define L.nest_t.147 (set! rax 14))
    (jump r15)
    (define L.nest_f.148 (set! rax 6))
    (jump r15)
    (define L.void?.73.13 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.145)
    (jump L.nest_f.146)
    (define L.nest_t.145 (set! rax 14))
    (jump r15)
    (define L.nest_f.146 (set! rax 6))
    (jump r15)
    (define L.empty?.72.14 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.143)
    (jump L.nest_f.144)
    (define L.nest_t.143 (set! rax 14))
    (jump r15)
    (define L.nest_f.144 (set! rax 6))
    (jump r15)
    (define L.boolean?.71.15 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.141)
    (jump L.nest_f.142)
    (define L.nest_t.141 (set! rax 14))
    (jump r15)
    (define L.nest_f.142 (set! rax 6))
    (jump r15)
    (define L.fixnum?.70.16 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.139)
    (jump L.nest_f.140)
    (define L.nest_t.139 (set! rax 14))
    (jump r15)
    (define L.nest_f.140 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.69.17 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.137)
    (jump L.nest_f.138)
    (define L.nest_t.137 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.81)
    (define L.nest_f.138 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.81)
    (define L.cdr.68.18 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.135)
    (jump L.nest_f.136)
    (define L.nest_t.135 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.136 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.car.67.19 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.133)
    (jump L.nest_f.134)
    (define L.nest_t.133 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.77)
    (define L.nest_f.134 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.77)
    (define L.vector-ref.66.20 (nop))
    (set! r10 rdi)
    (set! r9 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r9 (mref r9 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.131)
    (jump L.nest_f.132)
    (define L.nest_t.131 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.132 (set! r10 r13))
    (set! rcx r10)
    (set! r10 r9)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.vector-set!.65.21 (nop))
    (set! r10 rdi)
    (set! r8 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! r9 r10)
    (set! rdi (mref r8 14))
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r8 r10)
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.129)
    (jump L.nest_f.130)
    (define L.nest_t.129 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.130 (set! r10 r13))
    (set! r8 r10)
    (set! r10 r9)
    (set! rcx r10)
    (set! r10 rdi)
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.vector-length.64.22 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r13 r10)
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.127)
    (jump L.nest_f.128)
    (define L.nest_t.127 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.128 (set! r10 r14))
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.make-vector.63.23 (nop))
    (set! r10 rdi)
    (set! r13 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r13 (mref r13 14))
    (set! r10 r14)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.125)
    (jump L.nest_f.126)
    (define L.nest_t.125 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.126 (set! r10 r14))
    (set! rdx r10)
    (set! r10 r13)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.>=.62.24 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.123)
    (jump L.nest_f.124)
    (define L.nest_t.123 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.124 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.>.61.25 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.121)
    (jump L.nest_f.122)
    (define L.nest_t.121 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.122 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<=.60.26 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.119)
    (jump L.nest_f.120)
    (define L.nest_t.119 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.120 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.<.59.27 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.117)
    (jump L.nest_f.118)
    (define L.nest_t.117 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.118 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.-.58.28 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.115)
    (jump L.nest_f.116)
    (define L.nest_t.115 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.116 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.+.57.29 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.113)
    (jump L.nest_f.114)
    (define L.nest_t.113 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.114 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.*.56.30 (nop))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r14 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 r13)
    (set! r10 (bitwise-and r10 7))
    (set! r9 r10)
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.111)
    (jump L.nest_f.112)
    (define L.nest_t.111 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 14)
    (nop)
    (jump L.jp.35)
    (define L.nest_f.112 (set! r10 r13))
    (set! rdx r10)
    (set! r10 r14)
    (set! rsi r10)
    (set! rdi 6)
    (nop)
    (jump L.jp.35)
    (define L.sum.4.31 (set! (rbp + 24) r15))
    (set! r10 rdi)
    (set! r14 r10)
    (set! r10 rsi)
    (set! r15 r10)
    (set! r10 rdx)
    (set! r13 r10)
    (set! r10 rcx)
    (set! rdi r10)
    (nop)
    (nop)
    (set! r9 (rbp + 0))
    (set! r10 (rbp + 8))
    (set! (rbp + 32) r10)
    (set! r10 (rbp + 16))
    (set! (rbp + 8) r10)
    (set! r10 (mref r14 14))
    (set! (rbp + 0) r10)
    (set! r14 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! r10 r13)
    (set! rdx r10)
    (set! r10 r15)
    (set! rsi r10)
    (set! rdi (rbp + -40))
    (set! r15 L.rp.107)
    (jump L.+.57.29)
    (define L.rp.107 (set! rbp (- rbp 40)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! rdx (rbp + -32))
    (set! rsi (rbp + -8))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.108)
    (jump L.+.57.29)
    (define L.rp.108 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r14 (rbp + 0))
    (set! r10 r15)
    (set! rdx r10)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 0))
    (set! r15 (rbp + 24))
    (jump L.+.57.29)
    (define L.rp.105 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (compare r15 6)
    (jump-if neq? L.nest_t.109)
    (jump L.nest_f.110)
    (define L.rp.106 (set! rbp (- rbp 40)))
    (set! r10 rax)
    (set! r15 r10)
    (set! r10 r15)
    (set! rax r10)
    (set! r10 (rbp + 24))
    (jump r10)
    (define L.nest_t.109 (set! r15 (rbp + 32)))
    (set! rbp (+ rbp 40))
    (set! (rbp + 16) 64)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.106)
    (jump L.sum.4.31)
    (define L.nest_f.110 (set! r15 40))
    (set! r14 (rbp + 32))
    (set! (rbp + 16) r15)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + 32))
    (set! r15 (rbp + 24))
    (jump L.sum.4.31))
     ) 15))

(parameterize ([current-pass-list
                  (list
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(begin
    (define L.main.104 (set! (rbp + 24) r15))
    (set! r15 r12)
    (set! r12 (+ r12 16))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.unsafe-vector-ref.3.1)
    (mset! r15 6 16)
    (nop)
    (set! r14 r12)
    (set! r12 (+ r12 16))
    (set! r14 (+ r14 2))
    (nop)
    (mset! r14 -2 L.unsafe-vector-set!.2.2)
    (mset! r14 6 24)
    (nop)
    (set! r13 r12)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.vector-init-loop.84.3)
    (mset! r13 6 24)
    (set! r9 r13)
    (set! r13 r12)
    (set! r12 (+ r12 24))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.make-init-vector.1.4)
    (mset! r13 6 8)
    (set! r8 r13)
    (set! r13 r12)
    (set! r12 (+ r12 16))
    (set! r13 (+ r13 2))
    (nop)
    (mset! r13 -2 L.eq?.81.5)
    (mset! r13 6 16)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cons.80.6)
    (mset! rdi 6 16)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.not.79.7)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector?.78.8)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure?.77.9)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.pair?.76.10)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.error?.75.11)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.ascii-char?.74.12)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.void?.73.13)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.empty?.72.14)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.boolean?.71.15)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.fixnum?.70.16)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.procedure-arity.69.17)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.cdr.68.18)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 16))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.car.67.19)
    (mset! rdi 6 8)
    (nop)
    (set! rdi r12)
    (set! r12 (+ r12 24))
    (set! rdi (+ rdi 2))
    (nop)
    (mset! rdi -2 L.vector-ref.66.20)
    (mset! rdi 6 16)
    (nop)
    (set! rsi r12)
    (set! r12 (+ r12 24))
    (set! rsi (+ rsi 2))
    (nop)
    (mset! rsi -2 L.vector-set!.65.21)
    (mset! rsi 6 24)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 16))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.vector-length.64.22)
    (mset! rdx 6 8)
    (nop)
    (set! rdx r12)
    (set! r12 (+ r12 24))
    (set! rdx (+ rdx 2))
    (nop)
    (mset! rdx -2 L.make-vector.63.23)
    (mset! rdx 6 8)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.>=.62.24)
    (mset! rcx 6 16)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.>.61.25)
    (mset! rcx 6 16)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.<=.60.26)
    (mset! rcx 6 16)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.<.59.27)
    (mset! rcx 6 16)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.-.58.28)
    (mset! rcx 6 16)
    (nop)
    (set! rcx r12)
    (set! r12 (+ r12 16))
    (set! rcx (+ rcx 2))
    (nop)
    (mset! rcx -2 L.+.57.29)
    (mset! rcx 6 16)
    (nop)
    (set! rbx r12)
    (set! r12 (+ r12 16))
    (set! rbx (+ rbx 2))
    (nop)
    (mset! rbx -2 L.*.56.30)
    (mset! rbx 6 16)
    (nop)
    (mset! r9 14 r9)
    (mset! r8 14 r9)
    (mset! rdi 14 r15)
    (mset! rsi 14 r14)
    (mset! rdx 14 r8)
    (set! r15 r12)
    (set! r12 (+ r12 24))
    (set! r15 (+ r15 2))
    (nop)
    (mset! r15 -2 L.sum.4.31)
    (mset! r15 6 64)
    (set! (rbp + 32) r15)
    (mset! (rbp + 32) 14 rcx)
    (set! r15 80)
    (set! r15 r13)
    (set! rbp (+ rbp 40))
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi r13)
    (set! r15 L.rp.105)
    (jump L.eq?.81.5)
    (define L.jp.34 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.251)
    (jump L.nest_f.252)
    (define L.nest_t.251 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r14 (* r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.252 (set! rax 62))
    (jump r15)
    (define L.jp.35 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.249)
    (jump L.nest_f.250)
    (define L.nest_t.247 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.34)
    (define L.nest_f.248 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.34)
    (define L.nest_t.249 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.247)
    (jump L.nest_f.248)
    (define L.nest_f.250 (set! rax 62))
    (jump r15)
    (define L.jp.38 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.245)
    (jump L.nest_f.246)
    (define L.nest_t.245 (set! r14 (+ r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.246 (set! rax 318))
    (jump r15)
    (define L.jp.39 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.243)
    (jump L.nest_f.244)
    (define L.nest_t.241 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.38)
    (define L.nest_f.242 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.38)
    (define L.nest_t.243 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.241)
    (jump L.nest_f.242)
    (define L.nest_f.244 (set! rax 318))
    (jump r15)
    (define L.jp.42 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.239)
    (jump L.nest_f.240)
    (define L.nest_t.239 (set! r14 (- r13 r9)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.240 (set! rax 574))
    (jump r15)
    (define L.jp.43 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.237)
    (jump L.nest_f.238)
    (define L.nest_t.235 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.42)
    (define L.nest_f.236 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.42)
    (define L.nest_t.237 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.235)
    (jump L.nest_f.236)
    (define L.nest_f.238 (set! rax 574))
    (jump r15)
    (define L.jp.47 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.233)
    (jump L.nest_f.234)
    (define L.nest_t.231 (set! rax 14))
    (jump r15)
    (define L.nest_f.232 (set! rax 6))
    (jump r15)
    (define L.nest_t.233 (compare r13 r9))
    (jump-if < L.nest_t.231)
    (jump L.nest_f.232)
    (define L.nest_f.234 (set! rax 830))
    (jump r15)
    (define L.jp.48 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.229)
    (jump L.nest_f.230)
    (define L.nest_t.227 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.47)
    (define L.nest_f.228 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.47)
    (define L.nest_t.229 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.227)
    (jump L.nest_f.228)
    (define L.nest_f.230 (set! rax 830))
    (jump r15)
    (define L.jp.52 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.225)
    (jump L.nest_f.226)
    (define L.nest_t.223 (set! rax 14))
    (jump r15)
    (define L.nest_f.224 (set! rax 6))
    (jump r15)
    (define L.nest_t.225 (compare r13 r9))
    (jump-if <= L.nest_t.223)
    (jump L.nest_f.224)
    (define L.nest_f.226 (set! rax 1086))
    (jump r15)
    (define L.jp.53 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.221)
    (jump L.nest_f.222)
    (define L.nest_t.219 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.52)
    (define L.nest_f.220 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.52)
    (define L.nest_t.221 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.219)
    (jump L.nest_f.220)
    (define L.nest_f.222 (set! rax 1086))
    (jump r15)
    (define L.jp.57 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.217)
    (jump L.nest_f.218)
    (define L.nest_t.215 (set! rax 14))
    (jump r15)
    (define L.nest_f.216 (set! rax 6))
    (jump r15)
    (define L.nest_t.217 (compare r13 r9))
    (jump-if > L.nest_t.215)
    (jump L.nest_f.216)
    (define L.nest_f.218 (set! rax 1342))
    (jump r15)
    (define L.jp.58 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.213)
    (jump L.nest_f.214)
    (define L.nest_t.211 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.57)
    (define L.nest_f.212 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.57)
    (define L.nest_t.213 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.211)
    (jump L.nest_f.212)
    (define L.nest_f.214 (set! rax 1342))
    (jump r15)
    (define L.jp.62 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.209)
    (jump L.nest_f.210)
    (define L.nest_t.207 (set! rax 14))
    (jump r15)
    (define L.nest_f.208 (set! rax 6))
    (jump r15)
    (define L.nest_t.209 (compare r13 r9))
    (jump-if >= L.nest_t.207)
    (jump L.nest_f.208)
    (define L.nest_f.210 (set! rax 1598))
    (jump r15)
    (define L.jp.63 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r9 6)
    (jump-if neq? L.nest_t.205)
    (jump L.nest_f.206)
    (define L.nest_t.203 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.62)
    (define L.nest_f.204 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.62)
    (define L.nest_t.205 (set! r9 (bitwise-and r14 7)))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.203)
    (jump L.nest_f.204)
    (define L.nest_f.206 (set! rax 1598))
    (jump r15)
    (define L.jp.65 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.201)
    (jump L.nest_f.202)
    (define L.nest_t.201 (nop))
    (set! rsi r9)
    (set! rdi r14)
    (nop)
    (jump L.make-init-vector.1.4)
    (define L.nest_f.202 (set! rax 1854))
    (jump r15)
    (define L.jp.67 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.199)
    (jump L.nest_f.200)
    (define L.nest_t.199 (set! rax (mref r13 -3)))
    (jump r15)
    (define L.nest_f.200 (set! rax 2110))
    (jump r15)
    (define L.jp.70 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! rdi rcx)
    (nop)
    (compare r13 6)
    (jump-if neq? L.nest_t.197)
    (jump L.nest_f.198)
    (define L.nest_t.197 (nop))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-set!.2.2)
    (define L.nest_f.198 (set! rax 2366))
    (jump r15)
    (define L.jp.71 (nop))
    (nop)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rsi r8)
    (compare rdi 6)
    (jump-if neq? L.nest_t.195)
    (jump L.nest_f.196)
    (define L.nest_t.193 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.70)
    (define L.nest_f.194 (set! r8 r14))
    (set! rcx rsi)
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.70)
    (define L.nest_t.195 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.193)
    (jump L.nest_f.194)
    (define L.nest_f.196 (set! rax 2366))
    (jump r15)
    (define L.jp.74 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r13 6)
    (jump-if neq? L.nest_t.191)
    (jump L.nest_f.192)
    (define L.nest_t.191 (nop))
    (set! rdx r9)
    (set! rsi r8)
    (set! rdi r14)
    (nop)
    (jump L.unsafe-vector-ref.3.1)
    (define L.nest_f.192 (set! rax 2622))
    (jump r15)
    (define L.jp.75 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (compare r8 6)
    (jump-if neq? L.nest_t.189)
    (jump L.nest_f.190)
    (define L.nest_t.187 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.74)
    (define L.nest_f.188 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.74)
    (define L.nest_t.189 (set! r8 (bitwise-and r14 7)))
    (nop)
    (compare r8 3)
    (jump-if eq? L.nest_t.187)
    (jump L.nest_f.188)
    (define L.nest_f.190 (set! rax 2622))
    (jump r15)
    (define L.jp.77 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.185)
    (jump L.nest_f.186)
    (define L.nest_t.185 (set! rax (mref r13 -1)))
    (jump r15)
    (define L.nest_f.186 (set! rax 2878))
    (jump r15)
    (define L.jp.79 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.183)
    (jump L.nest_f.184)
    (define L.nest_t.183 (set! rax (mref r13 7)))
    (jump r15)
    (define L.nest_f.184 (set! rax 3134))
    (jump r15)
    (define L.jp.81 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.181)
    (jump L.nest_f.182)
    (define L.nest_t.181 (set! rax (mref r13 6)))
    (jump r15)
    (define L.nest_f.182 (set! rax 3390))
    (jump r15)
    (define L.jp.94 (nop))
    (nop)
    (set! r9 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (nop)
    (compare rdi 6)
    (jump-if neq? L.nest_t.179)
    (jump L.nest_f.180)
    (define L.nest_t.179 (set! rax r8))
    (jump r15)
    (define L.nest_f.180 (set! rdi (arithmetic-shift-right r9 3)))
    (nop)
    (set! rdi (* rdi 8))
    (nop)
    (set! rdi (+ rdi 5))
    (nop)
    (mset! r8 rdi 0)
    (nop)
    (set! r9 (+ r9 8))
    (nop)
    (set! rcx r8)
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.jp.97 (nop))
    (set! r9 rdi)
    (set! r8 rsi)
    (set! r14 rdx)
    (set! r13 rcx)
    (compare r9 6)
    (jump-if neq? L.nest_t.177)
    (jump L.nest_f.178)
    (define L.nest_t.177 (set! r9 (arithmetic-shift-right r8 3)))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (set! r9 (+ r9 5))
    (nop)
    (mset! r14 r9 r13)
    (set! rax 30)
    (jump r15)
    (define L.nest_f.178 (set! rax 2366))
    (jump r15)
    (define L.jp.98 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (set! r8 rcx)
    (compare r14 6)
    (jump-if neq? L.nest_t.175)
    (jump L.nest_f.176)
    (define L.nest_t.173 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.97)
    (define L.nest_f.174 (set! rcx r9))
    (set! rdx r8)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.97)
    (define L.nest_t.175 (compare r13 0))
    (jump-if >= L.nest_t.173)
    (jump L.nest_f.174)
    (define L.nest_f.176 (set! rax 2366))
    (jump r15)
    (define L.jp.101 (nop))
    (set! r13 rdi)
    (set! r9 rsi)
    (set! r14 rdx)
    (compare r13 6)
    (jump-if neq? L.nest_t.171)
    (jump L.nest_f.172)
    (define L.nest_t.171 (set! r13 (arithmetic-shift-right r9 3)))
    (nop)
    (set! r13 (* r13 8))
    (nop)
    (set! r13 (+ r13 5))
    (nop)
    (set! rax (mref r14 r13))
    (jump r15)
    (define L.nest_f.172 (set! rax 2622))
    (jump r15)
    (define L.jp.102 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r9 rdx)
    (compare r14 6)
    (jump-if neq? L.nest_t.169)
    (jump L.nest_f.170)
    (define L.nest_t.167 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.101)
    (define L.nest_f.168 (set! rdx r9))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.101)
    (define L.nest_t.169 (compare r13 0))
    (jump-if >= L.nest_t.167)
    (jump L.nest_f.168)
    (define L.nest_f.170 (set! rax 2622))
    (jump r15)
    (define L.unsafe-vector-ref.3.1 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r14 -3))
    (compare r13 r9)
    (jump-if < L.nest_t.165)
    (jump L.nest_f.166)
    (define L.nest_t.165 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.102)
    (define L.nest_f.166 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.102)
    (define L.unsafe-vector-set!.2.2 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! r8 (mref r14 -3))
    (compare r13 r8)
    (jump-if < L.nest_t.163)
    (jump L.nest_f.164)
    (define L.nest_t.163 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.98)
    (define L.nest_f.164 (set! rcx r14))
    (set! rdx r9)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.98)
    (define L.vector-init-loop.84.3 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r8 rcx)
    (set! r9 (mref r9 14))
    (compare r14 r13)
    (jump-if eq? L.nest_t.161)
    (jump L.nest_f.162)
    (define L.nest_t.161 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.94)
    (define L.nest_f.162 (nop))
    (set! rcx r9)
    (set! rdx r14)
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.94)
    (define L.make-init-vector.1.4 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (arithmetic-shift-right r14 3))
    (nop)
    (set! r8 1)
    (set! r9 (+ r9 r8))
    (nop)
    (set! r9 (* r9 8))
    (nop)
    (nop)
    (set! r8 r12)
    (set! r12 (+ r12 r9))
    (set! r9 (+ r8 3))
    (nop)
    (mset! r9 -3 r14)
    (nop)
    (nop)
    (set! rcx r9)
    (set! rdx 0)
    (set! rsi r14)
    (set! rdi r13)
    (nop)
    (jump L.vector-init-loop.84.3)
    (define L.eq?.81.5 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (compare r14 r13)
    (jump-if eq? L.nest_t.159)
    (jump L.nest_f.160)
    (define L.nest_t.159 (set! rax 14))
    (jump r15)
    (define L.nest_f.160 (set! rax 6))
    (jump r15)
    (define L.cons.80.6 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 r12)
    (set! r12 (+ r12 16))
    (set! r9 (+ r9 1))
    (nop)
    (mset! r9 -1 r14)
    (mset! r9 7 r13)
    (set! rax r9)
    (jump r15)
    (define L.not.79.7 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (compare r14 6)
    (jump-if neq? L.nest_t.157)
    (jump L.nest_f.158)
    (define L.nest_t.157 (set! rax 6))
    (jump r15)
    (define L.nest_f.158 (set! rax 14))
    (jump r15)
    (define L.vector?.78.8 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 3)
    (jump-if eq? L.nest_t.155)
    (jump L.nest_f.156)
    (define L.nest_t.155 (set! rax 14))
    (jump r15)
    (define L.nest_f.156 (set! rax 6))
    (jump r15)
    (define L.procedure?.77.9 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 2)
    (jump-if eq? L.nest_t.153)
    (jump L.nest_f.154)
    (define L.nest_t.153 (set! rax 14))
    (jump r15)
    (define L.nest_f.154 (set! rax 6))
    (jump r15)
    (define L.pair?.76.10 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 1)
    (jump-if eq? L.nest_t.151)
    (jump L.nest_f.152)
    (define L.nest_t.151 (set! rax 14))
    (jump r15)
    (define L.nest_f.152 (set! rax 6))
    (jump r15)
    (define L.error?.75.11 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 62)
    (jump-if eq? L.nest_t.149)
    (jump L.nest_f.150)
    (define L.nest_t.149 (set! rax 14))
    (jump r15)
    (define L.nest_f.150 (set! rax 6))
    (jump r15)
    (define L.ascii-char?.74.12 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 46)
    (jump-if eq? L.nest_t.147)
    (jump L.nest_f.148)
    (define L.nest_t.147 (set! rax 14))
    (jump r15)
    (define L.nest_f.148 (set! rax 6))
    (jump r15)
    (define L.void?.73.13 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 30)
    (jump-if eq? L.nest_t.145)
    (jump L.nest_f.146)
    (define L.nest_t.145 (set! rax 14))
    (jump r15)
    (define L.nest_f.146 (set! rax 6))
    (jump r15)
    (define L.empty?.72.14 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 255))
    (nop)
    (compare r14 22)
    (jump-if eq? L.nest_t.143)
    (jump L.nest_f.144)
    (define L.nest_t.143 (set! rax 14))
    (jump r15)
    (define L.nest_f.144 (set! rax 6))
    (jump r15)
    (define L.boolean?.71.15 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 247))
    (nop)
    (compare r14 6)
    (jump-if eq? L.nest_t.141)
    (jump L.nest_f.142)
    (define L.nest_t.141 (set! rax 14))
    (jump r15)
    (define L.nest_f.142 (set! rax 6))
    (jump r15)
    (define L.fixnum?.70.16 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r14 (bitwise-and r14 7))
    (nop)
    (compare r14 0)
    (jump-if eq? L.nest_t.139)
    (jump L.nest_f.140)
    (define L.nest_t.139 (set! rax 14))
    (jump r15)
    (define L.nest_f.140 (set! rax 6))
    (jump r15)
    (define L.procedure-arity.69.17 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 2)
    (jump-if eq? L.nest_t.137)
    (jump L.nest_f.138)
    (define L.nest_t.137 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.81)
    (define L.nest_f.138 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.81)
    (define L.cdr.68.18 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.135)
    (jump L.nest_f.136)
    (define L.nest_t.135 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.79)
    (define L.nest_f.136 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.79)
    (define L.car.67.19 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 1)
    (jump-if eq? L.nest_t.133)
    (jump L.nest_f.134)
    (define L.nest_t.133 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.77)
    (define L.nest_f.134 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.77)
    (define L.vector-ref.66.20 (nop))
    (set! r9 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (mref r9 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.131)
    (jump L.nest_f.132)
    (define L.nest_t.131 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.75)
    (define L.nest_f.132 (set! rcx r13))
    (set! rdx r9)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.75)
    (define L.vector-set!.65.21 (nop))
    (set! r8 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 rcx)
    (set! rdi (mref r8 14))
    (set! r8 (bitwise-and r13 7))
    (nop)
    (compare r8 0)
    (jump-if eq? L.nest_t.129)
    (jump L.nest_f.130)
    (define L.nest_t.129 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.71)
    (define L.nest_f.130 (set! r8 r13))
    (set! rcx r9)
    (set! rdx rdi)
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.71)
    (define L.vector-length.64.22 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 (bitwise-and r14 7))
    (nop)
    (compare r13 3)
    (jump-if eq? L.nest_t.127)
    (jump L.nest_f.128)
    (define L.nest_t.127 (set! rsi r14))
    (set! rdi 14)
    (nop)
    (jump L.jp.67)
    (define L.nest_f.128 (set! rsi r14))
    (set! rdi 6)
    (nop)
    (jump L.jp.67)
    (define L.make-vector.63.23 (nop))
    (set! r13 rdi)
    (set! r14 rsi)
    (set! r13 (mref r13 14))
    (set! r9 (bitwise-and r14 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.125)
    (jump L.nest_f.126)
    (define L.nest_t.125 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 14)
    (nop)
    (jump L.jp.65)
    (define L.nest_f.126 (set! rdx r14))
    (set! rsi r13)
    (set! rdi 6)
    (nop)
    (jump L.jp.65)
    (define L.>=.62.24 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.123)
    (jump L.nest_f.124)
    (define L.nest_t.123 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.63)
    (define L.nest_f.124 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.63)
    (define L.>.61.25 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.121)
    (jump L.nest_f.122)
    (define L.nest_t.121 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.58)
    (define L.nest_f.122 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.58)
    (define L.<=.60.26 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.119)
    (jump L.nest_f.120)
    (define L.nest_t.119 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.53)
    (define L.nest_f.120 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.53)
    (define L.<.59.27 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.117)
    (jump L.nest_f.118)
    (define L.nest_t.117 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.48)
    (define L.nest_f.118 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.48)
    (define L.-.58.28 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.115)
    (jump L.nest_f.116)
    (define L.nest_t.115 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.43)
    (define L.nest_f.116 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.43)
    (define L.+.57.29 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.113)
    (jump L.nest_f.114)
    (define L.nest_t.113 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.39)
    (define L.nest_f.114 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.39)
    (define L.*.56.30 (nop))
    (set! r14 rdi)
    (set! r14 rsi)
    (set! r13 rdx)
    (set! r9 (bitwise-and r13 7))
    (nop)
    (compare r9 0)
    (jump-if eq? L.nest_t.111)
    (jump L.nest_f.112)
    (define L.nest_t.111 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 14)
    (nop)
    (jump L.jp.35)
    (define L.nest_f.112 (set! rdx r13))
    (set! rsi r14)
    (set! rdi 6)
    (nop)
    (jump L.jp.35)
    (define L.sum.4.31 (set! (rbp + 24) r15))
    (set! r14 rdi)
    (set! r15 rsi)
    (set! r13 rdx)
    (set! rdi rcx)
    (nop)
    (nop)
    (set! r9 (rbp + 0))
    (set! (rbp + 32) (rbp + 8))
    (set! (rbp + 8) (rbp + 16))
    (set! (rbp + 0) (mref r14 14))
    (set! r14 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! rdx r13)
    (set! rsi r15)
    (set! rdi (rbp + -40))
    (set! r15 L.rp.107)
    (jump L.+.57.29)
    (define L.rp.107 (set! rbp (- rbp 40)))
    (set! (rbp + 16) rax)
    (set! r15 (rbp + 0))
    (set! rbp (+ rbp 40))
    (set! rdx (rbp + -32))
    (set! rsi (rbp + -8))
    (set! rdi (rbp + -40))
    (set! r15 L.rp.108)
    (jump L.+.57.29)
    (define L.rp.108 (set! rbp (- rbp 40)))
    (set! r15 rax)
    (set! r14 (rbp + 0))
    (set! rdx r15)
    (set! rsi (rbp + 16))
    (set! rdi (rbp + 0))
    (set! r15 (rbp + 24))
    (jump L.+.57.29)
    (define L.rp.105 (set! rbp (- rbp 40)))
    (set! r15 rax)
    (compare r15 6)
    (jump-if neq? L.nest_t.109)
    (jump L.nest_f.110)
    (define L.rp.106 (set! rbp (- rbp 40)))
    (set! r15 rax)
    (set! rax r15)
    (jump (rbp + 24))
    (define L.nest_t.109 (set! r15 (rbp + 32)))
    (set! rbp (+ rbp 40))
    (set! (rbp + 16) 64)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + -8))
    (set! r15 L.rp.106)
    (jump L.sum.4.31)
    (define L.nest_f.110 (set! r15 40))
    (set! r14 (rbp + 32))
    (set! (rbp + 16) r15)
    (set! (rbp + 8) 56)
    (set! (rbp + 0) 48)
    (set! r9 40)
    (set! r8 32)
    (set! rcx 24)
    (set! rdx 16)
    (set! rsi 8)
    (set! rdi (rbp + 32))
    (set! r15 (rbp + 24))
    (jump L.sum.4.31))
     ) 15))

(parameterize ([current-pass-list
                  (list
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ()
      (begin
        (set! (rbp + 24) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.vector-init-loop.84.3)
        (mset! r13 6 24)
        (set! r9 r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-init-vector.1.4)
        (mset! r13 6 8)
        (set! r8 r13)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.eq?.81.5)
        (mset! r13 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.80.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.79.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.78.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.77.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.76.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.75.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.74.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.73.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.72.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.71.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.70.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.69.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.68.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.67.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.66.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.65.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.64.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.63.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.62.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.61.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.60.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.59.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.58.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.57.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.56.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r15)
        (mset! rsi 14 r14)
        (mset! rdx 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 24))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.sum.4.31)
        (mset! r15 6 64)
        (set! (rbp + 32) r15)
        (mset! (rbp + 32) 14 rcx)
        (set! r15 80)
        (set! r15 r13)
        (set! rbp (+ rbp 40))
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi r13)
        (set! r15 L.rp.105)
        (jump L.eq?.81.5)))
    (define L.jp.34
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.251) (jump L.nest_f.252))))
    (define L.nest_t.251
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r14 (* r14 r13))
        (set! rax r14)
        (jump r15)))
    (define L.nest_f.252 () (begin (set! rax 62) (jump r15)))
    (define L.jp.35
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.249) (jump L.nest_f.250))))
    (define L.nest_t.247
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.34)))
    (define L.nest_f.248
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.34)))
    (define L.nest_t.249
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.247) (jump L.nest_f.248))))
    (define L.nest_f.250 () (begin (set! rax 62) (jump r15)))
    (define L.jp.38
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.245) (jump L.nest_f.246))))
    (define L.nest_t.245
      ()
      (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.246 () (begin (set! rax 318) (jump r15)))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.243) (jump L.nest_f.244))))
    (define L.nest_t.241
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.38)))
    (define L.nest_f.242
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.38)))
    (define L.nest_t.243
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.241) (jump L.nest_f.242))))
    (define L.nest_f.244 () (begin (set! rax 318) (jump r15)))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.239) (jump L.nest_f.240))))
    (define L.nest_t.239
      ()
      (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.240 () (begin (set! rax 574) (jump r15)))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.237) (jump L.nest_f.238))))
    (define L.nest_t.235
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.42)))
    (define L.nest_f.236
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.42)))
    (define L.nest_t.237
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.235) (jump L.nest_f.236))))
    (define L.nest_f.238 () (begin (set! rax 574) (jump r15)))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.233) (jump L.nest_f.234))))
    (define L.nest_t.231 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.232 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.233
      ()
      (if (< r13 r9) (jump L.nest_t.231) (jump L.nest_f.232)))
    (define L.nest_f.234 () (begin (set! rax 830) (jump r15)))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.229) (jump L.nest_f.230))))
    (define L.nest_t.227
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.47)))
    (define L.nest_f.228
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.47)))
    (define L.nest_t.229
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.227) (jump L.nest_f.228))))
    (define L.nest_f.230 () (begin (set! rax 830) (jump r15)))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.225) (jump L.nest_f.226))))
    (define L.nest_t.223 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.224 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.225
      ()
      (if (<= r13 r9) (jump L.nest_t.223) (jump L.nest_f.224)))
    (define L.nest_f.226 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.221) (jump L.nest_f.222))))
    (define L.nest_t.219
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.52)))
    (define L.nest_f.220
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.52)))
    (define L.nest_t.221
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.219) (jump L.nest_f.220))))
    (define L.nest_f.222 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.217) (jump L.nest_f.218))))
    (define L.nest_t.215 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.216 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.217
      ()
      (if (> r13 r9) (jump L.nest_t.215) (jump L.nest_f.216)))
    (define L.nest_f.218 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.213) (jump L.nest_f.214))))
    (define L.nest_t.211
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.57)))
    (define L.nest_f.212
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.57)))
    (define L.nest_t.213
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.211) (jump L.nest_f.212))))
    (define L.nest_f.214 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.209) (jump L.nest_f.210))))
    (define L.nest_t.207 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.208 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.209
      ()
      (if (>= r13 r9) (jump L.nest_t.207) (jump L.nest_f.208)))
    (define L.nest_f.210 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.205) (jump L.nest_f.206))))
    (define L.nest_t.203
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.62)))
    (define L.nest_f.204
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.62)))
    (define L.nest_t.205
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.203) (jump L.nest_f.204))))
    (define L.nest_f.206 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6) (jump L.nest_t.201) (jump L.nest_f.202))))
    (define L.nest_t.201
      ()
      (begin
        (nop)
        (set! rsi r9)
        (set! rdi r14)
        (nop)
        (jump L.make-init-vector.1.4)))
    (define L.nest_f.202 () (begin (set! rax 1854) (jump r15)))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.199) (jump L.nest_f.200))))
    (define L.nest_t.199 () (begin (set! rax (mref r13 -3)) (jump r15)))
    (define L.nest_f.200 () (begin (set! rax 2110) (jump r15)))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6) (jump L.nest_t.197) (jump L.nest_f.198))))
    (define L.nest_t.197
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-set!.2.2)))
    (define L.nest_f.198 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.71
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6) (jump L.nest_t.195) (jump L.nest_f.196))))
    (define L.nest_t.193
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.70)))
    (define L.nest_f.194
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.70)))
    (define L.nest_t.195
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.193) (jump L.nest_f.194))))
    (define L.nest_f.196 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.74
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6) (jump L.nest_t.191) (jump L.nest_f.192))))
    (define L.nest_t.191
      ()
      (begin
        (nop)
        (set! rdx r9)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-ref.3.1)))
    (define L.nest_f.192 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6) (jump L.nest_t.189) (jump L.nest_f.190))))
    (define L.nest_t.187
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.74)))
    (define L.nest_f.188
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.74)))
    (define L.nest_t.189
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.187) (jump L.nest_f.188))))
    (define L.nest_f.190 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.185) (jump L.nest_f.186))))
    (define L.nest_t.185 () (begin (set! rax (mref r13 -1)) (jump r15)))
    (define L.nest_f.186 () (begin (set! rax 2878) (jump r15)))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.183) (jump L.nest_f.184))))
    (define L.nest_t.183 () (begin (set! rax (mref r13 7)) (jump r15)))
    (define L.nest_f.184 () (begin (set! rax 3134) (jump r15)))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.181) (jump L.nest_f.182))))
    (define L.nest_t.181 () (begin (set! rax (mref r13 6)) (jump r15)))
    (define L.nest_f.182 () (begin (set! rax 3390) (jump r15)))
    (define L.jp.94
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6) (jump L.nest_t.179) (jump L.nest_f.180))))
    (define L.nest_t.179 () (begin (set! rax r8) (jump r15)))
    (define L.nest_f.180
      ()
      (begin
        (set! rdi (arithmetic-shift-right r9 3))
        (nop)
        (set! rdi (* rdi 8))
        (nop)
        (set! rdi (+ rdi 5))
        (nop)
        (mset! r8 rdi 0)
        (nop)
        (set! r9 (+ r9 8))
        (nop)
        (set! rcx r8)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.84.3)))
    (define L.jp.97
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6) (jump L.nest_t.177) (jump L.nest_f.178))))
    (define L.nest_t.177
      ()
      (begin
        (set! r9 (arithmetic-shift-right r8 3))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (set! r9 (+ r9 5))
        (nop)
        (mset! r14 r9 r13)
        (set! rax 30)
        (jump r15)))
    (define L.nest_f.178 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.98
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6) (jump L.nest_t.175) (jump L.nest_f.176))))
    (define L.nest_t.173
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.97)))
    (define L.nest_f.174
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.97)))
    (define L.nest_t.175
      ()
      (if (>= r13 0) (jump L.nest_t.173) (jump L.nest_f.174)))
    (define L.nest_f.176 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.101
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.171) (jump L.nest_f.172))))
    (define L.nest_t.171
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r13 (* r13 8))
        (nop)
        (set! r13 (+ r13 5))
        (nop)
        (set! rax (mref r14 r13))
        (jump r15)))
    (define L.nest_f.172 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.169) (jump L.nest_f.170))))
    (define L.nest_t.167
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.101)))
    (define L.nest_f.168
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.101)))
    (define L.nest_t.169
      ()
      (if (>= r13 0) (jump L.nest_t.167) (jump L.nest_f.168)))
    (define L.nest_f.170 () (begin (set! rax 2622) (jump r15)))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9) (jump L.nest_t.165) (jump L.nest_f.166))))
    (define L.nest_t.165
      ()
      (begin
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.102)))
    (define L.nest_f.166
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.102)))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8) (jump L.nest_t.163) (jump L.nest_f.164))))
    (define L.nest_t.163
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.98)))
    (define L.nest_f.164
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.98)))
    (define L.vector-init-loop.84.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13) (jump L.nest_t.161) (jump L.nest_f.162))))
    (define L.nest_t.161
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.94)))
    (define L.nest_f.162
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.94)))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.84.3)))
    (define L.eq?.81.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13) (jump L.nest_t.159) (jump L.nest_f.160))))
    (define L.nest_t.159 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.160 () (begin (set! rax 6) (jump r15)))
    (define L.cons.80.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.not.79.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6) (jump L.nest_t.157) (jump L.nest_f.158))))
    (define L.nest_t.157 () (begin (set! rax 6) (jump r15)))
    (define L.nest_f.158 () (begin (set! rax 14) (jump r15)))
    (define L.vector?.78.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3) (jump L.nest_t.155) (jump L.nest_f.156))))
    (define L.nest_t.155 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.156 () (begin (set! rax 6) (jump r15)))
    (define L.procedure?.77.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2) (jump L.nest_t.153) (jump L.nest_f.154))))
    (define L.nest_t.153 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.154 () (begin (set! rax 6) (jump r15)))
    (define L.pair?.76.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1) (jump L.nest_t.151) (jump L.nest_f.152))))
    (define L.nest_t.151 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.152 () (begin (set! rax 6) (jump r15)))
    (define L.error?.75.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62) (jump L.nest_t.149) (jump L.nest_f.150))))
    (define L.nest_t.149 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.150 () (begin (set! rax 6) (jump r15)))
    (define L.ascii-char?.74.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46) (jump L.nest_t.147) (jump L.nest_f.148))))
    (define L.nest_t.147 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.148 () (begin (set! rax 6) (jump r15)))
    (define L.void?.73.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30) (jump L.nest_t.145) (jump L.nest_f.146))))
    (define L.nest_t.145 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.146 () (begin (set! rax 6) (jump r15)))
    (define L.empty?.72.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22) (jump L.nest_t.143) (jump L.nest_f.144))))
    (define L.nest_t.143 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.144 () (begin (set! rax 6) (jump r15)))
    (define L.boolean?.71.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6) (jump L.nest_t.141) (jump L.nest_f.142))))
    (define L.nest_t.141 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.142 () (begin (set! rax 6) (jump r15)))
    (define L.fixnum?.70.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0) (jump L.nest_t.139) (jump L.nest_f.140))))
    (define L.nest_t.139 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.140 () (begin (set! rax 6) (jump r15)))
    (define L.procedure-arity.69.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2) (jump L.nest_t.137) (jump L.nest_f.138))))
    (define L.nest_t.137
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81)))
    (define L.nest_f.138
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))
    (define L.cdr.68.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.135) (jump L.nest_f.136))))
    (define L.nest_t.135
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79)))
    (define L.nest_f.136
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))
    (define L.car.67.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.133) (jump L.nest_f.134))))
    (define L.nest_t.133
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.77)))
    (define L.nest_f.134
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.77)))
    (define L.vector-ref.66.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.131) (jump L.nest_f.132))))
    (define L.nest_t.131
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.75)))
    (define L.nest_f.132
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.75)))
    (define L.vector-set!.65.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.129) (jump L.nest_f.130))))
    (define L.nest_t.129
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.71)))
    (define L.nest_f.130
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.71)))
    (define L.vector-length.64.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3) (jump L.nest_t.127) (jump L.nest_f.128))))
    (define L.nest_t.127
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.67)))
    (define L.nest_f.128
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.67)))
    (define L.make-vector.63.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.125) (jump L.nest_f.126))))
    (define L.nest_t.125
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.65)))
    (define L.nest_f.126
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.65)))
    (define L.>=.62.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.123) (jump L.nest_f.124))))
    (define L.nest_t.123
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.63)))
    (define L.nest_f.124
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.63)))
    (define L.>.61.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.121) (jump L.nest_f.122))))
    (define L.nest_t.121
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.58)))
    (define L.nest_f.122
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.58)))
    (define L.<=.60.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.119) (jump L.nest_f.120))))
    (define L.nest_t.119
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.53)))
    (define L.nest_f.120
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.53)))
    (define L.<.59.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.117) (jump L.nest_f.118))))
    (define L.nest_t.117
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.48)))
    (define L.nest_f.118
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.48)))
    (define L.-.58.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.115) (jump L.nest_f.116))))
    (define L.nest_t.115
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.43)))
    (define L.nest_f.116
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.43)))
    (define L.+.57.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.113) (jump L.nest_f.114))))
    (define L.nest_t.113
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.39)))
    (define L.nest_f.114
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.39)))
    (define L.*.56.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.111) (jump L.nest_f.112))))
    (define L.nest_t.111
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.35)))
    (define L.nest_f.112
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.35)))
    (define L.sum.4.31
      ()
      (begin
        (set! (rbp + 24) r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! rdi rcx)
        (nop)
        (nop)
        (set! r9 (rbp + 0))
        (set! (rbp + 32) (rbp + 8))
        (set! (rbp + 8) (rbp + 16))
        (set! (rbp + 0) (mref r14 14))
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 40))
        (set! rdx r13)
        (set! rsi r15)
        (set! rdi (rbp + -40))
        (set! r15 L.rp.107)
        (jump L.+.57.29)))
    (define L.rp.107
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! (rbp + 16) rax)
        (set! r15 (rbp + 0))
        (set! rbp (+ rbp 40))
        (set! rdx (rbp + -32))
        (set! rsi (rbp + -8))
        (set! rdi (rbp + -40))
        (set! r15 L.rp.108)
        (jump L.+.57.29)))
    (define L.rp.108
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 24))
        (jump L.+.57.29)))
    (define L.rp.105
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (if (neq? r15 6) (jump L.nest_t.109) (jump L.nest_f.110))))
    (define L.rp.106
      ()
      (begin
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! rax r15)
        (jump (rbp + 24))))
    (define L.nest_t.109
      ()
      (begin
        (set! r15 (rbp + 32))
        (set! rbp (+ rbp 40))
        (set! (rbp + 16) 64)
        (set! (rbp + 8) 56)
        (set! (rbp + 0) 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi (rbp + -8))
        (set! r15 L.rp.106)
        (jump L.sum.4.31)))
    (define L.nest_f.110
      ()
      (begin
        (set! r15 40)
        (set! r14 (rbp + 32))
        (set! (rbp + 16) r15)
        (set! (rbp + 8) 56)
        (set! (rbp + 0) 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi (rbp + 32))
        (set! r15 (rbp + 24))
        (jump L.sum.4.31))))
     ) 15))

(parameterize ([current-pass-list
                  (list
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ()
      (begin
        (set! (rbp + 24) r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.vector-init-loop.84.3)
        (mset! r13 6 24)
        (set! r9 r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-init-vector.1.4)
        (mset! r13 6 8)
        (set! r8 r13)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.eq?.81.5)
        (mset! r13 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.80.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.79.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.78.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.77.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.76.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.75.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.74.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.73.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.72.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.71.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.70.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.69.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.68.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.67.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.66.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.65.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.64.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.63.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.62.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.61.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.60.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.59.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.58.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.57.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.56.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r15)
        (mset! rsi 14 r14)
        (mset! rdx 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 24))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.sum.4.31)
        (mset! r15 6 64)
        (set! (rbp + 32) r15)
        (mset! (rbp + 32) 14 rcx)
        (set! r15 80)
        (set! r15 r13)
        (set! rbp (+ rbp 40))
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi r13)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin
            (set! r15 (rbp + 32))
            (set! rbp (+ rbp 40))
            (return-point L.rp.106
              (begin
                (set! (rbp + 16) 64)
                (set! (rbp + 8) 56)
                (set! (rbp + 0) 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi (rbp + -8))
                (set! r15 L.rp.106)
                (jump L.sum.4.31)))
            (set! rbp (- rbp 40))
            (set! r15 rax)
            (set! rax r15)
            (jump (rbp + 24)))
          (begin
            (set! r15 40)
            (set! r14 (rbp + 32))
            (set! (rbp + 16) r15)
            (set! (rbp + 8) 56)
            (set! (rbp + 0) 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi (rbp + 32))
            (set! r15 (rbp + 24))
            (jump L.sum.4.31)))))
    (define L.sum.4.31
      ()
      (begin
        (set! (rbp + 24) r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! rdi rcx)
        (nop)
        (nop)
        (set! r9 (rbp + 0))
        (set! (rbp + 32) (rbp + 8))
        (set! (rbp + 8) (rbp + 16))
        (set! (rbp + 0) (mref r14 14))
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 40))
        (return-point L.rp.107
          (begin
            (set! rdx r13)
            (set! rsi r15)
            (set! rdi (rbp + -40))
            (set! r15 L.rp.107)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! (rbp + 16) rax)
        (set! r15 (rbp + 0))
        (set! rbp (+ rbp 40))
        (return-point L.rp.108
          (begin
            (set! rdx (rbp + -32))
            (set! rsi (rbp + -8))
            (set! rdi (rbp + -40))
            (set! r15 L.rp.108)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx r15)
        (set! rsi (rbp + 16))
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 24))
        (jump L.+.57.29)))
    (define L.*.56.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.35))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.35)))))
    (define L.+.57.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.39))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.39)))))
    (define L.-.58.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.43))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.43)))))
    (define L.<.59.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.48))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.48)))))
    (define L.<=.60.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.53))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.53)))))
    (define L.>.61.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.58))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.58)))))
    (define L.>=.62.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.63))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.63)))))
    (define L.make-vector.63.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.65))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.65)))))
    (define L.vector-length.64.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.67))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.67)))))
    (define L.vector-set!.65.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.71))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.71)))))
    (define L.vector-ref.66.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.75))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.75)))))
    (define L.car.67.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.77))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.77)))))
    (define L.cdr.68.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))))
    (define L.procedure-arity.69.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))))
    (define L.fixnum?.70.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.71.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.72.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.73.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.74.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.75.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.76.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.77.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.78.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.79.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.80.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.81.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.84.3)))
    (define L.vector-init-loop.84.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.94))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.94)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.98))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.98)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.102))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.102)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.101))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.101)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.101
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.98
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.97))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.97)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.97
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.94
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.84.3)))))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.74))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.74))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.74
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.71
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.70))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.70))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.62))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.62))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.57))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.57))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.52))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.52))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.47))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.47))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.42))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.42))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.38))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.38))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.38
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.35
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.34))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.34))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.34
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) 15))

(parameterize ([current-pass-list
                  (list
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ()
      (begin
        (set! fv3 r15)
        (set! r15 r12)
        (set! r12 (+ r12 16))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.unsafe-vector-ref.3.1)
        (mset! r15 6 16)
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-set!.2.2)
        (mset! r14 6 24)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.vector-init-loop.84.3)
        (mset! r13 6 24)
        (set! r9 r13)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.make-init-vector.1.4)
        (mset! r13 6 8)
        (set! r8 r13)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.eq?.81.5)
        (mset! r13 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.80.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.79.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.78.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.77.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.76.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.75.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.74.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.73.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.72.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.71.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.70.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.69.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.68.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.67.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.66.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.65.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.64.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.63.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.62.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.61.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.60.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.59.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.58.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.57.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.56.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r15)
        (mset! rsi 14 r14)
        (mset! rdx 14 r8)
        (set! r15 r12)
        (set! r12 (+ r12 24))
        (set! r15 (+ r15 2))
        (nop)
        (mset! r15 -2 L.sum.4.31)
        (mset! r15 6 64)
        (set! fv4 r15)
        (mset! fv4 14 rcx)
        (set! r15 80)
        (set! r15 r13)
        (set! rbp (+ rbp 40))
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi r13)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (if (neq? r15 6)
          (begin
            (set! r15 fv4)
            (set! rbp (+ rbp 40))
            (return-point L.rp.106
              (begin
                (set! fv7 64)
                (set! fv6 56)
                (set! fv5 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi fv4)
                (set! r15 L.rp.106)
                (jump L.sum.4.31)))
            (set! rbp (- rbp 40))
            (set! r15 rax)
            (set! rax r15)
            (jump fv3))
          (begin
            (set! r15 40)
            (set! r14 fv4)
            (set! fv2 r15)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi fv4)
            (set! r15 fv3)
            (jump L.sum.4.31)))))
    (define L.sum.4.31
      ()
      (begin
        (set! fv3 r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! rdi rcx)
        (nop)
        (nop)
        (set! r9 fv0)
        (set! fv4 fv1)
        (set! fv1 fv2)
        (set! fv0 (mref r14 14))
        (set! r14 fv0)
        (set! rbp (+ rbp 40))
        (return-point L.rp.107
          (begin
            (set! rdx r13)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.107)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! fv2 rax)
        (set! r15 fv0)
        (set! rbp (+ rbp 40))
        (return-point L.rp.108
          (begin
            (set! rdx fv1)
            (set! rsi fv4)
            (set! rdi fv0)
            (set! r15 L.rp.108)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rdx r15)
        (set! rsi fv2)
        (set! rdi fv0)
        (set! r15 fv3)
        (jump L.+.57.29)))
    (define L.*.56.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.35))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.35)))))
    (define L.+.57.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.39))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.39)))))
    (define L.-.58.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.43))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.43)))))
    (define L.<.59.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.48))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.48)))))
    (define L.<=.60.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.53))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.53)))))
    (define L.>.61.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.58))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.58)))))
    (define L.>=.62.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.63))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.63)))))
    (define L.make-vector.63.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.65))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.65)))))
    (define L.vector-length.64.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.67))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.67)))))
    (define L.vector-set!.65.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.71))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.71)))))
    (define L.vector-ref.66.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.75))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.75)))))
    (define L.car.67.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.77))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.77)))))
    (define L.cdr.68.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))))
    (define L.procedure-arity.69.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))))
    (define L.fixnum?.70.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.71.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.72.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.73.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.74.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.75.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.76.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.77.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.78.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.79.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.80.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.81.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.84.3)))
    (define L.vector-init-loop.84.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.94))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.94)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.98))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.98)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.102))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.102)))))
    (define L.jp.102
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.101))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.101)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.101
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.98
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.97))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.97)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.97
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.94
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.84.3)))))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.75
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.74))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.74))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.74
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.71
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.70))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.70))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.70
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.63
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.62))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.62))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.62
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.58
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.57))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.57))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.57
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.53
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.52))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.52))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.52
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.48
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.47))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.47))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.47
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.43
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.42))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.42))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.42
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.39
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.38))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.38))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.38
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.35
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.34))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.34))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.34
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) 15))



(parameterize ([current-pass-list
                  (list
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ((assignment
        ((ra.325 fv3)
         (sum.4 fv4)
         (nfv.357 fv5)
         (nfv.358 fv6)
         (nfv.359 fv7)
         (unsafe-vector-ref.3 r15)
         (unsafe-vector-set!.2 r14)
         (eq?.81 r13)
         (vector-init-loop.84 r9)
         (make-init-vector.1 r8)
         (vector-ref.66 rdi)
         (vector-set!.65 rsi)
         (make-vector.63 rdx)
         (|+.57| rcx)
         (tmp.321 rbx)
         (tmp.355 rbx)
         (tmp.169 rbx)
         (*.56 rbx)
         (tmp.315 rcx)
         (tmp.349 rcx)
         (tmp.163 rcx)
         (>=.62 rcx)
         (tmp.316 rcx)
         (tmp.350 rcx)
         (tmp.164 rcx)
         (>.61 rcx)
         (tmp.317 rcx)
         (tmp.351 rcx)
         (tmp.165 rcx)
         (<=.60 rcx)
         (tmp.318 rcx)
         (tmp.352 rcx)
         (tmp.166 rcx)
         (<.59 rcx)
         (tmp.319 rcx)
         (tmp.353 rcx)
         (tmp.167 rcx)
         (|-.58| rcx)
         (tmp.320 rcx)
         (tmp.354 rcx)
         (tmp.168 rcx)
         (tmp.313 rdx)
         (tmp.347 rdx)
         (tmp.161 rdx)
         (vector-length.64 rdx)
         (tmp.314 rdx)
         (tmp.348 rdx)
         (tmp.162 rdx)
         (tmp.312 rsi)
         (tmp.346 rsi)
         (tmp.160 rsi)
         (tmp.297 rdi)
         (tmp.331 rdi)
         (tmp.145 rdi)
         (cons.80 rdi)
         (tmp.298 rdi)
         (tmp.332 rdi)
         (tmp.146 rdi)
         (not.79 rdi)
         (tmp.299 rdi)
         (tmp.333 rdi)
         (tmp.147 rdi)
         (vector?.78 rdi)
         (tmp.300 rdi)
         (tmp.334 rdi)
         (tmp.148 rdi)
         (procedure?.77 rdi)
         (tmp.301 rdi)
         (tmp.335 rdi)
         (tmp.149 rdi)
         (pair?.76 rdi)
         (tmp.302 rdi)
         (tmp.336 rdi)
         (tmp.150 rdi)
         (error?.75 rdi)
         (tmp.303 rdi)
         (tmp.337 rdi)
         (tmp.151 rdi)
         (ascii-char?.74 rdi)
         (tmp.304 rdi)
         (tmp.338 rdi)
         (tmp.152 rdi)
         (void?.73 rdi)
         (tmp.305 rdi)
         (tmp.339 rdi)
         (tmp.153 rdi)
         (empty?.72 rdi)
         (tmp.306 rdi)
         (tmp.340 rdi)
         (tmp.154 rdi)
         (boolean?.71 rdi)
         (tmp.307 rdi)
         (tmp.341 rdi)
         (tmp.155 rdi)
         (fixnum?.70 rdi)
         (tmp.308 rdi)
         (tmp.342 rdi)
         (tmp.156 rdi)
         (procedure-arity.69 rdi)
         (tmp.309 rdi)
         (tmp.343 rdi)
         (tmp.157 rdi)
         (cdr.68 rdi)
         (tmp.310 rdi)
         (tmp.344 rdi)
         (tmp.158 rdi)
         (car.67 rdi)
         (tmp.311 rdi)
         (tmp.345 rdi)
         (tmp.159 rdi)
         (tmp.296 r13)
         (tmp.330 r13)
         (tmp.144 r13)
         (tmp.295 r13)
         (tmp.329 r13)
         (tmp.143 r13)
         (tmp.294 r13)
         (tmp.328 r13)
         (tmp.142 r13)
         (tmp.322 r15)
         (x.17 r15)
         (tmp.293 r14)
         (tmp.327 r14)
         (tmp.141 r14)
         (tmp.356 r15)
         (tmp.170 r15)
         (x.15 r15)
         (tmp.137 r14)
         (tmp.324 r15)
         (tmp.292 r15)
         (tmp.326 r15)
         (tmp.140 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (j.16 r15))))
      (begin
        (set! ra.325 r15)
        (set! tmp.292 r12)
        (set! r12 (+ r12 16))
        (set! tmp.326 (+ tmp.292 2))
        (set! tmp.140 tmp.326)
        (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.140 6 16)
        (set! unsafe-vector-ref.3 tmp.140)
        (set! tmp.293 r12)
        (set! r12 (+ r12 16))
        (set! tmp.327 (+ tmp.293 2))
        (set! tmp.141 tmp.327)
        (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.141 6 24)
        (set! unsafe-vector-set!.2 tmp.141)
        (set! tmp.294 r12)
        (set! r12 (+ r12 24))
        (set! tmp.328 (+ tmp.294 2))
        (set! tmp.142 tmp.328)
        (mset! tmp.142 -2 L.vector-init-loop.84.3)
        (mset! tmp.142 6 24)
        (set! vector-init-loop.84 tmp.142)
        (set! tmp.295 r12)
        (set! r12 (+ r12 24))
        (set! tmp.329 (+ tmp.295 2))
        (set! tmp.143 tmp.329)
        (mset! tmp.143 -2 L.make-init-vector.1.4)
        (mset! tmp.143 6 8)
        (set! make-init-vector.1 tmp.143)
        (set! tmp.296 r12)
        (set! r12 (+ r12 16))
        (set! tmp.330 (+ tmp.296 2))
        (set! tmp.144 tmp.330)
        (mset! tmp.144 -2 L.eq?.81.5)
        (mset! tmp.144 6 16)
        (set! eq?.81 tmp.144)
        (set! tmp.297 r12)
        (set! r12 (+ r12 16))
        (set! tmp.331 (+ tmp.297 2))
        (set! tmp.145 tmp.331)
        (mset! tmp.145 -2 L.cons.80.6)
        (mset! tmp.145 6 16)
        (set! cons.80 tmp.145)
        (set! tmp.298 r12)
        (set! r12 (+ r12 16))
        (set! tmp.332 (+ tmp.298 2))
        (set! tmp.146 tmp.332)
        (mset! tmp.146 -2 L.not.79.7)
        (mset! tmp.146 6 8)
        (set! not.79 tmp.146)
        (set! tmp.299 r12)
        (set! r12 (+ r12 16))
        (set! tmp.333 (+ tmp.299 2))
        (set! tmp.147 tmp.333)
        (mset! tmp.147 -2 L.vector?.78.8)
        (mset! tmp.147 6 8)
        (set! vector?.78 tmp.147)
        (set! tmp.300 r12)
        (set! r12 (+ r12 16))
        (set! tmp.334 (+ tmp.300 2))
        (set! tmp.148 tmp.334)
        (mset! tmp.148 -2 L.procedure?.77.9)
        (mset! tmp.148 6 8)
        (set! procedure?.77 tmp.148)
        (set! tmp.301 r12)
        (set! r12 (+ r12 16))
        (set! tmp.335 (+ tmp.301 2))
        (set! tmp.149 tmp.335)
        (mset! tmp.149 -2 L.pair?.76.10)
        (mset! tmp.149 6 8)
        (set! pair?.76 tmp.149)
        (set! tmp.302 r12)
        (set! r12 (+ r12 16))
        (set! tmp.336 (+ tmp.302 2))
        (set! tmp.150 tmp.336)
        (mset! tmp.150 -2 L.error?.75.11)
        (mset! tmp.150 6 8)
        (set! error?.75 tmp.150)
        (set! tmp.303 r12)
        (set! r12 (+ r12 16))
        (set! tmp.337 (+ tmp.303 2))
        (set! tmp.151 tmp.337)
        (mset! tmp.151 -2 L.ascii-char?.74.12)
        (mset! tmp.151 6 8)
        (set! ascii-char?.74 tmp.151)
        (set! tmp.304 r12)
        (set! r12 (+ r12 16))
        (set! tmp.338 (+ tmp.304 2))
        (set! tmp.152 tmp.338)
        (mset! tmp.152 -2 L.void?.73.13)
        (mset! tmp.152 6 8)
        (set! void?.73 tmp.152)
        (set! tmp.305 r12)
        (set! r12 (+ r12 16))
        (set! tmp.339 (+ tmp.305 2))
        (set! tmp.153 tmp.339)
        (mset! tmp.153 -2 L.empty?.72.14)
        (mset! tmp.153 6 8)
        (set! empty?.72 tmp.153)
        (set! tmp.306 r12)
        (set! r12 (+ r12 16))
        (set! tmp.340 (+ tmp.306 2))
        (set! tmp.154 tmp.340)
        (mset! tmp.154 -2 L.boolean?.71.15)
        (mset! tmp.154 6 8)
        (set! boolean?.71 tmp.154)
        (set! tmp.307 r12)
        (set! r12 (+ r12 16))
        (set! tmp.341 (+ tmp.307 2))
        (set! tmp.155 tmp.341)
        (mset! tmp.155 -2 L.fixnum?.70.16)
        (mset! tmp.155 6 8)
        (set! fixnum?.70 tmp.155)
        (set! tmp.308 r12)
        (set! r12 (+ r12 16))
        (set! tmp.342 (+ tmp.308 2))
        (set! tmp.156 tmp.342)
        (mset! tmp.156 -2 L.procedure-arity.69.17)
        (mset! tmp.156 6 8)
        (set! procedure-arity.69 tmp.156)
        (set! tmp.309 r12)
        (set! r12 (+ r12 16))
        (set! tmp.343 (+ tmp.309 2))
        (set! tmp.157 tmp.343)
        (mset! tmp.157 -2 L.cdr.68.18)
        (mset! tmp.157 6 8)
        (set! cdr.68 tmp.157)
        (set! tmp.310 r12)
        (set! r12 (+ r12 16))
        (set! tmp.344 (+ tmp.310 2))
        (set! tmp.158 tmp.344)
        (mset! tmp.158 -2 L.car.67.19)
        (mset! tmp.158 6 8)
        (set! car.67 tmp.158)
        (set! tmp.311 r12)
        (set! r12 (+ r12 24))
        (set! tmp.345 (+ tmp.311 2))
        (set! tmp.159 tmp.345)
        (mset! tmp.159 -2 L.vector-ref.66.20)
        (mset! tmp.159 6 16)
        (set! vector-ref.66 tmp.159)
        (set! tmp.312 r12)
        (set! r12 (+ r12 24))
        (set! tmp.346 (+ tmp.312 2))
        (set! tmp.160 tmp.346)
        (mset! tmp.160 -2 L.vector-set!.65.21)
        (mset! tmp.160 6 24)
        (set! vector-set!.65 tmp.160)
        (set! tmp.313 r12)
        (set! r12 (+ r12 16))
        (set! tmp.347 (+ tmp.313 2))
        (set! tmp.161 tmp.347)
        (mset! tmp.161 -2 L.vector-length.64.22)
        (mset! tmp.161 6 8)
        (set! vector-length.64 tmp.161)
        (set! tmp.314 r12)
        (set! r12 (+ r12 24))
        (set! tmp.348 (+ tmp.314 2))
        (set! tmp.162 tmp.348)
        (mset! tmp.162 -2 L.make-vector.63.23)
        (mset! tmp.162 6 8)
        (set! make-vector.63 tmp.162)
        (set! tmp.315 r12)
        (set! r12 (+ r12 16))
        (set! tmp.349 (+ tmp.315 2))
        (set! tmp.163 tmp.349)
        (mset! tmp.163 -2 L.>=.62.24)
        (mset! tmp.163 6 16)
        (set! >=.62 tmp.163)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.164 tmp.350)
        (mset! tmp.164 -2 L.>.61.25)
        (mset! tmp.164 6 16)
        (set! >.61 tmp.164)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.165 tmp.351)
        (mset! tmp.165 -2 L.<=.60.26)
        (mset! tmp.165 6 16)
        (set! <=.60 tmp.165)
        (set! tmp.318 r12)
        (set! r12 (+ r12 16))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.166 tmp.352)
        (mset! tmp.166 -2 L.<.59.27)
        (mset! tmp.166 6 16)
        (set! <.59 tmp.166)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.167 tmp.353)
        (mset! tmp.167 -2 L.-.58.28)
        (mset! tmp.167 6 16)
        (set! |-.58| tmp.167)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.168 tmp.354)
        (mset! tmp.168 -2 L.+.57.29)
        (mset! tmp.168 6 16)
        (set! |+.57| tmp.168)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.169 tmp.355)
        (mset! tmp.169 -2 L.*.56.30)
        (mset! tmp.169 6 16)
        (set! *.56 tmp.169)
        (mset! vector-init-loop.84 14 vector-init-loop.84)
        (mset! make-init-vector.1 14 vector-init-loop.84)
        (mset! vector-ref.66 14 unsafe-vector-ref.3)
        (mset! vector-set!.65 14 unsafe-vector-set!.2)
        (mset! make-vector.63 14 make-init-vector.1)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.170 tmp.356)
        (mset! tmp.170 -2 L.sum.4.31)
        (mset! tmp.170 6 64)
        (set! sum.4 tmp.170)
        (mset! sum.4 14 |+.57|)
        (set! x.15 80)
        (set! tmp.135 eq?.81)
        (set! rbp (+ rbp 40))
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi eq?.81)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5)))
        (set! rbp (- rbp 40))
        (set! tmp.324 rax)
        (if (neq? tmp.324 6)
          (begin
            (set! tmp.136 sum.4)
            (set! rbp (+ rbp 40))
            (return-point L.rp.106
              (begin
                (set! nfv.359 64)
                (set! nfv.358 56)
                (set! nfv.357 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi sum.4)
                (set! r15 L.rp.106)
                (jump L.sum.4.31)))
            (set! rbp (- rbp 40))
            (set! j.16 rax)
            (set! rax j.16)
            (jump ra.325))
          (begin
            (set! x.17 40)
            (set! tmp.137 sum.4)
            (set! fv2 x.17)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi sum.4)
            (set! r15 ra.325)
            (jump L.sum.4.31)))))
    (define L.sum.4.31
      ((assignment
        ((ra.360 fv3)
         (|+.57| fv0)
         (h.12 fv1)
         (g.11 fv4)
         (i.13 fv2)
         (a.5 r15)
         (c.126 r14)
         (b.6 r13)
         (c.7 rdi)
         (d.8 r8)
         (e.9 r9)
         (f.10 r9)
         (tmp.132 r14)
         (tmp.133 r15)
         (j.14 r15)
         (tmp.134 r14))))
      (begin
        (set! ra.360 r15)
        (set! c.126 rdi)
        (set! a.5 rsi)
        (set! b.6 rdx)
        (set! c.7 rcx)
        (set! d.8 r8)
        (set! e.9 r9)
        (set! f.10 fv0)
        (set! g.11 fv1)
        (set! h.12 fv2)
        (set! |+.57| (mref c.126 14))
        (set! tmp.132 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.107
          (begin
            (set! rdx b.6)
            (set! rsi a.5)
            (set! rdi |+.57|)
            (set! r15 L.rp.107)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! i.13 rax)
        (set! tmp.133 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.108
          (begin
            (set! rdx h.12)
            (set! rsi g.11)
            (set! rdi |+.57|)
            (set! r15 L.rp.108)
            (jump L.+.57.29)))
        (set! rbp (- rbp 40))
        (set! j.14 rax)
        (set! tmp.134 |+.57|)
        (set! rdx j.14)
        (set! rsi i.13)
        (set! rdi |+.57|)
        (set! r15 ra.360)
        (jump L.+.57.29)))
    (define L.*.56.30
      ((assignment
        ((ra.361 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.177 r9)
         (c.125 r14)
         (tmp.362 r9))))
      (begin
        (set! ra.361 r15)
        (set! c.125 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.362 (bitwise-and tmp.19 7))
        (set! tmp.177 tmp.362)
        (if (eq? tmp.177 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.361)
            (jump L.jp.35))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.361)
            (jump L.jp.35)))))
    (define L.+.57.29
      ((assignment
        ((ra.363 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.183 r9)
         (c.124 r14)
         (tmp.364 r9))))
      (begin
        (set! ra.363 r15)
        (set! c.124 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.364 (bitwise-and tmp.21 7))
        (set! tmp.183 tmp.364)
        (if (eq? tmp.183 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.363)
            (jump L.jp.39))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.363)
            (jump L.jp.39)))))
    (define L.-.58.28
      ((assignment
        ((ra.365 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.189 r9)
         (c.123 r14)
         (tmp.366 r9))))
      (begin
        (set! ra.365 r15)
        (set! c.123 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.366 (bitwise-and tmp.23 7))
        (set! tmp.189 tmp.366)
        (if (eq? tmp.189 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.365)
            (jump L.jp.43))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.365)
            (jump L.jp.43)))))
    (define L.<.59.27
      ((assignment
        ((ra.367 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.196 r9)
         (c.122 r14)
         (tmp.368 r9))))
      (begin
        (set! ra.367 r15)
        (set! c.122 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.368 (bitwise-and tmp.25 7))
        (set! tmp.196 tmp.368)
        (if (eq? tmp.196 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.367)
            (jump L.jp.48))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.367)
            (jump L.jp.48)))))
    (define L.<=.60.26
      ((assignment
        ((ra.369 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.203 r9)
         (c.121 r14)
         (tmp.370 r9))))
      (begin
        (set! ra.369 r15)
        (set! c.121 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.370 (bitwise-and tmp.27 7))
        (set! tmp.203 tmp.370)
        (if (eq? tmp.203 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.369)
            (jump L.jp.53))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.369)
            (jump L.jp.53)))))
    (define L.>.61.25
      ((assignment
        ((ra.371 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.210 r9)
         (c.120 r14)
         (tmp.372 r9))))
      (begin
        (set! ra.371 r15)
        (set! c.120 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.372 (bitwise-and tmp.29 7))
        (set! tmp.210 tmp.372)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.371)
            (jump L.jp.58))
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.371)
            (jump L.jp.58)))))
    (define L.>=.62.24
      ((assignment
        ((ra.373 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.217 r9)
         (c.119 r14)
         (tmp.374 r9))))
      (begin
        (set! ra.373 r15)
        (set! c.119 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.374 (bitwise-and tmp.31 7))
        (set! tmp.217 tmp.374)
        (if (eq? tmp.217 0)
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.373)
            (jump L.jp.63))
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.373)
            (jump L.jp.63)))))
    (define L.make-vector.63.23
      ((assignment
        ((ra.375 r15)
         (tmp.32 r14)
         (make-init-vector.1 r13)
         (tmp.220 r9)
         (c.118 r13)
         (tmp.376 r9))))
      (begin
        (set! ra.375 r15)
        (set! c.118 rdi)
        (set! tmp.32 rsi)
        (set! make-init-vector.1 (mref c.118 14))
        (set! tmp.376 (bitwise-and tmp.32 7))
        (set! tmp.220 tmp.376)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.375)
            (jump L.jp.65))
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.375)
            (jump L.jp.65)))))
    (define L.vector-length.64.22
      ((assignment
        ((ra.377 r15) (tmp.33 r14) (tmp.223 r13) (c.117 r14) (tmp.378 r13))))
      (begin
        (set! ra.377 r15)
        (set! c.117 rdi)
        (set! tmp.33 rsi)
        (set! tmp.378 (bitwise-and tmp.33 7))
        (set! tmp.223 tmp.378)
        (if (eq? tmp.223 3)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.377)
            (jump L.jp.67))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.377)
            (jump L.jp.67)))))
    (define L.vector-set!.65.21
      ((assignment
        ((ra.379 r15)
         (tmp.34 r14)
         (tmp.35 r13)
         (tmp.36 r9)
         (unsafe-vector-set!.2 rdi)
         (c.116 r8)
         (tmp.229 r8)
         (tmp.380 r8))))
      (begin
        (set! ra.379 r15)
        (set! c.116 rdi)
        (set! tmp.34 rsi)
        (set! tmp.35 rdx)
        (set! tmp.36 rcx)
        (set! unsafe-vector-set!.2 (mref c.116 14))
        (set! tmp.380 (bitwise-and tmp.35 7))
        (set! tmp.229 tmp.380)
        (if (eq? tmp.229 0)
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.379)
            (jump L.jp.71))
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.379)
            (jump L.jp.71)))))
    (define L.vector-ref.66.20
      ((assignment
        ((ra.381 r15)
         (tmp.37 r14)
         (tmp.38 r13)
         (unsafe-vector-ref.3 r9)
         (c.115 r9)
         (tmp.235 r8)
         (tmp.382 r8))))
      (begin
        (set! ra.381 r15)
        (set! c.115 rdi)
        (set! tmp.37 rsi)
        (set! tmp.38 rdx)
        (set! unsafe-vector-ref.3 (mref c.115 14))
        (set! tmp.382 (bitwise-and tmp.38 7))
        (set! tmp.235 tmp.382)
        (if (eq? tmp.235 0)
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.381)
            (jump L.jp.75))
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.381)
            (jump L.jp.75)))))
    (define L.car.67.19
      ((assignment
        ((ra.383 r15) (tmp.39 r14) (tmp.238 r13) (c.114 r14) (tmp.384 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.114 rdi)
        (set! tmp.39 rsi)
        (set! tmp.384 (bitwise-and tmp.39 7))
        (set! tmp.238 tmp.384)
        (if (eq? tmp.238 1)
          (begin
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.383)
            (jump L.jp.77))
          (begin
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.383)
            (jump L.jp.77)))))
    (define L.cdr.68.18
      ((assignment
        ((ra.385 r15) (tmp.40 r14) (tmp.241 r13) (c.113 r14) (tmp.386 r13))))
      (begin
        (set! ra.385 r15)
        (set! c.113 rdi)
        (set! tmp.40 rsi)
        (set! tmp.386 (bitwise-and tmp.40 7))
        (set! tmp.241 tmp.386)
        (if (eq? tmp.241 1)
          (begin
            (set! rsi tmp.40)
            (set! rdi 14)
            (set! r15 ra.385)
            (jump L.jp.79))
          (begin
            (set! rsi tmp.40)
            (set! rdi 6)
            (set! r15 ra.385)
            (jump L.jp.79)))))
    (define L.procedure-arity.69.17
      ((assignment
        ((ra.387 r15) (tmp.41 r14) (tmp.244 r13) (c.112 r14) (tmp.388 r13))))
      (begin
        (set! ra.387 r15)
        (set! c.112 rdi)
        (set! tmp.41 rsi)
        (set! tmp.388 (bitwise-and tmp.41 7))
        (set! tmp.244 tmp.388)
        (if (eq? tmp.244 2)
          (begin
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.81))
          (begin
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.81)))))
    (define L.fixnum?.70.16
      ((assignment
        ((ra.389 r15) (c.111 r14) (tmp.246 r14) (tmp.42 r14) (tmp.390 r14))))
      (begin
        (set! ra.389 r15)
        (set! c.111 rdi)
        (set! tmp.42 rsi)
        (set! tmp.390 (bitwise-and tmp.42 7))
        (set! tmp.246 tmp.390)
        (if (eq? tmp.246 0)
          (begin (set! rax 14) (jump ra.389))
          (begin (set! rax 6) (jump ra.389)))))
    (define L.boolean?.71.15
      ((assignment
        ((ra.391 r15) (c.110 r14) (tmp.248 r14) (tmp.43 r14) (tmp.392 r14))))
      (begin
        (set! ra.391 r15)
        (set! c.110 rdi)
        (set! tmp.43 rsi)
        (set! tmp.392 (bitwise-and tmp.43 247))
        (set! tmp.248 tmp.392)
        (if (eq? tmp.248 6)
          (begin (set! rax 14) (jump ra.391))
          (begin (set! rax 6) (jump ra.391)))))
    (define L.empty?.72.14
      ((assignment
        ((ra.393 r15) (c.109 r14) (tmp.250 r14) (tmp.44 r14) (tmp.394 r14))))
      (begin
        (set! ra.393 r15)
        (set! c.109 rdi)
        (set! tmp.44 rsi)
        (set! tmp.394 (bitwise-and tmp.44 255))
        (set! tmp.250 tmp.394)
        (if (eq? tmp.250 22)
          (begin (set! rax 14) (jump ra.393))
          (begin (set! rax 6) (jump ra.393)))))
    (define L.void?.73.13
      ((assignment
        ((ra.395 r15) (c.108 r14) (tmp.252 r14) (tmp.45 r14) (tmp.396 r14))))
      (begin
        (set! ra.395 r15)
        (set! c.108 rdi)
        (set! tmp.45 rsi)
        (set! tmp.396 (bitwise-and tmp.45 255))
        (set! tmp.252 tmp.396)
        (if (eq? tmp.252 30)
          (begin (set! rax 14) (jump ra.395))
          (begin (set! rax 6) (jump ra.395)))))
    (define L.ascii-char?.74.12
      ((assignment
        ((ra.397 r15) (c.107 r14) (tmp.254 r14) (tmp.46 r14) (tmp.398 r14))))
      (begin
        (set! ra.397 r15)
        (set! c.107 rdi)
        (set! tmp.46 rsi)
        (set! tmp.398 (bitwise-and tmp.46 255))
        (set! tmp.254 tmp.398)
        (if (eq? tmp.254 46)
          (begin (set! rax 14) (jump ra.397))
          (begin (set! rax 6) (jump ra.397)))))
    (define L.error?.75.11
      ((assignment
        ((ra.399 r15) (c.106 r14) (tmp.256 r14) (tmp.47 r14) (tmp.400 r14))))
      (begin
        (set! ra.399 r15)
        (set! c.106 rdi)
        (set! tmp.47 rsi)
        (set! tmp.400 (bitwise-and tmp.47 255))
        (set! tmp.256 tmp.400)
        (if (eq? tmp.256 62)
          (begin (set! rax 14) (jump ra.399))
          (begin (set! rax 6) (jump ra.399)))))
    (define L.pair?.76.10
      ((assignment
        ((ra.401 r15) (c.105 r14) (tmp.258 r14) (tmp.48 r14) (tmp.402 r14))))
      (begin
        (set! ra.401 r15)
        (set! c.105 rdi)
        (set! tmp.48 rsi)
        (set! tmp.402 (bitwise-and tmp.48 7))
        (set! tmp.258 tmp.402)
        (if (eq? tmp.258 1)
          (begin (set! rax 14) (jump ra.401))
          (begin (set! rax 6) (jump ra.401)))))
    (define L.procedure?.77.9
      ((assignment
        ((ra.403 r15) (c.104 r14) (tmp.260 r14) (tmp.49 r14) (tmp.404 r14))))
      (begin
        (set! ra.403 r15)
        (set! c.104 rdi)
        (set! tmp.49 rsi)
        (set! tmp.404 (bitwise-and tmp.49 7))
        (set! tmp.260 tmp.404)
        (if (eq? tmp.260 2)
          (begin (set! rax 14) (jump ra.403))
          (begin (set! rax 6) (jump ra.403)))))
    (define L.vector?.78.8
      ((assignment
        ((ra.405 r15) (c.103 r14) (tmp.262 r14) (tmp.50 r14) (tmp.406 r14))))
      (begin
        (set! ra.405 r15)
        (set! c.103 rdi)
        (set! tmp.50 rsi)
        (set! tmp.406 (bitwise-and tmp.50 7))
        (set! tmp.262 tmp.406)
        (if (eq? tmp.262 3)
          (begin (set! rax 14) (jump ra.405))
          (begin (set! rax 6) (jump ra.405)))))
    (define L.not.79.7
      ((assignment ((ra.407 r15) (c.102 r14) (tmp.51 r14))))
      (begin
        (set! ra.407 r15)
        (set! c.102 rdi)
        (set! tmp.51 rsi)
        (if (neq? tmp.51 6)
          (begin (set! rax 6) (jump ra.407))
          (begin (set! rax 14) (jump ra.407)))))
    (define L.cons.80.6
      ((assignment
        ((ra.408 r15)
         (tmp.52 r14)
         (tmp.53 r13)
         (c.101 r14)
         (tmp.264 r9)
         (tmp.409 r9)
         (tmp.138 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.101 rdi)
        (set! tmp.52 rsi)
        (set! tmp.53 rdx)
        (set! tmp.264 r12)
        (set! r12 (+ r12 16))
        (set! tmp.409 (+ tmp.264 1))
        (set! tmp.138 tmp.409)
        (mset! tmp.138 -1 tmp.52)
        (mset! tmp.138 7 tmp.53)
        (set! rax tmp.138)
        (jump ra.408)))
    (define L.eq?.81.5
      ((assignment ((ra.410 r15) (tmp.54 r14) (c.100 r14) (tmp.55 r13))))
      (begin
        (set! ra.410 r15)
        (set! c.100 rdi)
        (set! tmp.54 rsi)
        (set! tmp.55 rdx)
        (if (eq? tmp.54 tmp.55)
          (begin (set! rax 14) (jump ra.410))
          (begin (set! rax 6) (jump ra.410)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.411 r15)
         (tmp.82 r14)
         (vector-init-loop.84 r13)
         (tmp.266 r9)
         (tmp.413 r8)
         (tmp.503 r9)
         (tmp.269 r8)
         (c.99 r13)
         (tmp.412 r9)
         (tmp.414 r9)
         (tmp.267 r9)
         (tmp.415 r9)
         (tmp.268 r9)
         (tmp.83 r9)
         (tmp.416 r9)
         (tmp.139 r9)
         (tmp.128 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.99 rdi)
        (set! tmp.82 rsi)
        (set! vector-init-loop.84 (mref c.99 14))
        (set! tmp.412 (arithmetic-shift-right tmp.82 3))
        (set! tmp.266 tmp.412)
        (set! tmp.413 1)
        (set! tmp.414 (+ tmp.413 tmp.266))
        (set! tmp.267 tmp.414)
        (set! tmp.415 (* tmp.267 8))
        (set! tmp.268 tmp.415)
        (set! tmp.503 tmp.268)
        (set! tmp.269 r12)
        (set! r12 (+ r12 tmp.503))
        (set! tmp.416 (+ tmp.269 3))
        (set! tmp.139 tmp.416)
        (mset! tmp.139 -3 tmp.82)
        (set! tmp.83 tmp.139)
        (set! tmp.128 vector-init-loop.84)
        (set! rcx tmp.83)
        (set! rdx 0)
        (set! rsi tmp.82)
        (set! rdi vector-init-loop.84)
        (set! r15 ra.411)
        (jump L.vector-init-loop.84.3)))
    (define L.vector-init-loop.84.3
      ((assignment
        ((ra.417 r15)
         (len.85 r14)
         (i.87 r13)
         (c.98 r9)
         (vec.86 r8)
         (vector-init-loop.84 r9))))
      (begin
        (set! ra.417 r15)
        (set! c.98 rdi)
        (set! len.85 rsi)
        (set! i.87 rdx)
        (set! vec.86 rcx)
        (set! vector-init-loop.84 (mref c.98 14))
        (if (eq? len.85 i.87)
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 14)
            (set! r15 ra.417)
            (jump L.jp.94))
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 6)
            (set! r15 ra.417)
            (jump L.jp.94)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.418 r15)
         (tmp.93 r14)
         (tmp.94 r13)
         (tmp.95 r9)
         (tmp.283 r8)
         (c.97 r14))))
      (begin
        (set! ra.418 r15)
        (set! c.97 rdi)
        (set! tmp.93 rsi)
        (set! tmp.94 rdx)
        (set! tmp.95 rcx)
        (set! tmp.283 (mref tmp.93 -3))
        (if (< tmp.94 tmp.283)
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.98))
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.98)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.419 r15) (tmp.90 r14) (tmp.91 r13) (tmp.291 r9) (c.96 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.96 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.291 (mref tmp.90 -3))
        (if (< tmp.91 tmp.291)
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 14)
            (set! r15 ra.419)
            (jump L.jp.102))
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 6)
            (set! r15 ra.419)
            (jump L.jp.102)))))
    (define L.jp.102
      ((assignment ((ra.420 r15) (tmp.285 r14) (tmp.91 r13) (tmp.90 r9))))
      (begin
        (set! ra.420 r15)
        (set! tmp.285 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.285 6)
          (if (>= tmp.91 0)
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 14)
              (set! r15 ra.420)
              (jump L.jp.101))
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 6)
              (set! r15 ra.420)
              (jump L.jp.101)))
          (begin (set! rax 2622) (jump ra.420)))))
    (define L.jp.101
      ((assignment
        ((ra.421 r15)
         (tmp.90 r14)
         (tmp.287 r13)
         (tmp.91 r9)
         (tmp.422 r13)
         (tmp.288 r13)
         (tmp.423 r13)
         (tmp.289 r13)
         (tmp.424 r13)
         (tmp.290 r13))))
      (begin
        (set! ra.421 r15)
        (set! tmp.287 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.287 6)
          (begin
            (set! tmp.422 (arithmetic-shift-right tmp.91 3))
            (set! tmp.288 tmp.422)
            (set! tmp.423 (* tmp.288 8))
            (set! tmp.289 tmp.423)
            (set! tmp.424 (+ tmp.289 5))
            (set! tmp.290 tmp.424)
            (set! rax (mref tmp.90 tmp.290))
            (jump ra.421))
          (begin (set! rax 2622) (jump ra.421)))))
    (define L.jp.98
      ((assignment
        ((ra.425 r15) (tmp.277 r14) (tmp.94 r13) (tmp.95 r9) (tmp.93 r8))))
      (begin
        (set! ra.425 r15)
        (set! tmp.277 rdi)
        (set! tmp.94 rsi)
        (set! tmp.95 rdx)
        (set! tmp.93 rcx)
        (if (neq? tmp.277 6)
          (if (>= tmp.94 0)
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 14)
              (set! r15 ra.425)
              (jump L.jp.97))
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 6)
              (set! r15 ra.425)
              (jump L.jp.97)))
          (begin (set! rax 2366) (jump ra.425)))))
    (define L.jp.97
      ((assignment
        ((ra.426 r15)
         (tmp.93 r14)
         (tmp.95 r13)
         (tmp.279 r9)
         (tmp.94 r8)
         (tmp.427 r9)
         (tmp.280 r9)
         (tmp.428 r9)
         (tmp.281 r9)
         (tmp.429 r9)
         (tmp.282 r9))))
      (begin
        (set! ra.426 r15)
        (set! tmp.279 rdi)
        (set! tmp.94 rsi)
        (set! tmp.93 rdx)
        (set! tmp.95 rcx)
        (if (neq? tmp.279 6)
          (begin
            (set! tmp.427 (arithmetic-shift-right tmp.94 3))
            (set! tmp.280 tmp.427)
            (set! tmp.428 (* tmp.280 8))
            (set! tmp.281 tmp.428)
            (set! tmp.429 (+ tmp.281 5))
            (set! tmp.282 tmp.429)
            (mset! tmp.93 tmp.282 tmp.95)
            (set! rax 30)
            (jump ra.426))
          (begin (set! rax 2366) (jump ra.426)))))
    (define L.jp.94
      ((assignment
        ((ra.430 r15)
         (len.85 r14)
         (vector-init-loop.84 r13)
         (i.87 r9)
         (vec.86 r8)
         (tmp.271 rdi)
         (tmp.275 r9)
         (tmp.274 rdi)
         (tmp.433 rdi)
         (tmp.273 rdi)
         (tmp.432 rdi)
         (tmp.272 rdi)
         (tmp.431 rdi)
         (tmp.434 r9)
         (tmp.127 r13))))
      (begin
        (set! ra.430 r15)
        (set! tmp.271 rdi)
        (set! i.87 rsi)
        (set! len.85 rdx)
        (set! vector-init-loop.84 rcx)
        (set! vec.86 r8)
        (if (neq? tmp.271 6)
          (begin (set! rax vec.86) (jump ra.430))
          (begin
            (set! tmp.431 (arithmetic-shift-right i.87 3))
            (set! tmp.272 tmp.431)
            (set! tmp.432 (* tmp.272 8))
            (set! tmp.273 tmp.432)
            (set! tmp.433 (+ tmp.273 5))
            (set! tmp.274 tmp.433)
            (mset! vec.86 tmp.274 0)
            (set! tmp.127 vector-init-loop.84)
            (set! tmp.434 (+ i.87 8))
            (set! tmp.275 tmp.434)
            (set! rcx vec.86)
            (set! rdx tmp.275)
            (set! rsi len.85)
            (set! rdi vector-init-loop.84)
            (set! r15 ra.430)
            (jump L.vector-init-loop.84.3)))))
    (define L.jp.81
      ((assignment ((ra.435 r15) (tmp.243 r14) (tmp.41 r13))))
      (begin
        (set! ra.435 r15)
        (set! tmp.243 rdi)
        (set! tmp.41 rsi)
        (if (neq? tmp.243 6)
          (begin (set! rax (mref tmp.41 6)) (jump ra.435))
          (begin (set! rax 3390) (jump ra.435)))))
    (define L.jp.79
      ((assignment ((ra.436 r15) (tmp.240 r14) (tmp.40 r13))))
      (begin
        (set! ra.436 r15)
        (set! tmp.240 rdi)
        (set! tmp.40 rsi)
        (if (neq? tmp.240 6)
          (begin (set! rax (mref tmp.40 7)) (jump ra.436))
          (begin (set! rax 3134) (jump ra.436)))))
    (define L.jp.77
      ((assignment ((ra.437 r15) (tmp.237 r14) (tmp.39 r13))))
      (begin
        (set! ra.437 r15)
        (set! tmp.237 rdi)
        (set! tmp.39 rsi)
        (if (neq? tmp.237 6)
          (begin (set! rax (mref tmp.39 -1)) (jump ra.437))
          (begin (set! rax 2878) (jump ra.437)))))
    (define L.jp.75
      ((assignment
        ((ra.438 r15)
         (tmp.37 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.38 r9)
         (tmp.231 r8)
         (tmp.234 r8)
         (tmp.439 r8))))
      (begin
        (set! ra.438 r15)
        (set! tmp.231 rdi)
        (set! tmp.37 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.38 rcx)
        (if (neq? tmp.231 6)
          (begin
            (set! tmp.439 (bitwise-and tmp.37 7))
            (set! tmp.234 tmp.439)
            (if (eq? tmp.234 3)
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.438)
                (jump L.jp.74))
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.438)
                (jump L.jp.74))))
          (begin (set! rax 2622) (jump ra.438)))))
    (define L.jp.74
      ((assignment
        ((ra.440 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.233 r13)
         (tmp.38 r9)
         (tmp.37 r8)
         (tmp.129 r14))))
      (begin
        (set! ra.440 r15)
        (set! tmp.233 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.38 rdx)
        (set! tmp.37 rcx)
        (if (neq? tmp.233 6)
          (begin
            (set! tmp.129 unsafe-vector-ref.3)
            (set! rdx tmp.38)
            (set! rsi tmp.37)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.440)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump ra.440)))))
    (define L.jp.71
      ((assignment
        ((ra.441 r15)
         (tmp.34 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.36 r9)
         (tmp.225 rdi)
         (tmp.35 rsi)
         (tmp.228 r8)
         (tmp.442 r8))))
      (begin
        (set! ra.441 r15)
        (set! tmp.225 rdi)
        (set! tmp.34 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.36 rcx)
        (set! tmp.35 r8)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.442 (bitwise-and tmp.34 7))
            (set! tmp.228 tmp.442)
            (if (eq? tmp.228 3)
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.441)
                (jump L.jp.70))
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.441)
                (jump L.jp.70))))
          (begin (set! rax 2366) (jump ra.441)))))
    (define L.jp.70
      ((assignment
        ((ra.443 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.227 r13)
         (tmp.36 r9)
         (tmp.35 rdi)
         (tmp.34 r8)
         (tmp.130 r14))))
      (begin
        (set! ra.443 r15)
        (set! tmp.227 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.36 rdx)
        (set! tmp.35 rcx)
        (set! tmp.34 r8)
        (if (neq? tmp.227 6)
          (begin
            (set! tmp.130 unsafe-vector-set!.2)
            (set! rcx tmp.36)
            (set! rdx tmp.35)
            (set! rsi tmp.34)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.443)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump ra.443)))))
    (define L.jp.67
      ((assignment ((ra.444 r15) (tmp.222 r14) (tmp.33 r13))))
      (begin
        (set! ra.444 r15)
        (set! tmp.222 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.222 6)
          (begin (set! rax (mref tmp.33 -3)) (jump ra.444))
          (begin (set! rax 2110) (jump ra.444)))))
    (define L.jp.65
      ((assignment
        ((ra.445 r15)
         (make-init-vector.1 r14)
         (tmp.219 r13)
         (tmp.32 r9)
         (tmp.131 r14))))
      (begin
        (set! ra.445 r15)
        (set! tmp.219 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.32 rdx)
        (if (neq? tmp.219 6)
          (begin
            (set! tmp.131 make-init-vector.1)
            (set! rsi tmp.32)
            (set! rdi make-init-vector.1)
            (set! r15 ra.445)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump ra.445)))))
    (define L.jp.63
      ((assignment
        ((ra.446 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.212 r9)
         (tmp.216 r9)
         (tmp.447 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.212 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.447 (bitwise-and tmp.30 7))
            (set! tmp.216 tmp.447)
            (if (eq? tmp.216 0)
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 14)
                (set! r15 ra.446)
                (jump L.jp.62))
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 6)
                (set! r15 ra.446)
                (jump L.jp.62))))
          (begin (set! rax 1598) (jump ra.446)))))
    (define L.jp.62
      ((assignment ((ra.448 r15) (tmp.214 r14) (tmp.30 r13) (tmp.31 r9))))
      (begin
        (set! ra.448 r15)
        (set! tmp.214 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.214 6)
          (if (>= tmp.30 tmp.31)
            (begin (set! rax 14) (jump ra.448))
            (begin (set! rax 6) (jump ra.448)))
          (begin (set! rax 1598) (jump ra.448)))))
    (define L.jp.58
      ((assignment
        ((ra.449 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.205 r9)
         (tmp.209 r9)
         (tmp.450 r9))))
      (begin
        (set! ra.449 r15)
        (set! tmp.205 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.450 (bitwise-and tmp.28 7))
            (set! tmp.209 tmp.450)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 14)
                (set! r15 ra.449)
                (jump L.jp.57))
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 6)
                (set! r15 ra.449)
                (jump L.jp.57))))
          (begin (set! rax 1342) (jump ra.449)))))
    (define L.jp.57
      ((assignment ((ra.451 r15) (tmp.207 r14) (tmp.28 r13) (tmp.29 r9))))
      (begin
        (set! ra.451 r15)
        (set! tmp.207 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.207 6)
          (if (> tmp.28 tmp.29)
            (begin (set! rax 14) (jump ra.451))
            (begin (set! rax 6) (jump ra.451)))
          (begin (set! rax 1342) (jump ra.451)))))
    (define L.jp.53
      ((assignment
        ((ra.452 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.198 r9)
         (tmp.202 r9)
         (tmp.453 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.198 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.453 (bitwise-and tmp.26 7))
            (set! tmp.202 tmp.453)
            (if (eq? tmp.202 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.452)
                (jump L.jp.52))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.452)
                (jump L.jp.52))))
          (begin (set! rax 1086) (jump ra.452)))))
    (define L.jp.52
      ((assignment ((ra.454 r15) (tmp.200 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.454 r15)
        (set! tmp.200 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.200 6)
          (if (<= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.454))
            (begin (set! rax 6) (jump ra.454)))
          (begin (set! rax 1086) (jump ra.454)))))
    (define L.jp.48
      ((assignment
        ((ra.455 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.191 r9)
         (tmp.195 r9)
         (tmp.456 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.191 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.191 6)
          (begin
            (set! tmp.456 (bitwise-and tmp.24 7))
            (set! tmp.195 tmp.456)
            (if (eq? tmp.195 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.455)
                (jump L.jp.47))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.455)
                (jump L.jp.47))))
          (begin (set! rax 830) (jump ra.455)))))
    (define L.jp.47
      ((assignment ((ra.457 r15) (tmp.193 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.457 r15)
        (set! tmp.193 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.193 6)
          (if (< tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.457))
            (begin (set! rax 6) (jump ra.457)))
          (begin (set! rax 830) (jump ra.457)))))
    (define L.jp.43
      ((assignment
        ((ra.458 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.185 r9)
         (tmp.188 r9)
         (tmp.459 r9))))
      (begin
        (set! ra.458 r15)
        (set! tmp.185 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.459 (bitwise-and tmp.22 7))
            (set! tmp.188 tmp.459)
            (if (eq? tmp.188 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.458)
                (jump L.jp.42))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.458)
                (jump L.jp.42))))
          (begin (set! rax 574) (jump ra.458)))))
    (define L.jp.42
      ((assignment
        ((ra.460 r15) (tmp.187 r14) (tmp.22 r13) (tmp.23 r9) (tmp.461 r14))))
      (begin
        (set! ra.460 r15)
        (set! tmp.187 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.461 (- tmp.22 tmp.23))
            (set! rax tmp.461)
            (jump ra.460))
          (begin (set! rax 574) (jump ra.460)))))
    (define L.jp.39
      ((assignment
        ((ra.462 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.179 r9)
         (tmp.182 r9)
         (tmp.463 r9))))
      (begin
        (set! ra.462 r15)
        (set! tmp.179 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.179 6)
          (begin
            (set! tmp.463 (bitwise-and tmp.20 7))
            (set! tmp.182 tmp.463)
            (if (eq? tmp.182 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.462)
                (jump L.jp.38))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.462)
                (jump L.jp.38))))
          (begin (set! rax 318) (jump ra.462)))))
    (define L.jp.38
      ((assignment
        ((ra.464 r15) (tmp.181 r14) (tmp.20 r13) (tmp.21 r9) (tmp.465 r14))))
      (begin
        (set! ra.464 r15)
        (set! tmp.181 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.181 6)
          (begin
            (set! tmp.465 (+ tmp.20 tmp.21))
            (set! rax tmp.465)
            (jump ra.464))
          (begin (set! rax 318) (jump ra.464)))))
    (define L.jp.35
      ((assignment
        ((ra.466 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.172 r9)
         (tmp.176 r9)
         (tmp.467 r9))))
      (begin
        (set! ra.466 r15)
        (set! tmp.172 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.172 6)
          (begin
            (set! tmp.467 (bitwise-and tmp.18 7))
            (set! tmp.176 tmp.467)
            (if (eq? tmp.176 0)
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 14)
                (set! r15 ra.466)
                (jump L.jp.34))
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 6)
                (set! r15 ra.466)
                (jump L.jp.34))))
          (begin (set! rax 62) (jump ra.466)))))
    (define L.jp.34
      ((assignment
        ((ra.468 r15)
         (tmp.18 r14)
         (tmp.174 r13)
         (tmp.19 r9)
         (tmp.469 r13)
         (tmp.175 r13)
         (tmp.470 r14))))
      (begin
        (set! ra.468 r15)
        (set! tmp.174 rdi)
        (set! tmp.19 rsi)
        (set! tmp.18 rdx)
        (if (neq? tmp.174 6)
          (begin
            (set! tmp.469 (arithmetic-shift-right tmp.19 3))
            (set! tmp.175 tmp.469)
            (set! tmp.470 (* tmp.18 tmp.175))
            (set! rax tmp.470)
            (jump ra.468))
          (begin (set! rax 62) (jump ra.468))))))
     ) 15))



(parameterize ([current-pass-list
                  (list
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ((assignment
        ((ra.325 fv3)
         (sum.4 fv4)
         (nfv.357 fv5)
         (nfv.358 fv6)
         (nfv.359 fv7)
         (unsafe-vector-ref.3 r15)
         (unsafe-vector-set!.2 r14)
         (eq?.81 r13)
         (vector-init-loop.84 r9)
         (make-init-vector.1 r8)
         (vector-ref.66 rdi)
         (vector-set!.65 rsi)
         (make-vector.63 rdx)
         (|+.57| rcx)
         (tmp.321 rbx)
         (tmp.355 rbx)
         (tmp.169 rbx)
         (*.56 rbx)
         (tmp.315 rcx)
         (tmp.349 rcx)
         (tmp.163 rcx)
         (>=.62 rcx)
         (tmp.316 rcx)
         (tmp.350 rcx)
         (tmp.164 rcx)
         (>.61 rcx)
         (tmp.317 rcx)
         (tmp.351 rcx)
         (tmp.165 rcx)
         (<=.60 rcx)
         (tmp.318 rcx)
         (tmp.352 rcx)
         (tmp.166 rcx)
         (<.59 rcx)
         (tmp.319 rcx)
         (tmp.353 rcx)
         (tmp.167 rcx)
         (|-.58| rcx)
         (tmp.320 rcx)
         (tmp.354 rcx)
         (tmp.168 rcx)
         (tmp.313 rdx)
         (tmp.347 rdx)
         (tmp.161 rdx)
         (vector-length.64 rdx)
         (tmp.314 rdx)
         (tmp.348 rdx)
         (tmp.162 rdx)
         (tmp.312 rsi)
         (tmp.346 rsi)
         (tmp.160 rsi)
         (tmp.297 rdi)
         (tmp.331 rdi)
         (tmp.145 rdi)
         (cons.80 rdi)
         (tmp.298 rdi)
         (tmp.332 rdi)
         (tmp.146 rdi)
         (not.79 rdi)
         (tmp.299 rdi)
         (tmp.333 rdi)
         (tmp.147 rdi)
         (vector?.78 rdi)
         (tmp.300 rdi)
         (tmp.334 rdi)
         (tmp.148 rdi)
         (procedure?.77 rdi)
         (tmp.301 rdi)
         (tmp.335 rdi)
         (tmp.149 rdi)
         (pair?.76 rdi)
         (tmp.302 rdi)
         (tmp.336 rdi)
         (tmp.150 rdi)
         (error?.75 rdi)
         (tmp.303 rdi)
         (tmp.337 rdi)
         (tmp.151 rdi)
         (ascii-char?.74 rdi)
         (tmp.304 rdi)
         (tmp.338 rdi)
         (tmp.152 rdi)
         (void?.73 rdi)
         (tmp.305 rdi)
         (tmp.339 rdi)
         (tmp.153 rdi)
         (empty?.72 rdi)
         (tmp.306 rdi)
         (tmp.340 rdi)
         (tmp.154 rdi)
         (boolean?.71 rdi)
         (tmp.307 rdi)
         (tmp.341 rdi)
         (tmp.155 rdi)
         (fixnum?.70 rdi)
         (tmp.308 rdi)
         (tmp.342 rdi)
         (tmp.156 rdi)
         (procedure-arity.69 rdi)
         (tmp.309 rdi)
         (tmp.343 rdi)
         (tmp.157 rdi)
         (cdr.68 rdi)
         (tmp.310 rdi)
         (tmp.344 rdi)
         (tmp.158 rdi)
         (car.67 rdi)
         (tmp.311 rdi)
         (tmp.345 rdi)
         (tmp.159 rdi)
         (tmp.296 r13)
         (tmp.330 r13)
         (tmp.144 r13)
         (tmp.295 r13)
         (tmp.329 r13)
         (tmp.143 r13)
         (tmp.294 r13)
         (tmp.328 r13)
         (tmp.142 r13)
         (tmp.322 r15)
         (x.17 r15)
         (tmp.293 r14)
         (tmp.327 r14)
         (tmp.141 r14)
         (tmp.356 r15)
         (tmp.170 r15)
         (x.15 r15)
         (tmp.137 r14)
         (tmp.324 r15)
         (tmp.292 r15)
         (tmp.326 r15)
         (tmp.140 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (j.16 r15))))
      (begin
        (set! ra.325 r15)
        (set! tmp.292 r12)
        (set! r12 (+ r12 16))
        (set! tmp.326 (+ tmp.292 2))
        (set! tmp.140 tmp.326)
        (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.140 6 16)
        (set! unsafe-vector-ref.3 tmp.140)
        (set! tmp.293 r12)
        (set! r12 (+ r12 16))
        (set! tmp.327 (+ tmp.293 2))
        (set! tmp.141 tmp.327)
        (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.141 6 24)
        (set! unsafe-vector-set!.2 tmp.141)
        (set! tmp.294 r12)
        (set! r12 (+ r12 24))
        (set! tmp.328 (+ tmp.294 2))
        (set! tmp.142 tmp.328)
        (mset! tmp.142 -2 L.vector-init-loop.84.3)
        (mset! tmp.142 6 24)
        (set! vector-init-loop.84 tmp.142)
        (set! tmp.295 r12)
        (set! r12 (+ r12 24))
        (set! tmp.329 (+ tmp.295 2))
        (set! tmp.143 tmp.329)
        (mset! tmp.143 -2 L.make-init-vector.1.4)
        (mset! tmp.143 6 8)
        (set! make-init-vector.1 tmp.143)
        (set! tmp.296 r12)
        (set! r12 (+ r12 16))
        (set! tmp.330 (+ tmp.296 2))
        (set! tmp.144 tmp.330)
        (mset! tmp.144 -2 L.eq?.81.5)
        (mset! tmp.144 6 16)
        (set! eq?.81 tmp.144)
        (set! tmp.297 r12)
        (set! r12 (+ r12 16))
        (set! tmp.331 (+ tmp.297 2))
        (set! tmp.145 tmp.331)
        (mset! tmp.145 -2 L.cons.80.6)
        (mset! tmp.145 6 16)
        (set! cons.80 tmp.145)
        (set! tmp.298 r12)
        (set! r12 (+ r12 16))
        (set! tmp.332 (+ tmp.298 2))
        (set! tmp.146 tmp.332)
        (mset! tmp.146 -2 L.not.79.7)
        (mset! tmp.146 6 8)
        (set! not.79 tmp.146)
        (set! tmp.299 r12)
        (set! r12 (+ r12 16))
        (set! tmp.333 (+ tmp.299 2))
        (set! tmp.147 tmp.333)
        (mset! tmp.147 -2 L.vector?.78.8)
        (mset! tmp.147 6 8)
        (set! vector?.78 tmp.147)
        (set! tmp.300 r12)
        (set! r12 (+ r12 16))
        (set! tmp.334 (+ tmp.300 2))
        (set! tmp.148 tmp.334)
        (mset! tmp.148 -2 L.procedure?.77.9)
        (mset! tmp.148 6 8)
        (set! procedure?.77 tmp.148)
        (set! tmp.301 r12)
        (set! r12 (+ r12 16))
        (set! tmp.335 (+ tmp.301 2))
        (set! tmp.149 tmp.335)
        (mset! tmp.149 -2 L.pair?.76.10)
        (mset! tmp.149 6 8)
        (set! pair?.76 tmp.149)
        (set! tmp.302 r12)
        (set! r12 (+ r12 16))
        (set! tmp.336 (+ tmp.302 2))
        (set! tmp.150 tmp.336)
        (mset! tmp.150 -2 L.error?.75.11)
        (mset! tmp.150 6 8)
        (set! error?.75 tmp.150)
        (set! tmp.303 r12)
        (set! r12 (+ r12 16))
        (set! tmp.337 (+ tmp.303 2))
        (set! tmp.151 tmp.337)
        (mset! tmp.151 -2 L.ascii-char?.74.12)
        (mset! tmp.151 6 8)
        (set! ascii-char?.74 tmp.151)
        (set! tmp.304 r12)
        (set! r12 (+ r12 16))
        (set! tmp.338 (+ tmp.304 2))
        (set! tmp.152 tmp.338)
        (mset! tmp.152 -2 L.void?.73.13)
        (mset! tmp.152 6 8)
        (set! void?.73 tmp.152)
        (set! tmp.305 r12)
        (set! r12 (+ r12 16))
        (set! tmp.339 (+ tmp.305 2))
        (set! tmp.153 tmp.339)
        (mset! tmp.153 -2 L.empty?.72.14)
        (mset! tmp.153 6 8)
        (set! empty?.72 tmp.153)
        (set! tmp.306 r12)
        (set! r12 (+ r12 16))
        (set! tmp.340 (+ tmp.306 2))
        (set! tmp.154 tmp.340)
        (mset! tmp.154 -2 L.boolean?.71.15)
        (mset! tmp.154 6 8)
        (set! boolean?.71 tmp.154)
        (set! tmp.307 r12)
        (set! r12 (+ r12 16))
        (set! tmp.341 (+ tmp.307 2))
        (set! tmp.155 tmp.341)
        (mset! tmp.155 -2 L.fixnum?.70.16)
        (mset! tmp.155 6 8)
        (set! fixnum?.70 tmp.155)
        (set! tmp.308 r12)
        (set! r12 (+ r12 16))
        (set! tmp.342 (+ tmp.308 2))
        (set! tmp.156 tmp.342)
        (mset! tmp.156 -2 L.procedure-arity.69.17)
        (mset! tmp.156 6 8)
        (set! procedure-arity.69 tmp.156)
        (set! tmp.309 r12)
        (set! r12 (+ r12 16))
        (set! tmp.343 (+ tmp.309 2))
        (set! tmp.157 tmp.343)
        (mset! tmp.157 -2 L.cdr.68.18)
        (mset! tmp.157 6 8)
        (set! cdr.68 tmp.157)
        (set! tmp.310 r12)
        (set! r12 (+ r12 16))
        (set! tmp.344 (+ tmp.310 2))
        (set! tmp.158 tmp.344)
        (mset! tmp.158 -2 L.car.67.19)
        (mset! tmp.158 6 8)
        (set! car.67 tmp.158)
        (set! tmp.311 r12)
        (set! r12 (+ r12 24))
        (set! tmp.345 (+ tmp.311 2))
        (set! tmp.159 tmp.345)
        (mset! tmp.159 -2 L.vector-ref.66.20)
        (mset! tmp.159 6 16)
        (set! vector-ref.66 tmp.159)
        (set! tmp.312 r12)
        (set! r12 (+ r12 24))
        (set! tmp.346 (+ tmp.312 2))
        (set! tmp.160 tmp.346)
        (mset! tmp.160 -2 L.vector-set!.65.21)
        (mset! tmp.160 6 24)
        (set! vector-set!.65 tmp.160)
        (set! tmp.313 r12)
        (set! r12 (+ r12 16))
        (set! tmp.347 (+ tmp.313 2))
        (set! tmp.161 tmp.347)
        (mset! tmp.161 -2 L.vector-length.64.22)
        (mset! tmp.161 6 8)
        (set! vector-length.64 tmp.161)
        (set! tmp.314 r12)
        (set! r12 (+ r12 24))
        (set! tmp.348 (+ tmp.314 2))
        (set! tmp.162 tmp.348)
        (mset! tmp.162 -2 L.make-vector.63.23)
        (mset! tmp.162 6 8)
        (set! make-vector.63 tmp.162)
        (set! tmp.315 r12)
        (set! r12 (+ r12 16))
        (set! tmp.349 (+ tmp.315 2))
        (set! tmp.163 tmp.349)
        (mset! tmp.163 -2 L.>=.62.24)
        (mset! tmp.163 6 16)
        (set! >=.62 tmp.163)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.164 tmp.350)
        (mset! tmp.164 -2 L.>.61.25)
        (mset! tmp.164 6 16)
        (set! >.61 tmp.164)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.165 tmp.351)
        (mset! tmp.165 -2 L.<=.60.26)
        (mset! tmp.165 6 16)
        (set! <=.60 tmp.165)
        (set! tmp.318 r12)
        (set! r12 (+ r12 16))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.166 tmp.352)
        (mset! tmp.166 -2 L.<.59.27)
        (mset! tmp.166 6 16)
        (set! <.59 tmp.166)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.167 tmp.353)
        (mset! tmp.167 -2 L.-.58.28)
        (mset! tmp.167 6 16)
        (set! |-.58| tmp.167)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.168 tmp.354)
        (mset! tmp.168 -2 L.+.57.29)
        (mset! tmp.168 6 16)
        (set! |+.57| tmp.168)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.169 tmp.355)
        (mset! tmp.169 -2 L.*.56.30)
        (mset! tmp.169 6 16)
        (set! *.56 tmp.169)
        (mset! vector-init-loop.84 14 vector-init-loop.84)
        (mset! make-init-vector.1 14 vector-init-loop.84)
        (mset! vector-ref.66 14 unsafe-vector-ref.3)
        (mset! vector-set!.65 14 unsafe-vector-set!.2)
        (mset! make-vector.63 14 make-init-vector.1)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.170 tmp.356)
        (mset! tmp.170 -2 L.sum.4.31)
        (mset! tmp.170 6 64)
        (set! sum.4 tmp.170)
        (mset! sum.4 14 |+.57|)
        (set! x.15 80)
        (set! tmp.135 eq?.81)
        (set! rbp (+ rbp 40))
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi eq?.81)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.324 rax)
        (if (neq? tmp.324 6)
          (begin
            (set! tmp.136 sum.4)
            (set! rbp (+ rbp 40))
            (return-point L.rp.106
              (begin
                (set! nfv.359 64)
                (set! nfv.358 56)
                (set! nfv.357 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi sum.4)
                (set! r15 L.rp.106)
                (jump
                 L.sum.4.31
                 rbp
                 r15
                 nfv.357
                 nfv.358
                 nfv.359
                 r9
                 r8
                 rcx
                 rdx
                 rsi
                 rdi)))
            (set! rbp (- rbp 40))
            (set! j.16 rax)
            (set! rax j.16)
            (jump ra.325 rbp rax))
          (begin
            (set! x.17 40)
            (set! tmp.137 sum.4)
            (set! fv2 x.17)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi sum.4)
            (set! r15 ra.325)
            (jump L.sum.4.31 rbp r15 fv0 fv1 fv2 r9 r8 rcx rdx rsi rdi)))))
    (define L.sum.4.31
      ((assignment
        ((ra.360 fv3)
         (|+.57| fv0)
         (h.12 fv1)
         (g.11 fv4)
         (i.13 fv2)
         (a.5 r15)
         (c.126 r14)
         (b.6 r13)
         (c.7 rdi)
         (d.8 r8)
         (e.9 r9)
         (f.10 r9)
         (tmp.132 r14)
         (tmp.133 r15)
         (j.14 r15)
         (tmp.134 r14))))
      (begin
        (set! ra.360 r15)
        (set! c.126 rdi)
        (set! a.5 rsi)
        (set! b.6 rdx)
        (set! c.7 rcx)
        (set! d.8 r8)
        (set! e.9 r9)
        (set! f.10 fv0)
        (set! g.11 fv1)
        (set! h.12 fv2)
        (set! |+.57| (mref c.126 14))
        (set! tmp.132 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.107
          (begin
            (set! rdx b.6)
            (set! rsi a.5)
            (set! rdi |+.57|)
            (set! r15 L.rp.107)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! i.13 rax)
        (set! tmp.133 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.108
          (begin
            (set! rdx h.12)
            (set! rsi g.11)
            (set! rdi |+.57|)
            (set! r15 L.rp.108)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! j.14 rax)
        (set! tmp.134 |+.57|)
        (set! rdx j.14)
        (set! rsi i.13)
        (set! rdi |+.57|)
        (set! r15 ra.360)
        (jump L.+.57.29 rbp r15 rdx rsi rdi)))
    (define L.*.56.30
      ((assignment
        ((ra.361 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.177 r9)
         (c.125 r14)
         (tmp.362 r9))))
      (begin
        (set! ra.361 r15)
        (set! c.125 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.362 (bitwise-and tmp.19 7))
        (set! tmp.177 tmp.362)
        (if (eq? tmp.177 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi)))))
    (define L.+.57.29
      ((assignment
        ((ra.363 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.183 r9)
         (c.124 r14)
         (tmp.364 r9))))
      (begin
        (set! ra.363 r15)
        (set! c.124 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.364 (bitwise-and tmp.21 7))
        (set! tmp.183 tmp.364)
        (if (eq? tmp.183 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi)))))
    (define L.-.58.28
      ((assignment
        ((ra.365 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.189 r9)
         (c.123 r14)
         (tmp.366 r9))))
      (begin
        (set! ra.365 r15)
        (set! c.123 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.366 (bitwise-and tmp.23 7))
        (set! tmp.189 tmp.366)
        (if (eq? tmp.189 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.<.59.27
      ((assignment
        ((ra.367 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.196 r9)
         (c.122 r14)
         (tmp.368 r9))))
      (begin
        (set! ra.367 r15)
        (set! c.122 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.368 (bitwise-and tmp.25 7))
        (set! tmp.196 tmp.368)
        (if (eq? tmp.196 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<=.60.26
      ((assignment
        ((ra.369 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.203 r9)
         (c.121 r14)
         (tmp.370 r9))))
      (begin
        (set! ra.369 r15)
        (set! c.121 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.370 (bitwise-and tmp.27 7))
        (set! tmp.203 tmp.370)
        (if (eq? tmp.203 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.>.61.25
      ((assignment
        ((ra.371 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.210 r9)
         (c.120 r14)
         (tmp.372 r9))))
      (begin
        (set! ra.371 r15)
        (set! c.120 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.372 (bitwise-and tmp.29 7))
        (set! tmp.210 tmp.372)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>=.62.24
      ((assignment
        ((ra.373 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.217 r9)
         (c.119 r14)
         (tmp.374 r9))))
      (begin
        (set! ra.373 r15)
        (set! c.119 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.374 (bitwise-and tmp.31 7))
        (set! tmp.217 tmp.374)
        (if (eq? tmp.217 0)
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.63.23
      ((assignment
        ((ra.375 r15)
         (tmp.32 r14)
         (make-init-vector.1 r13)
         (tmp.220 r9)
         (c.118 r13)
         (tmp.376 r9))))
      (begin
        (set! ra.375 r15)
        (set! c.118 rdi)
        (set! tmp.32 rsi)
        (set! make-init-vector.1 (mref c.118 14))
        (set! tmp.376 (bitwise-and tmp.32 7))
        (set! tmp.220 tmp.376)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.64.22
      ((assignment
        ((ra.377 r15) (tmp.33 r14) (tmp.223 r13) (c.117 r14) (tmp.378 r13))))
      (begin
        (set! ra.377 r15)
        (set! c.117 rdi)
        (set! tmp.33 rsi)
        (set! tmp.378 (bitwise-and tmp.33 7))
        (set! tmp.223 tmp.378)
        (if (eq? tmp.223 3)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi)))))
    (define L.vector-set!.65.21
      ((assignment
        ((ra.379 r15)
         (tmp.34 r14)
         (tmp.35 r13)
         (tmp.36 r9)
         (unsafe-vector-set!.2 rdi)
         (c.116 r8)
         (tmp.229 r8)
         (tmp.380 r8))))
      (begin
        (set! ra.379 r15)
        (set! c.116 rdi)
        (set! tmp.34 rsi)
        (set! tmp.35 rdx)
        (set! tmp.36 rcx)
        (set! unsafe-vector-set!.2 (mref c.116 14))
        (set! tmp.380 (bitwise-and tmp.35 7))
        (set! tmp.229 tmp.380)
        (if (eq? tmp.229 0)
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.66.20
      ((assignment
        ((ra.381 r15)
         (tmp.37 r14)
         (tmp.38 r13)
         (unsafe-vector-ref.3 r9)
         (c.115 r9)
         (tmp.235 r8)
         (tmp.382 r8))))
      (begin
        (set! ra.381 r15)
        (set! c.115 rdi)
        (set! tmp.37 rsi)
        (set! tmp.38 rdx)
        (set! unsafe-vector-ref.3 (mref c.115 14))
        (set! tmp.382 (bitwise-and tmp.38 7))
        (set! tmp.235 tmp.382)
        (if (eq? tmp.235 0)
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.67.19
      ((assignment
        ((ra.383 r15) (tmp.39 r14) (tmp.238 r13) (c.114 r14) (tmp.384 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.114 rdi)
        (set! tmp.39 rsi)
        (set! tmp.384 (bitwise-and tmp.39 7))
        (set! tmp.238 tmp.384)
        (if (eq? tmp.238 1)
          (begin
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi)))))
    (define L.cdr.68.18
      ((assignment
        ((ra.385 r15) (tmp.40 r14) (tmp.241 r13) (c.113 r14) (tmp.386 r13))))
      (begin
        (set! ra.385 r15)
        (set! c.113 rdi)
        (set! tmp.40 rsi)
        (set! tmp.386 (bitwise-and tmp.40 7))
        (set! tmp.241 tmp.386)
        (if (eq? tmp.241 1)
          (begin
            (set! rsi tmp.40)
            (set! rdi 14)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.40)
            (set! rdi 6)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.procedure-arity.69.17
      ((assignment
        ((ra.387 r15) (tmp.41 r14) (tmp.244 r13) (c.112 r14) (tmp.388 r13))))
      (begin
        (set! ra.387 r15)
        (set! c.112 rdi)
        (set! tmp.41 rsi)
        (set! tmp.388 (bitwise-and tmp.41 7))
        (set! tmp.244 tmp.388)
        (if (eq? tmp.244 2)
          (begin
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.fixnum?.70.16
      ((assignment
        ((ra.389 r15) (c.111 r14) (tmp.246 r14) (tmp.42 r14) (tmp.390 r14))))
      (begin
        (set! ra.389 r15)
        (set! c.111 rdi)
        (set! tmp.42 rsi)
        (set! tmp.390 (bitwise-and tmp.42 7))
        (set! tmp.246 tmp.390)
        (if (eq? tmp.246 0)
          (begin (set! rax 14) (jump ra.389 rbp rax))
          (begin (set! rax 6) (jump ra.389 rbp rax)))))
    (define L.boolean?.71.15
      ((assignment
        ((ra.391 r15) (c.110 r14) (tmp.248 r14) (tmp.43 r14) (tmp.392 r14))))
      (begin
        (set! ra.391 r15)
        (set! c.110 rdi)
        (set! tmp.43 rsi)
        (set! tmp.392 (bitwise-and tmp.43 247))
        (set! tmp.248 tmp.392)
        (if (eq? tmp.248 6)
          (begin (set! rax 14) (jump ra.391 rbp rax))
          (begin (set! rax 6) (jump ra.391 rbp rax)))))
    (define L.empty?.72.14
      ((assignment
        ((ra.393 r15) (c.109 r14) (tmp.250 r14) (tmp.44 r14) (tmp.394 r14))))
      (begin
        (set! ra.393 r15)
        (set! c.109 rdi)
        (set! tmp.44 rsi)
        (set! tmp.394 (bitwise-and tmp.44 255))
        (set! tmp.250 tmp.394)
        (if (eq? tmp.250 22)
          (begin (set! rax 14) (jump ra.393 rbp rax))
          (begin (set! rax 6) (jump ra.393 rbp rax)))))
    (define L.void?.73.13
      ((assignment
        ((ra.395 r15) (c.108 r14) (tmp.252 r14) (tmp.45 r14) (tmp.396 r14))))
      (begin
        (set! ra.395 r15)
        (set! c.108 rdi)
        (set! tmp.45 rsi)
        (set! tmp.396 (bitwise-and tmp.45 255))
        (set! tmp.252 tmp.396)
        (if (eq? tmp.252 30)
          (begin (set! rax 14) (jump ra.395 rbp rax))
          (begin (set! rax 6) (jump ra.395 rbp rax)))))
    (define L.ascii-char?.74.12
      ((assignment
        ((ra.397 r15) (c.107 r14) (tmp.254 r14) (tmp.46 r14) (tmp.398 r14))))
      (begin
        (set! ra.397 r15)
        (set! c.107 rdi)
        (set! tmp.46 rsi)
        (set! tmp.398 (bitwise-and tmp.46 255))
        (set! tmp.254 tmp.398)
        (if (eq? tmp.254 46)
          (begin (set! rax 14) (jump ra.397 rbp rax))
          (begin (set! rax 6) (jump ra.397 rbp rax)))))
    (define L.error?.75.11
      ((assignment
        ((ra.399 r15) (c.106 r14) (tmp.256 r14) (tmp.47 r14) (tmp.400 r14))))
      (begin
        (set! ra.399 r15)
        (set! c.106 rdi)
        (set! tmp.47 rsi)
        (set! tmp.400 (bitwise-and tmp.47 255))
        (set! tmp.256 tmp.400)
        (if (eq? tmp.256 62)
          (begin (set! rax 14) (jump ra.399 rbp rax))
          (begin (set! rax 6) (jump ra.399 rbp rax)))))
    (define L.pair?.76.10
      ((assignment
        ((ra.401 r15) (c.105 r14) (tmp.258 r14) (tmp.48 r14) (tmp.402 r14))))
      (begin
        (set! ra.401 r15)
        (set! c.105 rdi)
        (set! tmp.48 rsi)
        (set! tmp.402 (bitwise-and tmp.48 7))
        (set! tmp.258 tmp.402)
        (if (eq? tmp.258 1)
          (begin (set! rax 14) (jump ra.401 rbp rax))
          (begin (set! rax 6) (jump ra.401 rbp rax)))))
    (define L.procedure?.77.9
      ((assignment
        ((ra.403 r15) (c.104 r14) (tmp.260 r14) (tmp.49 r14) (tmp.404 r14))))
      (begin
        (set! ra.403 r15)
        (set! c.104 rdi)
        (set! tmp.49 rsi)
        (set! tmp.404 (bitwise-and tmp.49 7))
        (set! tmp.260 tmp.404)
        (if (eq? tmp.260 2)
          (begin (set! rax 14) (jump ra.403 rbp rax))
          (begin (set! rax 6) (jump ra.403 rbp rax)))))
    (define L.vector?.78.8
      ((assignment
        ((ra.405 r15) (c.103 r14) (tmp.262 r14) (tmp.50 r14) (tmp.406 r14))))
      (begin
        (set! ra.405 r15)
        (set! c.103 rdi)
        (set! tmp.50 rsi)
        (set! tmp.406 (bitwise-and tmp.50 7))
        (set! tmp.262 tmp.406)
        (if (eq? tmp.262 3)
          (begin (set! rax 14) (jump ra.405 rbp rax))
          (begin (set! rax 6) (jump ra.405 rbp rax)))))
    (define L.not.79.7
      ((assignment ((ra.407 r15) (c.102 r14) (tmp.51 r14))))
      (begin
        (set! ra.407 r15)
        (set! c.102 rdi)
        (set! tmp.51 rsi)
        (if (neq? tmp.51 6)
          (begin (set! rax 6) (jump ra.407 rbp rax))
          (begin (set! rax 14) (jump ra.407 rbp rax)))))
    (define L.cons.80.6
      ((assignment
        ((ra.408 r15)
         (tmp.52 r14)
         (tmp.53 r13)
         (c.101 r14)
         (tmp.264 r9)
         (tmp.409 r9)
         (tmp.138 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.101 rdi)
        (set! tmp.52 rsi)
        (set! tmp.53 rdx)
        (set! tmp.264 r12)
        (set! r12 (+ r12 16))
        (set! tmp.409 (+ tmp.264 1))
        (set! tmp.138 tmp.409)
        (mset! tmp.138 -1 tmp.52)
        (mset! tmp.138 7 tmp.53)
        (set! rax tmp.138)
        (jump ra.408 rbp rax)))
    (define L.eq?.81.5
      ((assignment ((ra.410 r15) (tmp.54 r14) (c.100 r14) (tmp.55 r13))))
      (begin
        (set! ra.410 r15)
        (set! c.100 rdi)
        (set! tmp.54 rsi)
        (set! tmp.55 rdx)
        (if (eq? tmp.54 tmp.55)
          (begin (set! rax 14) (jump ra.410 rbp rax))
          (begin (set! rax 6) (jump ra.410 rbp rax)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.411 r15)
         (tmp.82 r14)
         (vector-init-loop.84 r13)
         (tmp.266 r9)
         (tmp.413 r8)
         (tmp.503 r9)
         (tmp.269 r8)
         (c.99 r13)
         (tmp.412 r9)
         (tmp.414 r9)
         (tmp.267 r9)
         (tmp.415 r9)
         (tmp.268 r9)
         (tmp.83 r9)
         (tmp.416 r9)
         (tmp.139 r9)
         (tmp.128 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.99 rdi)
        (set! tmp.82 rsi)
        (set! vector-init-loop.84 (mref c.99 14))
        (set! tmp.412 (arithmetic-shift-right tmp.82 3))
        (set! tmp.266 tmp.412)
        (set! tmp.413 1)
        (set! tmp.414 (+ tmp.413 tmp.266))
        (set! tmp.267 tmp.414)
        (set! tmp.415 (* tmp.267 8))
        (set! tmp.268 tmp.415)
        (set! tmp.503 tmp.268)
        (set! tmp.269 r12)
        (set! r12 (+ r12 tmp.503))
        (set! tmp.416 (+ tmp.269 3))
        (set! tmp.139 tmp.416)
        (mset! tmp.139 -3 tmp.82)
        (set! tmp.83 tmp.139)
        (set! tmp.128 vector-init-loop.84)
        (set! rcx tmp.83)
        (set! rdx 0)
        (set! rsi tmp.82)
        (set! rdi vector-init-loop.84)
        (set! r15 ra.411)
        (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.84.3
      ((assignment
        ((ra.417 r15)
         (len.85 r14)
         (i.87 r13)
         (c.98 r9)
         (vec.86 r8)
         (vector-init-loop.84 r9))))
      (begin
        (set! ra.417 r15)
        (set! c.98 rdi)
        (set! len.85 rsi)
        (set! i.87 rdx)
        (set! vec.86 rcx)
        (set! vector-init-loop.84 (mref c.98 14))
        (if (eq? len.85 i.87)
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 14)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 6)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.418 r15)
         (tmp.93 r14)
         (tmp.94 r13)
         (tmp.95 r9)
         (tmp.283 r8)
         (c.97 r14))))
      (begin
        (set! ra.418 r15)
        (set! c.97 rdi)
        (set! tmp.93 rsi)
        (set! tmp.94 rdx)
        (set! tmp.95 rcx)
        (set! tmp.283 (mref tmp.93 -3))
        (if (< tmp.94 tmp.283)
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.419 r15) (tmp.90 r14) (tmp.91 r13) (tmp.291 r9) (c.96 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.96 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.291 (mref tmp.90 -3))
        (if (< tmp.91 tmp.291)
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 14)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 6)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi)))))
    (define L.jp.102
      ((assignment ((ra.420 r15) (tmp.285 r14) (tmp.91 r13) (tmp.90 r9))))
      (begin
        (set! ra.420 r15)
        (set! tmp.285 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.285 6)
          (if (>= tmp.91 0)
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 14)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 6)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.420 rbp rax)))))
    (define L.jp.101
      ((assignment
        ((ra.421 r15)
         (tmp.90 r14)
         (tmp.287 r13)
         (tmp.91 r9)
         (tmp.422 r13)
         (tmp.288 r13)
         (tmp.423 r13)
         (tmp.289 r13)
         (tmp.424 r13)
         (tmp.290 r13))))
      (begin
        (set! ra.421 r15)
        (set! tmp.287 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.287 6)
          (begin
            (set! tmp.422 (arithmetic-shift-right tmp.91 3))
            (set! tmp.288 tmp.422)
            (set! tmp.423 (* tmp.288 8))
            (set! tmp.289 tmp.423)
            (set! tmp.424 (+ tmp.289 5))
            (set! tmp.290 tmp.424)
            (set! rax (mref tmp.90 tmp.290))
            (jump ra.421 rbp rax))
          (begin (set! rax 2622) (jump ra.421 rbp rax)))))
    (define L.jp.98
      ((assignment
        ((ra.425 r15) (tmp.277 r14) (tmp.94 r13) (tmp.95 r9) (tmp.93 r8))))
      (begin
        (set! ra.425 r15)
        (set! tmp.277 rdi)
        (set! tmp.94 rsi)
        (set! tmp.95 rdx)
        (set! tmp.93 rcx)
        (if (neq? tmp.277 6)
          (if (>= tmp.94 0)
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 14)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 6)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.425 rbp rax)))))
    (define L.jp.97
      ((assignment
        ((ra.426 r15)
         (tmp.93 r14)
         (tmp.95 r13)
         (tmp.279 r9)
         (tmp.94 r8)
         (tmp.427 r9)
         (tmp.280 r9)
         (tmp.428 r9)
         (tmp.281 r9)
         (tmp.429 r9)
         (tmp.282 r9))))
      (begin
        (set! ra.426 r15)
        (set! tmp.279 rdi)
        (set! tmp.94 rsi)
        (set! tmp.93 rdx)
        (set! tmp.95 rcx)
        (if (neq? tmp.279 6)
          (begin
            (set! tmp.427 (arithmetic-shift-right tmp.94 3))
            (set! tmp.280 tmp.427)
            (set! tmp.428 (* tmp.280 8))
            (set! tmp.281 tmp.428)
            (set! tmp.429 (+ tmp.281 5))
            (set! tmp.282 tmp.429)
            (mset! tmp.93 tmp.282 tmp.95)
            (set! rax 30)
            (jump ra.426 rbp rax))
          (begin (set! rax 2366) (jump ra.426 rbp rax)))))
    (define L.jp.94
      ((assignment
        ((ra.430 r15)
         (len.85 r14)
         (vector-init-loop.84 r13)
         (i.87 r9)
         (vec.86 r8)
         (tmp.271 rdi)
         (tmp.275 r9)
         (tmp.274 rdi)
         (tmp.433 rdi)
         (tmp.273 rdi)
         (tmp.432 rdi)
         (tmp.272 rdi)
         (tmp.431 rdi)
         (tmp.434 r9)
         (tmp.127 r13))))
      (begin
        (set! ra.430 r15)
        (set! tmp.271 rdi)
        (set! i.87 rsi)
        (set! len.85 rdx)
        (set! vector-init-loop.84 rcx)
        (set! vec.86 r8)
        (if (neq? tmp.271 6)
          (begin (set! rax vec.86) (jump ra.430 rbp rax))
          (begin
            (set! tmp.431 (arithmetic-shift-right i.87 3))
            (set! tmp.272 tmp.431)
            (set! tmp.432 (* tmp.272 8))
            (set! tmp.273 tmp.432)
            (set! tmp.433 (+ tmp.273 5))
            (set! tmp.274 tmp.433)
            (mset! vec.86 tmp.274 0)
            (set! tmp.127 vector-init-loop.84)
            (set! tmp.434 (+ i.87 8))
            (set! tmp.275 tmp.434)
            (set! rcx vec.86)
            (set! rdx tmp.275)
            (set! rsi len.85)
            (set! rdi vector-init-loop.84)
            (set! r15 ra.430)
            (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.81
      ((assignment ((ra.435 r15) (tmp.243 r14) (tmp.41 r13))))
      (begin
        (set! ra.435 r15)
        (set! tmp.243 rdi)
        (set! tmp.41 rsi)
        (if (neq? tmp.243 6)
          (begin (set! rax (mref tmp.41 6)) (jump ra.435 rbp rax))
          (begin (set! rax 3390) (jump ra.435 rbp rax)))))
    (define L.jp.79
      ((assignment ((ra.436 r15) (tmp.240 r14) (tmp.40 r13))))
      (begin
        (set! ra.436 r15)
        (set! tmp.240 rdi)
        (set! tmp.40 rsi)
        (if (neq? tmp.240 6)
          (begin (set! rax (mref tmp.40 7)) (jump ra.436 rbp rax))
          (begin (set! rax 3134) (jump ra.436 rbp rax)))))
    (define L.jp.77
      ((assignment ((ra.437 r15) (tmp.237 r14) (tmp.39 r13))))
      (begin
        (set! ra.437 r15)
        (set! tmp.237 rdi)
        (set! tmp.39 rsi)
        (if (neq? tmp.237 6)
          (begin (set! rax (mref tmp.39 -1)) (jump ra.437 rbp rax))
          (begin (set! rax 2878) (jump ra.437 rbp rax)))))
    (define L.jp.75
      ((assignment
        ((ra.438 r15)
         (tmp.37 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.38 r9)
         (tmp.231 r8)
         (tmp.234 r8)
         (tmp.439 r8))))
      (begin
        (set! ra.438 r15)
        (set! tmp.231 rdi)
        (set! tmp.37 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.38 rcx)
        (if (neq? tmp.231 6)
          (begin
            (set! tmp.439 (bitwise-and tmp.37 7))
            (set! tmp.234 tmp.439)
            (if (eq? tmp.234 3)
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.438 rbp rax)))))
    (define L.jp.74
      ((assignment
        ((ra.440 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.233 r13)
         (tmp.38 r9)
         (tmp.37 r8)
         (tmp.129 r14))))
      (begin
        (set! ra.440 r15)
        (set! tmp.233 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.38 rdx)
        (set! tmp.37 rcx)
        (if (neq? tmp.233 6)
          (begin
            (set! tmp.129 unsafe-vector-ref.3)
            (set! rdx tmp.38)
            (set! rsi tmp.37)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.440)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.440 rbp rax)))))
    (define L.jp.71
      ((assignment
        ((ra.441 r15)
         (tmp.34 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.36 r9)
         (tmp.225 rdi)
         (tmp.35 rsi)
         (tmp.228 r8)
         (tmp.442 r8))))
      (begin
        (set! ra.441 r15)
        (set! tmp.225 rdi)
        (set! tmp.34 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.36 rcx)
        (set! tmp.35 r8)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.442 (bitwise-and tmp.34 7))
            (set! tmp.228 tmp.442)
            (if (eq? tmp.228 3)
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.441 rbp rax)))))
    (define L.jp.70
      ((assignment
        ((ra.443 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.227 r13)
         (tmp.36 r9)
         (tmp.35 rdi)
         (tmp.34 r8)
         (tmp.130 r14))))
      (begin
        (set! ra.443 r15)
        (set! tmp.227 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.36 rdx)
        (set! tmp.35 rcx)
        (set! tmp.34 r8)
        (if (neq? tmp.227 6)
          (begin
            (set! tmp.130 unsafe-vector-set!.2)
            (set! rcx tmp.36)
            (set! rdx tmp.35)
            (set! rsi tmp.34)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.443)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.443 rbp rax)))))
    (define L.jp.67
      ((assignment ((ra.444 r15) (tmp.222 r14) (tmp.33 r13))))
      (begin
        (set! ra.444 r15)
        (set! tmp.222 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.222 6)
          (begin (set! rax (mref tmp.33 -3)) (jump ra.444 rbp rax))
          (begin (set! rax 2110) (jump ra.444 rbp rax)))))
    (define L.jp.65
      ((assignment
        ((ra.445 r15)
         (make-init-vector.1 r14)
         (tmp.219 r13)
         (tmp.32 r9)
         (tmp.131 r14))))
      (begin
        (set! ra.445 r15)
        (set! tmp.219 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.32 rdx)
        (if (neq? tmp.219 6)
          (begin
            (set! tmp.131 make-init-vector.1)
            (set! rsi tmp.32)
            (set! rdi make-init-vector.1)
            (set! r15 ra.445)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.445 rbp rax)))))
    (define L.jp.63
      ((assignment
        ((ra.446 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.212 r9)
         (tmp.216 r9)
         (tmp.447 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.212 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.447 (bitwise-and tmp.30 7))
            (set! tmp.216 tmp.447)
            (if (eq? tmp.216 0)
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 14)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 6)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.446 rbp rax)))))
    (define L.jp.62
      ((assignment ((ra.448 r15) (tmp.214 r14) (tmp.30 r13) (tmp.31 r9))))
      (begin
        (set! ra.448 r15)
        (set! tmp.214 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.214 6)
          (if (>= tmp.30 tmp.31)
            (begin (set! rax 14) (jump ra.448 rbp rax))
            (begin (set! rax 6) (jump ra.448 rbp rax)))
          (begin (set! rax 1598) (jump ra.448 rbp rax)))))
    (define L.jp.58
      ((assignment
        ((ra.449 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.205 r9)
         (tmp.209 r9)
         (tmp.450 r9))))
      (begin
        (set! ra.449 r15)
        (set! tmp.205 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.450 (bitwise-and tmp.28 7))
            (set! tmp.209 tmp.450)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 14)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 6)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.449 rbp rax)))))
    (define L.jp.57
      ((assignment ((ra.451 r15) (tmp.207 r14) (tmp.28 r13) (tmp.29 r9))))
      (begin
        (set! ra.451 r15)
        (set! tmp.207 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.207 6)
          (if (> tmp.28 tmp.29)
            (begin (set! rax 14) (jump ra.451 rbp rax))
            (begin (set! rax 6) (jump ra.451 rbp rax)))
          (begin (set! rax 1342) (jump ra.451 rbp rax)))))
    (define L.jp.53
      ((assignment
        ((ra.452 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.198 r9)
         (tmp.202 r9)
         (tmp.453 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.198 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.453 (bitwise-and tmp.26 7))
            (set! tmp.202 tmp.453)
            (if (eq? tmp.202 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.452 rbp rax)))))
    (define L.jp.52
      ((assignment ((ra.454 r15) (tmp.200 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.454 r15)
        (set! tmp.200 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.200 6)
          (if (<= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.454 rbp rax))
            (begin (set! rax 6) (jump ra.454 rbp rax)))
          (begin (set! rax 1086) (jump ra.454 rbp rax)))))
    (define L.jp.48
      ((assignment
        ((ra.455 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.191 r9)
         (tmp.195 r9)
         (tmp.456 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.191 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.191 6)
          (begin
            (set! tmp.456 (bitwise-and tmp.24 7))
            (set! tmp.195 tmp.456)
            (if (eq? tmp.195 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.455 rbp rax)))))
    (define L.jp.47
      ((assignment ((ra.457 r15) (tmp.193 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.457 r15)
        (set! tmp.193 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.193 6)
          (if (< tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.457 rbp rax))
            (begin (set! rax 6) (jump ra.457 rbp rax)))
          (begin (set! rax 830) (jump ra.457 rbp rax)))))
    (define L.jp.43
      ((assignment
        ((ra.458 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.185 r9)
         (tmp.188 r9)
         (tmp.459 r9))))
      (begin
        (set! ra.458 r15)
        (set! tmp.185 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.459 (bitwise-and tmp.22 7))
            (set! tmp.188 tmp.459)
            (if (eq? tmp.188 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.458 rbp rax)))))
    (define L.jp.42
      ((assignment
        ((ra.460 r15) (tmp.187 r14) (tmp.22 r13) (tmp.23 r9) (tmp.461 r14))))
      (begin
        (set! ra.460 r15)
        (set! tmp.187 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.461 (- tmp.22 tmp.23))
            (set! rax tmp.461)
            (jump ra.460 rbp rax))
          (begin (set! rax 574) (jump ra.460 rbp rax)))))
    (define L.jp.39
      ((assignment
        ((ra.462 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.179 r9)
         (tmp.182 r9)
         (tmp.463 r9))))
      (begin
        (set! ra.462 r15)
        (set! tmp.179 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.179 6)
          (begin
            (set! tmp.463 (bitwise-and tmp.20 7))
            (set! tmp.182 tmp.463)
            (if (eq? tmp.182 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.462 rbp rax)))))
    (define L.jp.38
      ((assignment
        ((ra.464 r15) (tmp.181 r14) (tmp.20 r13) (tmp.21 r9) (tmp.465 r14))))
      (begin
        (set! ra.464 r15)
        (set! tmp.181 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.181 6)
          (begin
            (set! tmp.465 (+ tmp.20 tmp.21))
            (set! rax tmp.465)
            (jump ra.464 rbp rax))
          (begin (set! rax 318) (jump ra.464 rbp rax)))))
    (define L.jp.35
      ((assignment
        ((ra.466 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.172 r9)
         (tmp.176 r9)
         (tmp.467 r9))))
      (begin
        (set! ra.466 r15)
        (set! tmp.172 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.172 6)
          (begin
            (set! tmp.467 (bitwise-and tmp.18 7))
            (set! tmp.176 tmp.467)
            (if (eq? tmp.176 0)
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 14)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 6)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.466 rbp rax)))))
    (define L.jp.34
      ((assignment
        ((ra.468 r15)
         (tmp.18 r14)
         (tmp.174 r13)
         (tmp.19 r9)
         (tmp.469 r13)
         (tmp.175 r13)
         (tmp.470 r14))))
      (begin
        (set! ra.468 r15)
        (set! tmp.174 rdi)
        (set! tmp.19 rsi)
        (set! tmp.18 rdx)
        (if (neq? tmp.174 6)
          (begin
            (set! tmp.469 (arithmetic-shift-right tmp.19 3))
            (set! tmp.175 tmp.469)
            (set! tmp.470 (* tmp.18 tmp.175))
            (set! rax tmp.470)
            (jump ra.468 rbp rax))
          (begin (set! rax 62) (jump ra.468 rbp rax))))))
     ) 15))

  (parameterize ([current-pass-list
                  (list
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ((locals ())
       (undead-out
        ((r12 ra.325 rbp)
         (r12 tmp.292 ra.325 rbp)
         (tmp.292 r12 ra.325 rbp)
         (tmp.326 r12 ra.325 rbp)
         (r12 ra.325 rbp tmp.140)
         (rbp ra.325 r12 tmp.140)
         (tmp.140 r12 ra.325 rbp)
         (r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.293 ra.325 rbp unsafe-vector-ref.3)
         (tmp.293 r12 ra.325 rbp unsafe-vector-ref.3)
         (tmp.327 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 ra.325 rbp unsafe-vector-ref.3 tmp.141)
         (unsafe-vector-ref.3 rbp ra.325 r12 tmp.141)
         (tmp.141 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.294 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.294 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.328 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3 tmp.142)
         (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12 tmp.142)
         (tmp.142 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.295
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.295
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.329
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.143)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          r12
          tmp.143)
         (tmp.143
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.296
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.296
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.144)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.144)
         (tmp.144
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.297
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.297
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.145)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.145)
         (tmp.145
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.298
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.298
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.146)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.146)
         (tmp.146
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.299
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.299
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.147)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.147)
         (tmp.147
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.300
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.300
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.148)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.148)
         (tmp.148
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.301
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.301
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.149)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.302
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.302
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.150)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.303
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.303
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.151)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.304
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.304
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.152)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.305
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.305
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.153)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.306
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.306
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.154)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.307
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.307
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.155)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.308
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.308
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.156)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.309
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.309
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.157)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.310
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.310
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.344
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.158)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.311
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.311
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.345
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.159)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.312
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.312
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.346
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.160)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.313
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.313
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.161)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.314
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.314
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.162)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.315
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.315
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.163)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.316
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.316
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.164)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.317
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.317
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.165)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.318
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.318
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.352
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.166)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.319
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.319
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.353
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.167)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.320
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.320
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.354
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.168)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.355
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.169)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          tmp.169)
         (tmp.169
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          vector-init-loop.84
          make-init-vector.1)
         (vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-init-vector.1
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66)
         (make-vector.63
          make-init-vector.1
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65)
         (|+.57| eq?.81 ra.325 rbp r12 make-init-vector.1 make-vector.63)
         (r12 rbp ra.325 eq?.81 |+.57|)
         (r12 tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.356 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| tmp.170)
         (|+.57| eq?.81 ra.325 rbp tmp.170)
         (tmp.170 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| sum.4)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         ((rax sum.4 ra.325 rbp)
          ((eq?.81 rdx rbp)
           (eq?.81 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.324 sum.4 ra.325 rbp)
         ((sum.4 ra.325 rbp)
          ((sum.4 ra.325 rbp)
           ((rax ra.325 rbp)
            ((sum.4 nfv.359 rbp)
             (sum.4 nfv.359 nfv.358 rbp)
             (sum.4 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)))
           (j.16 ra.325 rbp)
           (ra.325 rax rbp)
           (rax rbp))
          ((x.17 sum.4 ra.325 rbp)
           (x.17 sum.4 ra.325 rbp)
           (sum.4 ra.325 fv2 rbp)
           (sum.4 ra.325 fv2 fv1 rbp)
           (sum.4 ra.325 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (ra.325 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)))))
       (conflicts
        ((x.17 (tmp.137 sum.4 ra.325 rbp))
         (rbp
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           r12
           tmp.292
           ra.325
           j.16
           nfv.357
           nfv.358
           nfv.359
           rax
           tmp.136
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (ra.325
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           tmp.292
           r12
           rbp
           j.16
           rax
           tmp.136
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (sum.4
          (tmp.324
           rax
           tmp.135
           x.15
           rbp
           ra.325
           eq?.81
           |+.57|
           nfv.357
           nfv.358
           nfv.359
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           x.17))
         (tmp.137 (x.17 ra.325 rbp))
         (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 sum.4 ra.325 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 sum.4 ra.325 fv2 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 sum.4 ra.325 fv2 fv1 rbp))
         (r9
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           sum.4
           ra.325
           fv2
           fv1
           fv0
           rbp))
         (r8
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           sum.4
           ra.325
           r9
           fv2
           fv1
           fv0
           rbp))
         (rcx
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           sum.4
           ra.325
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdx
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           sum.4
           ra.325
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rsi
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           sum.4
           ra.325
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdi
          (nfv.359
           nfv.358
           nfv.357
           r15
           ra.325
           rsi
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (r15 (nfv.359 nfv.358 nfv.357 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp))
         (tmp.136 (ra.325 rbp))
         (rax (sum.4 rbp ra.325))
         (nfv.359 (r15 rdi rsi rdx rcx r8 r9 nfv.357 nfv.358 sum.4 rbp))
         (nfv.358 (r15 rdi rsi rdx rcx r8 r9 nfv.357 sum.4 nfv.359 rbp))
         (nfv.357 (r15 rdi rsi rdx rcx r8 r9 sum.4 nfv.359 nfv.358 rbp))
         (j.16 (ra.325 rbp))
         (r12
          (tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           rbp
           tmp.292
           ra.325))
         (tmp.292 (r12 ra.325 rbp))
         (tmp.326 (rbp ra.325 r12))
         (tmp.140 (r12 ra.325 rbp))
         (unsafe-vector-ref.3
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           r12
           ra.325
           rbp))
         (tmp.293 (r12 ra.325 rbp unsafe-vector-ref.3))
         (tmp.327 (unsafe-vector-ref.3 rbp ra.325 r12))
         (tmp.141 (r12 ra.325 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           r12
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.294 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (tmp.328 (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12))
         (tmp.142 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (vector-init-loop.84
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.295
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.329
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           r12))
         (tmp.143
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (make-init-vector.1
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.296
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.330
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.144
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (eq?.81
          (rsi
           rdx
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.297
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.331
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.145
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cons.80
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.298
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.332
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.146
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (not.79
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.299
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.333
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.147
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector?.78
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.300
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.334
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.148
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure?.77
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.301
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.335
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (pair?.76
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.302
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.336
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (error?.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.303
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.337
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (ascii-char?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.304
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.338
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (void?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.305
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.339
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (empty?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.306
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.340
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (boolean?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.307
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.341
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (fixnum?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.308
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.342
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure-arity.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.309
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.343
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cdr.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.310
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.344
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (car.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.311
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.345
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector-ref.66
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.312
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.346
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-set!.65
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.313
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.347
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-length.64
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.314
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.348
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (make-vector.63
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.315
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.349
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>=.62
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.316
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.350
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>.61
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.317
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.351
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<=.60
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.318
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.352
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<.59
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.319
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.353
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|-.58|
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.320
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.354
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|+.57|
          (sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.321
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.355
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           r12
           rbp
           ra.325
           eq?.81
           |+.57|
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1))
         (tmp.169
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (*.56
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.322 (r12 rbp ra.325 eq?.81 |+.57|))
         (tmp.356 (|+.57| eq?.81 ra.325 rbp))
         (tmp.170 (rbp ra.325 eq?.81 |+.57|))
         (x.15 (eq?.81 sum.4 ra.325 rbp))
         (tmp.135 (sum.4 ra.325 rbp))
         (tmp.324 (sum.4 ra.325 rbp))))
       (assignment
        ((ra.325 fv3)
         (sum.4 fv4)
         (nfv.357 fv5)
         (nfv.358 fv6)
         (nfv.359 fv7)
         (unsafe-vector-ref.3 r15)
         (unsafe-vector-set!.2 r14)
         (eq?.81 r13)
         (vector-init-loop.84 r9)
         (make-init-vector.1 r8)
         (vector-ref.66 rdi)
         (vector-set!.65 rsi)
         (make-vector.63 rdx)
         (|+.57| rcx)
         (tmp.321 rbx)
         (tmp.355 rbx)
         (tmp.169 rbx)
         (*.56 rbx)
         (tmp.315 rcx)
         (tmp.349 rcx)
         (tmp.163 rcx)
         (>=.62 rcx)
         (tmp.316 rcx)
         (tmp.350 rcx)
         (tmp.164 rcx)
         (>.61 rcx)
         (tmp.317 rcx)
         (tmp.351 rcx)
         (tmp.165 rcx)
         (<=.60 rcx)
         (tmp.318 rcx)
         (tmp.352 rcx)
         (tmp.166 rcx)
         (<.59 rcx)
         (tmp.319 rcx)
         (tmp.353 rcx)
         (tmp.167 rcx)
         (|-.58| rcx)
         (tmp.320 rcx)
         (tmp.354 rcx)
         (tmp.168 rcx)
         (tmp.313 rdx)
         (tmp.347 rdx)
         (tmp.161 rdx)
         (vector-length.64 rdx)
         (tmp.314 rdx)
         (tmp.348 rdx)
         (tmp.162 rdx)
         (tmp.312 rsi)
         (tmp.346 rsi)
         (tmp.160 rsi)
         (tmp.297 rdi)
         (tmp.331 rdi)
         (tmp.145 rdi)
         (cons.80 rdi)
         (tmp.298 rdi)
         (tmp.332 rdi)
         (tmp.146 rdi)
         (not.79 rdi)
         (tmp.299 rdi)
         (tmp.333 rdi)
         (tmp.147 rdi)
         (vector?.78 rdi)
         (tmp.300 rdi)
         (tmp.334 rdi)
         (tmp.148 rdi)
         (procedure?.77 rdi)
         (tmp.301 rdi)
         (tmp.335 rdi)
         (tmp.149 rdi)
         (pair?.76 rdi)
         (tmp.302 rdi)
         (tmp.336 rdi)
         (tmp.150 rdi)
         (error?.75 rdi)
         (tmp.303 rdi)
         (tmp.337 rdi)
         (tmp.151 rdi)
         (ascii-char?.74 rdi)
         (tmp.304 rdi)
         (tmp.338 rdi)
         (tmp.152 rdi)
         (void?.73 rdi)
         (tmp.305 rdi)
         (tmp.339 rdi)
         (tmp.153 rdi)
         (empty?.72 rdi)
         (tmp.306 rdi)
         (tmp.340 rdi)
         (tmp.154 rdi)
         (boolean?.71 rdi)
         (tmp.307 rdi)
         (tmp.341 rdi)
         (tmp.155 rdi)
         (fixnum?.70 rdi)
         (tmp.308 rdi)
         (tmp.342 rdi)
         (tmp.156 rdi)
         (procedure-arity.69 rdi)
         (tmp.309 rdi)
         (tmp.343 rdi)
         (tmp.157 rdi)
         (cdr.68 rdi)
         (tmp.310 rdi)
         (tmp.344 rdi)
         (tmp.158 rdi)
         (car.67 rdi)
         (tmp.311 rdi)
         (tmp.345 rdi)
         (tmp.159 rdi)
         (tmp.296 r13)
         (tmp.330 r13)
         (tmp.144 r13)
         (tmp.295 r13)
         (tmp.329 r13)
         (tmp.143 r13)
         (tmp.294 r13)
         (tmp.328 r13)
         (tmp.142 r13)
         (tmp.322 r15)
         (x.17 r15)
         (tmp.293 r14)
         (tmp.327 r14)
         (tmp.141 r14)
         (tmp.356 r15)
         (tmp.170 r15)
         (x.15 r15)
         (tmp.137 r14)
         (tmp.324 r15)
         (tmp.292 r15)
         (tmp.326 r15)
         (tmp.140 r15)
         (tmp.135 r15)
         (tmp.136 r15)
         (j.16 r15))))
      (begin
        (set! ra.325 r15)
        (set! tmp.292 r12)
        (set! r12 (+ r12 16))
        (set! tmp.326 (+ tmp.292 2))
        (set! tmp.140 tmp.326)
        (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.140 6 16)
        (set! unsafe-vector-ref.3 tmp.140)
        (set! tmp.293 r12)
        (set! r12 (+ r12 16))
        (set! tmp.327 (+ tmp.293 2))
        (set! tmp.141 tmp.327)
        (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.141 6 24)
        (set! unsafe-vector-set!.2 tmp.141)
        (set! tmp.294 r12)
        (set! r12 (+ r12 24))
        (set! tmp.328 (+ tmp.294 2))
        (set! tmp.142 tmp.328)
        (mset! tmp.142 -2 L.vector-init-loop.84.3)
        (mset! tmp.142 6 24)
        (set! vector-init-loop.84 tmp.142)
        (set! tmp.295 r12)
        (set! r12 (+ r12 24))
        (set! tmp.329 (+ tmp.295 2))
        (set! tmp.143 tmp.329)
        (mset! tmp.143 -2 L.make-init-vector.1.4)
        (mset! tmp.143 6 8)
        (set! make-init-vector.1 tmp.143)
        (set! tmp.296 r12)
        (set! r12 (+ r12 16))
        (set! tmp.330 (+ tmp.296 2))
        (set! tmp.144 tmp.330)
        (mset! tmp.144 -2 L.eq?.81.5)
        (mset! tmp.144 6 16)
        (set! eq?.81 tmp.144)
        (set! tmp.297 r12)
        (set! r12 (+ r12 16))
        (set! tmp.331 (+ tmp.297 2))
        (set! tmp.145 tmp.331)
        (mset! tmp.145 -2 L.cons.80.6)
        (mset! tmp.145 6 16)
        (set! cons.80 tmp.145)
        (set! tmp.298 r12)
        (set! r12 (+ r12 16))
        (set! tmp.332 (+ tmp.298 2))
        (set! tmp.146 tmp.332)
        (mset! tmp.146 -2 L.not.79.7)
        (mset! tmp.146 6 8)
        (set! not.79 tmp.146)
        (set! tmp.299 r12)
        (set! r12 (+ r12 16))
        (set! tmp.333 (+ tmp.299 2))
        (set! tmp.147 tmp.333)
        (mset! tmp.147 -2 L.vector?.78.8)
        (mset! tmp.147 6 8)
        (set! vector?.78 tmp.147)
        (set! tmp.300 r12)
        (set! r12 (+ r12 16))
        (set! tmp.334 (+ tmp.300 2))
        (set! tmp.148 tmp.334)
        (mset! tmp.148 -2 L.procedure?.77.9)
        (mset! tmp.148 6 8)
        (set! procedure?.77 tmp.148)
        (set! tmp.301 r12)
        (set! r12 (+ r12 16))
        (set! tmp.335 (+ tmp.301 2))
        (set! tmp.149 tmp.335)
        (mset! tmp.149 -2 L.pair?.76.10)
        (mset! tmp.149 6 8)
        (set! pair?.76 tmp.149)
        (set! tmp.302 r12)
        (set! r12 (+ r12 16))
        (set! tmp.336 (+ tmp.302 2))
        (set! tmp.150 tmp.336)
        (mset! tmp.150 -2 L.error?.75.11)
        (mset! tmp.150 6 8)
        (set! error?.75 tmp.150)
        (set! tmp.303 r12)
        (set! r12 (+ r12 16))
        (set! tmp.337 (+ tmp.303 2))
        (set! tmp.151 tmp.337)
        (mset! tmp.151 -2 L.ascii-char?.74.12)
        (mset! tmp.151 6 8)
        (set! ascii-char?.74 tmp.151)
        (set! tmp.304 r12)
        (set! r12 (+ r12 16))
        (set! tmp.338 (+ tmp.304 2))
        (set! tmp.152 tmp.338)
        (mset! tmp.152 -2 L.void?.73.13)
        (mset! tmp.152 6 8)
        (set! void?.73 tmp.152)
        (set! tmp.305 r12)
        (set! r12 (+ r12 16))
        (set! tmp.339 (+ tmp.305 2))
        (set! tmp.153 tmp.339)
        (mset! tmp.153 -2 L.empty?.72.14)
        (mset! tmp.153 6 8)
        (set! empty?.72 tmp.153)
        (set! tmp.306 r12)
        (set! r12 (+ r12 16))
        (set! tmp.340 (+ tmp.306 2))
        (set! tmp.154 tmp.340)
        (mset! tmp.154 -2 L.boolean?.71.15)
        (mset! tmp.154 6 8)
        (set! boolean?.71 tmp.154)
        (set! tmp.307 r12)
        (set! r12 (+ r12 16))
        (set! tmp.341 (+ tmp.307 2))
        (set! tmp.155 tmp.341)
        (mset! tmp.155 -2 L.fixnum?.70.16)
        (mset! tmp.155 6 8)
        (set! fixnum?.70 tmp.155)
        (set! tmp.308 r12)
        (set! r12 (+ r12 16))
        (set! tmp.342 (+ tmp.308 2))
        (set! tmp.156 tmp.342)
        (mset! tmp.156 -2 L.procedure-arity.69.17)
        (mset! tmp.156 6 8)
        (set! procedure-arity.69 tmp.156)
        (set! tmp.309 r12)
        (set! r12 (+ r12 16))
        (set! tmp.343 (+ tmp.309 2))
        (set! tmp.157 tmp.343)
        (mset! tmp.157 -2 L.cdr.68.18)
        (mset! tmp.157 6 8)
        (set! cdr.68 tmp.157)
        (set! tmp.310 r12)
        (set! r12 (+ r12 16))
        (set! tmp.344 (+ tmp.310 2))
        (set! tmp.158 tmp.344)
        (mset! tmp.158 -2 L.car.67.19)
        (mset! tmp.158 6 8)
        (set! car.67 tmp.158)
        (set! tmp.311 r12)
        (set! r12 (+ r12 24))
        (set! tmp.345 (+ tmp.311 2))
        (set! tmp.159 tmp.345)
        (mset! tmp.159 -2 L.vector-ref.66.20)
        (mset! tmp.159 6 16)
        (set! vector-ref.66 tmp.159)
        (set! tmp.312 r12)
        (set! r12 (+ r12 24))
        (set! tmp.346 (+ tmp.312 2))
        (set! tmp.160 tmp.346)
        (mset! tmp.160 -2 L.vector-set!.65.21)
        (mset! tmp.160 6 24)
        (set! vector-set!.65 tmp.160)
        (set! tmp.313 r12)
        (set! r12 (+ r12 16))
        (set! tmp.347 (+ tmp.313 2))
        (set! tmp.161 tmp.347)
        (mset! tmp.161 -2 L.vector-length.64.22)
        (mset! tmp.161 6 8)
        (set! vector-length.64 tmp.161)
        (set! tmp.314 r12)
        (set! r12 (+ r12 24))
        (set! tmp.348 (+ tmp.314 2))
        (set! tmp.162 tmp.348)
        (mset! tmp.162 -2 L.make-vector.63.23)
        (mset! tmp.162 6 8)
        (set! make-vector.63 tmp.162)
        (set! tmp.315 r12)
        (set! r12 (+ r12 16))
        (set! tmp.349 (+ tmp.315 2))
        (set! tmp.163 tmp.349)
        (mset! tmp.163 -2 L.>=.62.24)
        (mset! tmp.163 6 16)
        (set! >=.62 tmp.163)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.164 tmp.350)
        (mset! tmp.164 -2 L.>.61.25)
        (mset! tmp.164 6 16)
        (set! >.61 tmp.164)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.165 tmp.351)
        (mset! tmp.165 -2 L.<=.60.26)
        (mset! tmp.165 6 16)
        (set! <=.60 tmp.165)
        (set! tmp.318 r12)
        (set! r12 (+ r12 16))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.166 tmp.352)
        (mset! tmp.166 -2 L.<.59.27)
        (mset! tmp.166 6 16)
        (set! <.59 tmp.166)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.167 tmp.353)
        (mset! tmp.167 -2 L.-.58.28)
        (mset! tmp.167 6 16)
        (set! |-.58| tmp.167)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.168 tmp.354)
        (mset! tmp.168 -2 L.+.57.29)
        (mset! tmp.168 6 16)
        (set! |+.57| tmp.168)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.169 tmp.355)
        (mset! tmp.169 -2 L.*.56.30)
        (mset! tmp.169 6 16)
        (set! *.56 tmp.169)
        (mset! vector-init-loop.84 14 vector-init-loop.84)
        (mset! make-init-vector.1 14 vector-init-loop.84)
        (mset! vector-ref.66 14 unsafe-vector-ref.3)
        (mset! vector-set!.65 14 unsafe-vector-set!.2)
        (mset! make-vector.63 14 make-init-vector.1)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.170 tmp.356)
        (mset! tmp.170 -2 L.sum.4.31)
        (mset! tmp.170 6 64)
        (set! sum.4 tmp.170)
        (mset! sum.4 14 |+.57|)
        (set! x.15 80)
        (set! tmp.135 eq?.81)
        (set! rbp (+ rbp 40))
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi eq?.81)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! tmp.324 rax)
        (if (neq? tmp.324 6)
          (begin
            (set! tmp.136 sum.4)
            (set! rbp (+ rbp 40))
            (return-point L.rp.106
              (begin
                (set! nfv.359 64)
                (set! nfv.358 56)
                (set! nfv.357 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi sum.4)
                (set! r15 L.rp.106)
                (jump
                 L.sum.4.31
                 rbp
                 r15
                 nfv.357
                 nfv.358
                 nfv.359
                 r9
                 r8
                 rcx
                 rdx
                 rsi
                 rdi)))
            (set! rbp (- rbp 40))
            (set! j.16 rax)
            (set! rax j.16)
            (jump ra.325 rbp rax))
          (begin
            (set! x.17 40)
            (set! tmp.137 sum.4)
            (set! fv2 x.17)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi sum.4)
            (set! r15 ra.325)
            (jump L.sum.4.31 rbp r15 fv0 fv1 fv2 r9 r8 rcx rdx rsi rdi)))))
    (define L.sum.4.31
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.360 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.126 ra.360 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.126 a.5 ra.360 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv2 c.126 a.5 b.6 g.11 ra.360 rbp)
         (c.126 a.5 b.6 g.11 h.12 ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         ((rax g.11 h.12 |+.57| ra.360 rbp)
          ((a.5 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         ((rax i.13 |+.57| ra.360 rbp)
          ((g.11 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.14 i.13 |+.57| ra.360 rbp)
         (j.14 i.13 |+.57| ra.360 rbp)
         (i.13 |+.57| ra.360 rdx rbp)
         (|+.57| ra.360 rsi rdx rbp)
         (ra.360 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.360
          (tmp.134
           j.14
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (tmp.134
           j.14
           tmp.133
           i.13
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           ra.360))
         (fv2 (g.11 f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv1 (f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv0 (e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (r9 (d.8 c.7 b.6 a.5 c.126 ra.360))
         (r8 (c.7 b.6 a.5 c.126 ra.360))
         (rcx (b.6 a.5 c.126 ra.360))
         (rdx (i.13 g.11 r15 rdi rsi |+.57| rbp a.5 c.126 ra.360))
         (rsi (r15 rdi |+.57| rdx rbp c.126 ra.360))
         (rdi (r15 rsi rdx rbp ra.360))
         (c.126
          (h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.360
           rbp))
         (a.5
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           ra.360
           rbp))
         (b.6
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           a.5
           ra.360
           rbp))
         (c.7 (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (d.8 (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (e.9 (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (f.10 (fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (g.11
          (rdx
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           fv2
           c.126
           a.5
           b.6
           ra.360
           rbp))
         (h.12 (tmp.133 i.13 rax tmp.132 |+.57| c.126 a.5 b.6 g.11 ra.360 rbp))
         (|+.57| (j.14 i.13 rsi rdx rax rbp ra.360 h.12 g.11 b.6 a.5))
         (tmp.132 (a.5 b.6 g.11 h.12 ra.360 rbp))
         (rax (i.13 rbp ra.360 |+.57| h.12 g.11))
         (r15 (rdi rsi rdx rbp))
         (i.13 (rdx tmp.134 j.14 rax tmp.133 g.11 h.12 |+.57| ra.360 rbp))
         (tmp.133 (g.11 h.12 i.13 ra.360 rbp))
         (j.14 (tmp.134 i.13 |+.57| ra.360 rbp))
         (tmp.134 (j.14 i.13 ra.360 rbp))))
       (assignment
        ((ra.360 fv3)
         (|+.57| fv0)
         (h.12 fv1)
         (g.11 fv4)
         (i.13 fv2)
         (a.5 r15)
         (c.126 r14)
         (b.6 r13)
         (c.7 rdi)
         (d.8 r8)
         (e.9 r9)
         (f.10 r9)
         (tmp.132 r14)
         (tmp.133 r15)
         (j.14 r15)
         (tmp.134 r14))))
      (begin
        (set! ra.360 r15)
        (set! c.126 rdi)
        (set! a.5 rsi)
        (set! b.6 rdx)
        (set! c.7 rcx)
        (set! d.8 r8)
        (set! e.9 r9)
        (set! f.10 fv0)
        (set! g.11 fv1)
        (set! h.12 fv2)
        (set! |+.57| (mref c.126 14))
        (set! tmp.132 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.107
          (begin
            (set! rdx b.6)
            (set! rsi a.5)
            (set! rdi |+.57|)
            (set! r15 L.rp.107)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! i.13 rax)
        (set! tmp.133 |+.57|)
        (set! rbp (+ rbp 40))
        (return-point L.rp.108
          (begin
            (set! rdx h.12)
            (set! rsi g.11)
            (set! rdi |+.57|)
            (set! r15 L.rp.108)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 40))
        (set! j.14 rax)
        (set! tmp.134 |+.57|)
        (set! rdx j.14)
        (set! rsi i.13)
        (set! rdi |+.57|)
        (set! r15 ra.360)
        (jump L.+.57.29 rbp r15 rdx rsi rdi)))
    (define L.*.56.30
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.361 rbp)
         (rsi rdx ra.361 rbp)
         (rdx tmp.18 ra.361 rbp)
         (tmp.19 tmp.18 ra.361 rbp)
         (tmp.362 tmp.19 tmp.18 ra.361 rbp)
         (tmp.177 tmp.19 tmp.18 ra.361 rbp)
         ((tmp.19 tmp.18 ra.361 rbp)
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.125 r15 rdi rsi tmp.18 ra.361 rbp))
         (rbp (tmp.177 tmp.362 tmp.19 tmp.18 c.125 ra.361 r15 rdi rsi rdx))
         (ra.361 (tmp.177 tmp.362 tmp.19 tmp.18 c.125 rbp rdi rsi rdx))
         (tmp.18 (tmp.177 tmp.362 tmp.19 ra.361 rbp rdx))
         (rsi (c.125 r15 rdi ra.361 rdx rbp))
         (rdi (r15 ra.361 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.125 (rsi rdx ra.361 rbp))
         (tmp.19 (tmp.177 tmp.362 tmp.18 ra.361 rbp))
         (tmp.362 (rbp ra.361 tmp.18 tmp.19))
         (tmp.177 (tmp.19 tmp.18 ra.361 rbp))))
       (assignment
        ((ra.361 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.177 r9)
         (c.125 r14)
         (tmp.362 r9))))
      (begin
        (set! ra.361 r15)
        (set! c.125 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.362 (bitwise-and tmp.19 7))
        (set! tmp.177 tmp.362)
        (if (eq? tmp.177 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi)))))
    (define L.+.57.29
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.363 rbp)
         (rsi rdx ra.363 rbp)
         (rdx tmp.20 ra.363 rbp)
         (tmp.21 tmp.20 ra.363 rbp)
         (tmp.364 tmp.21 tmp.20 ra.363 rbp)
         (tmp.183 tmp.21 tmp.20 ra.363 rbp)
         ((tmp.21 tmp.20 ra.363 rbp)
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.124 r15 rdi rsi tmp.20 ra.363 rbp))
         (rbp (tmp.183 tmp.364 tmp.21 tmp.20 c.124 ra.363 r15 rdi rsi rdx))
         (ra.363 (tmp.183 tmp.364 tmp.21 tmp.20 c.124 rbp rdi rsi rdx))
         (tmp.20 (tmp.183 tmp.364 tmp.21 ra.363 rbp rdx))
         (rsi (c.124 r15 rdi ra.363 rdx rbp))
         (rdi (r15 ra.363 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.124 (rsi rdx ra.363 rbp))
         (tmp.21 (tmp.183 tmp.364 tmp.20 ra.363 rbp))
         (tmp.364 (rbp ra.363 tmp.20 tmp.21))
         (tmp.183 (tmp.21 tmp.20 ra.363 rbp))))
       (assignment
        ((ra.363 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.183 r9)
         (c.124 r14)
         (tmp.364 r9))))
      (begin
        (set! ra.363 r15)
        (set! c.124 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.364 (bitwise-and tmp.21 7))
        (set! tmp.183 tmp.364)
        (if (eq? tmp.183 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi)))))
    (define L.-.58.28
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.365 rbp)
         (rsi rdx ra.365 rbp)
         (rdx tmp.22 ra.365 rbp)
         (tmp.23 tmp.22 ra.365 rbp)
         (tmp.366 tmp.23 tmp.22 ra.365 rbp)
         (tmp.189 tmp.23 tmp.22 ra.365 rbp)
         ((tmp.23 tmp.22 ra.365 rbp)
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.123 r15 rdi rsi tmp.22 ra.365 rbp))
         (rbp (tmp.189 tmp.366 tmp.23 tmp.22 c.123 ra.365 r15 rdi rsi rdx))
         (ra.365 (tmp.189 tmp.366 tmp.23 tmp.22 c.123 rbp rdi rsi rdx))
         (tmp.22 (tmp.189 tmp.366 tmp.23 ra.365 rbp rdx))
         (rsi (c.123 r15 rdi ra.365 rdx rbp))
         (rdi (r15 ra.365 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.123 (rsi rdx ra.365 rbp))
         (tmp.23 (tmp.189 tmp.366 tmp.22 ra.365 rbp))
         (tmp.366 (rbp ra.365 tmp.22 tmp.23))
         (tmp.189 (tmp.23 tmp.22 ra.365 rbp))))
       (assignment
        ((ra.365 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.189 r9)
         (c.123 r14)
         (tmp.366 r9))))
      (begin
        (set! ra.365 r15)
        (set! c.123 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.366 (bitwise-and tmp.23 7))
        (set! tmp.189 tmp.366)
        (if (eq? tmp.189 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.<.59.27
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.367 rbp)
         (rsi rdx ra.367 rbp)
         (rdx tmp.24 ra.367 rbp)
         (tmp.25 tmp.24 ra.367 rbp)
         (tmp.368 tmp.25 tmp.24 ra.367 rbp)
         (tmp.196 tmp.25 tmp.24 ra.367 rbp)
         ((tmp.25 tmp.24 ra.367 rbp)
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.122 r15 rdi rsi tmp.24 ra.367 rbp))
         (rbp (tmp.196 tmp.368 tmp.25 tmp.24 c.122 ra.367 r15 rdi rsi rdx))
         (ra.367 (tmp.196 tmp.368 tmp.25 tmp.24 c.122 rbp rdi rsi rdx))
         (tmp.24 (tmp.196 tmp.368 tmp.25 ra.367 rbp rdx))
         (rsi (c.122 r15 rdi ra.367 rdx rbp))
         (rdi (r15 ra.367 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.122 (rsi rdx ra.367 rbp))
         (tmp.25 (tmp.196 tmp.368 tmp.24 ra.367 rbp))
         (tmp.368 (rbp ra.367 tmp.24 tmp.25))
         (tmp.196 (tmp.25 tmp.24 ra.367 rbp))))
       (assignment
        ((ra.367 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.196 r9)
         (c.122 r14)
         (tmp.368 r9))))
      (begin
        (set! ra.367 r15)
        (set! c.122 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.368 (bitwise-and tmp.25 7))
        (set! tmp.196 tmp.368)
        (if (eq? tmp.196 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<=.60.26
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.369 rbp)
         (rsi rdx ra.369 rbp)
         (rdx tmp.26 ra.369 rbp)
         (tmp.27 tmp.26 ra.369 rbp)
         (tmp.370 tmp.27 tmp.26 ra.369 rbp)
         (tmp.203 tmp.27 tmp.26 ra.369 rbp)
         ((tmp.27 tmp.26 ra.369 rbp)
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.26 ra.369 rbp))
         (rbp (tmp.203 tmp.370 tmp.27 tmp.26 c.121 ra.369 r15 rdi rsi rdx))
         (ra.369 (tmp.203 tmp.370 tmp.27 tmp.26 c.121 rbp rdi rsi rdx))
         (tmp.26 (tmp.203 tmp.370 tmp.27 ra.369 rbp rdx))
         (rsi (c.121 r15 rdi ra.369 rdx rbp))
         (rdi (r15 ra.369 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.369 rbp))
         (tmp.27 (tmp.203 tmp.370 tmp.26 ra.369 rbp))
         (tmp.370 (rbp ra.369 tmp.26 tmp.27))
         (tmp.203 (tmp.27 tmp.26 ra.369 rbp))))
       (assignment
        ((ra.369 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.203 r9)
         (c.121 r14)
         (tmp.370 r9))))
      (begin
        (set! ra.369 r15)
        (set! c.121 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.370 (bitwise-and tmp.27 7))
        (set! tmp.203 tmp.370)
        (if (eq? tmp.203 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.>.61.25
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.371 rbp)
         (rsi rdx ra.371 rbp)
         (rdx tmp.28 ra.371 rbp)
         (tmp.29 tmp.28 ra.371 rbp)
         (tmp.372 tmp.29 tmp.28 ra.371 rbp)
         (tmp.210 tmp.29 tmp.28 ra.371 rbp)
         ((tmp.29 tmp.28 ra.371 rbp)
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.28 ra.371 rbp))
         (rbp (tmp.210 tmp.372 tmp.29 tmp.28 c.120 ra.371 r15 rdi rsi rdx))
         (ra.371 (tmp.210 tmp.372 tmp.29 tmp.28 c.120 rbp rdi rsi rdx))
         (tmp.28 (tmp.210 tmp.372 tmp.29 ra.371 rbp rdx))
         (rsi (c.120 r15 rdi ra.371 rdx rbp))
         (rdi (r15 ra.371 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.371 rbp))
         (tmp.29 (tmp.210 tmp.372 tmp.28 ra.371 rbp))
         (tmp.372 (rbp ra.371 tmp.28 tmp.29))
         (tmp.210 (tmp.29 tmp.28 ra.371 rbp))))
       (assignment
        ((ra.371 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.210 r9)
         (c.120 r14)
         (tmp.372 r9))))
      (begin
        (set! ra.371 r15)
        (set! c.120 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.372 (bitwise-and tmp.29 7))
        (set! tmp.210 tmp.372)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>=.62.24
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.373 rbp)
         (rsi rdx ra.373 rbp)
         (rdx tmp.30 ra.373 rbp)
         (tmp.31 tmp.30 ra.373 rbp)
         (tmp.374 tmp.31 tmp.30 ra.373 rbp)
         (tmp.217 tmp.31 tmp.30 ra.373 rbp)
         ((tmp.31 tmp.30 ra.373 rbp)
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.30 ra.373 rbp))
         (rbp (tmp.217 tmp.374 tmp.31 tmp.30 c.119 ra.373 r15 rdi rsi rdx))
         (ra.373 (tmp.217 tmp.374 tmp.31 tmp.30 c.119 rbp rdi rsi rdx))
         (tmp.30 (tmp.217 tmp.374 tmp.31 ra.373 rbp rdx))
         (rsi (c.119 r15 rdi ra.373 rdx rbp))
         (rdi (r15 ra.373 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.373 rbp))
         (tmp.31 (tmp.217 tmp.374 tmp.30 ra.373 rbp))
         (tmp.374 (rbp ra.373 tmp.30 tmp.31))
         (tmp.217 (tmp.31 tmp.30 ra.373 rbp))))
       (assignment
        ((ra.373 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.217 r9)
         (c.119 r14)
         (tmp.374 r9))))
      (begin
        (set! ra.373 r15)
        (set! c.119 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.374 (bitwise-and tmp.31 7))
        (set! tmp.217 tmp.374)
        (if (eq? tmp.217 0)
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.63.23
      ((locals ())
       (undead-out
        ((rdi rsi ra.375 rbp)
         (rsi c.118 ra.375 rbp)
         (c.118 tmp.32 ra.375 rbp)
         (tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.376 tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.220 tmp.32 make-init-vector.1 ra.375 rbp)
         ((tmp.32 make-init-vector.1 ra.375 rbp)
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.375 rbp))
         (rbp
          (tmp.220
           tmp.376
           make-init-vector.1
           tmp.32
           c.118
           ra.375
           r15
           rdi
           rsi
           rdx))
         (ra.375
          (tmp.220 tmp.376 make-init-vector.1 tmp.32 c.118 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.220 tmp.376 rbp ra.375 tmp.32 rdx))
         (rsi (c.118 r15 rdi ra.375 rdx rbp))
         (rdi (r15 ra.375 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (tmp.32 rsi ra.375 rbp))
         (tmp.32 (tmp.220 tmp.376 make-init-vector.1 c.118 ra.375 rbp))
         (tmp.376 (rbp ra.375 make-init-vector.1 tmp.32))
         (tmp.220 (tmp.32 make-init-vector.1 ra.375 rbp))))
       (assignment
        ((ra.375 r15)
         (tmp.32 r14)
         (make-init-vector.1 r13)
         (tmp.220 r9)
         (c.118 r13)
         (tmp.376 r9))))
      (begin
        (set! ra.375 r15)
        (set! c.118 rdi)
        (set! tmp.32 rsi)
        (set! make-init-vector.1 (mref c.118 14))
        (set! tmp.376 (bitwise-and tmp.32 7))
        (set! tmp.220 tmp.376)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.64.22
      ((locals ())
       (undead-out
        ((rdi rsi ra.377 rbp)
         (rsi ra.377 rbp)
         (tmp.33 ra.377 rbp)
         (tmp.378 tmp.33 ra.377 rbp)
         (tmp.223 tmp.33 ra.377 rbp)
         ((tmp.33 ra.377 rbp)
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.117 r15 rdi ra.377 rbp))
         (rbp (tmp.223 tmp.378 tmp.33 c.117 ra.377 r15 rdi rsi))
         (ra.377 (tmp.223 tmp.378 tmp.33 c.117 rbp rdi rsi))
         (rdi (r15 ra.377 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.117 (rsi ra.377 rbp))
         (tmp.33 (tmp.223 tmp.378 ra.377 rbp))
         (tmp.378 (rbp ra.377 tmp.33))
         (tmp.223 (tmp.33 ra.377 rbp))))
       (assignment
        ((ra.377 r15) (tmp.33 r14) (tmp.223 r13) (c.117 r14) (tmp.378 r13))))
      (begin
        (set! ra.377 r15)
        (set! c.117 rdi)
        (set! tmp.33 rsi)
        (set! tmp.378 (bitwise-and tmp.33 7))
        (set! tmp.223 tmp.378)
        (if (eq? tmp.223 3)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi)))))
    (define L.vector-set!.65.21
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.379 rbp)
         (rsi rdx rcx c.116 ra.379 rbp)
         (rdx rcx c.116 tmp.34 ra.379 rbp)
         (rcx c.116 tmp.35 tmp.34 ra.379 rbp)
         (c.116 tmp.35 tmp.36 tmp.34 ra.379 rbp)
         (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.380 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.229 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         ((tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp))
         (rbp
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           ra.379
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.379
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.34
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           c.116
           ra.379
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.229 tmp.380 rbp ra.379 tmp.34 tmp.36 tmp.35 rcx r8))
         (tmp.36
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           c.116
           tmp.35
           tmp.34
           ra.379
           rbp
           r8))
         (rcx
          (tmp.35
           c.116
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.34
           ra.379
           r8
           rbp))
         (rdx (c.116 r15 rdi rsi tmp.34 ra.379 rcx r8 rbp))
         (rsi (c.116 r15 rdi ra.379 rdx rcx r8 rbp))
         (rdi (r15 ra.379 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.116 (tmp.36 tmp.35 tmp.34 rsi rdx rcx ra.379 rbp))
         (tmp.35
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           rcx
           c.116
           tmp.34
           ra.379
           rbp))
         (tmp.380 (rbp ra.379 tmp.34 unsafe-vector-set!.2 tmp.36 tmp.35))
         (tmp.229 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp))))
       (assignment
        ((ra.379 r15)
         (tmp.34 r14)
         (tmp.35 r13)
         (tmp.36 r9)
         (unsafe-vector-set!.2 rdi)
         (c.116 r8)
         (tmp.229 r8)
         (tmp.380 r8))))
      (begin
        (set! ra.379 r15)
        (set! c.116 rdi)
        (set! tmp.34 rsi)
        (set! tmp.35 rdx)
        (set! tmp.36 rcx)
        (set! unsafe-vector-set!.2 (mref c.116 14))
        (set! tmp.380 (bitwise-and tmp.35 7))
        (set! tmp.229 tmp.380)
        (if (eq? tmp.229 0)
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.66.20
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.381 rbp)
         (rsi rdx c.115 ra.381 rbp)
         (rdx c.115 tmp.37 ra.381 rbp)
         (c.115 tmp.38 tmp.37 ra.381 rbp)
         (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.382 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.235 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         ((tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.37 ra.381 rbp))
         (rbp
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           ra.381
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.381
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.37
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           c.115
           ra.381
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.235 tmp.382 rbp ra.381 tmp.37 tmp.38 rcx))
         (rdx (c.115 r15 rdi rsi tmp.37 ra.381 rcx rbp))
         (rsi (c.115 r15 rdi ra.381 rdx rcx rbp))
         (rdi (r15 ra.381 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.115 (tmp.38 tmp.37 rsi rdx ra.381 rbp))
         (tmp.38 (tmp.235 tmp.382 unsafe-vector-ref.3 c.115 tmp.37 ra.381 rbp))
         (tmp.382 (rbp ra.381 tmp.37 unsafe-vector-ref.3 tmp.38))
         (tmp.235 (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp))))
       (assignment
        ((ra.381 r15)
         (tmp.37 r14)
         (tmp.38 r13)
         (unsafe-vector-ref.3 r9)
         (c.115 r9)
         (tmp.235 r8)
         (tmp.382 r8))))
      (begin
        (set! ra.381 r15)
        (set! c.115 rdi)
        (set! tmp.37 rsi)
        (set! tmp.38 rdx)
        (set! unsafe-vector-ref.3 (mref c.115 14))
        (set! tmp.382 (bitwise-and tmp.38 7))
        (set! tmp.235 tmp.382)
        (if (eq? tmp.235 0)
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.67.19
      ((locals ())
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi ra.383 rbp)
         (tmp.39 ra.383 rbp)
         (tmp.384 tmp.39 ra.383 rbp)
         (tmp.238 tmp.39 ra.383 rbp)
         ((tmp.39 ra.383 rbp)
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.114 r15 rdi ra.383 rbp))
         (rbp (tmp.238 tmp.384 tmp.39 c.114 ra.383 r15 rdi rsi))
         (ra.383 (tmp.238 tmp.384 tmp.39 c.114 rbp rdi rsi))
         (rdi (r15 ra.383 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.114 (rsi ra.383 rbp))
         (tmp.39 (tmp.238 tmp.384 ra.383 rbp))
         (tmp.384 (rbp ra.383 tmp.39))
         (tmp.238 (tmp.39 ra.383 rbp))))
       (assignment
        ((ra.383 r15) (tmp.39 r14) (tmp.238 r13) (c.114 r14) (tmp.384 r13))))
      (begin
        (set! ra.383 r15)
        (set! c.114 rdi)
        (set! tmp.39 rsi)
        (set! tmp.384 (bitwise-and tmp.39 7))
        (set! tmp.238 tmp.384)
        (if (eq? tmp.238 1)
          (begin
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi)))))
    (define L.cdr.68.18
      ((locals ())
       (undead-out
        ((rdi rsi ra.385 rbp)
         (rsi ra.385 rbp)
         (tmp.40 ra.385 rbp)
         (tmp.386 tmp.40 ra.385 rbp)
         (tmp.241 tmp.40 ra.385 rbp)
         ((tmp.40 ra.385 rbp)
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.113 r15 rdi ra.385 rbp))
         (rbp (tmp.241 tmp.386 tmp.40 c.113 ra.385 r15 rdi rsi))
         (ra.385 (tmp.241 tmp.386 tmp.40 c.113 rbp rdi rsi))
         (rdi (r15 ra.385 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.385 rbp))
         (tmp.40 (tmp.241 tmp.386 ra.385 rbp))
         (tmp.386 (rbp ra.385 tmp.40))
         (tmp.241 (tmp.40 ra.385 rbp))))
       (assignment
        ((ra.385 r15) (tmp.40 r14) (tmp.241 r13) (c.113 r14) (tmp.386 r13))))
      (begin
        (set! ra.385 r15)
        (set! c.113 rdi)
        (set! tmp.40 rsi)
        (set! tmp.386 (bitwise-and tmp.40 7))
        (set! tmp.241 tmp.386)
        (if (eq? tmp.241 1)
          (begin
            (set! rsi tmp.40)
            (set! rdi 14)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.40)
            (set! rdi 6)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.procedure-arity.69.17
      ((locals ())
       (undead-out
        ((rdi rsi ra.387 rbp)
         (rsi ra.387 rbp)
         (tmp.41 ra.387 rbp)
         (tmp.388 tmp.41 ra.387 rbp)
         (tmp.244 tmp.41 ra.387 rbp)
         ((tmp.41 ra.387 rbp)
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.112 r15 rdi ra.387 rbp))
         (rbp (tmp.244 tmp.388 tmp.41 c.112 ra.387 r15 rdi rsi))
         (ra.387 (tmp.244 tmp.388 tmp.41 c.112 rbp rdi rsi))
         (rdi (r15 ra.387 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.112 (rsi ra.387 rbp))
         (tmp.41 (tmp.244 tmp.388 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.41))
         (tmp.244 (tmp.41 ra.387 rbp))))
       (assignment
        ((ra.387 r15) (tmp.41 r14) (tmp.244 r13) (c.112 r14) (tmp.388 r13))))
      (begin
        (set! ra.387 r15)
        (set! c.112 rdi)
        (set! tmp.41 rsi)
        (set! tmp.388 (bitwise-and tmp.41 7))
        (set! tmp.244 tmp.388)
        (if (eq? tmp.244 2)
          (begin
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.fixnum?.70.16
      ((locals ())
       (undead-out
        ((rdi rsi ra.389 rbp)
         (rsi ra.389 rbp)
         (tmp.42 ra.389 rbp)
         (tmp.390 ra.389 rbp)
         (tmp.246 ra.389 rbp)
         ((ra.389 rbp)
          ((ra.389 rax rbp) (rax rbp))
          ((ra.389 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.389 rbp))
         (rbp (tmp.246 tmp.390 tmp.42 c.111 ra.389 rax))
         (ra.389 (tmp.246 tmp.390 tmp.42 c.111 rdi rsi rbp rax))
         (rsi (c.111 ra.389))
         (rdi (ra.389))
         (c.111 (rsi ra.389 rbp))
         (tmp.42 (ra.389 rbp))
         (tmp.390 (rbp ra.389))
         (tmp.246 (ra.389 rbp))))
       (assignment
        ((ra.389 r15) (c.111 r14) (tmp.246 r14) (tmp.42 r14) (tmp.390 r14))))
      (begin
        (set! ra.389 r15)
        (set! c.111 rdi)
        (set! tmp.42 rsi)
        (set! tmp.390 (bitwise-and tmp.42 7))
        (set! tmp.246 tmp.390)
        (if (eq? tmp.246 0)
          (begin (set! rax 14) (jump ra.389 rbp rax))
          (begin (set! rax 6) (jump ra.389 rbp rax)))))
    (define L.boolean?.71.15
      ((locals ())
       (undead-out
        ((rdi rsi ra.391 rbp)
         (rsi ra.391 rbp)
         (tmp.43 ra.391 rbp)
         (tmp.392 ra.391 rbp)
         (tmp.248 ra.391 rbp)
         ((ra.391 rbp)
          ((ra.391 rax rbp) (rax rbp))
          ((ra.391 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.391 rbp))
         (rbp (tmp.248 tmp.392 tmp.43 c.110 ra.391 rax))
         (ra.391 (tmp.248 tmp.392 tmp.43 c.110 rdi rsi rbp rax))
         (rsi (c.110 ra.391))
         (rdi (ra.391))
         (c.110 (rsi ra.391 rbp))
         (tmp.43 (ra.391 rbp))
         (tmp.392 (rbp ra.391))
         (tmp.248 (ra.391 rbp))))
       (assignment
        ((ra.391 r15) (c.110 r14) (tmp.248 r14) (tmp.43 r14) (tmp.392 r14))))
      (begin
        (set! ra.391 r15)
        (set! c.110 rdi)
        (set! tmp.43 rsi)
        (set! tmp.392 (bitwise-and tmp.43 247))
        (set! tmp.248 tmp.392)
        (if (eq? tmp.248 6)
          (begin (set! rax 14) (jump ra.391 rbp rax))
          (begin (set! rax 6) (jump ra.391 rbp rax)))))
    (define L.empty?.72.14
      ((locals ())
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi ra.393 rbp)
         (tmp.44 ra.393 rbp)
         (tmp.394 ra.393 rbp)
         (tmp.250 ra.393 rbp)
         ((ra.393 rbp)
          ((ra.393 rax rbp) (rax rbp))
          ((ra.393 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.393 rbp))
         (rbp (tmp.250 tmp.394 tmp.44 c.109 ra.393 rax))
         (ra.393 (tmp.250 tmp.394 tmp.44 c.109 rdi rsi rbp rax))
         (rsi (c.109 ra.393))
         (rdi (ra.393))
         (c.109 (rsi ra.393 rbp))
         (tmp.44 (ra.393 rbp))
         (tmp.394 (rbp ra.393))
         (tmp.250 (ra.393 rbp))))
       (assignment
        ((ra.393 r15) (c.109 r14) (tmp.250 r14) (tmp.44 r14) (tmp.394 r14))))
      (begin
        (set! ra.393 r15)
        (set! c.109 rdi)
        (set! tmp.44 rsi)
        (set! tmp.394 (bitwise-and tmp.44 255))
        (set! tmp.250 tmp.394)
        (if (eq? tmp.250 22)
          (begin (set! rax 14) (jump ra.393 rbp rax))
          (begin (set! rax 6) (jump ra.393 rbp rax)))))
    (define L.void?.73.13
      ((locals ())
       (undead-out
        ((rdi rsi ra.395 rbp)
         (rsi ra.395 rbp)
         (tmp.45 ra.395 rbp)
         (tmp.396 ra.395 rbp)
         (tmp.252 ra.395 rbp)
         ((ra.395 rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((ra.395 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.395 rbp))
         (rbp (tmp.252 tmp.396 tmp.45 c.108 ra.395 rax))
         (ra.395 (tmp.252 tmp.396 tmp.45 c.108 rdi rsi rbp rax))
         (rsi (c.108 ra.395))
         (rdi (ra.395))
         (c.108 (rsi ra.395 rbp))
         (tmp.45 (ra.395 rbp))
         (tmp.396 (rbp ra.395))
         (tmp.252 (ra.395 rbp))))
       (assignment
        ((ra.395 r15) (c.108 r14) (tmp.252 r14) (tmp.45 r14) (tmp.396 r14))))
      (begin
        (set! ra.395 r15)
        (set! c.108 rdi)
        (set! tmp.45 rsi)
        (set! tmp.396 (bitwise-and tmp.45 255))
        (set! tmp.252 tmp.396)
        (if (eq? tmp.252 30)
          (begin (set! rax 14) (jump ra.395 rbp rax))
          (begin (set! rax 6) (jump ra.395 rbp rax)))))
    (define L.ascii-char?.74.12
      ((locals ())
       (undead-out
        ((rdi rsi ra.397 rbp)
         (rsi ra.397 rbp)
         (tmp.46 ra.397 rbp)
         (tmp.398 ra.397 rbp)
         (tmp.254 ra.397 rbp)
         ((ra.397 rbp)
          ((ra.397 rax rbp) (rax rbp))
          ((ra.397 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.397 rbp))
         (rbp (tmp.254 tmp.398 tmp.46 c.107 ra.397 rax))
         (ra.397 (tmp.254 tmp.398 tmp.46 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.397))
         (rdi (ra.397))
         (c.107 (rsi ra.397 rbp))
         (tmp.46 (ra.397 rbp))
         (tmp.398 (rbp ra.397))
         (tmp.254 (ra.397 rbp))))
       (assignment
        ((ra.397 r15) (c.107 r14) (tmp.254 r14) (tmp.46 r14) (tmp.398 r14))))
      (begin
        (set! ra.397 r15)
        (set! c.107 rdi)
        (set! tmp.46 rsi)
        (set! tmp.398 (bitwise-and tmp.46 255))
        (set! tmp.254 tmp.398)
        (if (eq? tmp.254 46)
          (begin (set! rax 14) (jump ra.397 rbp rax))
          (begin (set! rax 6) (jump ra.397 rbp rax)))))
    (define L.error?.75.11
      ((locals ())
       (undead-out
        ((rdi rsi ra.399 rbp)
         (rsi ra.399 rbp)
         (tmp.47 ra.399 rbp)
         (tmp.400 ra.399 rbp)
         (tmp.256 ra.399 rbp)
         ((ra.399 rbp)
          ((ra.399 rax rbp) (rax rbp))
          ((ra.399 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.399 rbp))
         (rbp (tmp.256 tmp.400 tmp.47 c.106 ra.399 rax))
         (ra.399 (tmp.256 tmp.400 tmp.47 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.399))
         (rdi (ra.399))
         (c.106 (rsi ra.399 rbp))
         (tmp.47 (ra.399 rbp))
         (tmp.400 (rbp ra.399))
         (tmp.256 (ra.399 rbp))))
       (assignment
        ((ra.399 r15) (c.106 r14) (tmp.256 r14) (tmp.47 r14) (tmp.400 r14))))
      (begin
        (set! ra.399 r15)
        (set! c.106 rdi)
        (set! tmp.47 rsi)
        (set! tmp.400 (bitwise-and tmp.47 255))
        (set! tmp.256 tmp.400)
        (if (eq? tmp.256 62)
          (begin (set! rax 14) (jump ra.399 rbp rax))
          (begin (set! rax 6) (jump ra.399 rbp rax)))))
    (define L.pair?.76.10
      ((locals ())
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi ra.401 rbp)
         (tmp.48 ra.401 rbp)
         (tmp.402 ra.401 rbp)
         (tmp.258 ra.401 rbp)
         ((ra.401 rbp)
          ((ra.401 rax rbp) (rax rbp))
          ((ra.401 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.401 rbp))
         (rbp (tmp.258 tmp.402 tmp.48 c.105 ra.401 rax))
         (ra.401 (tmp.258 tmp.402 tmp.48 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.401))
         (rdi (ra.401))
         (c.105 (rsi ra.401 rbp))
         (tmp.48 (ra.401 rbp))
         (tmp.402 (rbp ra.401))
         (tmp.258 (ra.401 rbp))))
       (assignment
        ((ra.401 r15) (c.105 r14) (tmp.258 r14) (tmp.48 r14) (tmp.402 r14))))
      (begin
        (set! ra.401 r15)
        (set! c.105 rdi)
        (set! tmp.48 rsi)
        (set! tmp.402 (bitwise-and tmp.48 7))
        (set! tmp.258 tmp.402)
        (if (eq? tmp.258 1)
          (begin (set! rax 14) (jump ra.401 rbp rax))
          (begin (set! rax 6) (jump ra.401 rbp rax)))))
    (define L.procedure?.77.9
      ((locals ())
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.49 ra.403 rbp)
         (tmp.404 ra.403 rbp)
         (tmp.260 ra.403 rbp)
         ((ra.403 rbp)
          ((ra.403 rax rbp) (rax rbp))
          ((ra.403 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.403 rbp))
         (rbp (tmp.260 tmp.404 tmp.49 c.104 ra.403 rax))
         (ra.403 (tmp.260 tmp.404 tmp.49 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.403))
         (rdi (ra.403))
         (c.104 (rsi ra.403 rbp))
         (tmp.49 (ra.403 rbp))
         (tmp.404 (rbp ra.403))
         (tmp.260 (ra.403 rbp))))
       (assignment
        ((ra.403 r15) (c.104 r14) (tmp.260 r14) (tmp.49 r14) (tmp.404 r14))))
      (begin
        (set! ra.403 r15)
        (set! c.104 rdi)
        (set! tmp.49 rsi)
        (set! tmp.404 (bitwise-and tmp.49 7))
        (set! tmp.260 tmp.404)
        (if (eq? tmp.260 2)
          (begin (set! rax 14) (jump ra.403 rbp rax))
          (begin (set! rax 6) (jump ra.403 rbp rax)))))
    (define L.vector?.78.8
      ((locals ())
       (undead-out
        ((rdi rsi ra.405 rbp)
         (rsi ra.405 rbp)
         (tmp.50 ra.405 rbp)
         (tmp.406 ra.405 rbp)
         (tmp.262 ra.405 rbp)
         ((ra.405 rbp)
          ((ra.405 rax rbp) (rax rbp))
          ((ra.405 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.405 rbp))
         (rbp (tmp.262 tmp.406 tmp.50 c.103 ra.405 rax))
         (ra.405 (tmp.262 tmp.406 tmp.50 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.405))
         (rdi (ra.405))
         (c.103 (rsi ra.405 rbp))
         (tmp.50 (ra.405 rbp))
         (tmp.406 (rbp ra.405))
         (tmp.262 (ra.405 rbp))))
       (assignment
        ((ra.405 r15) (c.103 r14) (tmp.262 r14) (tmp.50 r14) (tmp.406 r14))))
      (begin
        (set! ra.405 r15)
        (set! c.103 rdi)
        (set! tmp.50 rsi)
        (set! tmp.406 (bitwise-and tmp.50 7))
        (set! tmp.262 tmp.406)
        (if (eq? tmp.262 3)
          (begin (set! rax 14) (jump ra.405 rbp rax))
          (begin (set! rax 6) (jump ra.405 rbp rax)))))
    (define L.not.79.7
      ((locals ())
       (undead-out
        ((rdi rsi ra.407 rbp)
         (rsi ra.407 rbp)
         (tmp.51 ra.407 rbp)
         ((ra.407 rbp)
          ((ra.407 rax rbp) (rax rbp))
          ((ra.407 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.407 rbp))
         (rbp (tmp.51 c.102 ra.407 rax))
         (ra.407 (tmp.51 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.407))
         (rdi (ra.407))
         (c.102 (rsi ra.407 rbp))
         (tmp.51 (ra.407 rbp))))
       (assignment ((ra.407 r15) (c.102 r14) (tmp.51 r14))))
      (begin
        (set! ra.407 r15)
        (set! c.102 rdi)
        (set! tmp.51 rsi)
        (if (neq? tmp.51 6)
          (begin (set! rax 6) (jump ra.407 rbp rax))
          (begin (set! rax 14) (jump ra.407 rbp rax)))))
    (define L.cons.80.6
      ((locals ())
       (undead-out
        ((rdi rsi rdx r12 ra.408 rbp)
         (rsi rdx r12 ra.408 rbp)
         (rdx r12 ra.408 rbp tmp.52)
         (r12 tmp.53 ra.408 rbp tmp.52)
         (r12 tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.409 tmp.53 ra.408 rbp tmp.52)
         (tmp.53 ra.408 rbp tmp.52 tmp.138)
         (rbp ra.408 tmp.53 tmp.138)
         (tmp.138 ra.408 rbp)
         (ra.408 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.408
          (rax
           tmp.138
           tmp.409
           tmp.264
           tmp.53
           tmp.52
           c.101
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.138 tmp.409 r12 tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (r12 (rbp tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (rdx (tmp.52 c.101 ra.408))
         (rsi (c.101 ra.408))
         (rdi (ra.408))
         (c.101 (rsi rdx r12 ra.408 rbp))
         (tmp.52 (tmp.138 tmp.409 tmp.264 tmp.53 rdx r12 ra.408 rbp))
         (tmp.53 (tmp.138 tmp.409 tmp.264 r12 ra.408 rbp tmp.52))
         (tmp.264 (r12 tmp.53 ra.408 rbp tmp.52))
         (tmp.409 (tmp.52 rbp ra.408 tmp.53))
         (tmp.138 (tmp.53 ra.408 rbp tmp.52))
         (rax (ra.408 rbp))))
       (assignment
        ((ra.408 r15)
         (tmp.52 r14)
         (tmp.53 r13)
         (c.101 r14)
         (tmp.264 r9)
         (tmp.409 r9)
         (tmp.138 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.101 rdi)
        (set! tmp.52 rsi)
        (set! tmp.53 rdx)
        (set! tmp.264 r12)
        (set! r12 (+ r12 16))
        (set! tmp.409 (+ tmp.264 1))
        (set! tmp.138 tmp.409)
        (mset! tmp.138 -1 tmp.52)
        (mset! tmp.138 7 tmp.53)
        (set! rax tmp.138)
        (jump ra.408 rbp rax)))
    (define L.eq?.81.5
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.410 rbp)
         (rsi rdx ra.410 rbp)
         (rdx tmp.54 ra.410 rbp)
         (tmp.54 tmp.55 ra.410 rbp)
         ((ra.410 rbp)
          ((ra.410 rax rbp) (rax rbp))
          ((ra.410 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.410 rbp))
         (rbp (tmp.55 tmp.54 c.100 ra.410 rax))
         (ra.410 (tmp.55 tmp.54 c.100 rdi rsi rdx rbp rax))
         (rdx (tmp.54 c.100 ra.410))
         (rsi (c.100 ra.410))
         (rdi (ra.410))
         (c.100 (rsi rdx ra.410 rbp))
         (tmp.54 (tmp.55 rdx ra.410 rbp))
         (tmp.55 (tmp.54 ra.410 rbp))))
       (assignment ((ra.410 r15) (tmp.54 r14) (c.100 r14) (tmp.55 r13))))
      (begin
        (set! ra.410 r15)
        (set! c.100 rdi)
        (set! tmp.54 rsi)
        (set! tmp.55 rdx)
        (if (eq? tmp.54 tmp.55)
          (begin (set! rax 14) (jump ra.410 rbp rax))
          (begin (set! rax 6) (jump ra.410 rbp rax)))))
    (define L.make-init-vector.1.4
      ((locals ())
       (undead-out
        ((rdi rsi r12 rbp ra.411)
         (rsi c.99 r12 rbp ra.411)
         (c.99 r12 rbp ra.411 tmp.82)
         (r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.412 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.414 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.267 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.415 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.268 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.416 rbp ra.411 vector-init-loop.84 tmp.82)
         (rbp ra.411 vector-init-loop.84 tmp.82 tmp.139)
         (tmp.139 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.82 vector-init-loop.84 ra.411 rcx rbp)
         (tmp.82 vector-init-loop.84 ra.411 rdx rcx rbp)
         (vector-init-loop.84 ra.411 rsi rdx rcx rbp)
         (ra.411 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (conflicts
        ((ra.411
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           r12
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (r12
          (rbp
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (rsi (r15 rdi vector-init-loop.84 rdx rcx rbp c.99 ra.411))
         (rdi (r15 rsi rdx rcx rbp ra.411))
         (c.99 (tmp.82 rsi r12 rbp ra.411))
         (tmp.82
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           c.99
           r12
           rbp
           ra.411))
         (vector-init-loop.84
          (rsi
           rdx
           rcx
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           tmp.82
           ra.411
           rbp
           r12))
         (tmp.412 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.266 (tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.413 (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.414 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.267 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.415 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.268 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.503 (tmp.269 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.269 (r12 tmp.503 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.416 (tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.139 (rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.83 (tmp.128 tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.128 (tmp.83 tmp.82 ra.411 rbp))
         (rcx (r15 rdi rsi rdx tmp.82 vector-init-loop.84 ra.411 rbp))
         (rdx (r15 rdi rsi tmp.82 vector-init-loop.84 ra.411 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment
        ((ra.411 r15)
         (tmp.82 r14)
         (vector-init-loop.84 r13)
         (tmp.266 r9)
         (tmp.413 r8)
         (tmp.503 r9)
         (tmp.269 r8)
         (c.99 r13)
         (tmp.412 r9)
         (tmp.414 r9)
         (tmp.267 r9)
         (tmp.415 r9)
         (tmp.268 r9)
         (tmp.83 r9)
         (tmp.416 r9)
         (tmp.139 r9)
         (tmp.128 r13))))
      (begin
        (set! ra.411 r15)
        (set! c.99 rdi)
        (set! tmp.82 rsi)
        (set! vector-init-loop.84 (mref c.99 14))
        (set! tmp.412 (arithmetic-shift-right tmp.82 3))
        (set! tmp.266 tmp.412)
        (set! tmp.413 1)
        (set! tmp.414 (+ tmp.413 tmp.266))
        (set! tmp.267 tmp.414)
        (set! tmp.415 (* tmp.267 8))
        (set! tmp.268 tmp.415)
        (set! tmp.503 tmp.268)
        (set! tmp.269 r12)
        (set! r12 (+ r12 tmp.503))
        (set! tmp.416 (+ tmp.269 3))
        (set! tmp.139 tmp.416)
        (mset! tmp.139 -3 tmp.82)
        (set! tmp.83 tmp.139)
        (set! tmp.128 vector-init-loop.84)
        (set! rcx tmp.83)
        (set! rdx 0)
        (set! rsi tmp.82)
        (set! rdi vector-init-loop.84)
        (set! r15 ra.411)
        (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.84.3
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.417 rbp)
         (rsi rdx rcx c.98 ra.417 rbp)
         (rdx rcx c.98 len.85 ra.417 rbp)
         (rcx c.98 len.85 i.87 ra.417 rbp)
         (c.98 vec.86 len.85 i.87 ra.417 rbp)
         (vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
         ((vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.84 len.85 i.87 ra.417 rbp))
         (rbp
          (vector-init-loop.84
           vec.86
           i.87
           len.85
           c.98
           ra.417
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.417
          (vector-init-loop.84 vec.86 i.87 len.85 c.98 rbp rdi rsi rdx rcx r8))
         (i.87 (vector-init-loop.84 vec.86 c.98 len.85 ra.417 rbp rdx rcx r8))
         (len.85 (vector-init-loop.84 vec.86 i.87 rdx c.98 ra.417 rbp rcx r8))
         (vector-init-loop.84 (rbp ra.417 i.87 len.85 vec.86 r8))
         (rcx (c.98 r15 rdi rsi rdx len.85 i.87 ra.417 r8 rbp))
         (rdx (len.85 c.98 r15 rdi rsi i.87 ra.417 rcx r8 rbp))
         (rsi (c.98 r15 rdi ra.417 rdx rcx r8 rbp))
         (rdi (r15 ra.417 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.98 (vec.86 i.87 len.85 rsi rdx rcx ra.417 rbp))
         (vec.86 (vector-init-loop.84 c.98 len.85 i.87 ra.417 rbp))))
       (assignment
        ((ra.417 r15)
         (len.85 r14)
         (i.87 r13)
         (c.98 r9)
         (vec.86 r8)
         (vector-init-loop.84 r9))))
      (begin
        (set! ra.417 r15)
        (set! c.98 rdi)
        (set! len.85 rsi)
        (set! i.87 rdx)
        (set! vec.86 rcx)
        (set! vector-init-loop.84 (mref c.98 14))
        (if (eq? len.85 i.87)
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 14)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 6)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.418 rbp)
         (rsi rdx rcx ra.418 rbp)
         (rdx rcx tmp.93 ra.418 rbp)
         (rcx tmp.93 tmp.94 ra.418 rbp)
         (tmp.93 tmp.95 tmp.94 ra.418 rbp)
         (tmp.283 tmp.93 tmp.95 tmp.94 ra.418 rbp)
         ((tmp.93 tmp.95 tmp.94 ra.418 rbp)
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (tmp.93 c.97 r15 rdi rsi rdx tmp.95 tmp.94 ra.418 rbp))
         (rbp (tmp.283 tmp.95 tmp.94 tmp.93 c.97 ra.418 r15 rdi rsi rdx rcx))
         (ra.418 (tmp.283 tmp.95 tmp.94 tmp.93 c.97 rbp rdi rsi rdx rcx))
         (tmp.94 (tmp.283 tmp.95 tmp.93 ra.418 rbp rdx rcx))
         (tmp.95 (tmp.283 tmp.93 tmp.94 ra.418 rbp rcx))
         (rdx (tmp.93 c.97 r15 rdi rsi tmp.94 ra.418 rcx rbp))
         (rsi (c.97 r15 rdi ra.418 rdx rcx rbp))
         (rdi (r15 ra.418 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.97 (rsi rdx rcx ra.418 rbp))
         (tmp.93 (tmp.283 tmp.95 tmp.94 rdx rcx ra.418 rbp))
         (tmp.283 (rbp ra.418 tmp.94 tmp.95 tmp.93))))
       (assignment
        ((ra.418 r15)
         (tmp.93 r14)
         (tmp.94 r13)
         (tmp.95 r9)
         (tmp.283 r8)
         (c.97 r14))))
      (begin
        (set! ra.418 r15)
        (set! c.97 rdi)
        (set! tmp.93 rsi)
        (set! tmp.94 rdx)
        (set! tmp.95 rcx)
        (set! tmp.283 (mref tmp.93 -3))
        (if (< tmp.94 tmp.283)
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.419 rbp)
         (rsi rdx ra.419 rbp)
         (rdx tmp.90 ra.419 rbp)
         (tmp.90 tmp.91 ra.419 rbp)
         (tmp.291 tmp.90 tmp.91 ra.419 rbp)
         ((tmp.90 tmp.91 ra.419 rbp)
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (tmp.90 c.96 r15 rdi rsi tmp.91 ra.419 rbp))
         (rbp (tmp.291 tmp.91 tmp.90 c.96 ra.419 r15 rdi rsi rdx))
         (ra.419 (tmp.291 tmp.91 tmp.90 c.96 rbp rdi rsi rdx))
         (tmp.91 (tmp.291 tmp.90 ra.419 rbp rdx))
         (rsi (c.96 r15 rdi ra.419 rdx rbp))
         (rdi (r15 ra.419 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.96 (rsi rdx ra.419 rbp))
         (tmp.90 (tmp.291 tmp.91 rdx ra.419 rbp))
         (tmp.291 (rbp ra.419 tmp.91 tmp.90))))
       (assignment
        ((ra.419 r15) (tmp.90 r14) (tmp.91 r13) (tmp.291 r9) (c.96 r14))))
      (begin
        (set! ra.419 r15)
        (set! c.96 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.291 (mref tmp.90 -3))
        (if (< tmp.91 tmp.291)
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 14)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 6)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi)))))
    (define L.jp.102
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.420 rbp)
         (rsi rdx tmp.285 ra.420 rbp)
         (rdx tmp.285 tmp.91 ra.420 rbp)
         (tmp.285 tmp.90 tmp.91 ra.420 rbp)
         ((tmp.90 tmp.91 ra.420 rbp)
          ((tmp.90 tmp.91 ra.420 rbp)
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.420 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.420 rbp))
         (rbp (tmp.90 tmp.91 tmp.285 ra.420 r15 rdi rsi rdx rax))
         (ra.420 (tmp.90 tmp.91 tmp.285 rbp rdi rsi rdx rax))
         (rdx (tmp.285 r15 rdi rsi tmp.91 ra.420 rbp))
         (tmp.91 (tmp.90 tmp.285 ra.420 rbp rdx))
         (rsi (tmp.285 r15 rdi ra.420 rdx rbp))
         (rdi (r15 ra.420 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.285 (tmp.90 tmp.91 rsi rdx ra.420 rbp))
         (tmp.90 (tmp.285 tmp.91 ra.420 rbp))))
       (assignment ((ra.420 r15) (tmp.285 r14) (tmp.91 r13) (tmp.90 r9))))
      (begin
        (set! ra.420 r15)
        (set! tmp.285 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.285 6)
          (if (>= tmp.91 0)
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 14)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 6)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.420 rbp rax)))))
    (define L.jp.101
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.421 rbp)
         (rsi rdx tmp.287 ra.421 rbp)
         (rdx tmp.287 tmp.91 ra.421 rbp)
         (tmp.287 tmp.91 tmp.90 ra.421 rbp)
         ((tmp.91 tmp.90 ra.421 rbp)
          ((tmp.422 tmp.90 ra.421 rbp)
           (tmp.288 tmp.90 ra.421 rbp)
           (tmp.423 tmp.90 ra.421 rbp)
           (tmp.289 tmp.90 ra.421 rbp)
           (tmp.424 tmp.90 ra.421 rbp)
           (tmp.290 tmp.90 ra.421 rbp)
           (ra.421 rax rbp)
           (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.421 rbp))
         (rbp
          (tmp.90
           tmp.91
           tmp.287
           ra.421
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (ra.421
          (tmp.90
           tmp.91
           tmp.287
           rdi
           rsi
           rdx
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (tmp.422 (rbp ra.421 tmp.90))
         (tmp.90
          (tmp.287
           tmp.91
           ra.421
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422))
         (tmp.288 (tmp.90 ra.421 rbp))
         (tmp.423 (rbp ra.421 tmp.90))
         (tmp.289 (tmp.90 ra.421 rbp))
         (tmp.424 (rbp ra.421 tmp.90))
         (tmp.290 (tmp.90 ra.421 rbp))
         (rdx (tmp.91 tmp.287 ra.421))
         (rsi (tmp.287 ra.421))
         (rdi (ra.421))
         (tmp.287 (tmp.90 tmp.91 rsi rdx ra.421 rbp))
         (tmp.91 (tmp.90 rdx tmp.287 ra.421 rbp))))
       (assignment
        ((ra.421 r15)
         (tmp.90 r14)
         (tmp.287 r13)
         (tmp.91 r9)
         (tmp.422 r13)
         (tmp.288 r13)
         (tmp.423 r13)
         (tmp.289 r13)
         (tmp.424 r13)
         (tmp.290 r13))))
      (begin
        (set! ra.421 r15)
        (set! tmp.287 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.287 6)
          (begin
            (set! tmp.422 (arithmetic-shift-right tmp.91 3))
            (set! tmp.288 tmp.422)
            (set! tmp.423 (* tmp.288 8))
            (set! tmp.289 tmp.423)
            (set! tmp.424 (+ tmp.289 5))
            (set! tmp.290 tmp.424)
            (set! rax (mref tmp.90 tmp.290))
            (jump ra.421 rbp rax))
          (begin (set! rax 2622) (jump ra.421 rbp rax)))))
    (define L.jp.98
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.425 rbp)
         (rsi rdx rcx tmp.277 ra.425 rbp)
         (rdx rcx tmp.277 tmp.94 ra.425 rbp)
         (rcx tmp.277 tmp.95 tmp.94 ra.425 rbp)
         (tmp.277 tmp.95 tmp.93 tmp.94 ra.425 rbp)
         ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
          ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.425 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.93 tmp.95 tmp.94 tmp.277 ra.425 r15 rdi rsi rdx rcx rax))
         (ra.425 (tmp.93 tmp.95 tmp.94 tmp.277 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.95 tmp.277 r15 rdi rsi rdx tmp.93 tmp.94 ra.425 rbp))
         (tmp.94 (tmp.93 tmp.95 tmp.277 ra.425 rbp rdx rcx))
         (tmp.93 (tmp.277 tmp.95 tmp.94 ra.425 rbp rcx))
         (rdx (tmp.277 r15 rdi rsi tmp.94 ra.425 rcx rbp))
         (rsi (tmp.277 r15 rdi ra.425 rdx rcx rbp))
         (rdi (r15 ra.425 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.277 (tmp.93 tmp.95 tmp.94 rsi rdx rcx ra.425 rbp))
         (tmp.95 (tmp.93 rcx tmp.277 tmp.94 ra.425 rbp))))
       (assignment
        ((ra.425 r15) (tmp.277 r14) (tmp.94 r13) (tmp.95 r9) (tmp.93 r8))))
      (begin
        (set! ra.425 r15)
        (set! tmp.277 rdi)
        (set! tmp.94 rsi)
        (set! tmp.95 rdx)
        (set! tmp.93 rcx)
        (if (neq? tmp.277 6)
          (if (>= tmp.94 0)
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 14)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 6)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.425 rbp rax)))))
    (define L.jp.97
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx rbp ra.426)
         (rsi rdx rcx tmp.279 rbp ra.426)
         (rdx rcx tmp.279 tmp.94 rbp ra.426)
         (rcx tmp.279 tmp.94 rbp ra.426 tmp.93)
         (tmp.279 tmp.94 rbp ra.426 tmp.95 tmp.93)
         ((tmp.94 rbp ra.426 tmp.95 tmp.93)
          ((tmp.427 rbp ra.426 tmp.95 tmp.93)
           (tmp.280 rbp ra.426 tmp.95 tmp.93)
           (tmp.428 rbp ra.426 tmp.95 tmp.93)
           (tmp.281 rbp ra.426 tmp.95 tmp.93)
           (tmp.429 rbp ra.426 tmp.95 tmp.93)
           (rbp ra.426 tmp.95 tmp.282 tmp.93)
           (ra.426 rbp)
           (ra.426 rax rbp)
           (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.426 rbp))
         (rbp
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (ra.426
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (tmp.427 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.95
          (tmp.279
           tmp.94
           rbp
           ra.426
           tmp.93
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.93
          (tmp.95
           rcx
           tmp.279
           tmp.94
           rbp
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.280 (rbp ra.426 tmp.95 tmp.93))
         (tmp.428 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.281 (rbp ra.426 tmp.95 tmp.93))
         (tmp.429 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.282 (rbp ra.426 tmp.95 tmp.93))
         (rcx (tmp.93 tmp.94 tmp.279 ra.426))
         (rdx (tmp.94 tmp.279 ra.426))
         (rsi (tmp.279 ra.426))
         (rdi (ra.426))
         (tmp.279 (tmp.95 tmp.93 tmp.94 rsi rdx rcx rbp ra.426))
         (tmp.94 (tmp.95 tmp.93 rdx rcx tmp.279 rbp ra.426))))
       (assignment
        ((ra.426 r15)
         (tmp.93 r14)
         (tmp.95 r13)
         (tmp.279 r9)
         (tmp.94 r8)
         (tmp.427 r9)
         (tmp.280 r9)
         (tmp.428 r9)
         (tmp.281 r9)
         (tmp.429 r9)
         (tmp.282 r9))))
      (begin
        (set! ra.426 r15)
        (set! tmp.279 rdi)
        (set! tmp.94 rsi)
        (set! tmp.93 rdx)
        (set! tmp.95 rcx)
        (if (neq? tmp.279 6)
          (begin
            (set! tmp.427 (arithmetic-shift-right tmp.94 3))
            (set! tmp.280 tmp.427)
            (set! tmp.428 (* tmp.280 8))
            (set! tmp.281 tmp.428)
            (set! tmp.429 (+ tmp.281 5))
            (set! tmp.282 tmp.429)
            (mset! tmp.93 tmp.282 tmp.95)
            (set! rax 30)
            (jump ra.426 rbp rax))
          (begin (set! rax 2366) (jump ra.426 rbp rax)))))
    (define L.jp.94
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.430 rbp)
         (rsi rdx rcx r8 tmp.271 ra.430 rbp)
         (rdx rcx r8 tmp.271 i.87 ra.430 rbp)
         (rcx r8 tmp.271 i.87 len.85 ra.430 rbp)
         (r8 tmp.271 i.87 len.85 vector-init-loop.84 ra.430 rbp)
         (tmp.271 i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
         ((i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((tmp.431 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.272 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.432 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.273 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.433 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (rbp ra.430 vector-init-loop.84 len.85 i.87 tmp.274 vec.86)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.434 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (vec.86 tmp.275 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.275 len.85 vector-init-loop.84 ra.430 rcx rbp)
           (len.85 vector-init-loop.84 ra.430 rdx rcx rbp)
           (vector-init-loop.84 ra.430 rsi rdx rcx rbp)
           (ra.430 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((tmp.431 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (rbp
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           ra.430
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (ra.430
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vector-init-loop.84
          (vec.86
           r8
           tmp.271
           i.87
           len.85
           ra.430
           rbp
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (len.85
          (vec.86
           vector-init-loop.84
           r8
           tmp.271
           i.87
           ra.430
           rbp
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (i.87
          (vec.86
           vector-init-loop.84
           len.85
           rdx
           rcx
           r8
           tmp.271
           ra.430
           rbp
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vec.86
          (tmp.271
           i.87
           len.85
           vector-init-loop.84
           ra.430
           rbp
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (tmp.272 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.432 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.273 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.433 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.274 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.127 (i.87 vec.86 len.85 ra.430 rbp))
         (tmp.434 (rbp ra.430 vector-init-loop.84 len.85 vec.86))
         (tmp.275 (rcx vec.86 len.85 vector-init-loop.84 ra.430 rbp))
         (rcx
          (i.87
           tmp.271
           r15
           rdi
           rsi
           rdx
           tmp.275
           len.85
           vector-init-loop.84
           ra.430
           rbp))
         (rdx
          (i.87 tmp.271 r15 rdi rsi len.85 vector-init-loop.84 ra.430 rcx rbp))
         (rsi (tmp.271 r15 rdi vector-init-loop.84 ra.430 rdx rcx rbp))
         (rdi (r15 ra.430 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.430 rbp))
         (r8 (vector-init-loop.84 len.85 i.87 tmp.271 ra.430))
         (tmp.271
          (vec.86 vector-init-loop.84 len.85 i.87 rsi rdx rcx r8 ra.430 rbp))))
       (assignment
        ((ra.430 r15)
         (len.85 r14)
         (vector-init-loop.84 r13)
         (i.87 r9)
         (vec.86 r8)
         (tmp.271 rdi)
         (tmp.275 r9)
         (tmp.274 rdi)
         (tmp.433 rdi)
         (tmp.273 rdi)
         (tmp.432 rdi)
         (tmp.272 rdi)
         (tmp.431 rdi)
         (tmp.434 r9)
         (tmp.127 r13))))
      (begin
        (set! ra.430 r15)
        (set! tmp.271 rdi)
        (set! i.87 rsi)
        (set! len.85 rdx)
        (set! vector-init-loop.84 rcx)
        (set! vec.86 r8)
        (if (neq? tmp.271 6)
          (begin (set! rax vec.86) (jump ra.430 rbp rax))
          (begin
            (set! tmp.431 (arithmetic-shift-right i.87 3))
            (set! tmp.272 tmp.431)
            (set! tmp.432 (* tmp.272 8))
            (set! tmp.273 tmp.432)
            (set! tmp.433 (+ tmp.273 5))
            (set! tmp.274 tmp.433)
            (mset! vec.86 tmp.274 0)
            (set! tmp.127 vector-init-loop.84)
            (set! tmp.434 (+ i.87 8))
            (set! tmp.275 tmp.434)
            (set! rcx vec.86)
            (set! rdx tmp.275)
            (set! rsi len.85)
            (set! rdi vector-init-loop.84)
            (set! r15 ra.430)
            (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.81
      ((locals ())
       (undead-out
        ((rdi rsi ra.435 rbp)
         (rsi tmp.243 ra.435 rbp)
         (tmp.243 tmp.41 ra.435 rbp)
         ((tmp.41 ra.435 rbp)
          ((ra.435 rax rbp) (rax rbp))
          ((ra.435 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.435 rbp))
         (rbp (tmp.41 tmp.243 ra.435 rax))
         (ra.435 (tmp.41 tmp.243 rdi rsi rbp rax))
         (rsi (tmp.243 ra.435))
         (rdi (ra.435))
         (tmp.243 (tmp.41 rsi ra.435 rbp))
         (tmp.41 (tmp.243 ra.435 rbp))))
       (assignment ((ra.435 r15) (tmp.243 r14) (tmp.41 r13))))
      (begin
        (set! ra.435 r15)
        (set! tmp.243 rdi)
        (set! tmp.41 rsi)
        (if (neq? tmp.243 6)
          (begin (set! rax (mref tmp.41 6)) (jump ra.435 rbp rax))
          (begin (set! rax 3390) (jump ra.435 rbp rax)))))
    (define L.jp.79
      ((locals ())
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi tmp.240 ra.436 rbp)
         (tmp.240 tmp.40 ra.436 rbp)
         ((tmp.40 ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.40 tmp.240 ra.436 rax))
         (ra.436 (tmp.40 tmp.240 rdi rsi rbp rax))
         (rsi (tmp.240 ra.436))
         (rdi (ra.436))
         (tmp.240 (tmp.40 rsi ra.436 rbp))
         (tmp.40 (tmp.240 ra.436 rbp))))
       (assignment ((ra.436 r15) (tmp.240 r14) (tmp.40 r13))))
      (begin
        (set! ra.436 r15)
        (set! tmp.240 rdi)
        (set! tmp.40 rsi)
        (if (neq? tmp.240 6)
          (begin (set! rax (mref tmp.40 7)) (jump ra.436 rbp rax))
          (begin (set! rax 3134) (jump ra.436 rbp rax)))))
    (define L.jp.77
      ((locals ())
       (undead-out
        ((rdi rsi ra.437 rbp)
         (rsi tmp.237 ra.437 rbp)
         (tmp.237 tmp.39 ra.437 rbp)
         ((tmp.39 ra.437 rbp)
          ((ra.437 rax rbp) (rax rbp))
          ((ra.437 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.437 rbp))
         (rbp (tmp.39 tmp.237 ra.437 rax))
         (ra.437 (tmp.39 tmp.237 rdi rsi rbp rax))
         (rsi (tmp.237 ra.437))
         (rdi (ra.437))
         (tmp.237 (tmp.39 rsi ra.437 rbp))
         (tmp.39 (tmp.237 ra.437 rbp))))
       (assignment ((ra.437 r15) (tmp.237 r14) (tmp.39 r13))))
      (begin
        (set! ra.437 r15)
        (set! tmp.237 rdi)
        (set! tmp.39 rsi)
        (if (neq? tmp.237 6)
          (begin (set! rax (mref tmp.39 -1)) (jump ra.437 rbp rax))
          (begin (set! rax 2878) (jump ra.437 rbp rax)))))
    (define L.jp.75
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.438 rbp)
         (rsi rdx rcx tmp.231 ra.438 rbp)
         (rdx rcx tmp.231 tmp.37 ra.438 rbp)
         (rcx tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp)
         (tmp.231 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
         ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
          ((tmp.439 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           (tmp.234 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.438 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.438 rbp))
         (rbp
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           ra.438
           tmp.234
           tmp.439
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.438
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           rbp
           tmp.234
           tmp.439
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.37
           tmp.231
           r15
           rdi
           rsi
           rdx
           tmp.38
           unsafe-vector-ref.3
           ra.438
           rbp))
         (unsafe-vector-ref.3
          (tmp.38 tmp.231 tmp.37 ra.438 rbp tmp.234 tmp.439 rdx rcx))
         (tmp.38
          (tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp tmp.234 tmp.439 rcx))
         (rdx (tmp.37 tmp.231 r15 rdi rsi unsafe-vector-ref.3 ra.438 rcx rbp))
         (rsi (tmp.231 r15 rdi ra.438 rdx rcx rbp))
         (rdi (r15 ra.438 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.439 (rbp ra.438 unsafe-vector-ref.3 tmp.38 tmp.37))
         (tmp.37
          (tmp.38
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.231
           ra.438
           rbp
           tmp.234
           tmp.439))
         (tmp.234 (tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp))
         (tmp.231 (tmp.38 unsafe-vector-ref.3 tmp.37 rsi rdx rcx ra.438 rbp))))
       (assignment
        ((ra.438 r15)
         (tmp.37 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.38 r9)
         (tmp.231 r8)
         (tmp.234 r8)
         (tmp.439 r8))))
      (begin
        (set! ra.438 r15)
        (set! tmp.231 rdi)
        (set! tmp.37 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.38 rcx)
        (if (neq? tmp.231 6)
          (begin
            (set! tmp.439 (bitwise-and tmp.37 7))
            (set! tmp.234 tmp.439)
            (if (eq? tmp.234 3)
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.438 rbp rax)))))
    (define L.jp.74
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.440 rbp)
         (rsi rdx rcx tmp.233 ra.440 rbp)
         (rdx rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp)
         (rcx tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp)
         (tmp.233 tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
         ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
          ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
           (tmp.37 unsafe-vector-ref.3 ra.440 rdx rbp)
           (unsafe-vector-ref.3 ra.440 rsi rdx rbp)
           (ra.440 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.440 rbp))
         (rbp
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           ra.440
           r15
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (ra.440
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (tmp.129 (tmp.38 tmp.37 ra.440 rbp))
         (tmp.37 (tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp rdx tmp.129))
         (tmp.38 (tmp.37 rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp tmp.129))
         (rdx (tmp.233 r15 rdi rsi tmp.37 unsafe-vector-ref.3 ra.440 rbp))
         (unsafe-vector-ref.3 (tmp.37 tmp.38 rcx tmp.233 ra.440 rbp rsi rdx))
         (rsi (tmp.233 r15 rdi unsafe-vector-ref.3 ra.440 rdx rbp))
         (rdi (r15 ra.440 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.38 unsafe-vector-ref.3 tmp.233 ra.440))
         (tmp.233 (tmp.37 tmp.38 unsafe-vector-ref.3 rsi rdx rcx ra.440 rbp))))
       (assignment
        ((ra.440 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.233 r13)
         (tmp.38 r9)
         (tmp.37 r8)
         (tmp.129 r14))))
      (begin
        (set! ra.440 r15)
        (set! tmp.233 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.38 rdx)
        (set! tmp.37 rcx)
        (if (neq? tmp.233 6)
          (begin
            (set! tmp.129 unsafe-vector-ref.3)
            (set! rdx tmp.38)
            (set! rsi tmp.37)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.440)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.440 rbp rax)))))
    (define L.jp.71
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.441 rbp)
         (rsi rdx rcx r8 tmp.225 ra.441 rbp)
         (rdx rcx r8 tmp.225 tmp.34 ra.441 rbp)
         (rcx r8 tmp.225 tmp.34 unsafe-vector-set!.2 ra.441 rbp)
         (r8 tmp.225 tmp.34 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         (tmp.225 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
          ((tmp.442 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           (tmp.228 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.441 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.441 rbp))
         (rbp
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           ra.441
           tmp.228
           tmp.442
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.441
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           rbp
           tmp.228
           tmp.442
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp))
         (unsafe-vector-set!.2
          (tmp.35 tmp.36 tmp.225 tmp.34 ra.441 rbp tmp.228 tmp.442 rdx rcx r8))
         (tmp.36
          (tmp.35
           tmp.225
           tmp.34
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           rcx
           r8))
         (tmp.35
          (tmp.225
           tmp.34
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           r8))
         (rcx
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           tmp.36
           unsafe-vector-set!.2
           ra.441
           r8
           rbp))
         (rdx
          (tmp.34 tmp.225 r15 rdi rsi unsafe-vector-set!.2 ra.441 rcx r8 rbp))
         (rsi (tmp.225 r15 rdi ra.441 rdx rcx r8 rbp))
         (rdi (r15 ra.441 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.442 (rbp ra.441 unsafe-vector-set!.2 tmp.36 tmp.35 tmp.34))
         (tmp.34
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.225
           ra.441
           rbp
           tmp.228
           tmp.442))
         (tmp.228 (tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp))
         (tmp.225
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           rsi
           rdx
           rcx
           r8
           ra.441
           rbp))))
       (assignment
        ((ra.441 r15)
         (tmp.34 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.36 r9)
         (tmp.225 rdi)
         (tmp.35 rsi)
         (tmp.228 r8)
         (tmp.442 r8))))
      (begin
        (set! ra.441 r15)
        (set! tmp.225 rdi)
        (set! tmp.34 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.36 rcx)
        (set! tmp.35 r8)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.442 (bitwise-and tmp.34 7))
            (set! tmp.228 tmp.442)
            (if (eq? tmp.228 3)
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.441 rbp rax)))))
    (define L.jp.70
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.443 rbp)
         (rsi rdx rcx r8 tmp.227 ra.443 rbp)
         (rdx rcx r8 tmp.227 unsafe-vector-set!.2 ra.443 rbp)
         (rcx r8 tmp.227 tmp.36 unsafe-vector-set!.2 ra.443 rbp)
         (r8 tmp.227 tmp.36 tmp.35 unsafe-vector-set!.2 ra.443 rbp)
         (tmp.227 tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
         ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
          ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
           (tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp)
           (tmp.34 unsafe-vector-set!.2 ra.443 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.443 rsi rdx rcx rbp)
           (ra.443 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.443 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.443 rbp))
         (rbp
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (ra.443
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (tmp.130 (tmp.36 tmp.35 tmp.34 ra.443 rbp))
         (tmp.34
          (tmp.227
           tmp.36
           tmp.35
           unsafe-vector-set!.2
           ra.443
           rbp
           rdx
           rcx
           tmp.130))
         (tmp.35
          (tmp.34
           r8
           tmp.227
           tmp.36
           unsafe-vector-set!.2
           ra.443
           rbp
           rcx
           tmp.130))
         (tmp.36
          (tmp.34
           tmp.35
           rcx
           r8
           tmp.227
           unsafe-vector-set!.2
           ra.443
           rbp
           tmp.130))
         (rcx
          (tmp.36
           tmp.227
           r15
           rdi
           rsi
           rdx
           tmp.35
           tmp.34
           unsafe-vector-set!.2
           ra.443
           rbp))
         (unsafe-vector-set!.2
          (tmp.34 tmp.35 tmp.36 r8 tmp.227 ra.443 rbp rsi rdx rcx))
         (rdx (tmp.227 r15 rdi rsi tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp))
         (rsi (tmp.227 r15 rdi unsafe-vector-set!.2 ra.443 rdx rcx rbp))
         (rdi (r15 ra.443 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.227 ra.443))
         (tmp.227
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.443
           rbp))))
       (assignment
        ((ra.443 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.227 r13)
         (tmp.36 r9)
         (tmp.35 rdi)
         (tmp.34 r8)
         (tmp.130 r14))))
      (begin
        (set! ra.443 r15)
        (set! tmp.227 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.36 rdx)
        (set! tmp.35 rcx)
        (set! tmp.34 r8)
        (if (neq? tmp.227 6)
          (begin
            (set! tmp.130 unsafe-vector-set!.2)
            (set! rcx tmp.36)
            (set! rdx tmp.35)
            (set! rsi tmp.34)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.443)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.443 rbp rax)))))
    (define L.jp.67
      ((locals ())
       (undead-out
        ((rdi rsi ra.444 rbp)
         (rsi tmp.222 ra.444 rbp)
         (tmp.222 tmp.33 ra.444 rbp)
         ((tmp.33 ra.444 rbp)
          ((ra.444 rax rbp) (rax rbp))
          ((ra.444 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.444 rbp))
         (rbp (tmp.33 tmp.222 ra.444 rax))
         (ra.444 (tmp.33 tmp.222 rdi rsi rbp rax))
         (rsi (tmp.222 ra.444))
         (rdi (ra.444))
         (tmp.222 (tmp.33 rsi ra.444 rbp))
         (tmp.33 (tmp.222 ra.444 rbp))))
       (assignment ((ra.444 r15) (tmp.222 r14) (tmp.33 r13))))
      (begin
        (set! ra.444 r15)
        (set! tmp.222 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.222 6)
          (begin (set! rax (mref tmp.33 -3)) (jump ra.444 rbp rax))
          (begin (set! rax 2110) (jump ra.444 rbp rax)))))
    (define L.jp.65
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx tmp.219 ra.445 rbp)
         (rdx tmp.219 make-init-vector.1 ra.445 rbp)
         (tmp.219 tmp.32 make-init-vector.1 ra.445 rbp)
         ((tmp.32 make-init-vector.1 ra.445 rbp)
          ((tmp.32 make-init-vector.1 ra.445 rbp)
           (make-init-vector.1 ra.445 rsi rbp)
           (ra.445 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.445 rbp))
         (rbp
          (tmp.32 make-init-vector.1 tmp.219 ra.445 r15 rdi rsi tmp.131 rax))
         (ra.445
          (tmp.32 make-init-vector.1 tmp.219 rdx rbp rdi rsi tmp.131 rax))
         (tmp.131 (tmp.32 ra.445 rbp))
         (tmp.32 (tmp.219 make-init-vector.1 ra.445 rbp tmp.131))
         (rsi (tmp.219 r15 rdi make-init-vector.1 ra.445 rbp))
         (make-init-vector.1 (tmp.32 rdx tmp.219 ra.445 rbp rsi))
         (rdi (r15 ra.445 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.219 ra.445))
         (tmp.219 (tmp.32 make-init-vector.1 rsi rdx ra.445 rbp))))
       (assignment
        ((ra.445 r15)
         (make-init-vector.1 r14)
         (tmp.219 r13)
         (tmp.32 r9)
         (tmp.131 r14))))
      (begin
        (set! ra.445 r15)
        (set! tmp.219 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.32 rdx)
        (if (neq? tmp.219 6)
          (begin
            (set! tmp.131 make-init-vector.1)
            (set! rsi tmp.32)
            (set! rdi make-init-vector.1)
            (set! r15 ra.445)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.445 rbp rax)))))
    (define L.jp.63
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.212 ra.446 rbp)
         (rdx tmp.212 tmp.30 ra.446 rbp)
         (tmp.212 tmp.31 tmp.30 ra.446 rbp)
         ((tmp.31 tmp.30 ra.446 rbp)
          ((tmp.447 tmp.31 tmp.30 ra.446 rbp)
           (tmp.216 tmp.31 tmp.30 ra.446 rbp)
           ((tmp.31 tmp.30 ra.446 rbp)
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.446 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.446 rbp))
         (rbp
          (tmp.31 tmp.30 tmp.212 ra.446 tmp.216 tmp.447 r15 rdi rsi rdx rax))
         (ra.446 (tmp.31 tmp.30 tmp.212 rbp tmp.216 tmp.447 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.30 ra.446 rbp))
         (tmp.30 (tmp.31 tmp.212 ra.446 rbp tmp.216 tmp.447 rdx))
         (rsi (tmp.212 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.447 (rbp ra.446 tmp.30 tmp.31))
         (tmp.31 (tmp.212 tmp.30 ra.446 rbp tmp.216 tmp.447))
         (tmp.216 (tmp.31 tmp.30 ra.446 rbp))
         (tmp.212 (tmp.31 tmp.30 rsi rdx ra.446 rbp))))
       (assignment
        ((ra.446 r15)
         (tmp.30 r14)
         (tmp.31 r13)
         (tmp.212 r9)
         (tmp.216 r9)
         (tmp.447 r9))))
      (begin
        (set! ra.446 r15)
        (set! tmp.212 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.447 (bitwise-and tmp.30 7))
            (set! tmp.216 tmp.447)
            (if (eq? tmp.216 0)
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 14)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 6)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.446 rbp rax)))))
    (define L.jp.62
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.448 rbp)
         (rsi rdx tmp.214 ra.448 rbp)
         (rdx tmp.214 tmp.30 ra.448 rbp)
         (tmp.214 tmp.30 tmp.31 ra.448 rbp)
         ((tmp.30 tmp.31 ra.448 rbp)
          ((ra.448 rbp)
           ((ra.448 rax rbp) (rax rbp))
           ((ra.448 rax rbp) (rax rbp)))
          ((ra.448 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.448 rbp))
         (rbp (tmp.31 tmp.30 tmp.214 ra.448 rax))
         (ra.448 (tmp.31 tmp.30 tmp.214 rdi rsi rdx rbp rax))
         (rdx (tmp.30 tmp.214 ra.448))
         (rsi (tmp.214 ra.448))
         (rdi (ra.448))
         (tmp.214 (tmp.31 tmp.30 rsi rdx ra.448 rbp))
         (tmp.30 (tmp.31 rdx tmp.214 ra.448 rbp))
         (tmp.31 (tmp.214 tmp.30 ra.448 rbp))))
       (assignment ((ra.448 r15) (tmp.214 r14) (tmp.30 r13) (tmp.31 r9))))
      (begin
        (set! ra.448 r15)
        (set! tmp.214 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.214 6)
          (if (>= tmp.30 tmp.31)
            (begin (set! rax 14) (jump ra.448 rbp rax))
            (begin (set! rax 6) (jump ra.448 rbp rax)))
          (begin (set! rax 1598) (jump ra.448 rbp rax)))))
    (define L.jp.58
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.449 rbp)
         (rsi rdx tmp.205 ra.449 rbp)
         (rdx tmp.205 tmp.28 ra.449 rbp)
         (tmp.205 tmp.29 tmp.28 ra.449 rbp)
         ((tmp.29 tmp.28 ra.449 rbp)
          ((tmp.450 tmp.29 tmp.28 ra.449 rbp)
           (tmp.209 tmp.29 tmp.28 ra.449 rbp)
           ((tmp.29 tmp.28 ra.449 rbp)
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.449 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.449 rbp))
         (rbp
          (tmp.29 tmp.28 tmp.205 ra.449 tmp.209 tmp.450 r15 rdi rsi rdx rax))
         (ra.449 (tmp.29 tmp.28 tmp.205 rbp tmp.209 tmp.450 rdi rsi rdx rax))
         (rdx (tmp.205 r15 rdi rsi tmp.28 ra.449 rbp))
         (tmp.28 (tmp.29 tmp.205 ra.449 rbp tmp.209 tmp.450 rdx))
         (rsi (tmp.205 r15 rdi ra.449 rdx rbp))
         (rdi (r15 ra.449 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.450 (rbp ra.449 tmp.28 tmp.29))
         (tmp.29 (tmp.205 tmp.28 ra.449 rbp tmp.209 tmp.450))
         (tmp.209 (tmp.29 tmp.28 ra.449 rbp))
         (tmp.205 (tmp.29 tmp.28 rsi rdx ra.449 rbp))))
       (assignment
        ((ra.449 r15)
         (tmp.28 r14)
         (tmp.29 r13)
         (tmp.205 r9)
         (tmp.209 r9)
         (tmp.450 r9))))
      (begin
        (set! ra.449 r15)
        (set! tmp.205 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.450 (bitwise-and tmp.28 7))
            (set! tmp.209 tmp.450)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 14)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 6)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.449 rbp rax)))))
    (define L.jp.57
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.451 rbp)
         (rsi rdx tmp.207 ra.451 rbp)
         (rdx tmp.207 tmp.28 ra.451 rbp)
         (tmp.207 tmp.28 tmp.29 ra.451 rbp)
         ((tmp.28 tmp.29 ra.451 rbp)
          ((ra.451 rbp)
           ((ra.451 rax rbp) (rax rbp))
           ((ra.451 rax rbp) (rax rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.29 tmp.28 tmp.207 ra.451 rax))
         (ra.451 (tmp.29 tmp.28 tmp.207 rdi rsi rdx rbp rax))
         (rdx (tmp.28 tmp.207 ra.451))
         (rsi (tmp.207 ra.451))
         (rdi (ra.451))
         (tmp.207 (tmp.29 tmp.28 rsi rdx ra.451 rbp))
         (tmp.28 (tmp.29 rdx tmp.207 ra.451 rbp))
         (tmp.29 (tmp.207 tmp.28 ra.451 rbp))))
       (assignment ((ra.451 r15) (tmp.207 r14) (tmp.28 r13) (tmp.29 r9))))
      (begin
        (set! ra.451 r15)
        (set! tmp.207 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.207 6)
          (if (> tmp.28 tmp.29)
            (begin (set! rax 14) (jump ra.451 rbp rax))
            (begin (set! rax 6) (jump ra.451 rbp rax)))
          (begin (set! rax 1342) (jump ra.451 rbp rax)))))
    (define L.jp.53
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.452 rbp)
         (rsi rdx tmp.198 ra.452 rbp)
         (rdx tmp.198 tmp.26 ra.452 rbp)
         (tmp.198 tmp.27 tmp.26 ra.452 rbp)
         ((tmp.27 tmp.26 ra.452 rbp)
          ((tmp.453 tmp.27 tmp.26 ra.452 rbp)
           (tmp.202 tmp.27 tmp.26 ra.452 rbp)
           ((tmp.27 tmp.26 ra.452 rbp)
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.452 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.198 ra.452 tmp.202 tmp.453 r15 rdi rsi rdx rax))
         (ra.452 (tmp.27 tmp.26 tmp.198 rbp tmp.202 tmp.453 rdi rsi rdx rax))
         (rdx (tmp.198 r15 rdi rsi tmp.26 ra.452 rbp))
         (tmp.26 (tmp.27 tmp.198 ra.452 rbp tmp.202 tmp.453 rdx))
         (rsi (tmp.198 r15 rdi ra.452 rdx rbp))
         (rdi (r15 ra.452 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.453 (rbp ra.452 tmp.26 tmp.27))
         (tmp.27 (tmp.198 tmp.26 ra.452 rbp tmp.202 tmp.453))
         (tmp.202 (tmp.27 tmp.26 ra.452 rbp))
         (tmp.198 (tmp.27 tmp.26 rsi rdx ra.452 rbp))))
       (assignment
        ((ra.452 r15)
         (tmp.26 r14)
         (tmp.27 r13)
         (tmp.198 r9)
         (tmp.202 r9)
         (tmp.453 r9))))
      (begin
        (set! ra.452 r15)
        (set! tmp.198 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.453 (bitwise-and tmp.26 7))
            (set! tmp.202 tmp.453)
            (if (eq? tmp.202 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.452 rbp rax)))))
    (define L.jp.52
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx tmp.200 ra.454 rbp)
         (rdx tmp.200 tmp.26 ra.454 rbp)
         (tmp.200 tmp.26 tmp.27 ra.454 rbp)
         ((tmp.26 tmp.27 ra.454 rbp)
          ((ra.454 rbp)
           ((ra.454 rax rbp) (rax rbp))
           ((ra.454 rax rbp) (rax rbp)))
          ((ra.454 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.454 rbp))
         (rbp (tmp.27 tmp.26 tmp.200 ra.454 rax))
         (ra.454 (tmp.27 tmp.26 tmp.200 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.200 ra.454))
         (rsi (tmp.200 ra.454))
         (rdi (ra.454))
         (tmp.200 (tmp.27 tmp.26 rsi rdx ra.454 rbp))
         (tmp.26 (tmp.27 rdx tmp.200 ra.454 rbp))
         (tmp.27 (tmp.200 tmp.26 ra.454 rbp))))
       (assignment ((ra.454 r15) (tmp.200 r14) (tmp.26 r13) (tmp.27 r9))))
      (begin
        (set! ra.454 r15)
        (set! tmp.200 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.200 6)
          (if (<= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.454 rbp rax))
            (begin (set! rax 6) (jump ra.454 rbp rax)))
          (begin (set! rax 1086) (jump ra.454 rbp rax)))))
    (define L.jp.48
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.191 ra.455 rbp)
         (rdx tmp.191 tmp.24 ra.455 rbp)
         (tmp.191 tmp.25 tmp.24 ra.455 rbp)
         ((tmp.25 tmp.24 ra.455 rbp)
          ((tmp.456 tmp.25 tmp.24 ra.455 rbp)
           (tmp.195 tmp.25 tmp.24 ra.455 rbp)
           ((tmp.25 tmp.24 ra.455 rbp)
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.455 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.455 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.191 ra.455 tmp.195 tmp.456 r15 rdi rsi rdx rax))
         (ra.455 (tmp.25 tmp.24 tmp.191 rbp tmp.195 tmp.456 rdi rsi rdx rax))
         (rdx (tmp.191 r15 rdi rsi tmp.24 ra.455 rbp))
         (tmp.24 (tmp.25 tmp.191 ra.455 rbp tmp.195 tmp.456 rdx))
         (rsi (tmp.191 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.456 (rbp ra.455 tmp.24 tmp.25))
         (tmp.25 (tmp.191 tmp.24 ra.455 rbp tmp.195 tmp.456))
         (tmp.195 (tmp.25 tmp.24 ra.455 rbp))
         (tmp.191 (tmp.25 tmp.24 rsi rdx ra.455 rbp))))
       (assignment
        ((ra.455 r15)
         (tmp.24 r14)
         (tmp.25 r13)
         (tmp.191 r9)
         (tmp.195 r9)
         (tmp.456 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.191 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.191 6)
          (begin
            (set! tmp.456 (bitwise-and tmp.24 7))
            (set! tmp.195 tmp.456)
            (if (eq? tmp.195 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.455 rbp rax)))))
    (define L.jp.47
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.457 rbp)
         (rsi rdx tmp.193 ra.457 rbp)
         (rdx tmp.193 tmp.24 ra.457 rbp)
         (tmp.193 tmp.24 tmp.25 ra.457 rbp)
         ((tmp.24 tmp.25 ra.457 rbp)
          ((ra.457 rbp)
           ((ra.457 rax rbp) (rax rbp))
           ((ra.457 rax rbp) (rax rbp)))
          ((ra.457 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.457 rbp))
         (rbp (tmp.25 tmp.24 tmp.193 ra.457 rax))
         (ra.457 (tmp.25 tmp.24 tmp.193 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.193 ra.457))
         (rsi (tmp.193 ra.457))
         (rdi (ra.457))
         (tmp.193 (tmp.25 tmp.24 rsi rdx ra.457 rbp))
         (tmp.24 (tmp.25 rdx tmp.193 ra.457 rbp))
         (tmp.25 (tmp.193 tmp.24 ra.457 rbp))))
       (assignment ((ra.457 r15) (tmp.193 r14) (tmp.24 r13) (tmp.25 r9))))
      (begin
        (set! ra.457 r15)
        (set! tmp.193 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.193 6)
          (if (< tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.457 rbp rax))
            (begin (set! rax 6) (jump ra.457 rbp rax)))
          (begin (set! rax 830) (jump ra.457 rbp rax)))))
    (define L.jp.43
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.458 rbp)
         (rsi rdx tmp.185 ra.458 rbp)
         (rdx tmp.185 tmp.22 ra.458 rbp)
         (tmp.185 tmp.23 tmp.22 ra.458 rbp)
         ((tmp.23 tmp.22 ra.458 rbp)
          ((tmp.459 tmp.23 tmp.22 ra.458 rbp)
           (tmp.188 tmp.23 tmp.22 ra.458 rbp)
           ((tmp.23 tmp.22 ra.458 rbp)
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.458 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.458 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.185 ra.458 tmp.188 tmp.459 r15 rdi rsi rdx rax))
         (ra.458 (tmp.23 tmp.22 tmp.185 rbp tmp.188 tmp.459 rdi rsi rdx rax))
         (rdx (tmp.185 r15 rdi rsi tmp.22 ra.458 rbp))
         (tmp.22 (tmp.23 tmp.185 ra.458 rbp tmp.188 tmp.459 rdx))
         (rsi (tmp.185 r15 rdi ra.458 rdx rbp))
         (rdi (r15 ra.458 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.459 (rbp ra.458 tmp.22 tmp.23))
         (tmp.23 (tmp.185 tmp.22 ra.458 rbp tmp.188 tmp.459))
         (tmp.188 (tmp.23 tmp.22 ra.458 rbp))
         (tmp.185 (tmp.23 tmp.22 rsi rdx ra.458 rbp))))
       (assignment
        ((ra.458 r15)
         (tmp.22 r14)
         (tmp.23 r13)
         (tmp.185 r9)
         (tmp.188 r9)
         (tmp.459 r9))))
      (begin
        (set! ra.458 r15)
        (set! tmp.185 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.459 (bitwise-and tmp.22 7))
            (set! tmp.188 tmp.459)
            (if (eq? tmp.188 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.458 rbp rax)))))
    (define L.jp.42
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.460 rbp)
         (rsi rdx tmp.187 ra.460 rbp)
         (rdx tmp.187 tmp.22 ra.460 rbp)
         (tmp.187 tmp.23 tmp.22 ra.460 rbp)
         ((tmp.23 tmp.22 ra.460 rbp)
          ((tmp.461 ra.460 rbp) (ra.460 rax rbp) (rax rbp))
          ((ra.460 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.23 tmp.22 tmp.187 ra.460 tmp.461 rax))
         (ra.460 (tmp.23 tmp.22 tmp.187 rdi rsi rdx rbp tmp.461 rax))
         (tmp.461 (rbp ra.460))
         (rdx (tmp.22 tmp.187 ra.460))
         (rsi (tmp.187 ra.460))
         (rdi (ra.460))
         (tmp.187 (tmp.23 tmp.22 rsi rdx ra.460 rbp))
         (tmp.22 (tmp.23 rdx tmp.187 ra.460 rbp))
         (tmp.23 (tmp.187 tmp.22 ra.460 rbp))))
       (assignment
        ((ra.460 r15) (tmp.187 r14) (tmp.22 r13) (tmp.23 r9) (tmp.461 r14))))
      (begin
        (set! ra.460 r15)
        (set! tmp.187 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.461 (- tmp.22 tmp.23))
            (set! rax tmp.461)
            (jump ra.460 rbp rax))
          (begin (set! rax 574) (jump ra.460 rbp rax)))))
    (define L.jp.39
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.462 rbp)
         (rsi rdx tmp.179 ra.462 rbp)
         (rdx tmp.179 tmp.20 ra.462 rbp)
         (tmp.179 tmp.21 tmp.20 ra.462 rbp)
         ((tmp.21 tmp.20 ra.462 rbp)
          ((tmp.463 tmp.21 tmp.20 ra.462 rbp)
           (tmp.182 tmp.21 tmp.20 ra.462 rbp)
           ((tmp.21 tmp.20 ra.462 rbp)
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.462 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.462 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.179 ra.462 tmp.182 tmp.463 r15 rdi rsi rdx rax))
         (ra.462 (tmp.21 tmp.20 tmp.179 rbp tmp.182 tmp.463 rdi rsi rdx rax))
         (rdx (tmp.179 r15 rdi rsi tmp.20 ra.462 rbp))
         (tmp.20 (tmp.21 tmp.179 ra.462 rbp tmp.182 tmp.463 rdx))
         (rsi (tmp.179 r15 rdi ra.462 rdx rbp))
         (rdi (r15 ra.462 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.463 (rbp ra.462 tmp.20 tmp.21))
         (tmp.21 (tmp.179 tmp.20 ra.462 rbp tmp.182 tmp.463))
         (tmp.182 (tmp.21 tmp.20 ra.462 rbp))
         (tmp.179 (tmp.21 tmp.20 rsi rdx ra.462 rbp))))
       (assignment
        ((ra.462 r15)
         (tmp.20 r14)
         (tmp.21 r13)
         (tmp.179 r9)
         (tmp.182 r9)
         (tmp.463 r9))))
      (begin
        (set! ra.462 r15)
        (set! tmp.179 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.179 6)
          (begin
            (set! tmp.463 (bitwise-and tmp.20 7))
            (set! tmp.182 tmp.463)
            (if (eq? tmp.182 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.462 rbp rax)))))
    (define L.jp.38
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.464 rbp)
         (rsi rdx tmp.181 ra.464 rbp)
         (rdx tmp.181 tmp.20 ra.464 rbp)
         (tmp.181 tmp.21 tmp.20 ra.464 rbp)
         ((tmp.21 tmp.20 ra.464 rbp)
          ((tmp.465 ra.464 rbp) (ra.464 rax rbp) (rax rbp))
          ((ra.464 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.464 rbp))
         (rbp (tmp.21 tmp.20 tmp.181 ra.464 tmp.465 rax))
         (ra.464 (tmp.21 tmp.20 tmp.181 rdi rsi rdx rbp tmp.465 rax))
         (tmp.465 (rbp ra.464))
         (rdx (tmp.20 tmp.181 ra.464))
         (rsi (tmp.181 ra.464))
         (rdi (ra.464))
         (tmp.181 (tmp.21 tmp.20 rsi rdx ra.464 rbp))
         (tmp.20 (tmp.21 rdx tmp.181 ra.464 rbp))
         (tmp.21 (tmp.181 tmp.20 ra.464 rbp))))
       (assignment
        ((ra.464 r15) (tmp.181 r14) (tmp.20 r13) (tmp.21 r9) (tmp.465 r14))))
      (begin
        (set! ra.464 r15)
        (set! tmp.181 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.181 6)
          (begin
            (set! tmp.465 (+ tmp.20 tmp.21))
            (set! rax tmp.465)
            (jump ra.464 rbp rax))
          (begin (set! rax 318) (jump ra.464 rbp rax)))))
    (define L.jp.35
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.466 rbp)
         (rsi rdx tmp.172 ra.466 rbp)
         (rdx tmp.172 tmp.18 ra.466 rbp)
         (tmp.172 tmp.18 tmp.19 ra.466 rbp)
         ((tmp.18 tmp.19 ra.466 rbp)
          ((tmp.467 tmp.18 tmp.19 ra.466 rbp)
           (tmp.176 tmp.18 tmp.19 ra.466 rbp)
           ((tmp.18 tmp.19 ra.466 rbp)
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.466 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.172 ra.466 tmp.176 tmp.467 r15 rdi rsi rdx rax))
         (ra.466 (tmp.19 tmp.18 tmp.172 rbp tmp.176 tmp.467 rdi rsi rdx rax))
         (rdx (tmp.18 tmp.172 r15 rdi rsi tmp.19 ra.466 rbp))
         (tmp.19 (tmp.172 tmp.18 ra.466 rbp tmp.176 tmp.467 rdx))
         (rsi (tmp.172 r15 rdi ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.467 (rbp ra.466 tmp.19 tmp.18))
         (tmp.18 (tmp.19 rdx tmp.172 ra.466 rbp tmp.176 tmp.467))
         (tmp.176 (tmp.18 tmp.19 ra.466 rbp))
         (tmp.172 (tmp.19 tmp.18 rsi rdx ra.466 rbp))))
       (assignment
        ((ra.466 r15)
         (tmp.18 r14)
         (tmp.19 r13)
         (tmp.172 r9)
         (tmp.176 r9)
         (tmp.467 r9))))
      (begin
        (set! ra.466 r15)
        (set! tmp.172 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.172 6)
          (begin
            (set! tmp.467 (bitwise-and tmp.18 7))
            (set! tmp.176 tmp.467)
            (if (eq? tmp.176 0)
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 14)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 6)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.466 rbp rax)))))
    (define L.jp.34
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.468 rbp)
         (rsi rdx tmp.174 ra.468 rbp)
         (rdx tmp.174 tmp.19 ra.468 rbp)
         (tmp.174 tmp.19 tmp.18 ra.468 rbp)
         ((tmp.19 tmp.18 ra.468 rbp)
          ((tmp.469 tmp.18 ra.468 rbp)
           (tmp.175 tmp.18 ra.468 rbp)
           (tmp.470 ra.468 rbp)
           (ra.468 rax rbp)
           (rax rbp))
          ((ra.468 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.468 rbp))
         (rbp (tmp.18 tmp.19 tmp.174 ra.468 tmp.470 tmp.175 tmp.469 rax))
         (ra.468
          (tmp.18 tmp.19 tmp.174 rdi rsi rdx rbp tmp.470 tmp.175 tmp.469 rax))
         (tmp.469 (rbp ra.468 tmp.18))
         (tmp.18 (tmp.174 tmp.19 ra.468 rbp tmp.175 tmp.469))
         (tmp.175 (tmp.18 ra.468 rbp))
         (tmp.470 (rbp ra.468))
         (rdx (tmp.19 tmp.174 ra.468))
         (rsi (tmp.174 ra.468))
         (rdi (ra.468))
         (tmp.174 (tmp.18 tmp.19 rsi rdx ra.468 rbp))
         (tmp.19 (tmp.18 rdx tmp.174 ra.468 rbp))))
       (assignment
        ((ra.468 r15)
         (tmp.18 r14)
         (tmp.174 r13)
         (tmp.19 r9)
         (tmp.469 r13)
         (tmp.175 r13)
         (tmp.470 r14))))
      (begin
        (set! ra.468 r15)
        (set! tmp.174 rdi)
        (set! tmp.19 rsi)
        (set! tmp.18 rdx)
        (if (neq? tmp.174 6)
          (begin
            (set! tmp.469 (arithmetic-shift-right tmp.19 3))
            (set! tmp.175 tmp.469)
            (set! tmp.470 (* tmp.18 tmp.175))
            (set! rax tmp.470)
            (jump ra.468 rbp rax))
          (begin (set! rax 62) (jump ra.468 rbp rax))))))
     ) 15)

  )

  (parameterize ([current-pass-list
                  (list
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ((new-frames ((nfv.357 nfv.358 nfv.359)))
       (locals
        (tmp.136
         nfv.359
         nfv.358
         nfv.357
         j.16
         tmp.137
         x.17
         tmp.324
         tmp.292
         tmp.326
         tmp.140
         unsafe-vector-ref.3
         tmp.293
         tmp.327
         tmp.141
         unsafe-vector-set!.2
         tmp.294
         tmp.328
         tmp.142
         vector-init-loop.84
         tmp.295
         tmp.329
         tmp.143
         make-init-vector.1
         tmp.296
         tmp.330
         tmp.144
         eq?.81
         tmp.297
         tmp.331
         tmp.145
         cons.80
         tmp.298
         tmp.332
         tmp.146
         not.79
         tmp.299
         tmp.333
         tmp.147
         vector?.78
         tmp.300
         tmp.334
         tmp.148
         procedure?.77
         tmp.301
         tmp.335
         tmp.149
         pair?.76
         tmp.302
         tmp.336
         tmp.150
         error?.75
         tmp.303
         tmp.337
         tmp.151
         ascii-char?.74
         tmp.304
         tmp.338
         tmp.152
         void?.73
         tmp.305
         tmp.339
         tmp.153
         empty?.72
         tmp.306
         tmp.340
         tmp.154
         boolean?.71
         tmp.307
         tmp.341
         tmp.155
         fixnum?.70
         tmp.308
         tmp.342
         tmp.156
         procedure-arity.69
         tmp.309
         tmp.343
         tmp.157
         cdr.68
         tmp.310
         tmp.344
         tmp.158
         car.67
         tmp.311
         tmp.345
         tmp.159
         vector-ref.66
         tmp.312
         tmp.346
         tmp.160
         vector-set!.65
         tmp.313
         tmp.347
         tmp.161
         vector-length.64
         tmp.314
         tmp.348
         tmp.162
         make-vector.63
         tmp.315
         tmp.349
         tmp.163
         >=.62
         tmp.316
         tmp.350
         tmp.164
         >.61
         tmp.317
         tmp.351
         tmp.165
         <=.60
         tmp.318
         tmp.352
         tmp.166
         <.59
         tmp.319
         tmp.353
         tmp.167
         |-.58|
         tmp.320
         tmp.354
         tmp.168
         |+.57|
         tmp.321
         tmp.355
         tmp.169
         *.56
         tmp.322
         tmp.356
         tmp.170
         x.15
         tmp.135))
       (undead-out
        ((r12 ra.325 rbp)
         (r12 tmp.292 ra.325 rbp)
         (tmp.292 r12 ra.325 rbp)
         (tmp.326 r12 ra.325 rbp)
         (r12 ra.325 rbp tmp.140)
         (rbp ra.325 r12 tmp.140)
         (tmp.140 r12 ra.325 rbp)
         (r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.293 ra.325 rbp unsafe-vector-ref.3)
         (tmp.293 r12 ra.325 rbp unsafe-vector-ref.3)
         (tmp.327 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 ra.325 rbp unsafe-vector-ref.3 tmp.141)
         (unsafe-vector-ref.3 rbp ra.325 r12 tmp.141)
         (tmp.141 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.294 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.294 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.328 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3 tmp.142)
         (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12 tmp.142)
         (tmp.142 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.295
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.295
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.329
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.143)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          r12
          tmp.143)
         (tmp.143
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.296
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.296
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.144)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.144)
         (tmp.144
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.297
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.297
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.145)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.145)
         (tmp.145
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.298
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.298
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.146)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.146)
         (tmp.146
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.299
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.299
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.147)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.147)
         (tmp.147
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.300
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.300
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.148)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.148)
         (tmp.148
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.301
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.301
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.149)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.302
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.302
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.150)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.303
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.303
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.151)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.304
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.304
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.152)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.305
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.305
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.153)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.306
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.306
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.154)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.307
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.307
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.155)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.308
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.308
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.156)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.309
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.309
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.157)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.310
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.310
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.344
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.158)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.311
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.311
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.345
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.159)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.312
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.312
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.346
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.160)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.313
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.313
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.161)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.314
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.314
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.162)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.315
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.315
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.163)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.316
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.316
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.164)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.317
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.317
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.165)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.318
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.318
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.352
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.166)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.319
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.319
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.353
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.167)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.320
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.320
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.354
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.168)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.355
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.169)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          tmp.169)
         (tmp.169
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          vector-init-loop.84
          make-init-vector.1)
         (vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-init-vector.1
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66)
         (make-vector.63
          make-init-vector.1
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65)
         (|+.57| eq?.81 ra.325 rbp r12 make-init-vector.1 make-vector.63)
         (r12 rbp ra.325 eq?.81 |+.57|)
         (r12 tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.356 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| tmp.170)
         (|+.57| eq?.81 ra.325 rbp tmp.170)
         (tmp.170 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| sum.4)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         ((rax sum.4 ra.325 rbp)
          ((eq?.81 rdx rbp)
           (eq?.81 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.324 sum.4 ra.325 rbp)
         ((sum.4 ra.325 rbp)
          ((sum.4 ra.325 rbp)
           ((rax ra.325 rbp)
            ((sum.4 nfv.359 rbp)
             (sum.4 nfv.359 nfv.358 rbp)
             (sum.4 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)))
           (j.16 ra.325 rbp)
           (ra.325 rax rbp)
           (rax rbp))
          ((x.17 sum.4 ra.325 rbp)
           (x.17 sum.4 ra.325 rbp)
           (sum.4 ra.325 fv2 rbp)
           (sum.4 ra.325 fv2 fv1 rbp)
           (sum.4 ra.325 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (ra.325 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)))))
       (call-undead (sum.4 ra.325))
       (conflicts
        ((x.17 (tmp.137 sum.4 ra.325 rbp))
         (rbp
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           r12
           tmp.292
           ra.325
           j.16
           nfv.357
           nfv.358
           nfv.359
           rax
           tmp.136
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (ra.325
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           tmp.292
           r12
           rbp
           j.16
           rax
           tmp.136
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (sum.4
          (tmp.324
           rax
           tmp.135
           x.15
           rbp
           ra.325
           eq?.81
           |+.57|
           nfv.357
           nfv.358
           nfv.359
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           x.17))
         (tmp.137 (x.17 ra.325 rbp))
         (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 sum.4 ra.325 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 sum.4 ra.325 fv2 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 sum.4 ra.325 fv2 fv1 rbp))
         (r9
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           sum.4
           ra.325
           fv2
           fv1
           fv0
           rbp))
         (r8
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           sum.4
           ra.325
           r9
           fv2
           fv1
           fv0
           rbp))
         (rcx
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           sum.4
           ra.325
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdx
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           sum.4
           ra.325
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rsi
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           sum.4
           ra.325
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdi
          (nfv.359
           nfv.358
           nfv.357
           r15
           ra.325
           rsi
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (r15 (nfv.359 nfv.358 nfv.357 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp))
         (tmp.136 (ra.325 rbp))
         (rax (sum.4 rbp ra.325))
         (nfv.359 (r15 rdi rsi rdx rcx r8 r9 nfv.357 nfv.358 sum.4 rbp))
         (nfv.358 (r15 rdi rsi rdx rcx r8 r9 nfv.357 sum.4 nfv.359 rbp))
         (nfv.357 (r15 rdi rsi rdx rcx r8 r9 sum.4 nfv.359 nfv.358 rbp))
         (j.16 (ra.325 rbp))
         (r12
          (tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           rbp
           tmp.292
           ra.325))
         (tmp.292 (r12 ra.325 rbp))
         (tmp.326 (rbp ra.325 r12))
         (tmp.140 (r12 ra.325 rbp))
         (unsafe-vector-ref.3
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           r12
           ra.325
           rbp))
         (tmp.293 (r12 ra.325 rbp unsafe-vector-ref.3))
         (tmp.327 (unsafe-vector-ref.3 rbp ra.325 r12))
         (tmp.141 (r12 ra.325 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           r12
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.294 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (tmp.328 (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12))
         (tmp.142 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (vector-init-loop.84
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.295
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.329
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           r12))
         (tmp.143
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (make-init-vector.1
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.296
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.330
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.144
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (eq?.81
          (rsi
           rdx
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.297
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.331
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.145
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cons.80
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.298
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.332
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.146
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (not.79
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.299
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.333
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.147
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector?.78
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.300
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.334
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.148
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure?.77
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.301
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.335
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (pair?.76
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.302
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.336
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (error?.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.303
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.337
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (ascii-char?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.304
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.338
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (void?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.305
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.339
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (empty?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.306
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.340
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (boolean?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.307
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.341
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (fixnum?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.308
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.342
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure-arity.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.309
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.343
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cdr.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.310
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.344
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (car.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.311
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.345
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector-ref.66
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.312
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.346
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-set!.65
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.313
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.347
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-length.64
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.314
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.348
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (make-vector.63
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.315
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.349
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>=.62
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.316
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.350
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>.61
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.317
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.351
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<=.60
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.318
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.352
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<.59
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.319
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.353
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|-.58|
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.320
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.354
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|+.57|
          (sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.321
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.355
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           r12
           rbp
           ra.325
           eq?.81
           |+.57|
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1))
         (tmp.169
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (*.56
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.322 (r12 rbp ra.325 eq?.81 |+.57|))
         (tmp.356 (|+.57| eq?.81 ra.325 rbp))
         (tmp.170 (rbp ra.325 eq?.81 |+.57|))
         (x.15 (eq?.81 sum.4 ra.325 rbp))
         (tmp.135 (sum.4 ra.325 rbp))
         (tmp.324 (sum.4 ra.325 rbp))))
       (assignment ((ra.325 fv3) (sum.4 fv4))))    ;; test flip
      (begin
        (set! ra.325 r15)
        (set! tmp.292 r12)
        (set! r12 (+ r12 16))
        (set! tmp.326 (+ tmp.292 2))
        (set! tmp.140 tmp.326)
        (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.140 6 16)
        (set! unsafe-vector-ref.3 tmp.140)
        (set! tmp.293 r12)
        (set! r12 (+ r12 16))
        (set! tmp.327 (+ tmp.293 2))
        (set! tmp.141 tmp.327)
        (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.141 6 24)
        (set! unsafe-vector-set!.2 tmp.141)
        (set! tmp.294 r12)
        (set! r12 (+ r12 24))
        (set! tmp.328 (+ tmp.294 2))
        (set! tmp.142 tmp.328)
        (mset! tmp.142 -2 L.vector-init-loop.84.3)
        (mset! tmp.142 6 24)
        (set! vector-init-loop.84 tmp.142)
        (set! tmp.295 r12)
        (set! r12 (+ r12 24))
        (set! tmp.329 (+ tmp.295 2))
        (set! tmp.143 tmp.329)
        (mset! tmp.143 -2 L.make-init-vector.1.4)
        (mset! tmp.143 6 8)
        (set! make-init-vector.1 tmp.143)
        (set! tmp.296 r12)
        (set! r12 (+ r12 16))
        (set! tmp.330 (+ tmp.296 2))
        (set! tmp.144 tmp.330)
        (mset! tmp.144 -2 L.eq?.81.5)
        (mset! tmp.144 6 16)
        (set! eq?.81 tmp.144)
        (set! tmp.297 r12)
        (set! r12 (+ r12 16))
        (set! tmp.331 (+ tmp.297 2))
        (set! tmp.145 tmp.331)
        (mset! tmp.145 -2 L.cons.80.6)
        (mset! tmp.145 6 16)
        (set! cons.80 tmp.145)
        (set! tmp.298 r12)
        (set! r12 (+ r12 16))
        (set! tmp.332 (+ tmp.298 2))
        (set! tmp.146 tmp.332)
        (mset! tmp.146 -2 L.not.79.7)
        (mset! tmp.146 6 8)
        (set! not.79 tmp.146)
        (set! tmp.299 r12)
        (set! r12 (+ r12 16))
        (set! tmp.333 (+ tmp.299 2))
        (set! tmp.147 tmp.333)
        (mset! tmp.147 -2 L.vector?.78.8)
        (mset! tmp.147 6 8)
        (set! vector?.78 tmp.147)
        (set! tmp.300 r12)
        (set! r12 (+ r12 16))
        (set! tmp.334 (+ tmp.300 2))
        (set! tmp.148 tmp.334)
        (mset! tmp.148 -2 L.procedure?.77.9)
        (mset! tmp.148 6 8)
        (set! procedure?.77 tmp.148)
        (set! tmp.301 r12)
        (set! r12 (+ r12 16))
        (set! tmp.335 (+ tmp.301 2))
        (set! tmp.149 tmp.335)
        (mset! tmp.149 -2 L.pair?.76.10)
        (mset! tmp.149 6 8)
        (set! pair?.76 tmp.149)
        (set! tmp.302 r12)
        (set! r12 (+ r12 16))
        (set! tmp.336 (+ tmp.302 2))
        (set! tmp.150 tmp.336)
        (mset! tmp.150 -2 L.error?.75.11)
        (mset! tmp.150 6 8)
        (set! error?.75 tmp.150)
        (set! tmp.303 r12)
        (set! r12 (+ r12 16))
        (set! tmp.337 (+ tmp.303 2))
        (set! tmp.151 tmp.337)
        (mset! tmp.151 -2 L.ascii-char?.74.12)
        (mset! tmp.151 6 8)
        (set! ascii-char?.74 tmp.151)
        (set! tmp.304 r12)
        (set! r12 (+ r12 16))
        (set! tmp.338 (+ tmp.304 2))
        (set! tmp.152 tmp.338)
        (mset! tmp.152 -2 L.void?.73.13)
        (mset! tmp.152 6 8)
        (set! void?.73 tmp.152)
        (set! tmp.305 r12)
        (set! r12 (+ r12 16))
        (set! tmp.339 (+ tmp.305 2))
        (set! tmp.153 tmp.339)
        (mset! tmp.153 -2 L.empty?.72.14)
        (mset! tmp.153 6 8)
        (set! empty?.72 tmp.153)
        (set! tmp.306 r12)
        (set! r12 (+ r12 16))
        (set! tmp.340 (+ tmp.306 2))
        (set! tmp.154 tmp.340)
        (mset! tmp.154 -2 L.boolean?.71.15)
        (mset! tmp.154 6 8)
        (set! boolean?.71 tmp.154)
        (set! tmp.307 r12)
        (set! r12 (+ r12 16))
        (set! tmp.341 (+ tmp.307 2))
        (set! tmp.155 tmp.341)
        (mset! tmp.155 -2 L.fixnum?.70.16)
        (mset! tmp.155 6 8)
        (set! fixnum?.70 tmp.155)
        (set! tmp.308 r12)
        (set! r12 (+ r12 16))
        (set! tmp.342 (+ tmp.308 2))
        (set! tmp.156 tmp.342)
        (mset! tmp.156 -2 L.procedure-arity.69.17)
        (mset! tmp.156 6 8)
        (set! procedure-arity.69 tmp.156)
        (set! tmp.309 r12)
        (set! r12 (+ r12 16))
        (set! tmp.343 (+ tmp.309 2))
        (set! tmp.157 tmp.343)
        (mset! tmp.157 -2 L.cdr.68.18)
        (mset! tmp.157 6 8)
        (set! cdr.68 tmp.157)
        (set! tmp.310 r12)
        (set! r12 (+ r12 16))
        (set! tmp.344 (+ tmp.310 2))
        (set! tmp.158 tmp.344)
        (mset! tmp.158 -2 L.car.67.19)
        (mset! tmp.158 6 8)
        (set! car.67 tmp.158)
        (set! tmp.311 r12)
        (set! r12 (+ r12 24))
        (set! tmp.345 (+ tmp.311 2))
        (set! tmp.159 tmp.345)
        (mset! tmp.159 -2 L.vector-ref.66.20)
        (mset! tmp.159 6 16)
        (set! vector-ref.66 tmp.159)
        (set! tmp.312 r12)
        (set! r12 (+ r12 24))
        (set! tmp.346 (+ tmp.312 2))
        (set! tmp.160 tmp.346)
        (mset! tmp.160 -2 L.vector-set!.65.21)
        (mset! tmp.160 6 24)
        (set! vector-set!.65 tmp.160)
        (set! tmp.313 r12)
        (set! r12 (+ r12 16))
        (set! tmp.347 (+ tmp.313 2))
        (set! tmp.161 tmp.347)
        (mset! tmp.161 -2 L.vector-length.64.22)
        (mset! tmp.161 6 8)
        (set! vector-length.64 tmp.161)
        (set! tmp.314 r12)
        (set! r12 (+ r12 24))
        (set! tmp.348 (+ tmp.314 2))
        (set! tmp.162 tmp.348)
        (mset! tmp.162 -2 L.make-vector.63.23)
        (mset! tmp.162 6 8)
        (set! make-vector.63 tmp.162)
        (set! tmp.315 r12)
        (set! r12 (+ r12 16))
        (set! tmp.349 (+ tmp.315 2))
        (set! tmp.163 tmp.349)
        (mset! tmp.163 -2 L.>=.62.24)
        (mset! tmp.163 6 16)
        (set! >=.62 tmp.163)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.164 tmp.350)
        (mset! tmp.164 -2 L.>.61.25)
        (mset! tmp.164 6 16)
        (set! >.61 tmp.164)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.165 tmp.351)
        (mset! tmp.165 -2 L.<=.60.26)
        (mset! tmp.165 6 16)
        (set! <=.60 tmp.165)
        (set! tmp.318 r12)
        (set! r12 (+ r12 16))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.166 tmp.352)
        (mset! tmp.166 -2 L.<.59.27)
        (mset! tmp.166 6 16)
        (set! <.59 tmp.166)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.167 tmp.353)
        (mset! tmp.167 -2 L.-.58.28)
        (mset! tmp.167 6 16)
        (set! |-.58| tmp.167)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.168 tmp.354)
        (mset! tmp.168 -2 L.+.57.29)
        (mset! tmp.168 6 16)
        (set! |+.57| tmp.168)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.169 tmp.355)
        (mset! tmp.169 -2 L.*.56.30)
        (mset! tmp.169 6 16)
        (set! *.56 tmp.169)
        (mset! vector-init-loop.84 14 vector-init-loop.84)
        (mset! make-init-vector.1 14 vector-init-loop.84)
        (mset! vector-ref.66 14 unsafe-vector-ref.3)
        (mset! vector-set!.65 14 unsafe-vector-set!.2)
        (mset! make-vector.63 14 make-init-vector.1)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.170 tmp.356)
        (mset! tmp.170 -2 L.sum.4.31)
        (mset! tmp.170 6 64)
        (set! sum.4 tmp.170)
        (mset! sum.4 14 |+.57|)
        (set! x.15 80)
        (set! tmp.135 eq?.81)
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi eq?.81)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5 rbp r15 rdx rsi rdi)))
        (set! tmp.324 rax)
        (if (neq? tmp.324 6)
          (begin
            (set! tmp.136 sum.4)
            (return-point L.rp.106
              (begin
                (set! nfv.359 64)
                (set! nfv.358 56)
                (set! nfv.357 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi sum.4)
                (set! r15 L.rp.106)
                (jump
                 L.sum.4.31
                 rbp
                 r15
                 nfv.357
                 nfv.358
                 nfv.359
                 r9
                 r8
                 rcx
                 rdx
                 rsi
                 rdi)))
            (set! j.16 rax)
            (set! rax j.16)
            (jump ra.325 rbp rax))
          (begin
            (set! x.17 40)
            (set! tmp.137 sum.4)
            (set! fv2 x.17)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi sum.4)
            (set! r15 ra.325)
            (jump L.sum.4.31 rbp r15 fv0 fv1 fv2 r9 r8 rcx rdx rsi rdi)))))
    (define L.sum.4.31
      ((new-frames ())
       (locals (c.126 a.5 b.6 c.7 d.8 e.9 f.10 tmp.132 tmp.133 j.14 tmp.134))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.360 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.126 ra.360 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.126 a.5 ra.360 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv2 c.126 a.5 b.6 g.11 ra.360 rbp)
         (c.126 a.5 b.6 g.11 h.12 ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         ((rax g.11 h.12 |+.57| ra.360 rbp)
          ((a.5 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         ((rax i.13 |+.57| ra.360 rbp)
          ((g.11 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.14 i.13 |+.57| ra.360 rbp)
         (j.14 i.13 |+.57| ra.360 rbp)
         (i.13 |+.57| ra.360 rdx rbp)
         (|+.57| ra.360 rsi rdx rbp)
         (ra.360 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (i.13 g.11 h.12 |+.57| ra.360))
       (conflicts
        ((ra.360
          (tmp.134
           j.14
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (tmp.134
           j.14
           tmp.133
           i.13
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           ra.360))
         (fv2 (g.11 f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv1 (f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv0 (e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (r9 (d.8 c.7 b.6 a.5 c.126 ra.360))
         (r8 (c.7 b.6 a.5 c.126 ra.360))
         (rcx (b.6 a.5 c.126 ra.360))
         (rdx (i.13 g.11 r15 rdi rsi |+.57| rbp a.5 c.126 ra.360))
         (rsi (r15 rdi |+.57| rdx rbp c.126 ra.360))
         (rdi (r15 rsi rdx rbp ra.360))
         (c.126
          (h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.360
           rbp))
         (a.5
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           ra.360
           rbp))
         (b.6
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           a.5
           ra.360
           rbp))
         (c.7 (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (d.8 (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (e.9 (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (f.10 (fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (g.11
          (rdx
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           fv2
           c.126
           a.5
           b.6
           ra.360
           rbp))
         (h.12 (tmp.133 i.13 rax tmp.132 |+.57| c.126 a.5 b.6 g.11 ra.360 rbp))
         (|+.57| (j.14 i.13 rsi rdx rax rbp ra.360 h.12 g.11 b.6 a.5))
         (tmp.132 (a.5 b.6 g.11 h.12 ra.360 rbp))
         (rax (i.13 rbp ra.360 |+.57| h.12 g.11))
         (r15 (rdi rsi rdx rbp))
         (i.13 (rdx tmp.134 j.14 rax tmp.133 g.11 h.12 |+.57| ra.360 rbp))
         (tmp.133 (g.11 h.12 i.13 ra.360 rbp))
         (j.14 (tmp.134 i.13 |+.57| ra.360 rbp))
         (tmp.134 (j.14 i.13 ra.360 rbp))))
       (assignment
        ((ra.360 fv3) (|+.57| fv0) (h.12 fv1) (g.11 fv4) (i.13 fv2))))
      (begin
        (set! ra.360 r15)
        (set! c.126 rdi)
        (set! a.5 rsi)
        (set! b.6 rdx)
        (set! c.7 rcx)
        (set! d.8 r8)
        (set! e.9 r9)
        (set! f.10 fv0)
        (set! g.11 fv1)
        (set! h.12 fv2)
        (set! |+.57| (mref c.126 14))
        (set! tmp.132 |+.57|)
        (return-point L.rp.107
          (begin
            (set! rdx b.6)
            (set! rsi a.5)
            (set! rdi |+.57|)
            (set! r15 L.rp.107)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! i.13 rax)
        (set! tmp.133 |+.57|)
        (return-point L.rp.108
          (begin
            (set! rdx h.12)
            (set! rsi g.11)
            (set! rdi |+.57|)
            (set! r15 L.rp.108)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! j.14 rax)
        (set! tmp.134 |+.57|)
        (set! rdx j.14)
        (set! rsi i.13)
        (set! rdi |+.57|)
        (set! r15 ra.360)
        (jump L.+.57.29 rbp r15 rdx rsi rdi)))
    (define L.*.56.30
      ((new-frames ())
       (locals (tmp.19 tmp.18 ra.361 tmp.177 c.125 tmp.362))
       (undead-out
        ((rdi rsi rdx ra.361 rbp)
         (rsi rdx ra.361 rbp)
         (rdx tmp.18 ra.361 rbp)
         (tmp.19 tmp.18 ra.361 rbp)
         (tmp.362 tmp.19 tmp.18 ra.361 rbp)
         (tmp.177 tmp.19 tmp.18 ra.361 rbp)
         ((tmp.19 tmp.18 ra.361 rbp)
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.125 r15 rdi rsi tmp.18 ra.361 rbp))
         (rbp (tmp.177 tmp.362 tmp.19 tmp.18 c.125 ra.361 r15 rdi rsi rdx))
         (ra.361 (tmp.177 tmp.362 tmp.19 tmp.18 c.125 rbp rdi rsi rdx))
         (tmp.18 (tmp.177 tmp.362 tmp.19 ra.361 rbp rdx))
         (rsi (c.125 r15 rdi ra.361 rdx rbp))
         (rdi (r15 ra.361 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.125 (rsi rdx ra.361 rbp))
         (tmp.19 (tmp.177 tmp.362 tmp.18 ra.361 rbp))
         (tmp.362 (rbp ra.361 tmp.18 tmp.19))
         (tmp.177 (tmp.19 tmp.18 ra.361 rbp))))
       (assignment ()))
      (begin
        (set! ra.361 r15)
        (set! c.125 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.362 (bitwise-and tmp.19 7))
        (set! tmp.177 tmp.362)
        (if (eq? tmp.177 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi)))))
    (define L.+.57.29
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.363 tmp.183 c.124 tmp.364))
       (undead-out
        ((rdi rsi rdx ra.363 rbp)
         (rsi rdx ra.363 rbp)
         (rdx tmp.20 ra.363 rbp)
         (tmp.21 tmp.20 ra.363 rbp)
         (tmp.364 tmp.21 tmp.20 ra.363 rbp)
         (tmp.183 tmp.21 tmp.20 ra.363 rbp)
         ((tmp.21 tmp.20 ra.363 rbp)
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.124 r15 rdi rsi tmp.20 ra.363 rbp))
         (rbp (tmp.183 tmp.364 tmp.21 tmp.20 c.124 ra.363 r15 rdi rsi rdx))
         (ra.363 (tmp.183 tmp.364 tmp.21 tmp.20 c.124 rbp rdi rsi rdx))
         (tmp.20 (tmp.183 tmp.364 tmp.21 ra.363 rbp rdx))
         (rsi (c.124 r15 rdi ra.363 rdx rbp))
         (rdi (r15 ra.363 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.124 (rsi rdx ra.363 rbp))
         (tmp.21 (tmp.183 tmp.364 tmp.20 ra.363 rbp))
         (tmp.364 (rbp ra.363 tmp.20 tmp.21))
         (tmp.183 (tmp.21 tmp.20 ra.363 rbp))))
       (assignment ()))
      (begin
        (set! ra.363 r15)
        (set! c.124 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.364 (bitwise-and tmp.21 7))
        (set! tmp.183 tmp.364)
        (if (eq? tmp.183 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi)))))
    (define L.-.58.28
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.365 tmp.189 c.123 tmp.366))
       (undead-out
        ((rdi rsi rdx ra.365 rbp)
         (rsi rdx ra.365 rbp)
         (rdx tmp.22 ra.365 rbp)
         (tmp.23 tmp.22 ra.365 rbp)
         (tmp.366 tmp.23 tmp.22 ra.365 rbp)
         (tmp.189 tmp.23 tmp.22 ra.365 rbp)
         ((tmp.23 tmp.22 ra.365 rbp)
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.123 r15 rdi rsi tmp.22 ra.365 rbp))
         (rbp (tmp.189 tmp.366 tmp.23 tmp.22 c.123 ra.365 r15 rdi rsi rdx))
         (ra.365 (tmp.189 tmp.366 tmp.23 tmp.22 c.123 rbp rdi rsi rdx))
         (tmp.22 (tmp.189 tmp.366 tmp.23 ra.365 rbp rdx))
         (rsi (c.123 r15 rdi ra.365 rdx rbp))
         (rdi (r15 ra.365 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.123 (rsi rdx ra.365 rbp))
         (tmp.23 (tmp.189 tmp.366 tmp.22 ra.365 rbp))
         (tmp.366 (rbp ra.365 tmp.22 tmp.23))
         (tmp.189 (tmp.23 tmp.22 ra.365 rbp))))
       (assignment ()))
      (begin
        (set! ra.365 r15)
        (set! c.123 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.366 (bitwise-and tmp.23 7))
        (set! tmp.189 tmp.366)
        (if (eq? tmp.189 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.<.59.27
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.367 tmp.196 c.122 tmp.368))
       (undead-out
        ((rdi rsi rdx ra.367 rbp)
         (rsi rdx ra.367 rbp)
         (rdx tmp.24 ra.367 rbp)
         (tmp.25 tmp.24 ra.367 rbp)
         (tmp.368 tmp.25 tmp.24 ra.367 rbp)
         (tmp.196 tmp.25 tmp.24 ra.367 rbp)
         ((tmp.25 tmp.24 ra.367 rbp)
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.122 r15 rdi rsi tmp.24 ra.367 rbp))
         (rbp (tmp.196 tmp.368 tmp.25 tmp.24 c.122 ra.367 r15 rdi rsi rdx))
         (ra.367 (tmp.196 tmp.368 tmp.25 tmp.24 c.122 rbp rdi rsi rdx))
         (tmp.24 (tmp.196 tmp.368 tmp.25 ra.367 rbp rdx))
         (rsi (c.122 r15 rdi ra.367 rdx rbp))
         (rdi (r15 ra.367 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.122 (rsi rdx ra.367 rbp))
         (tmp.25 (tmp.196 tmp.368 tmp.24 ra.367 rbp))
         (tmp.368 (rbp ra.367 tmp.24 tmp.25))
         (tmp.196 (tmp.25 tmp.24 ra.367 rbp))))
       (assignment ()))
      (begin
        (set! ra.367 r15)
        (set! c.122 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.368 (bitwise-and tmp.25 7))
        (set! tmp.196 tmp.368)
        (if (eq? tmp.196 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<=.60.26
      ((new-frames ())
       (locals (tmp.27 tmp.26 ra.369 tmp.203 c.121 tmp.370))
       (undead-out
        ((rdi rsi rdx ra.369 rbp)
         (rsi rdx ra.369 rbp)
         (rdx tmp.26 ra.369 rbp)
         (tmp.27 tmp.26 ra.369 rbp)
         (tmp.370 tmp.27 tmp.26 ra.369 rbp)
         (tmp.203 tmp.27 tmp.26 ra.369 rbp)
         ((tmp.27 tmp.26 ra.369 rbp)
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.26 ra.369 rbp))
         (rbp (tmp.203 tmp.370 tmp.27 tmp.26 c.121 ra.369 r15 rdi rsi rdx))
         (ra.369 (tmp.203 tmp.370 tmp.27 tmp.26 c.121 rbp rdi rsi rdx))
         (tmp.26 (tmp.203 tmp.370 tmp.27 ra.369 rbp rdx))
         (rsi (c.121 r15 rdi ra.369 rdx rbp))
         (rdi (r15 ra.369 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.369 rbp))
         (tmp.27 (tmp.203 tmp.370 tmp.26 ra.369 rbp))
         (tmp.370 (rbp ra.369 tmp.26 tmp.27))
         (tmp.203 (tmp.27 tmp.26 ra.369 rbp))))
       (assignment ()))
      (begin
        (set! ra.369 r15)
        (set! c.121 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.370 (bitwise-and tmp.27 7))
        (set! tmp.203 tmp.370)
        (if (eq? tmp.203 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.>.61.25
      ((new-frames ())
       (locals (tmp.29 tmp.28 ra.371 tmp.210 c.120 tmp.372))
       (undead-out
        ((rdi rsi rdx ra.371 rbp)
         (rsi rdx ra.371 rbp)
         (rdx tmp.28 ra.371 rbp)
         (tmp.29 tmp.28 ra.371 rbp)
         (tmp.372 tmp.29 tmp.28 ra.371 rbp)
         (tmp.210 tmp.29 tmp.28 ra.371 rbp)
         ((tmp.29 tmp.28 ra.371 rbp)
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.28 ra.371 rbp))
         (rbp (tmp.210 tmp.372 tmp.29 tmp.28 c.120 ra.371 r15 rdi rsi rdx))
         (ra.371 (tmp.210 tmp.372 tmp.29 tmp.28 c.120 rbp rdi rsi rdx))
         (tmp.28 (tmp.210 tmp.372 tmp.29 ra.371 rbp rdx))
         (rsi (c.120 r15 rdi ra.371 rdx rbp))
         (rdi (r15 ra.371 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.371 rbp))
         (tmp.29 (tmp.210 tmp.372 tmp.28 ra.371 rbp))
         (tmp.372 (rbp ra.371 tmp.28 tmp.29))
         (tmp.210 (tmp.29 tmp.28 ra.371 rbp))))
       (assignment ()))
      (begin
        (set! ra.371 r15)
        (set! c.120 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.372 (bitwise-and tmp.29 7))
        (set! tmp.210 tmp.372)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>=.62.24
      ((new-frames ())
       (locals (tmp.31 tmp.30 ra.373 tmp.217 c.119 tmp.374))
       (undead-out
        ((rdi rsi rdx ra.373 rbp)
         (rsi rdx ra.373 rbp)
         (rdx tmp.30 ra.373 rbp)
         (tmp.31 tmp.30 ra.373 rbp)
         (tmp.374 tmp.31 tmp.30 ra.373 rbp)
         (tmp.217 tmp.31 tmp.30 ra.373 rbp)
         ((tmp.31 tmp.30 ra.373 rbp)
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.30 ra.373 rbp))
         (rbp (tmp.217 tmp.374 tmp.31 tmp.30 c.119 ra.373 r15 rdi rsi rdx))
         (ra.373 (tmp.217 tmp.374 tmp.31 tmp.30 c.119 rbp rdi rsi rdx))
         (tmp.30 (tmp.217 tmp.374 tmp.31 ra.373 rbp rdx))
         (rsi (c.119 r15 rdi ra.373 rdx rbp))
         (rdi (r15 ra.373 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.373 rbp))
         (tmp.31 (tmp.217 tmp.374 tmp.30 ra.373 rbp))
         (tmp.374 (rbp ra.373 tmp.30 tmp.31))
         (tmp.217 (tmp.31 tmp.30 ra.373 rbp))))
       (assignment ()))
      (begin
        (set! ra.373 r15)
        (set! c.119 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.374 (bitwise-and tmp.31 7))
        (set! tmp.217 tmp.374)
        (if (eq? tmp.217 0)
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.63.23
      ((new-frames ())
       (locals (tmp.32 make-init-vector.1 ra.375 tmp.220 c.118 tmp.376))
       (undead-out
        ((rdi rsi ra.375 rbp)
         (rsi c.118 ra.375 rbp)
         (c.118 tmp.32 ra.375 rbp)
         (tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.376 tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.220 tmp.32 make-init-vector.1 ra.375 rbp)
         ((tmp.32 make-init-vector.1 ra.375 rbp)
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.375 rbp))
         (rbp
          (tmp.220
           tmp.376
           make-init-vector.1
           tmp.32
           c.118
           ra.375
           r15
           rdi
           rsi
           rdx))
         (ra.375
          (tmp.220 tmp.376 make-init-vector.1 tmp.32 c.118 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.220 tmp.376 rbp ra.375 tmp.32 rdx))
         (rsi (c.118 r15 rdi ra.375 rdx rbp))
         (rdi (r15 ra.375 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (tmp.32 rsi ra.375 rbp))
         (tmp.32 (tmp.220 tmp.376 make-init-vector.1 c.118 ra.375 rbp))
         (tmp.376 (rbp ra.375 make-init-vector.1 tmp.32))
         (tmp.220 (tmp.32 make-init-vector.1 ra.375 rbp))))
       (assignment ()))
      (begin
        (set! ra.375 r15)
        (set! c.118 rdi)
        (set! tmp.32 rsi)
        (set! make-init-vector.1 (mref c.118 14))
        (set! tmp.376 (bitwise-and tmp.32 7))
        (set! tmp.220 tmp.376)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.64.22
      ((new-frames ())
       (locals (tmp.33 ra.377 tmp.223 c.117 tmp.378))
       (undead-out
        ((rdi rsi ra.377 rbp)
         (rsi ra.377 rbp)
         (tmp.33 ra.377 rbp)
         (tmp.378 tmp.33 ra.377 rbp)
         (tmp.223 tmp.33 ra.377 rbp)
         ((tmp.33 ra.377 rbp)
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.117 r15 rdi ra.377 rbp))
         (rbp (tmp.223 tmp.378 tmp.33 c.117 ra.377 r15 rdi rsi))
         (ra.377 (tmp.223 tmp.378 tmp.33 c.117 rbp rdi rsi))
         (rdi (r15 ra.377 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.117 (rsi ra.377 rbp))
         (tmp.33 (tmp.223 tmp.378 ra.377 rbp))
         (tmp.378 (rbp ra.377 tmp.33))
         (tmp.223 (tmp.33 ra.377 rbp))))
       (assignment ()))
      (begin
        (set! ra.377 r15)
        (set! c.117 rdi)
        (set! tmp.33 rsi)
        (set! tmp.378 (bitwise-and tmp.33 7))
        (set! tmp.223 tmp.378)
        (if (eq? tmp.223 3)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi)))))
    (define L.vector-set!.65.21
      ((new-frames ())
       (locals
        (tmp.35
         tmp.36
         unsafe-vector-set!.2
         tmp.34
         ra.379
         tmp.229
         c.116
         tmp.380))
       (undead-out
        ((rdi rsi rdx rcx ra.379 rbp)
         (rsi rdx rcx c.116 ra.379 rbp)
         (rdx rcx c.116 tmp.34 ra.379 rbp)
         (rcx c.116 tmp.35 tmp.34 ra.379 rbp)
         (c.116 tmp.35 tmp.36 tmp.34 ra.379 rbp)
         (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.380 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.229 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         ((tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp))
         (rbp
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           ra.379
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.379
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.34
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           c.116
           ra.379
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.229 tmp.380 rbp ra.379 tmp.34 tmp.36 tmp.35 rcx r8))
         (tmp.36
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           c.116
           tmp.35
           tmp.34
           ra.379
           rbp
           r8))
         (rcx
          (tmp.35
           c.116
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.34
           ra.379
           r8
           rbp))
         (rdx (c.116 r15 rdi rsi tmp.34 ra.379 rcx r8 rbp))
         (rsi (c.116 r15 rdi ra.379 rdx rcx r8 rbp))
         (rdi (r15 ra.379 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.116 (tmp.36 tmp.35 tmp.34 rsi rdx rcx ra.379 rbp))
         (tmp.35
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           rcx
           c.116
           tmp.34
           ra.379
           rbp))
         (tmp.380 (rbp ra.379 tmp.34 unsafe-vector-set!.2 tmp.36 tmp.35))
         (tmp.229 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp))))
       (assignment ()))
      (begin
        (set! ra.379 r15)
        (set! c.116 rdi)
        (set! tmp.34 rsi)
        (set! tmp.35 rdx)
        (set! tmp.36 rcx)
        (set! unsafe-vector-set!.2 (mref c.116 14))
        (set! tmp.380 (bitwise-and tmp.35 7))
        (set! tmp.229 tmp.380)
        (if (eq? tmp.229 0)
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.66.20
      ((new-frames ())
       (locals
        (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 tmp.235 c.115 tmp.382))
       (undead-out
        ((rdi rsi rdx ra.381 rbp)
         (rsi rdx c.115 ra.381 rbp)
         (rdx c.115 tmp.37 ra.381 rbp)
         (c.115 tmp.38 tmp.37 ra.381 rbp)
         (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.382 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.235 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         ((tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.37 ra.381 rbp))
         (rbp
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           ra.381
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.381
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.37
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           c.115
           ra.381
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.235 tmp.382 rbp ra.381 tmp.37 tmp.38 rcx))
         (rdx (c.115 r15 rdi rsi tmp.37 ra.381 rcx rbp))
         (rsi (c.115 r15 rdi ra.381 rdx rcx rbp))
         (rdi (r15 ra.381 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.115 (tmp.38 tmp.37 rsi rdx ra.381 rbp))
         (tmp.38 (tmp.235 tmp.382 unsafe-vector-ref.3 c.115 tmp.37 ra.381 rbp))
         (tmp.382 (rbp ra.381 tmp.37 unsafe-vector-ref.3 tmp.38))
         (tmp.235 (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp))))
       (assignment ()))
      (begin
        (set! ra.381 r15)
        (set! c.115 rdi)
        (set! tmp.37 rsi)
        (set! tmp.38 rdx)
        (set! unsafe-vector-ref.3 (mref c.115 14))
        (set! tmp.382 (bitwise-and tmp.38 7))
        (set! tmp.235 tmp.382)
        (if (eq? tmp.235 0)
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.67.19
      ((new-frames ())
       (locals (tmp.39 ra.383 tmp.238 c.114 tmp.384))
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi ra.383 rbp)
         (tmp.39 ra.383 rbp)
         (tmp.384 tmp.39 ra.383 rbp)
         (tmp.238 tmp.39 ra.383 rbp)
         ((tmp.39 ra.383 rbp)
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.114 r15 rdi ra.383 rbp))
         (rbp (tmp.238 tmp.384 tmp.39 c.114 ra.383 r15 rdi rsi))
         (ra.383 (tmp.238 tmp.384 tmp.39 c.114 rbp rdi rsi))
         (rdi (r15 ra.383 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.114 (rsi ra.383 rbp))
         (tmp.39 (tmp.238 tmp.384 ra.383 rbp))
         (tmp.384 (rbp ra.383 tmp.39))
         (tmp.238 (tmp.39 ra.383 rbp))))
       (assignment ()))
      (begin
        (set! ra.383 r15)
        (set! c.114 rdi)
        (set! tmp.39 rsi)
        (set! tmp.384 (bitwise-and tmp.39 7))
        (set! tmp.238 tmp.384)
        (if (eq? tmp.238 1)
          (begin
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi)))))
    (define L.cdr.68.18
      ((new-frames ())
       (locals (tmp.40 ra.385 tmp.241 c.113 tmp.386))
       (undead-out
        ((rdi rsi ra.385 rbp)
         (rsi ra.385 rbp)
         (tmp.40 ra.385 rbp)
         (tmp.386 tmp.40 ra.385 rbp)
         (tmp.241 tmp.40 ra.385 rbp)
         ((tmp.40 ra.385 rbp)
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.113 r15 rdi ra.385 rbp))
         (rbp (tmp.241 tmp.386 tmp.40 c.113 ra.385 r15 rdi rsi))
         (ra.385 (tmp.241 tmp.386 tmp.40 c.113 rbp rdi rsi))
         (rdi (r15 ra.385 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.385 rbp))
         (tmp.40 (tmp.241 tmp.386 ra.385 rbp))
         (tmp.386 (rbp ra.385 tmp.40))
         (tmp.241 (tmp.40 ra.385 rbp))))
       (assignment ()))
      (begin
        (set! ra.385 r15)
        (set! c.113 rdi)
        (set! tmp.40 rsi)
        (set! tmp.386 (bitwise-and tmp.40 7))
        (set! tmp.241 tmp.386)
        (if (eq? tmp.241 1)
          (begin
            (set! rsi tmp.40)
            (set! rdi 14)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.40)
            (set! rdi 6)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.procedure-arity.69.17
      ((new-frames ())
       (locals (tmp.41 ra.387 tmp.244 c.112 tmp.388))
       (undead-out
        ((rdi rsi ra.387 rbp)
         (rsi ra.387 rbp)
         (tmp.41 ra.387 rbp)
         (tmp.388 tmp.41 ra.387 rbp)
         (tmp.244 tmp.41 ra.387 rbp)
         ((tmp.41 ra.387 rbp)
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.112 r15 rdi ra.387 rbp))
         (rbp (tmp.244 tmp.388 tmp.41 c.112 ra.387 r15 rdi rsi))
         (ra.387 (tmp.244 tmp.388 tmp.41 c.112 rbp rdi rsi))
         (rdi (r15 ra.387 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.112 (rsi ra.387 rbp))
         (tmp.41 (tmp.244 tmp.388 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.41))
         (tmp.244 (tmp.41 ra.387 rbp))))
       (assignment ()))
      (begin
        (set! ra.387 r15)
        (set! c.112 rdi)
        (set! tmp.41 rsi)
        (set! tmp.388 (bitwise-and tmp.41 7))
        (set! tmp.244 tmp.388)
        (if (eq? tmp.244 2)
          (begin
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.fixnum?.70.16
      ((new-frames ())
       (locals (tmp.246 ra.389 c.111 tmp.42 tmp.390))
       (undead-out
        ((rdi rsi ra.389 rbp)
         (rsi ra.389 rbp)
         (tmp.42 ra.389 rbp)
         (tmp.390 ra.389 rbp)
         (tmp.246 ra.389 rbp)
         ((ra.389 rbp)
          ((ra.389 rax rbp) (rax rbp))
          ((ra.389 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.389 rbp))
         (rbp (tmp.246 tmp.390 tmp.42 c.111 ra.389 rax))
         (ra.389 (tmp.246 tmp.390 tmp.42 c.111 rdi rsi rbp rax))
         (rsi (c.111 ra.389))
         (rdi (ra.389))
         (c.111 (rsi ra.389 rbp))
         (tmp.42 (ra.389 rbp))
         (tmp.390 (rbp ra.389))
         (tmp.246 (ra.389 rbp))))
       (assignment ()))
      (begin
        (set! ra.389 r15)
        (set! c.111 rdi)
        (set! tmp.42 rsi)
        (set! tmp.390 (bitwise-and tmp.42 7))
        (set! tmp.246 tmp.390)
        (if (eq? tmp.246 0)
          (begin (set! rax 14) (jump ra.389 rbp rax))
          (begin (set! rax 6) (jump ra.389 rbp rax)))))
    (define L.boolean?.71.15
      ((new-frames ())
       (locals (tmp.248 ra.391 c.110 tmp.43 tmp.392))
       (undead-out
        ((rdi rsi ra.391 rbp)
         (rsi ra.391 rbp)
         (tmp.43 ra.391 rbp)
         (tmp.392 ra.391 rbp)
         (tmp.248 ra.391 rbp)
         ((ra.391 rbp)
          ((ra.391 rax rbp) (rax rbp))
          ((ra.391 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.391 rbp))
         (rbp (tmp.248 tmp.392 tmp.43 c.110 ra.391 rax))
         (ra.391 (tmp.248 tmp.392 tmp.43 c.110 rdi rsi rbp rax))
         (rsi (c.110 ra.391))
         (rdi (ra.391))
         (c.110 (rsi ra.391 rbp))
         (tmp.43 (ra.391 rbp))
         (tmp.392 (rbp ra.391))
         (tmp.248 (ra.391 rbp))))
       (assignment ()))
      (begin
        (set! ra.391 r15)
        (set! c.110 rdi)
        (set! tmp.43 rsi)
        (set! tmp.392 (bitwise-and tmp.43 247))
        (set! tmp.248 tmp.392)
        (if (eq? tmp.248 6)
          (begin (set! rax 14) (jump ra.391 rbp rax))
          (begin (set! rax 6) (jump ra.391 rbp rax)))))
    (define L.empty?.72.14
      ((new-frames ())
       (locals (tmp.250 ra.393 c.109 tmp.44 tmp.394))
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi ra.393 rbp)
         (tmp.44 ra.393 rbp)
         (tmp.394 ra.393 rbp)
         (tmp.250 ra.393 rbp)
         ((ra.393 rbp)
          ((ra.393 rax rbp) (rax rbp))
          ((ra.393 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.393 rbp))
         (rbp (tmp.250 tmp.394 tmp.44 c.109 ra.393 rax))
         (ra.393 (tmp.250 tmp.394 tmp.44 c.109 rdi rsi rbp rax))
         (rsi (c.109 ra.393))
         (rdi (ra.393))
         (c.109 (rsi ra.393 rbp))
         (tmp.44 (ra.393 rbp))
         (tmp.394 (rbp ra.393))
         (tmp.250 (ra.393 rbp))))
       (assignment ()))
      (begin
        (set! ra.393 r15)
        (set! c.109 rdi)
        (set! tmp.44 rsi)
        (set! tmp.394 (bitwise-and tmp.44 255))
        (set! tmp.250 tmp.394)
        (if (eq? tmp.250 22)
          (begin (set! rax 14) (jump ra.393 rbp rax))
          (begin (set! rax 6) (jump ra.393 rbp rax)))))
    (define L.void?.73.13
      ((new-frames ())
       (locals (tmp.252 ra.395 c.108 tmp.45 tmp.396))
       (undead-out
        ((rdi rsi ra.395 rbp)
         (rsi ra.395 rbp)
         (tmp.45 ra.395 rbp)
         (tmp.396 ra.395 rbp)
         (tmp.252 ra.395 rbp)
         ((ra.395 rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((ra.395 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.395 rbp))
         (rbp (tmp.252 tmp.396 tmp.45 c.108 ra.395 rax))
         (ra.395 (tmp.252 tmp.396 tmp.45 c.108 rdi rsi rbp rax))
         (rsi (c.108 ra.395))
         (rdi (ra.395))
         (c.108 (rsi ra.395 rbp))
         (tmp.45 (ra.395 rbp))
         (tmp.396 (rbp ra.395))
         (tmp.252 (ra.395 rbp))))
       (assignment ()))
      (begin
        (set! ra.395 r15)
        (set! c.108 rdi)
        (set! tmp.45 rsi)
        (set! tmp.396 (bitwise-and tmp.45 255))
        (set! tmp.252 tmp.396)
        (if (eq? tmp.252 30)
          (begin (set! rax 14) (jump ra.395 rbp rax))
          (begin (set! rax 6) (jump ra.395 rbp rax)))))
    (define L.ascii-char?.74.12
      ((new-frames ())
       (locals (tmp.254 ra.397 c.107 tmp.46 tmp.398))
       (undead-out
        ((rdi rsi ra.397 rbp)
         (rsi ra.397 rbp)
         (tmp.46 ra.397 rbp)
         (tmp.398 ra.397 rbp)
         (tmp.254 ra.397 rbp)
         ((ra.397 rbp)
          ((ra.397 rax rbp) (rax rbp))
          ((ra.397 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.397 rbp))
         (rbp (tmp.254 tmp.398 tmp.46 c.107 ra.397 rax))
         (ra.397 (tmp.254 tmp.398 tmp.46 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.397))
         (rdi (ra.397))
         (c.107 (rsi ra.397 rbp))
         (tmp.46 (ra.397 rbp))
         (tmp.398 (rbp ra.397))
         (tmp.254 (ra.397 rbp))))
       (assignment ()))
      (begin
        (set! ra.397 r15)
        (set! c.107 rdi)
        (set! tmp.46 rsi)
        (set! tmp.398 (bitwise-and tmp.46 255))
        (set! tmp.254 tmp.398)
        (if (eq? tmp.254 46)
          (begin (set! rax 14) (jump ra.397 rbp rax))
          (begin (set! rax 6) (jump ra.397 rbp rax)))))
    (define L.error?.75.11
      ((new-frames ())
       (locals (tmp.256 ra.399 c.106 tmp.47 tmp.400))
       (undead-out
        ((rdi rsi ra.399 rbp)
         (rsi ra.399 rbp)
         (tmp.47 ra.399 rbp)
         (tmp.400 ra.399 rbp)
         (tmp.256 ra.399 rbp)
         ((ra.399 rbp)
          ((ra.399 rax rbp) (rax rbp))
          ((ra.399 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.399 rbp))
         (rbp (tmp.256 tmp.400 tmp.47 c.106 ra.399 rax))
         (ra.399 (tmp.256 tmp.400 tmp.47 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.399))
         (rdi (ra.399))
         (c.106 (rsi ra.399 rbp))
         (tmp.47 (ra.399 rbp))
         (tmp.400 (rbp ra.399))
         (tmp.256 (ra.399 rbp))))
       (assignment ()))
      (begin
        (set! ra.399 r15)
        (set! c.106 rdi)
        (set! tmp.47 rsi)
        (set! tmp.400 (bitwise-and tmp.47 255))
        (set! tmp.256 tmp.400)
        (if (eq? tmp.256 62)
          (begin (set! rax 14) (jump ra.399 rbp rax))
          (begin (set! rax 6) (jump ra.399 rbp rax)))))
    (define L.pair?.76.10
      ((new-frames ())
       (locals (tmp.258 ra.401 c.105 tmp.48 tmp.402))
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi ra.401 rbp)
         (tmp.48 ra.401 rbp)
         (tmp.402 ra.401 rbp)
         (tmp.258 ra.401 rbp)
         ((ra.401 rbp)
          ((ra.401 rax rbp) (rax rbp))
          ((ra.401 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.401 rbp))
         (rbp (tmp.258 tmp.402 tmp.48 c.105 ra.401 rax))
         (ra.401 (tmp.258 tmp.402 tmp.48 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.401))
         (rdi (ra.401))
         (c.105 (rsi ra.401 rbp))
         (tmp.48 (ra.401 rbp))
         (tmp.402 (rbp ra.401))
         (tmp.258 (ra.401 rbp))))
       (assignment ()))
      (begin
        (set! ra.401 r15)
        (set! c.105 rdi)
        (set! tmp.48 rsi)
        (set! tmp.402 (bitwise-and tmp.48 7))
        (set! tmp.258 tmp.402)
        (if (eq? tmp.258 1)
          (begin (set! rax 14) (jump ra.401 rbp rax))
          (begin (set! rax 6) (jump ra.401 rbp rax)))))
    (define L.procedure?.77.9
      ((new-frames ())
       (locals (tmp.260 ra.403 c.104 tmp.49 tmp.404))
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.49 ra.403 rbp)
         (tmp.404 ra.403 rbp)
         (tmp.260 ra.403 rbp)
         ((ra.403 rbp)
          ((ra.403 rax rbp) (rax rbp))
          ((ra.403 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.403 rbp))
         (rbp (tmp.260 tmp.404 tmp.49 c.104 ra.403 rax))
         (ra.403 (tmp.260 tmp.404 tmp.49 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.403))
         (rdi (ra.403))
         (c.104 (rsi ra.403 rbp))
         (tmp.49 (ra.403 rbp))
         (tmp.404 (rbp ra.403))
         (tmp.260 (ra.403 rbp))))
       (assignment ()))
      (begin
        (set! ra.403 r15)
        (set! c.104 rdi)
        (set! tmp.49 rsi)
        (set! tmp.404 (bitwise-and tmp.49 7))
        (set! tmp.260 tmp.404)
        (if (eq? tmp.260 2)
          (begin (set! rax 14) (jump ra.403 rbp rax))
          (begin (set! rax 6) (jump ra.403 rbp rax)))))
    (define L.vector?.78.8
      ((new-frames ())
       (locals (tmp.262 ra.405 c.103 tmp.50 tmp.406))
       (undead-out
        ((rdi rsi ra.405 rbp)
         (rsi ra.405 rbp)
         (tmp.50 ra.405 rbp)
         (tmp.406 ra.405 rbp)
         (tmp.262 ra.405 rbp)
         ((ra.405 rbp)
          ((ra.405 rax rbp) (rax rbp))
          ((ra.405 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.405 rbp))
         (rbp (tmp.262 tmp.406 tmp.50 c.103 ra.405 rax))
         (ra.405 (tmp.262 tmp.406 tmp.50 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.405))
         (rdi (ra.405))
         (c.103 (rsi ra.405 rbp))
         (tmp.50 (ra.405 rbp))
         (tmp.406 (rbp ra.405))
         (tmp.262 (ra.405 rbp))))
       (assignment ()))
      (begin
        (set! ra.405 r15)
        (set! c.103 rdi)
        (set! tmp.50 rsi)
        (set! tmp.406 (bitwise-and tmp.50 7))
        (set! tmp.262 tmp.406)
        (if (eq? tmp.262 3)
          (begin (set! rax 14) (jump ra.405 rbp rax))
          (begin (set! rax 6) (jump ra.405 rbp rax)))))
    (define L.not.79.7
      ((new-frames ())
       (locals (tmp.51 ra.407 c.102))
       (undead-out
        ((rdi rsi ra.407 rbp)
         (rsi ra.407 rbp)
         (tmp.51 ra.407 rbp)
         ((ra.407 rbp)
          ((ra.407 rax rbp) (rax rbp))
          ((ra.407 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.407 rbp))
         (rbp (tmp.51 c.102 ra.407 rax))
         (ra.407 (tmp.51 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.407))
         (rdi (ra.407))
         (c.102 (rsi ra.407 rbp))
         (tmp.51 (ra.407 rbp))))
       (assignment ()))
      (begin
        (set! ra.407 r15)
        (set! c.102 rdi)
        (set! tmp.51 rsi)
        (if (neq? tmp.51 6)
          (begin (set! rax 6) (jump ra.407 rbp rax))
          (begin (set! rax 14) (jump ra.407 rbp rax)))))
    (define L.cons.80.6
      ((new-frames ())
       (locals (ra.408 c.101 tmp.52 tmp.53 tmp.264 tmp.409 tmp.138))
       (undead-out
        ((rdi rsi rdx r12 ra.408 rbp)
         (rsi rdx r12 ra.408 rbp)
         (rdx r12 ra.408 rbp tmp.52)
         (r12 tmp.53 ra.408 rbp tmp.52)
         (r12 tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.409 tmp.53 ra.408 rbp tmp.52)
         (tmp.53 ra.408 rbp tmp.52 tmp.138)
         (rbp ra.408 tmp.53 tmp.138)
         (tmp.138 ra.408 rbp)
         (ra.408 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.408
          (rax
           tmp.138
           tmp.409
           tmp.264
           tmp.53
           tmp.52
           c.101
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.138 tmp.409 r12 tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (r12 (rbp tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (rdx (tmp.52 c.101 ra.408))
         (rsi (c.101 ra.408))
         (rdi (ra.408))
         (c.101 (rsi rdx r12 ra.408 rbp))
         (tmp.52 (tmp.138 tmp.409 tmp.264 tmp.53 rdx r12 ra.408 rbp))
         (tmp.53 (tmp.138 tmp.409 tmp.264 r12 ra.408 rbp tmp.52))
         (tmp.264 (r12 tmp.53 ra.408 rbp tmp.52))
         (tmp.409 (tmp.52 rbp ra.408 tmp.53))
         (tmp.138 (tmp.53 ra.408 rbp tmp.52))
         (rax (ra.408 rbp))))
       (assignment ()))
      (begin
        (set! ra.408 r15)
        (set! c.101 rdi)
        (set! tmp.52 rsi)
        (set! tmp.53 rdx)
        (set! tmp.264 r12)
        (set! r12 (+ r12 16))
        (set! tmp.409 (+ tmp.264 1))
        (set! tmp.138 tmp.409)
        (mset! tmp.138 -1 tmp.52)
        (mset! tmp.138 7 tmp.53)
        (set! rax tmp.138)
        (jump ra.408 rbp rax)))
    (define L.eq?.81.5
      ((new-frames ())
       (locals (tmp.54 tmp.55 ra.410 c.100))
       (undead-out
        ((rdi rsi rdx ra.410 rbp)
         (rsi rdx ra.410 rbp)
         (rdx tmp.54 ra.410 rbp)
         (tmp.54 tmp.55 ra.410 rbp)
         ((ra.410 rbp)
          ((ra.410 rax rbp) (rax rbp))
          ((ra.410 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.410 rbp))
         (rbp (tmp.55 tmp.54 c.100 ra.410 rax))
         (ra.410 (tmp.55 tmp.54 c.100 rdi rsi rdx rbp rax))
         (rdx (tmp.54 c.100 ra.410))
         (rsi (c.100 ra.410))
         (rdi (ra.410))
         (c.100 (rsi rdx ra.410 rbp))
         (tmp.54 (tmp.55 rdx ra.410 rbp))
         (tmp.55 (tmp.54 ra.410 rbp))))
       (assignment ()))
      (begin
        (set! ra.410 r15)
        (set! c.100 rdi)
        (set! tmp.54 rsi)
        (set! tmp.55 rdx)
        (if (eq? tmp.54 tmp.55)
          (begin (set! rax 14) (jump ra.410 rbp rax))
          (begin (set! rax 6) (jump ra.410 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (ra.411
         c.99
         tmp.82
         vector-init-loop.84
         tmp.412
         tmp.266
         tmp.413
         tmp.414
         tmp.267
         tmp.415
         tmp.268
         tmp.503
         tmp.269
         tmp.416
         tmp.139
         tmp.83
         tmp.128))
       (undead-out
        ((rdi rsi r12 rbp ra.411)
         (rsi c.99 r12 rbp ra.411)
         (c.99 r12 rbp ra.411 tmp.82)
         (r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.412 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.414 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.267 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.415 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.268 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.416 rbp ra.411 vector-init-loop.84 tmp.82)
         (rbp ra.411 vector-init-loop.84 tmp.82 tmp.139)
         (tmp.139 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.82 vector-init-loop.84 ra.411 rcx rbp)
         (tmp.82 vector-init-loop.84 ra.411 rdx rcx rbp)
         (vector-init-loop.84 ra.411 rsi rdx rcx rbp)
         (ra.411 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.411
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           r12
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (r12
          (rbp
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (rsi (r15 rdi vector-init-loop.84 rdx rcx rbp c.99 ra.411))
         (rdi (r15 rsi rdx rcx rbp ra.411))
         (c.99 (tmp.82 rsi r12 rbp ra.411))
         (tmp.82
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           c.99
           r12
           rbp
           ra.411))
         (vector-init-loop.84
          (rsi
           rdx
           rcx
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           tmp.82
           ra.411
           rbp
           r12))
         (tmp.412 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.266 (tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.413 (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.414 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.267 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.415 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.268 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.503 (tmp.269 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.269 (r12 tmp.503 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.416 (tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.139 (rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.83 (tmp.128 tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.128 (tmp.83 tmp.82 ra.411 rbp))
         (rcx (r15 rdi rsi rdx tmp.82 vector-init-loop.84 ra.411 rbp))
         (rdx (r15 rdi rsi tmp.82 vector-init-loop.84 ra.411 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment ()))
      (begin
        (set! ra.411 r15)
        (set! c.99 rdi)
        (set! tmp.82 rsi)
        (set! vector-init-loop.84 (mref c.99 14))
        (set! tmp.412 (arithmetic-shift-right tmp.82 3))
        (set! tmp.266 tmp.412)
        (set! tmp.413 1)
        (set! tmp.414 (+ tmp.413 tmp.266))
        (set! tmp.267 tmp.414)
        (set! tmp.415 (* tmp.267 8))
        (set! tmp.268 tmp.415)
        (set! tmp.503 tmp.268)
        (set! tmp.269 r12)
        (set! r12 (+ r12 tmp.503))
        (set! tmp.416 (+ tmp.269 3))
        (set! tmp.139 tmp.416)
        (mset! tmp.139 -3 tmp.82)
        (set! tmp.83 tmp.139)
        (set! tmp.128 vector-init-loop.84)
        (set! rcx tmp.83)
        (set! rdx 0)
        (set! rsi tmp.82)
        (set! rdi vector-init-loop.84)
        (set! r15 ra.411)
        (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.84.3
      ((new-frames ())
       (locals (vec.86 vector-init-loop.84 len.85 i.87 ra.417 c.98))
       (undead-out
        ((rdi rsi rdx rcx ra.417 rbp)
         (rsi rdx rcx c.98 ra.417 rbp)
         (rdx rcx c.98 len.85 ra.417 rbp)
         (rcx c.98 len.85 i.87 ra.417 rbp)
         (c.98 vec.86 len.85 i.87 ra.417 rbp)
         (vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
         ((vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.84 len.85 i.87 ra.417 rbp))
         (rbp
          (vector-init-loop.84
           vec.86
           i.87
           len.85
           c.98
           ra.417
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.417
          (vector-init-loop.84 vec.86 i.87 len.85 c.98 rbp rdi rsi rdx rcx r8))
         (i.87 (vector-init-loop.84 vec.86 c.98 len.85 ra.417 rbp rdx rcx r8))
         (len.85 (vector-init-loop.84 vec.86 i.87 rdx c.98 ra.417 rbp rcx r8))
         (vector-init-loop.84 (rbp ra.417 i.87 len.85 vec.86 r8))
         (rcx (c.98 r15 rdi rsi rdx len.85 i.87 ra.417 r8 rbp))
         (rdx (len.85 c.98 r15 rdi rsi i.87 ra.417 rcx r8 rbp))
         (rsi (c.98 r15 rdi ra.417 rdx rcx r8 rbp))
         (rdi (r15 ra.417 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.98 (vec.86 i.87 len.85 rsi rdx rcx ra.417 rbp))
         (vec.86 (vector-init-loop.84 c.98 len.85 i.87 ra.417 rbp))))
       (assignment ()))
      (begin
        (set! ra.417 r15)
        (set! c.98 rdi)
        (set! len.85 rsi)
        (set! i.87 rdx)
        (set! vec.86 rcx)
        (set! vector-init-loop.84 (mref c.98 14))
        (if (eq? len.85 i.87)
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 14)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 6)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (tmp.93 tmp.95 tmp.94 ra.418 tmp.283 c.97))
       (undead-out
        ((rdi rsi rdx rcx ra.418 rbp)
         (rsi rdx rcx ra.418 rbp)
         (rdx rcx tmp.93 ra.418 rbp)
         (rcx tmp.93 tmp.94 ra.418 rbp)
         (tmp.93 tmp.95 tmp.94 ra.418 rbp)
         (tmp.283 tmp.93 tmp.95 tmp.94 ra.418 rbp)
         ((tmp.93 tmp.95 tmp.94 ra.418 rbp)
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.93 c.97 r15 rdi rsi rdx tmp.95 tmp.94 ra.418 rbp))
         (rbp (tmp.283 tmp.95 tmp.94 tmp.93 c.97 ra.418 r15 rdi rsi rdx rcx))
         (ra.418 (tmp.283 tmp.95 tmp.94 tmp.93 c.97 rbp rdi rsi rdx rcx))
         (tmp.94 (tmp.283 tmp.95 tmp.93 ra.418 rbp rdx rcx))
         (tmp.95 (tmp.283 tmp.93 tmp.94 ra.418 rbp rcx))
         (rdx (tmp.93 c.97 r15 rdi rsi tmp.94 ra.418 rcx rbp))
         (rsi (c.97 r15 rdi ra.418 rdx rcx rbp))
         (rdi (r15 ra.418 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.97 (rsi rdx rcx ra.418 rbp))
         (tmp.93 (tmp.283 tmp.95 tmp.94 rdx rcx ra.418 rbp))
         (tmp.283 (rbp ra.418 tmp.94 tmp.95 tmp.93))))
       (assignment ()))
      (begin
        (set! ra.418 r15)
        (set! c.97 rdi)
        (set! tmp.93 rsi)
        (set! tmp.94 rdx)
        (set! tmp.95 rcx)
        (set! tmp.283 (mref tmp.93 -3))
        (if (< tmp.94 tmp.283)
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (tmp.90 tmp.91 ra.419 tmp.291 c.96))
       (undead-out
        ((rdi rsi rdx ra.419 rbp)
         (rsi rdx ra.419 rbp)
         (rdx tmp.90 ra.419 rbp)
         (tmp.90 tmp.91 ra.419 rbp)
         (tmp.291 tmp.90 tmp.91 ra.419 rbp)
         ((tmp.90 tmp.91 ra.419 rbp)
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.90 c.96 r15 rdi rsi tmp.91 ra.419 rbp))
         (rbp (tmp.291 tmp.91 tmp.90 c.96 ra.419 r15 rdi rsi rdx))
         (ra.419 (tmp.291 tmp.91 tmp.90 c.96 rbp rdi rsi rdx))
         (tmp.91 (tmp.291 tmp.90 ra.419 rbp rdx))
         (rsi (c.96 r15 rdi ra.419 rdx rbp))
         (rdi (r15 ra.419 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.96 (rsi rdx ra.419 rbp))
         (tmp.90 (tmp.291 tmp.91 rdx ra.419 rbp))
         (tmp.291 (rbp ra.419 tmp.91 tmp.90))))
       (assignment ()))
      (begin
        (set! ra.419 r15)
        (set! c.96 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.291 (mref tmp.90 -3))
        (if (< tmp.91 tmp.291)
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 14)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 6)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi)))))
    (define L.jp.102
      ((new-frames ())
       (locals (tmp.90 tmp.91 ra.420 tmp.285))
       (undead-out
        ((rdi rsi rdx ra.420 rbp)
         (rsi rdx tmp.285 ra.420 rbp)
         (rdx tmp.285 tmp.91 ra.420 rbp)
         (tmp.285 tmp.90 tmp.91 ra.420 rbp)
         ((tmp.90 tmp.91 ra.420 rbp)
          ((tmp.90 tmp.91 ra.420 rbp)
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.420 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.420 rbp))
         (rbp (tmp.90 tmp.91 tmp.285 ra.420 r15 rdi rsi rdx rax))
         (ra.420 (tmp.90 tmp.91 tmp.285 rbp rdi rsi rdx rax))
         (rdx (tmp.285 r15 rdi rsi tmp.91 ra.420 rbp))
         (tmp.91 (tmp.90 tmp.285 ra.420 rbp rdx))
         (rsi (tmp.285 r15 rdi ra.420 rdx rbp))
         (rdi (r15 ra.420 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.285 (tmp.90 tmp.91 rsi rdx ra.420 rbp))
         (tmp.90 (tmp.285 tmp.91 ra.420 rbp))))
       (assignment ()))
      (begin
        (set! ra.420 r15)
        (set! tmp.285 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.285 6)
          (if (>= tmp.91 0)
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 14)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 6)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.420 rbp rax)))))
    (define L.jp.101
      ((new-frames ())
       (locals
        (tmp.91
         tmp.422
         tmp.288
         tmp.423
         tmp.289
         tmp.424
         tmp.290
         tmp.90
         tmp.287
         ra.421))
       (undead-out
        ((rdi rsi rdx ra.421 rbp)
         (rsi rdx tmp.287 ra.421 rbp)
         (rdx tmp.287 tmp.91 ra.421 rbp)
         (tmp.287 tmp.91 tmp.90 ra.421 rbp)
         ((tmp.91 tmp.90 ra.421 rbp)
          ((tmp.422 tmp.90 ra.421 rbp)
           (tmp.288 tmp.90 ra.421 rbp)
           (tmp.423 tmp.90 ra.421 rbp)
           (tmp.289 tmp.90 ra.421 rbp)
           (tmp.424 tmp.90 ra.421 rbp)
           (tmp.290 tmp.90 ra.421 rbp)
           (ra.421 rax rbp)
           (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.421 rbp))
         (rbp
          (tmp.90
           tmp.91
           tmp.287
           ra.421
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (ra.421
          (tmp.90
           tmp.91
           tmp.287
           rdi
           rsi
           rdx
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (tmp.422 (rbp ra.421 tmp.90))
         (tmp.90
          (tmp.287
           tmp.91
           ra.421
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422))
         (tmp.288 (tmp.90 ra.421 rbp))
         (tmp.423 (rbp ra.421 tmp.90))
         (tmp.289 (tmp.90 ra.421 rbp))
         (tmp.424 (rbp ra.421 tmp.90))
         (tmp.290 (tmp.90 ra.421 rbp))
         (rdx (tmp.91 tmp.287 ra.421))
         (rsi (tmp.287 ra.421))
         (rdi (ra.421))
         (tmp.287 (tmp.90 tmp.91 rsi rdx ra.421 rbp))
         (tmp.91 (tmp.90 rdx tmp.287 ra.421 rbp))))
       (assignment ()))
      (begin
        (set! ra.421 r15)
        (set! tmp.287 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.287 6)
          (begin
            (set! tmp.422 (arithmetic-shift-right tmp.91 3))
            (set! tmp.288 tmp.422)
            (set! tmp.423 (* tmp.288 8))
            (set! tmp.289 tmp.423)
            (set! tmp.424 (+ tmp.289 5))
            (set! tmp.290 tmp.424)
            (set! rax (mref tmp.90 tmp.290))
            (jump ra.421 rbp rax))
          (begin (set! rax 2622) (jump ra.421 rbp rax)))))
    (define L.jp.98
      ((new-frames ())
       (locals (tmp.95 tmp.93 tmp.94 ra.425 tmp.277))
       (undead-out
        ((rdi rsi rdx rcx ra.425 rbp)
         (rsi rdx rcx tmp.277 ra.425 rbp)
         (rdx rcx tmp.277 tmp.94 ra.425 rbp)
         (rcx tmp.277 tmp.95 tmp.94 ra.425 rbp)
         (tmp.277 tmp.95 tmp.93 tmp.94 ra.425 rbp)
         ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
          ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.425 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.93 tmp.95 tmp.94 tmp.277 ra.425 r15 rdi rsi rdx rcx rax))
         (ra.425 (tmp.93 tmp.95 tmp.94 tmp.277 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.95 tmp.277 r15 rdi rsi rdx tmp.93 tmp.94 ra.425 rbp))
         (tmp.94 (tmp.93 tmp.95 tmp.277 ra.425 rbp rdx rcx))
         (tmp.93 (tmp.277 tmp.95 tmp.94 ra.425 rbp rcx))
         (rdx (tmp.277 r15 rdi rsi tmp.94 ra.425 rcx rbp))
         (rsi (tmp.277 r15 rdi ra.425 rdx rcx rbp))
         (rdi (r15 ra.425 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.277 (tmp.93 tmp.95 tmp.94 rsi rdx rcx ra.425 rbp))
         (tmp.95 (tmp.93 rcx tmp.277 tmp.94 ra.425 rbp))))
       (assignment ()))
      (begin
        (set! ra.425 r15)
        (set! tmp.277 rdi)
        (set! tmp.94 rsi)
        (set! tmp.95 rdx)
        (set! tmp.93 rcx)
        (if (neq? tmp.277 6)
          (if (>= tmp.94 0)
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 14)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 6)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.425 rbp rax)))))
    (define L.jp.97
      ((new-frames ())
       (locals
        (tmp.94
         tmp.427
         tmp.280
         tmp.428
         tmp.281
         tmp.429
         tmp.282
         tmp.95
         tmp.93
         tmp.279
         ra.426))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.426)
         (rsi rdx rcx tmp.279 rbp ra.426)
         (rdx rcx tmp.279 tmp.94 rbp ra.426)
         (rcx tmp.279 tmp.94 rbp ra.426 tmp.93)
         (tmp.279 tmp.94 rbp ra.426 tmp.95 tmp.93)
         ((tmp.94 rbp ra.426 tmp.95 tmp.93)
          ((tmp.427 rbp ra.426 tmp.95 tmp.93)
           (tmp.280 rbp ra.426 tmp.95 tmp.93)
           (tmp.428 rbp ra.426 tmp.95 tmp.93)
           (tmp.281 rbp ra.426 tmp.95 tmp.93)
           (tmp.429 rbp ra.426 tmp.95 tmp.93)
           (rbp ra.426 tmp.95 tmp.282 tmp.93)
           (ra.426 rbp)
           (ra.426 rax rbp)
           (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (ra.426
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (tmp.427 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.95
          (tmp.279
           tmp.94
           rbp
           ra.426
           tmp.93
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.93
          (tmp.95
           rcx
           tmp.279
           tmp.94
           rbp
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.280 (rbp ra.426 tmp.95 tmp.93))
         (tmp.428 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.281 (rbp ra.426 tmp.95 tmp.93))
         (tmp.429 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.282 (rbp ra.426 tmp.95 tmp.93))
         (rcx (tmp.93 tmp.94 tmp.279 ra.426))
         (rdx (tmp.94 tmp.279 ra.426))
         (rsi (tmp.279 ra.426))
         (rdi (ra.426))
         (tmp.279 (tmp.95 tmp.93 tmp.94 rsi rdx rcx rbp ra.426))
         (tmp.94 (tmp.95 tmp.93 rdx rcx tmp.279 rbp ra.426))))
       (assignment ()))
      (begin
        (set! ra.426 r15)
        (set! tmp.279 rdi)
        (set! tmp.94 rsi)
        (set! tmp.93 rdx)
        (set! tmp.95 rcx)
        (if (neq? tmp.279 6)
          (begin
            (set! tmp.427 (arithmetic-shift-right tmp.94 3))
            (set! tmp.280 tmp.427)
            (set! tmp.428 (* tmp.280 8))
            (set! tmp.281 tmp.428)
            (set! tmp.429 (+ tmp.281 5))
            (set! tmp.282 tmp.429)
            (mset! tmp.93 tmp.282 tmp.95)
            (set! rax 30)
            (jump ra.426 rbp rax))
          (begin (set! rax 2366) (jump ra.426 rbp rax)))))
    (define L.jp.94
      ((new-frames ())
       (locals
        (vec.86
         ra.430
         len.85
         tmp.275
         tmp.434
         tmp.127
         vector-init-loop.84
         tmp.274
         tmp.433
         tmp.273
         tmp.432
         tmp.272
         tmp.431
         i.87
         tmp.271))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.430 rbp)
         (rsi rdx rcx r8 tmp.271 ra.430 rbp)
         (rdx rcx r8 tmp.271 i.87 ra.430 rbp)
         (rcx r8 tmp.271 i.87 len.85 ra.430 rbp)
         (r8 tmp.271 i.87 len.85 vector-init-loop.84 ra.430 rbp)
         (tmp.271 i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
         ((i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((tmp.431 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.272 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.432 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.273 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.433 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (rbp ra.430 vector-init-loop.84 len.85 i.87 tmp.274 vec.86)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.434 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (vec.86 tmp.275 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.275 len.85 vector-init-loop.84 ra.430 rcx rbp)
           (len.85 vector-init-loop.84 ra.430 rdx rcx rbp)
           (vector-init-loop.84 ra.430 rsi rdx rcx rbp)
           (ra.430 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.431 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (rbp
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           ra.430
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (ra.430
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vector-init-loop.84
          (vec.86
           r8
           tmp.271
           i.87
           len.85
           ra.430
           rbp
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (len.85
          (vec.86
           vector-init-loop.84
           r8
           tmp.271
           i.87
           ra.430
           rbp
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (i.87
          (vec.86
           vector-init-loop.84
           len.85
           rdx
           rcx
           r8
           tmp.271
           ra.430
           rbp
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vec.86
          (tmp.271
           i.87
           len.85
           vector-init-loop.84
           ra.430
           rbp
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (tmp.272 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.432 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.273 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.433 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.274 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.127 (i.87 vec.86 len.85 ra.430 rbp))
         (tmp.434 (rbp ra.430 vector-init-loop.84 len.85 vec.86))
         (tmp.275 (rcx vec.86 len.85 vector-init-loop.84 ra.430 rbp))
         (rcx
          (i.87
           tmp.271
           r15
           rdi
           rsi
           rdx
           tmp.275
           len.85
           vector-init-loop.84
           ra.430
           rbp))
         (rdx
          (i.87 tmp.271 r15 rdi rsi len.85 vector-init-loop.84 ra.430 rcx rbp))
         (rsi (tmp.271 r15 rdi vector-init-loop.84 ra.430 rdx rcx rbp))
         (rdi (r15 ra.430 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.430 rbp))
         (r8 (vector-init-loop.84 len.85 i.87 tmp.271 ra.430))
         (tmp.271
          (vec.86 vector-init-loop.84 len.85 i.87 rsi rdx rcx r8 ra.430 rbp))))
       (assignment ()))
      (begin
        (set! ra.430 r15)
        (set! tmp.271 rdi)
        (set! i.87 rsi)
        (set! len.85 rdx)
        (set! vector-init-loop.84 rcx)
        (set! vec.86 r8)
        (if (neq? tmp.271 6)
          (begin (set! rax vec.86) (jump ra.430 rbp rax))
          (begin
            (set! tmp.431 (arithmetic-shift-right i.87 3))
            (set! tmp.272 tmp.431)
            (set! tmp.432 (* tmp.272 8))
            (set! tmp.273 tmp.432)
            (set! tmp.433 (+ tmp.273 5))
            (set! tmp.274 tmp.433)
            (mset! vec.86 tmp.274 0)
            (set! tmp.127 vector-init-loop.84)
            (set! tmp.434 (+ i.87 8))
            (set! tmp.275 tmp.434)
            (set! rcx vec.86)
            (set! rdx tmp.275)
            (set! rsi len.85)
            (set! rdi vector-init-loop.84)
            (set! r15 ra.430)
            (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.81
      ((new-frames ())
       (locals (tmp.41 tmp.243 ra.435))
       (undead-out
        ((rdi rsi ra.435 rbp)
         (rsi tmp.243 ra.435 rbp)
         (tmp.243 tmp.41 ra.435 rbp)
         ((tmp.41 ra.435 rbp)
          ((ra.435 rax rbp) (rax rbp))
          ((ra.435 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.435 rbp))
         (rbp (tmp.41 tmp.243 ra.435 rax))
         (ra.435 (tmp.41 tmp.243 rdi rsi rbp rax))
         (rsi (tmp.243 ra.435))
         (rdi (ra.435))
         (tmp.243 (tmp.41 rsi ra.435 rbp))
         (tmp.41 (tmp.243 ra.435 rbp))))
       (assignment ()))
      (begin
        (set! ra.435 r15)
        (set! tmp.243 rdi)
        (set! tmp.41 rsi)
        (if (neq? tmp.243 6)
          (begin (set! rax (mref tmp.41 6)) (jump ra.435 rbp rax))
          (begin (set! rax 3390) (jump ra.435 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (tmp.40 tmp.240 ra.436))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi tmp.240 ra.436 rbp)
         (tmp.240 tmp.40 ra.436 rbp)
         ((tmp.40 ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.40 tmp.240 ra.436 rax))
         (ra.436 (tmp.40 tmp.240 rdi rsi rbp rax))
         (rsi (tmp.240 ra.436))
         (rdi (ra.436))
         (tmp.240 (tmp.40 rsi ra.436 rbp))
         (tmp.40 (tmp.240 ra.436 rbp))))
       (assignment ()))
      (begin
        (set! ra.436 r15)
        (set! tmp.240 rdi)
        (set! tmp.40 rsi)
        (if (neq? tmp.240 6)
          (begin (set! rax (mref tmp.40 7)) (jump ra.436 rbp rax))
          (begin (set! rax 3134) (jump ra.436 rbp rax)))))
    (define L.jp.77
      ((new-frames ())
       (locals (tmp.39 tmp.237 ra.437))
       (undead-out
        ((rdi rsi ra.437 rbp)
         (rsi tmp.237 ra.437 rbp)
         (tmp.237 tmp.39 ra.437 rbp)
         ((tmp.39 ra.437 rbp)
          ((ra.437 rax rbp) (rax rbp))
          ((ra.437 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.437 rbp))
         (rbp (tmp.39 tmp.237 ra.437 rax))
         (ra.437 (tmp.39 tmp.237 rdi rsi rbp rax))
         (rsi (tmp.237 ra.437))
         (rdi (ra.437))
         (tmp.237 (tmp.39 rsi ra.437 rbp))
         (tmp.39 (tmp.237 ra.437 rbp))))
       (assignment ()))
      (begin
        (set! ra.437 r15)
        (set! tmp.237 rdi)
        (set! tmp.39 rsi)
        (if (neq? tmp.237 6)
          (begin (set! rax (mref tmp.39 -1)) (jump ra.437 rbp rax))
          (begin (set! rax 2878) (jump ra.437 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals
        (tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 tmp.234 tmp.439 tmp.231))
       (undead-out
        ((rdi rsi rdx rcx ra.438 rbp)
         (rsi rdx rcx tmp.231 ra.438 rbp)
         (rdx rcx tmp.231 tmp.37 ra.438 rbp)
         (rcx tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp)
         (tmp.231 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
         ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
          ((tmp.439 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           (tmp.234 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           ra.438
           tmp.234
           tmp.439
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.438
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           rbp
           tmp.234
           tmp.439
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.37
           tmp.231
           r15
           rdi
           rsi
           rdx
           tmp.38
           unsafe-vector-ref.3
           ra.438
           rbp))
         (unsafe-vector-ref.3
          (tmp.38 tmp.231 tmp.37 ra.438 rbp tmp.234 tmp.439 rdx rcx))
         (tmp.38
          (tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp tmp.234 tmp.439 rcx))
         (rdx (tmp.37 tmp.231 r15 rdi rsi unsafe-vector-ref.3 ra.438 rcx rbp))
         (rsi (tmp.231 r15 rdi ra.438 rdx rcx rbp))
         (rdi (r15 ra.438 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.439 (rbp ra.438 unsafe-vector-ref.3 tmp.38 tmp.37))
         (tmp.37
          (tmp.38
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.231
           ra.438
           rbp
           tmp.234
           tmp.439))
         (tmp.234 (tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp))
         (tmp.231 (tmp.38 unsafe-vector-ref.3 tmp.37 rsi rdx rcx ra.438 rbp))))
       (assignment ()))
      (begin
        (set! ra.438 r15)
        (set! tmp.231 rdi)
        (set! tmp.37 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.38 rcx)
        (if (neq? tmp.231 6)
          (begin
            (set! tmp.439 (bitwise-and tmp.37 7))
            (set! tmp.234 tmp.439)
            (if (eq? tmp.234 3)
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.438 rbp rax)))))
    (define L.jp.74
      ((new-frames ())
       (locals (unsafe-vector-ref.3 tmp.129 tmp.38 tmp.37 ra.440 tmp.233))
       (undead-out
        ((rdi rsi rdx rcx ra.440 rbp)
         (rsi rdx rcx tmp.233 ra.440 rbp)
         (rdx rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp)
         (rcx tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp)
         (tmp.233 tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
         ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
          ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
           (tmp.37 unsafe-vector-ref.3 ra.440 rdx rbp)
           (unsafe-vector-ref.3 ra.440 rsi rdx rbp)
           (ra.440 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           ra.440
           r15
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (ra.440
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (tmp.129 (tmp.38 tmp.37 ra.440 rbp))
         (tmp.37 (tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp rdx tmp.129))
         (tmp.38 (tmp.37 rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp tmp.129))
         (rdx (tmp.233 r15 rdi rsi tmp.37 unsafe-vector-ref.3 ra.440 rbp))
         (unsafe-vector-ref.3 (tmp.37 tmp.38 rcx tmp.233 ra.440 rbp rsi rdx))
         (rsi (tmp.233 r15 rdi unsafe-vector-ref.3 ra.440 rdx rbp))
         (rdi (r15 ra.440 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.38 unsafe-vector-ref.3 tmp.233 ra.440))
         (tmp.233 (tmp.37 tmp.38 unsafe-vector-ref.3 rsi rdx rcx ra.440 rbp))))
       (assignment ()))
      (begin
        (set! ra.440 r15)
        (set! tmp.233 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.38 rdx)
        (set! tmp.37 rcx)
        (if (neq? tmp.233 6)
          (begin
            (set! tmp.129 unsafe-vector-ref.3)
            (set! rdx tmp.38)
            (set! rsi tmp.37)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.440)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.440 rbp rax)))))
    (define L.jp.71
      ((new-frames ())
       (locals
        (tmp.34
         tmp.35
         tmp.36
         unsafe-vector-set!.2
         ra.441
         tmp.228
         tmp.442
         tmp.225))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.441 rbp)
         (rsi rdx rcx r8 tmp.225 ra.441 rbp)
         (rdx rcx r8 tmp.225 tmp.34 ra.441 rbp)
         (rcx r8 tmp.225 tmp.34 unsafe-vector-set!.2 ra.441 rbp)
         (r8 tmp.225 tmp.34 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         (tmp.225 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
          ((tmp.442 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           (tmp.228 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.441 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.441 rbp))
         (rbp
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           ra.441
           tmp.228
           tmp.442
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.441
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           rbp
           tmp.228
           tmp.442
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp))
         (unsafe-vector-set!.2
          (tmp.35 tmp.36 tmp.225 tmp.34 ra.441 rbp tmp.228 tmp.442 rdx rcx r8))
         (tmp.36
          (tmp.35
           tmp.225
           tmp.34
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           rcx
           r8))
         (tmp.35
          (tmp.225
           tmp.34
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           r8))
         (rcx
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           tmp.36
           unsafe-vector-set!.2
           ra.441
           r8
           rbp))
         (rdx
          (tmp.34 tmp.225 r15 rdi rsi unsafe-vector-set!.2 ra.441 rcx r8 rbp))
         (rsi (tmp.225 r15 rdi ra.441 rdx rcx r8 rbp))
         (rdi (r15 ra.441 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.442 (rbp ra.441 unsafe-vector-set!.2 tmp.36 tmp.35 tmp.34))
         (tmp.34
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.225
           ra.441
           rbp
           tmp.228
           tmp.442))
         (tmp.228 (tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp))
         (tmp.225
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           rsi
           rdx
           rcx
           r8
           ra.441
           rbp))))
       (assignment ()))
      (begin
        (set! ra.441 r15)
        (set! tmp.225 rdi)
        (set! tmp.34 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.36 rcx)
        (set! tmp.35 r8)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.442 (bitwise-and tmp.34 7))
            (set! tmp.228 tmp.442)
            (if (eq? tmp.228 3)
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.441 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals
        (unsafe-vector-set!.2 tmp.130 tmp.36 tmp.35 tmp.34 ra.443 tmp.227))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.443 rbp)
         (rsi rdx rcx r8 tmp.227 ra.443 rbp)
         (rdx rcx r8 tmp.227 unsafe-vector-set!.2 ra.443 rbp)
         (rcx r8 tmp.227 tmp.36 unsafe-vector-set!.2 ra.443 rbp)
         (r8 tmp.227 tmp.36 tmp.35 unsafe-vector-set!.2 ra.443 rbp)
         (tmp.227 tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
         ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
          ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
           (tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp)
           (tmp.34 unsafe-vector-set!.2 ra.443 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.443 rsi rdx rcx rbp)
           (ra.443 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.443 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.443 rbp))
         (rbp
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (ra.443
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (tmp.130 (tmp.36 tmp.35 tmp.34 ra.443 rbp))
         (tmp.34
          (tmp.227
           tmp.36
           tmp.35
           unsafe-vector-set!.2
           ra.443
           rbp
           rdx
           rcx
           tmp.130))
         (tmp.35
          (tmp.34
           r8
           tmp.227
           tmp.36
           unsafe-vector-set!.2
           ra.443
           rbp
           rcx
           tmp.130))
         (tmp.36
          (tmp.34
           tmp.35
           rcx
           r8
           tmp.227
           unsafe-vector-set!.2
           ra.443
           rbp
           tmp.130))
         (rcx
          (tmp.36
           tmp.227
           r15
           rdi
           rsi
           rdx
           tmp.35
           tmp.34
           unsafe-vector-set!.2
           ra.443
           rbp))
         (unsafe-vector-set!.2
          (tmp.34 tmp.35 tmp.36 r8 tmp.227 ra.443 rbp rsi rdx rcx))
         (rdx (tmp.227 r15 rdi rsi tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp))
         (rsi (tmp.227 r15 rdi unsafe-vector-set!.2 ra.443 rdx rcx rbp))
         (rdi (r15 ra.443 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.227 ra.443))
         (tmp.227
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.443
           rbp))))
       (assignment ()))
      (begin
        (set! ra.443 r15)
        (set! tmp.227 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.36 rdx)
        (set! tmp.35 rcx)
        (set! tmp.34 r8)
        (if (neq? tmp.227 6)
          (begin
            (set! tmp.130 unsafe-vector-set!.2)
            (set! rcx tmp.36)
            (set! rdx tmp.35)
            (set! rsi tmp.34)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.443)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.443 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (tmp.33 tmp.222 ra.444))
       (undead-out
        ((rdi rsi ra.444 rbp)
         (rsi tmp.222 ra.444 rbp)
         (tmp.222 tmp.33 ra.444 rbp)
         ((tmp.33 ra.444 rbp)
          ((ra.444 rax rbp) (rax rbp))
          ((ra.444 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.444 rbp))
         (rbp (tmp.33 tmp.222 ra.444 rax))
         (ra.444 (tmp.33 tmp.222 rdi rsi rbp rax))
         (rsi (tmp.222 ra.444))
         (rdi (ra.444))
         (tmp.222 (tmp.33 rsi ra.444 rbp))
         (tmp.33 (tmp.222 ra.444 rbp))))
       (assignment ()))
      (begin
        (set! ra.444 r15)
        (set! tmp.222 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.222 6)
          (begin (set! rax (mref tmp.33 -3)) (jump ra.444 rbp rax))
          (begin (set! rax 2110) (jump ra.444 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (make-init-vector.1 tmp.131 tmp.32 ra.445 tmp.219))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx tmp.219 ra.445 rbp)
         (rdx tmp.219 make-init-vector.1 ra.445 rbp)
         (tmp.219 tmp.32 make-init-vector.1 ra.445 rbp)
         ((tmp.32 make-init-vector.1 ra.445 rbp)
          ((tmp.32 make-init-vector.1 ra.445 rbp)
           (make-init-vector.1 ra.445 rsi rbp)
           (ra.445 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp
          (tmp.32 make-init-vector.1 tmp.219 ra.445 r15 rdi rsi tmp.131 rax))
         (ra.445
          (tmp.32 make-init-vector.1 tmp.219 rdx rbp rdi rsi tmp.131 rax))
         (tmp.131 (tmp.32 ra.445 rbp))
         (tmp.32 (tmp.219 make-init-vector.1 ra.445 rbp tmp.131))
         (rsi (tmp.219 r15 rdi make-init-vector.1 ra.445 rbp))
         (make-init-vector.1 (tmp.32 rdx tmp.219 ra.445 rbp rsi))
         (rdi (r15 ra.445 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.219 ra.445))
         (tmp.219 (tmp.32 make-init-vector.1 rsi rdx ra.445 rbp))))
       (assignment ()))
      (begin
        (set! ra.445 r15)
        (set! tmp.219 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.32 rdx)
        (if (neq? tmp.219 6)
          (begin
            (set! tmp.131 make-init-vector.1)
            (set! rsi tmp.32)
            (set! rdi make-init-vector.1)
            (set! r15 ra.445)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.445 rbp rax)))))
    (define L.jp.63
      ((new-frames ())
       (locals (tmp.31 tmp.30 ra.446 tmp.216 tmp.447 tmp.212))
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.212 ra.446 rbp)
         (rdx tmp.212 tmp.30 ra.446 rbp)
         (tmp.212 tmp.31 tmp.30 ra.446 rbp)
         ((tmp.31 tmp.30 ra.446 rbp)
          ((tmp.447 tmp.31 tmp.30 ra.446 rbp)
           (tmp.216 tmp.31 tmp.30 ra.446 rbp)
           ((tmp.31 tmp.30 ra.446 rbp)
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.446 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.446 rbp))
         (rbp
          (tmp.31 tmp.30 tmp.212 ra.446 tmp.216 tmp.447 r15 rdi rsi rdx rax))
         (ra.446 (tmp.31 tmp.30 tmp.212 rbp tmp.216 tmp.447 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.30 ra.446 rbp))
         (tmp.30 (tmp.31 tmp.212 ra.446 rbp tmp.216 tmp.447 rdx))
         (rsi (tmp.212 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.447 (rbp ra.446 tmp.30 tmp.31))
         (tmp.31 (tmp.212 tmp.30 ra.446 rbp tmp.216 tmp.447))
         (tmp.216 (tmp.31 tmp.30 ra.446 rbp))
         (tmp.212 (tmp.31 tmp.30 rsi rdx ra.446 rbp))))
       (assignment ()))
      (begin
        (set! ra.446 r15)
        (set! tmp.212 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.447 (bitwise-and tmp.30 7))
            (set! tmp.216 tmp.447)
            (if (eq? tmp.216 0)
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 14)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 6)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.446 rbp rax)))))
    (define L.jp.62
      ((new-frames ())
       (locals (tmp.30 tmp.31 tmp.214 ra.448))
       (undead-out
        ((rdi rsi rdx ra.448 rbp)
         (rsi rdx tmp.214 ra.448 rbp)
         (rdx tmp.214 tmp.30 ra.448 rbp)
         (tmp.214 tmp.30 tmp.31 ra.448 rbp)
         ((tmp.30 tmp.31 ra.448 rbp)
          ((ra.448 rbp)
           ((ra.448 rax rbp) (rax rbp))
           ((ra.448 rax rbp) (rax rbp)))
          ((ra.448 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.448 rbp))
         (rbp (tmp.31 tmp.30 tmp.214 ra.448 rax))
         (ra.448 (tmp.31 tmp.30 tmp.214 rdi rsi rdx rbp rax))
         (rdx (tmp.30 tmp.214 ra.448))
         (rsi (tmp.214 ra.448))
         (rdi (ra.448))
         (tmp.214 (tmp.31 tmp.30 rsi rdx ra.448 rbp))
         (tmp.30 (tmp.31 rdx tmp.214 ra.448 rbp))
         (tmp.31 (tmp.214 tmp.30 ra.448 rbp))))
       (assignment ()))
      (begin
        (set! ra.448 r15)
        (set! tmp.214 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.214 6)
          (if (>= tmp.30 tmp.31)
            (begin (set! rax 14) (jump ra.448 rbp rax))
            (begin (set! rax 6) (jump ra.448 rbp rax)))
          (begin (set! rax 1598) (jump ra.448 rbp rax)))))
    (define L.jp.58
      ((new-frames ())
       (locals (tmp.29 tmp.28 ra.449 tmp.209 tmp.450 tmp.205))
       (undead-out
        ((rdi rsi rdx ra.449 rbp)
         (rsi rdx tmp.205 ra.449 rbp)
         (rdx tmp.205 tmp.28 ra.449 rbp)
         (tmp.205 tmp.29 tmp.28 ra.449 rbp)
         ((tmp.29 tmp.28 ra.449 rbp)
          ((tmp.450 tmp.29 tmp.28 ra.449 rbp)
           (tmp.209 tmp.29 tmp.28 ra.449 rbp)
           ((tmp.29 tmp.28 ra.449 rbp)
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.449 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.449 rbp))
         (rbp
          (tmp.29 tmp.28 tmp.205 ra.449 tmp.209 tmp.450 r15 rdi rsi rdx rax))
         (ra.449 (tmp.29 tmp.28 tmp.205 rbp tmp.209 tmp.450 rdi rsi rdx rax))
         (rdx (tmp.205 r15 rdi rsi tmp.28 ra.449 rbp))
         (tmp.28 (tmp.29 tmp.205 ra.449 rbp tmp.209 tmp.450 rdx))
         (rsi (tmp.205 r15 rdi ra.449 rdx rbp))
         (rdi (r15 ra.449 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.450 (rbp ra.449 tmp.28 tmp.29))
         (tmp.29 (tmp.205 tmp.28 ra.449 rbp tmp.209 tmp.450))
         (tmp.209 (tmp.29 tmp.28 ra.449 rbp))
         (tmp.205 (tmp.29 tmp.28 rsi rdx ra.449 rbp))))
       (assignment ()))
      (begin
        (set! ra.449 r15)
        (set! tmp.205 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.450 (bitwise-and tmp.28 7))
            (set! tmp.209 tmp.450)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 14)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 6)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.449 rbp rax)))))
    (define L.jp.57
      ((new-frames ())
       (locals (tmp.28 tmp.29 tmp.207 ra.451))
       (undead-out
        ((rdi rsi rdx ra.451 rbp)
         (rsi rdx tmp.207 ra.451 rbp)
         (rdx tmp.207 tmp.28 ra.451 rbp)
         (tmp.207 tmp.28 tmp.29 ra.451 rbp)
         ((tmp.28 tmp.29 ra.451 rbp)
          ((ra.451 rbp)
           ((ra.451 rax rbp) (rax rbp))
           ((ra.451 rax rbp) (rax rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.29 tmp.28 tmp.207 ra.451 rax))
         (ra.451 (tmp.29 tmp.28 tmp.207 rdi rsi rdx rbp rax))
         (rdx (tmp.28 tmp.207 ra.451))
         (rsi (tmp.207 ra.451))
         (rdi (ra.451))
         (tmp.207 (tmp.29 tmp.28 rsi rdx ra.451 rbp))
         (tmp.28 (tmp.29 rdx tmp.207 ra.451 rbp))
         (tmp.29 (tmp.207 tmp.28 ra.451 rbp))))
       (assignment ()))
      (begin
        (set! ra.451 r15)
        (set! tmp.207 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.207 6)
          (if (> tmp.28 tmp.29)
            (begin (set! rax 14) (jump ra.451 rbp rax))
            (begin (set! rax 6) (jump ra.451 rbp rax)))
          (begin (set! rax 1342) (jump ra.451 rbp rax)))))
    (define L.jp.53
      ((new-frames ())
       (locals (tmp.27 tmp.26 ra.452 tmp.202 tmp.453 tmp.198))
       (undead-out
        ((rdi rsi rdx ra.452 rbp)
         (rsi rdx tmp.198 ra.452 rbp)
         (rdx tmp.198 tmp.26 ra.452 rbp)
         (tmp.198 tmp.27 tmp.26 ra.452 rbp)
         ((tmp.27 tmp.26 ra.452 rbp)
          ((tmp.453 tmp.27 tmp.26 ra.452 rbp)
           (tmp.202 tmp.27 tmp.26 ra.452 rbp)
           ((tmp.27 tmp.26 ra.452 rbp)
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.452 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.198 ra.452 tmp.202 tmp.453 r15 rdi rsi rdx rax))
         (ra.452 (tmp.27 tmp.26 tmp.198 rbp tmp.202 tmp.453 rdi rsi rdx rax))
         (rdx (tmp.198 r15 rdi rsi tmp.26 ra.452 rbp))
         (tmp.26 (tmp.27 tmp.198 ra.452 rbp tmp.202 tmp.453 rdx))
         (rsi (tmp.198 r15 rdi ra.452 rdx rbp))
         (rdi (r15 ra.452 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.453 (rbp ra.452 tmp.26 tmp.27))
         (tmp.27 (tmp.198 tmp.26 ra.452 rbp tmp.202 tmp.453))
         (tmp.202 (tmp.27 tmp.26 ra.452 rbp))
         (tmp.198 (tmp.27 tmp.26 rsi rdx ra.452 rbp))))
       (assignment ()))
      (begin
        (set! ra.452 r15)
        (set! tmp.198 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.453 (bitwise-and tmp.26 7))
            (set! tmp.202 tmp.453)
            (if (eq? tmp.202 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.452 rbp rax)))))
    (define L.jp.52
      ((new-frames ())
       (locals (tmp.26 tmp.27 tmp.200 ra.454))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx tmp.200 ra.454 rbp)
         (rdx tmp.200 tmp.26 ra.454 rbp)
         (tmp.200 tmp.26 tmp.27 ra.454 rbp)
         ((tmp.26 tmp.27 ra.454 rbp)
          ((ra.454 rbp)
           ((ra.454 rax rbp) (rax rbp))
           ((ra.454 rax rbp) (rax rbp)))
          ((ra.454 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.454 rbp))
         (rbp (tmp.27 tmp.26 tmp.200 ra.454 rax))
         (ra.454 (tmp.27 tmp.26 tmp.200 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.200 ra.454))
         (rsi (tmp.200 ra.454))
         (rdi (ra.454))
         (tmp.200 (tmp.27 tmp.26 rsi rdx ra.454 rbp))
         (tmp.26 (tmp.27 rdx tmp.200 ra.454 rbp))
         (tmp.27 (tmp.200 tmp.26 ra.454 rbp))))
       (assignment ()))
      (begin
        (set! ra.454 r15)
        (set! tmp.200 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.200 6)
          (if (<= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.454 rbp rax))
            (begin (set! rax 6) (jump ra.454 rbp rax)))
          (begin (set! rax 1086) (jump ra.454 rbp rax)))))
    (define L.jp.48
      ((new-frames ())
       (locals (tmp.25 tmp.24 ra.455 tmp.195 tmp.456 tmp.191))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.191 ra.455 rbp)
         (rdx tmp.191 tmp.24 ra.455 rbp)
         (tmp.191 tmp.25 tmp.24 ra.455 rbp)
         ((tmp.25 tmp.24 ra.455 rbp)
          ((tmp.456 tmp.25 tmp.24 ra.455 rbp)
           (tmp.195 tmp.25 tmp.24 ra.455 rbp)
           ((tmp.25 tmp.24 ra.455 rbp)
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.191 ra.455 tmp.195 tmp.456 r15 rdi rsi rdx rax))
         (ra.455 (tmp.25 tmp.24 tmp.191 rbp tmp.195 tmp.456 rdi rsi rdx rax))
         (rdx (tmp.191 r15 rdi rsi tmp.24 ra.455 rbp))
         (tmp.24 (tmp.25 tmp.191 ra.455 rbp tmp.195 tmp.456 rdx))
         (rsi (tmp.191 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.456 (rbp ra.455 tmp.24 tmp.25))
         (tmp.25 (tmp.191 tmp.24 ra.455 rbp tmp.195 tmp.456))
         (tmp.195 (tmp.25 tmp.24 ra.455 rbp))
         (tmp.191 (tmp.25 tmp.24 rsi rdx ra.455 rbp))))
       (assignment ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.191 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.191 6)
          (begin
            (set! tmp.456 (bitwise-and tmp.24 7))
            (set! tmp.195 tmp.456)
            (if (eq? tmp.195 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.455 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (tmp.24 tmp.25 tmp.193 ra.457))
       (undead-out
        ((rdi rsi rdx ra.457 rbp)
         (rsi rdx tmp.193 ra.457 rbp)
         (rdx tmp.193 tmp.24 ra.457 rbp)
         (tmp.193 tmp.24 tmp.25 ra.457 rbp)
         ((tmp.24 tmp.25 ra.457 rbp)
          ((ra.457 rbp)
           ((ra.457 rax rbp) (rax rbp))
           ((ra.457 rax rbp) (rax rbp)))
          ((ra.457 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.457 rbp))
         (rbp (tmp.25 tmp.24 tmp.193 ra.457 rax))
         (ra.457 (tmp.25 tmp.24 tmp.193 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.193 ra.457))
         (rsi (tmp.193 ra.457))
         (rdi (ra.457))
         (tmp.193 (tmp.25 tmp.24 rsi rdx ra.457 rbp))
         (tmp.24 (tmp.25 rdx tmp.193 ra.457 rbp))
         (tmp.25 (tmp.193 tmp.24 ra.457 rbp))))
       (assignment ()))
      (begin
        (set! ra.457 r15)
        (set! tmp.193 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.193 6)
          (if (< tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.457 rbp rax))
            (begin (set! rax 6) (jump ra.457 rbp rax)))
          (begin (set! rax 830) (jump ra.457 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (tmp.23 tmp.22 ra.458 tmp.188 tmp.459 tmp.185))
       (undead-out
        ((rdi rsi rdx ra.458 rbp)
         (rsi rdx tmp.185 ra.458 rbp)
         (rdx tmp.185 tmp.22 ra.458 rbp)
         (tmp.185 tmp.23 tmp.22 ra.458 rbp)
         ((tmp.23 tmp.22 ra.458 rbp)
          ((tmp.459 tmp.23 tmp.22 ra.458 rbp)
           (tmp.188 tmp.23 tmp.22 ra.458 rbp)
           ((tmp.23 tmp.22 ra.458 rbp)
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.458 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.458 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.185 ra.458 tmp.188 tmp.459 r15 rdi rsi rdx rax))
         (ra.458 (tmp.23 tmp.22 tmp.185 rbp tmp.188 tmp.459 rdi rsi rdx rax))
         (rdx (tmp.185 r15 rdi rsi tmp.22 ra.458 rbp))
         (tmp.22 (tmp.23 tmp.185 ra.458 rbp tmp.188 tmp.459 rdx))
         (rsi (tmp.185 r15 rdi ra.458 rdx rbp))
         (rdi (r15 ra.458 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.459 (rbp ra.458 tmp.22 tmp.23))
         (tmp.23 (tmp.185 tmp.22 ra.458 rbp tmp.188 tmp.459))
         (tmp.188 (tmp.23 tmp.22 ra.458 rbp))
         (tmp.185 (tmp.23 tmp.22 rsi rdx ra.458 rbp))))
       (assignment ()))
      (begin
        (set! ra.458 r15)
        (set! tmp.185 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.459 (bitwise-and tmp.22 7))
            (set! tmp.188 tmp.459)
            (if (eq? tmp.188 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.458 rbp rax)))))
    (define L.jp.42
      ((new-frames ())
       (locals (tmp.23 tmp.22 tmp.461 tmp.187 ra.460))
       (undead-out
        ((rdi rsi rdx ra.460 rbp)
         (rsi rdx tmp.187 ra.460 rbp)
         (rdx tmp.187 tmp.22 ra.460 rbp)
         (tmp.187 tmp.23 tmp.22 ra.460 rbp)
         ((tmp.23 tmp.22 ra.460 rbp)
          ((tmp.461 ra.460 rbp) (ra.460 rax rbp) (rax rbp))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.23 tmp.22 tmp.187 ra.460 tmp.461 rax))
         (ra.460 (tmp.23 tmp.22 tmp.187 rdi rsi rdx rbp tmp.461 rax))
         (tmp.461 (rbp ra.460))
         (rdx (tmp.22 tmp.187 ra.460))
         (rsi (tmp.187 ra.460))
         (rdi (ra.460))
         (tmp.187 (tmp.23 tmp.22 rsi rdx ra.460 rbp))
         (tmp.22 (tmp.23 rdx tmp.187 ra.460 rbp))
         (tmp.23 (tmp.187 tmp.22 ra.460 rbp))))
       (assignment ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.187 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.461 (- tmp.22 tmp.23))
            (set! rax tmp.461)
            (jump ra.460 rbp rax))
          (begin (set! rax 574) (jump ra.460 rbp rax)))))
    (define L.jp.39
      ((new-frames ())
       (locals (tmp.21 tmp.20 ra.462 tmp.182 tmp.463 tmp.179))
       (undead-out
        ((rdi rsi rdx ra.462 rbp)
         (rsi rdx tmp.179 ra.462 rbp)
         (rdx tmp.179 tmp.20 ra.462 rbp)
         (tmp.179 tmp.21 tmp.20 ra.462 rbp)
         ((tmp.21 tmp.20 ra.462 rbp)
          ((tmp.463 tmp.21 tmp.20 ra.462 rbp)
           (tmp.182 tmp.21 tmp.20 ra.462 rbp)
           ((tmp.21 tmp.20 ra.462 rbp)
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.462 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.462 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.179 ra.462 tmp.182 tmp.463 r15 rdi rsi rdx rax))
         (ra.462 (tmp.21 tmp.20 tmp.179 rbp tmp.182 tmp.463 rdi rsi rdx rax))
         (rdx (tmp.179 r15 rdi rsi tmp.20 ra.462 rbp))
         (tmp.20 (tmp.21 tmp.179 ra.462 rbp tmp.182 tmp.463 rdx))
         (rsi (tmp.179 r15 rdi ra.462 rdx rbp))
         (rdi (r15 ra.462 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.463 (rbp ra.462 tmp.20 tmp.21))
         (tmp.21 (tmp.179 tmp.20 ra.462 rbp tmp.182 tmp.463))
         (tmp.182 (tmp.21 tmp.20 ra.462 rbp))
         (tmp.179 (tmp.21 tmp.20 rsi rdx ra.462 rbp))))
       (assignment ()))
      (begin
        (set! ra.462 r15)
        (set! tmp.179 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.179 6)
          (begin
            (set! tmp.463 (bitwise-and tmp.20 7))
            (set! tmp.182 tmp.463)
            (if (eq? tmp.182 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.462 rbp rax)))))
    (define L.jp.38
      ((new-frames ())
       (locals (tmp.21 tmp.20 tmp.465 tmp.181 ra.464))
       (undead-out
        ((rdi rsi rdx ra.464 rbp)
         (rsi rdx tmp.181 ra.464 rbp)
         (rdx tmp.181 tmp.20 ra.464 rbp)
         (tmp.181 tmp.21 tmp.20 ra.464 rbp)
         ((tmp.21 tmp.20 ra.464 rbp)
          ((tmp.465 ra.464 rbp) (ra.464 rax rbp) (rax rbp))
          ((ra.464 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.464 rbp))
         (rbp (tmp.21 tmp.20 tmp.181 ra.464 tmp.465 rax))
         (ra.464 (tmp.21 tmp.20 tmp.181 rdi rsi rdx rbp tmp.465 rax))
         (tmp.465 (rbp ra.464))
         (rdx (tmp.20 tmp.181 ra.464))
         (rsi (tmp.181 ra.464))
         (rdi (ra.464))
         (tmp.181 (tmp.21 tmp.20 rsi rdx ra.464 rbp))
         (tmp.20 (tmp.21 rdx tmp.181 ra.464 rbp))
         (tmp.21 (tmp.181 tmp.20 ra.464 rbp))))
       (assignment ()))
      (begin
        (set! ra.464 r15)
        (set! tmp.181 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.181 6)
          (begin
            (set! tmp.465 (+ tmp.20 tmp.21))
            (set! rax tmp.465)
            (jump ra.464 rbp rax))
          (begin (set! rax 318) (jump ra.464 rbp rax)))))
    (define L.jp.35
      ((new-frames ())
       (locals (tmp.18 tmp.19 ra.466 tmp.176 tmp.467 tmp.172))
       (undead-out
        ((rdi rsi rdx ra.466 rbp)
         (rsi rdx tmp.172 ra.466 rbp)
         (rdx tmp.172 tmp.18 ra.466 rbp)
         (tmp.172 tmp.18 tmp.19 ra.466 rbp)
         ((tmp.18 tmp.19 ra.466 rbp)
          ((tmp.467 tmp.18 tmp.19 ra.466 rbp)
           (tmp.176 tmp.18 tmp.19 ra.466 rbp)
           ((tmp.18 tmp.19 ra.466 rbp)
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.466 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.172 ra.466 tmp.176 tmp.467 r15 rdi rsi rdx rax))
         (ra.466 (tmp.19 tmp.18 tmp.172 rbp tmp.176 tmp.467 rdi rsi rdx rax))
         (rdx (tmp.18 tmp.172 r15 rdi rsi tmp.19 ra.466 rbp))
         (tmp.19 (tmp.172 tmp.18 ra.466 rbp tmp.176 tmp.467 rdx))
         (rsi (tmp.172 r15 rdi ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.467 (rbp ra.466 tmp.19 tmp.18))
         (tmp.18 (tmp.19 rdx tmp.172 ra.466 rbp tmp.176 tmp.467))
         (tmp.176 (tmp.18 tmp.19 ra.466 rbp))
         (tmp.172 (tmp.19 tmp.18 rsi rdx ra.466 rbp))))
       (assignment ()))
      (begin
        (set! ra.466 r15)
        (set! tmp.172 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.172 6)
          (begin
            (set! tmp.467 (bitwise-and tmp.18 7))
            (set! tmp.176 tmp.467)
            (if (eq? tmp.176 0)
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 14)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 6)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.466 rbp rax)))))
    (define L.jp.34
      ((new-frames ())
       (locals (tmp.19 tmp.469 tmp.175 tmp.18 tmp.470 tmp.174 ra.468))
       (undead-out
        ((rdi rsi rdx ra.468 rbp)
         (rsi rdx tmp.174 ra.468 rbp)
         (rdx tmp.174 tmp.19 ra.468 rbp)
         (tmp.174 tmp.19 tmp.18 ra.468 rbp)
         ((tmp.19 tmp.18 ra.468 rbp)
          ((tmp.469 tmp.18 ra.468 rbp)
           (tmp.175 tmp.18 ra.468 rbp)
           (tmp.470 ra.468 rbp)
           (ra.468 rax rbp)
           (rax rbp))
          ((ra.468 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.468 rbp))
         (rbp (tmp.18 tmp.19 tmp.174 ra.468 tmp.470 tmp.175 tmp.469 rax))
         (ra.468
          (tmp.18 tmp.19 tmp.174 rdi rsi rdx rbp tmp.470 tmp.175 tmp.469 rax))
         (tmp.469 (rbp ra.468 tmp.18))
         (tmp.18 (tmp.174 tmp.19 ra.468 rbp tmp.175 tmp.469))
         (tmp.175 (tmp.18 ra.468 rbp))
         (tmp.470 (rbp ra.468))
         (rdx (tmp.19 tmp.174 ra.468))
         (rsi (tmp.174 ra.468))
         (rdi (ra.468))
         (tmp.174 (tmp.18 tmp.19 rsi rdx ra.468 rbp))
         (tmp.19 (tmp.18 rdx tmp.174 ra.468 rbp))))
       (assignment ()))
      (begin
        (set! ra.468 r15)
        (set! tmp.174 rdi)
        (set! tmp.19 rsi)
        (set! tmp.18 rdx)
        (if (neq? tmp.174 6)
          (begin
            (set! tmp.469 (arithmetic-shift-right tmp.19 3))
            (set! tmp.175 tmp.469)
            (set! tmp.470 (* tmp.18 tmp.175))
            (set! rax tmp.470)
            (jump ra.468 rbp rax))
          (begin (set! rax 62) (jump ra.468 rbp rax))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.104
      ((new-frames ((nfv.357 nfv.358 nfv.359)))
       (locals
        (tmp.135
         x.15
         tmp.170
         tmp.356
         tmp.322
         *.56
         tmp.169
         tmp.355
         tmp.321
         |+.57|
         tmp.168
         tmp.354
         tmp.320
         |-.58|
         tmp.167
         tmp.353
         tmp.319
         <.59
         tmp.166
         tmp.352
         tmp.318
         <=.60
         tmp.165
         tmp.351
         tmp.317
         >.61
         tmp.164
         tmp.350
         tmp.316
         >=.62
         tmp.163
         tmp.349
         tmp.315
         make-vector.63
         tmp.162
         tmp.348
         tmp.314
         vector-length.64
         tmp.161
         tmp.347
         tmp.313
         vector-set!.65
         tmp.160
         tmp.346
         tmp.312
         vector-ref.66
         tmp.159
         tmp.345
         tmp.311
         car.67
         tmp.158
         tmp.344
         tmp.310
         cdr.68
         tmp.157
         tmp.343
         tmp.309
         procedure-arity.69
         tmp.156
         tmp.342
         tmp.308
         fixnum?.70
         tmp.155
         tmp.341
         tmp.307
         boolean?.71
         tmp.154
         tmp.340
         tmp.306
         empty?.72
         tmp.153
         tmp.339
         tmp.305
         void?.73
         tmp.152
         tmp.338
         tmp.304
         ascii-char?.74
         tmp.151
         tmp.337
         tmp.303
         error?.75
         tmp.150
         tmp.336
         tmp.302
         pair?.76
         tmp.149
         tmp.335
         tmp.301
         procedure?.77
         tmp.148
         tmp.334
         tmp.300
         vector?.78
         tmp.147
         tmp.333
         tmp.299
         not.79
         tmp.146
         tmp.332
         tmp.298
         cons.80
         tmp.145
         tmp.331
         tmp.297
         eq?.81
         tmp.144
         tmp.330
         tmp.296
         make-init-vector.1
         tmp.143
         tmp.329
         tmp.295
         vector-init-loop.84
         tmp.142
         tmp.328
         tmp.294
         unsafe-vector-set!.2
         tmp.141
         tmp.327
         tmp.293
         unsafe-vector-ref.3
         tmp.140
         tmp.326
         tmp.292
         tmp.324
         x.17
         tmp.137
         ra.325
         j.16
         nfv.357
         nfv.358
         nfv.359
         tmp.136
         sum.4))
       (undead-out
        ((r12 ra.325 rbp)
         (r12 tmp.292 ra.325 rbp)
         (tmp.292 r12 ra.325 rbp)
         (tmp.326 r12 ra.325 rbp)
         (r12 ra.325 rbp tmp.140)
         (rbp ra.325 r12 tmp.140)
         (tmp.140 r12 ra.325 rbp)
         (r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.293 ra.325 rbp unsafe-vector-ref.3)
         (tmp.293 r12 ra.325 rbp unsafe-vector-ref.3)
         (tmp.327 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 ra.325 rbp unsafe-vector-ref.3 tmp.141)
         (unsafe-vector-ref.3 rbp ra.325 r12 tmp.141)
         (tmp.141 r12 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 tmp.294 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.294 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (tmp.328 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3 tmp.142)
         (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12 tmp.142)
         (tmp.142 r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.295
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.295
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.329
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.143)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          r12
          tmp.143)
         (tmp.143
          r12
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.296
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.296
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.144)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.144)
         (tmp.144
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.297
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.297
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.145)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.145)
         (tmp.145
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.298
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.298
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.146)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.146)
         (tmp.146
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.299
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.299
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.147)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.147)
         (tmp.147
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.300
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.300
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.148)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.148)
         (tmp.148
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.301
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.301
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.149)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.149)
         (tmp.149
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.302
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.302
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.150)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.150)
         (tmp.150
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.303
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.303
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.151)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.151)
         (tmp.151
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.304
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.304
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.152)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.152)
         (tmp.152
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.305
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.305
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.153)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.153)
         (tmp.153
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.306
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.306
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.154)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.154)
         (tmp.154
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.307
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.307
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.155)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.155)
         (tmp.155
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.308
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.308
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.156)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.156)
         (tmp.156
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.309
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.309
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.157)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.157)
         (tmp.157
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.310
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.310
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.344
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.158)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.158)
         (tmp.158
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          tmp.311
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.311
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (tmp.345
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84
          tmp.159)
         (vector-init-loop.84
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.159)
         (tmp.159
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.312
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.312
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.346
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.160)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.160)
         (tmp.160
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.313
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.313
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.161)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.161)
         (tmp.161
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.314
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.314
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.162)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.162)
         (tmp.162
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.315
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.315
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.163)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.163)
         (tmp.163
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.316
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.316
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.164)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.164)
         (tmp.164
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.317
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.317
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.165)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.165)
         (tmp.165
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.318
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.318
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.352
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.166)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.166)
         (tmp.166
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.319
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.319
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.353
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.167)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.167)
         (tmp.167
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.320
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.320
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.354
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.168)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          rbp
          ra.325
          eq?.81
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          r12
          tmp.168)
         (tmp.168
          r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (r12
          tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.321
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (tmp.355
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84
          tmp.169)
         (vector-init-loop.84
          vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          make-init-vector.1
          tmp.169)
         (tmp.169
          make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (make-init-vector.1
          vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66
          vector-init-loop.84)
         (vector-ref.66
          unsafe-vector-ref.3
          make-vector.63
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65
          vector-init-loop.84
          make-init-vector.1)
         (vector-set!.65
          unsafe-vector-set!.2
          |+.57|
          eq?.81
          ra.325
          rbp
          r12
          make-init-vector.1
          make-vector.63
          unsafe-vector-ref.3
          vector-ref.66)
         (make-vector.63
          make-init-vector.1
          r12
          rbp
          ra.325
          eq?.81
          |+.57|
          unsafe-vector-set!.2
          vector-set!.65)
         (|+.57| eq?.81 ra.325 rbp r12 make-init-vector.1 make-vector.63)
         (r12 rbp ra.325 eq?.81 |+.57|)
         (r12 tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.322 rbp ra.325 eq?.81 |+.57|)
         (tmp.356 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| tmp.170)
         (|+.57| eq?.81 ra.325 rbp tmp.170)
         (tmp.170 rbp ra.325 eq?.81 |+.57|)
         (rbp ra.325 eq?.81 |+.57| sum.4)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         (eq?.81 sum.4 ra.325 rbp)
         ((rax sum.4 ra.325 rbp)
          ((eq?.81 rdx rbp)
           (eq?.81 rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (tmp.324 sum.4 ra.325 rbp)
         ((sum.4 ra.325 rbp)
          ((sum.4 ra.325 rbp)
           ((rax ra.325 rbp)
            ((sum.4 nfv.359 rbp)
             (sum.4 nfv.359 nfv.358 rbp)
             (sum.4 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (sum.4 rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)
             (rdi rsi rdx rcx r8 r9 nfv.359 nfv.358 nfv.357 r15 rbp)))
           (j.16 ra.325 rbp)
           (ra.325 rax rbp)
           (rax rbp))
          ((x.17 sum.4 ra.325 rbp)
           (x.17 sum.4 ra.325 rbp)
           (sum.4 ra.325 fv2 rbp)
           (sum.4 ra.325 fv2 fv1 rbp)
           (sum.4 ra.325 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (sum.4 ra.325 rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (ra.325 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)
           (rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 r15 rbp)))))
       (call-undead (sum.4 ra.325))
       (conflicts
        ((x.17 (tmp.137 sum.4 ra.325 rbp))
         (rbp
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           r12
           tmp.292
           ra.325
           j.16
           nfv.357
           nfv.358
           nfv.359
           rax
           tmp.136
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (ra.325
          (tmp.324
           tmp.135
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           tmp.292
           r12
           rbp
           j.16
           rax
           tmp.136
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           tmp.137
           x.17))
         (sum.4
          (tmp.324
           rax
           tmp.135
           x.15
           rbp
           ra.325
           eq?.81
           |+.57|
           nfv.357
           nfv.358
           nfv.359
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           x.17))
         (tmp.137 (x.17 ra.325 rbp))
         (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 sum.4 ra.325 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 sum.4 ra.325 fv2 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 sum.4 ra.325 fv2 fv1 rbp))
         (r9
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           sum.4
           ra.325
           fv2
           fv1
           fv0
           rbp))
         (r8
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           rcx
           sum.4
           ra.325
           r9
           fv2
           fv1
           fv0
           rbp))
         (rcx
          (nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           rdx
           sum.4
           ra.325
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdx
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           rsi
           sum.4
           ra.325
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rsi
          (eq?.81
           nfv.359
           nfv.358
           nfv.357
           r15
           rdi
           sum.4
           ra.325
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (rdi
          (nfv.359
           nfv.358
           nfv.357
           r15
           ra.325
           rsi
           rdx
           rcx
           r8
           r9
           fv2
           fv1
           fv0
           rbp))
         (r15 (nfv.359 nfv.358 nfv.357 rdi rsi rdx rcx r8 r9 fv2 fv1 fv0 rbp))
         (tmp.136 (ra.325 rbp))
         (rax (sum.4 rbp ra.325))
         (nfv.359 (r15 rdi rsi rdx rcx r8 r9 nfv.357 nfv.358 sum.4 rbp))
         (nfv.358 (r15 rdi rsi rdx rcx r8 r9 nfv.357 sum.4 nfv.359 rbp))
         (nfv.357 (r15 rdi rsi rdx rcx r8 r9 sum.4 nfv.359 nfv.358 rbp))
         (j.16 (ra.325 rbp))
         (r12
          (tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           unsafe-vector-ref.3
           tmp.140
           tmp.326
           rbp
           tmp.292
           ra.325))
         (tmp.292 (r12 ra.325 rbp))
         (tmp.326 (rbp ra.325 r12))
         (tmp.140 (r12 ra.325 rbp))
         (unsafe-vector-ref.3
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           unsafe-vector-set!.2
           tmp.141
           tmp.327
           tmp.293
           r12
           ra.325
           rbp))
         (tmp.293 (r12 ra.325 rbp unsafe-vector-ref.3))
         (tmp.327 (unsafe-vector-ref.3 rbp ra.325 r12))
         (tmp.141 (r12 ra.325 rbp unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           vector-init-loop.84
           tmp.142
           tmp.328
           tmp.294
           r12
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.294 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (tmp.328 (unsafe-vector-ref.3 rbp ra.325 unsafe-vector-set!.2 r12))
         (tmp.142 (r12 unsafe-vector-set!.2 ra.325 rbp unsafe-vector-ref.3))
         (vector-init-loop.84
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           make-init-vector.1
           tmp.143
           tmp.329
           tmp.295
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3))
         (tmp.295
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.329
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           r12))
         (tmp.143
          (r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (make-init-vector.1
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           eq?.81
           tmp.144
           tmp.330
           tmp.296
           r12
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.296
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.330
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.144
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (eq?.81
          (rsi
           rdx
           x.15
           sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           vector-ref.66
           tmp.159
           tmp.345
           tmp.311
           car.67
           tmp.158
           tmp.344
           tmp.310
           cdr.68
           tmp.157
           tmp.343
           tmp.309
           procedure-arity.69
           tmp.156
           tmp.342
           tmp.308
           fixnum?.70
           tmp.155
           tmp.341
           tmp.307
           boolean?.71
           tmp.154
           tmp.340
           tmp.306
           empty?.72
           tmp.153
           tmp.339
           tmp.305
           void?.73
           tmp.152
           tmp.338
           tmp.304
           ascii-char?.74
           tmp.151
           tmp.337
           tmp.303
           error?.75
           tmp.150
           tmp.336
           tmp.302
           pair?.76
           tmp.149
           tmp.335
           tmp.301
           procedure?.77
           tmp.148
           tmp.334
           tmp.300
           vector?.78
           tmp.147
           tmp.333
           tmp.299
           not.79
           tmp.146
           tmp.332
           tmp.298
           cons.80
           tmp.145
           tmp.331
           tmp.297
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.297
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.331
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.145
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cons.80
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.298
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.332
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.146
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (not.79
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.299
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.333
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.147
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector?.78
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.300
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.334
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.148
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure?.77
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.301
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.335
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.149
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (pair?.76
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.302
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.336
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.150
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (error?.75
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.303
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.337
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.151
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (ascii-char?.74
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.304
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.338
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.152
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (void?.73
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.305
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.339
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.153
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (empty?.72
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.306
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.340
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.154
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (boolean?.71
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.307
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.341
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.155
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (fixnum?.70
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.308
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.342
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.156
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (procedure-arity.69
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.309
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.343
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.157
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (cdr.68
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.310
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.344
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.158
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (car.67
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.311
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.345
          (vector-init-loop.84
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.159
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (vector-ref.66
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           vector-set!.65
           tmp.160
           tmp.346
           tmp.312
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-init-loop.84))
         (tmp.312
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.346
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.160
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-set!.65
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           make-vector.63
           tmp.162
           tmp.348
           tmp.314
           vector-length.64
           tmp.161
           tmp.347
           tmp.313
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.313
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.347
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.161
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (vector-length.64
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.314
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.348
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.162
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (make-vector.63
          (*.56
           tmp.169
           tmp.355
           tmp.321
           |+.57|
           tmp.168
           tmp.354
           tmp.320
           |-.58|
           tmp.167
           tmp.353
           tmp.319
           <.59
           tmp.166
           tmp.352
           tmp.318
           <=.60
           tmp.165
           tmp.351
           tmp.317
           >.61
           tmp.164
           tmp.350
           tmp.316
           >=.62
           tmp.163
           tmp.349
           tmp.315
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.315
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.349
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.163
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>=.62
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.316
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.350
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.164
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (>.61
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.317
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.351
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.165
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<=.60
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.318
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.352
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.166
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (<.59
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.319
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.353
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.167
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|-.58|
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.320
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.354
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           rbp
           ra.325
           eq?.81
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1
           r12))
         (tmp.168
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (|+.57|
          (sum.4
           tmp.170
           tmp.356
           tmp.322
           *.56
           tmp.169
           tmp.355
           tmp.321
           r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.321
          (r12
           make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.355
          (vector-init-loop.84
           vector-ref.66
           unsafe-vector-ref.3
           make-vector.63
           r12
           rbp
           ra.325
           eq?.81
           |+.57|
           unsafe-vector-set!.2
           vector-set!.65
           make-init-vector.1))
         (tmp.169
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (*.56
          (make-init-vector.1
           vector-set!.65
           unsafe-vector-set!.2
           |+.57|
           eq?.81
           ra.325
           rbp
           r12
           make-vector.63
           unsafe-vector-ref.3
           vector-ref.66
           vector-init-loop.84))
         (tmp.322 (r12 rbp ra.325 eq?.81 |+.57|))
         (tmp.356 (|+.57| eq?.81 ra.325 rbp))
         (tmp.170 (rbp ra.325 eq?.81 |+.57|))
         (x.15 (eq?.81 sum.4 ra.325 rbp))
         (tmp.135 (sum.4 ra.325 rbp))
         (tmp.324 (sum.4 ra.325 rbp)))))
      (begin
        (set! ra.325 r15)
        (set! tmp.292 r12)
        (set! r12 (+ r12 16))
        (set! tmp.326 (+ tmp.292 2))
        (set! tmp.140 tmp.326)
        (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.140 6 16)
        (set! unsafe-vector-ref.3 tmp.140)
        (set! tmp.293 r12)
        (set! r12 (+ r12 16))
        (set! tmp.327 (+ tmp.293 2))
        (set! tmp.141 tmp.327)
        (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.141 6 24)
        (set! unsafe-vector-set!.2 tmp.141)
        (set! tmp.294 r12)
        (set! r12 (+ r12 24))
        (set! tmp.328 (+ tmp.294 2))
        (set! tmp.142 tmp.328)
        (mset! tmp.142 -2 L.vector-init-loop.84.3)
        (mset! tmp.142 6 24)
        (set! vector-init-loop.84 tmp.142)
        (set! tmp.295 r12)
        (set! r12 (+ r12 24))
        (set! tmp.329 (+ tmp.295 2))
        (set! tmp.143 tmp.329)
        (mset! tmp.143 -2 L.make-init-vector.1.4)
        (mset! tmp.143 6 8)
        (set! make-init-vector.1 tmp.143)
        (set! tmp.296 r12)
        (set! r12 (+ r12 16))
        (set! tmp.330 (+ tmp.296 2))
        (set! tmp.144 tmp.330)
        (mset! tmp.144 -2 L.eq?.81.5)
        (mset! tmp.144 6 16)
        (set! eq?.81 tmp.144)
        (set! tmp.297 r12)
        (set! r12 (+ r12 16))
        (set! tmp.331 (+ tmp.297 2))
        (set! tmp.145 tmp.331)
        (mset! tmp.145 -2 L.cons.80.6)
        (mset! tmp.145 6 16)
        (set! cons.80 tmp.145)
        (set! tmp.298 r12)
        (set! r12 (+ r12 16))
        (set! tmp.332 (+ tmp.298 2))
        (set! tmp.146 tmp.332)
        (mset! tmp.146 -2 L.not.79.7)
        (mset! tmp.146 6 8)
        (set! not.79 tmp.146)
        (set! tmp.299 r12)
        (set! r12 (+ r12 16))
        (set! tmp.333 (+ tmp.299 2))
        (set! tmp.147 tmp.333)
        (mset! tmp.147 -2 L.vector?.78.8)
        (mset! tmp.147 6 8)
        (set! vector?.78 tmp.147)
        (set! tmp.300 r12)
        (set! r12 (+ r12 16))
        (set! tmp.334 (+ tmp.300 2))
        (set! tmp.148 tmp.334)
        (mset! tmp.148 -2 L.procedure?.77.9)
        (mset! tmp.148 6 8)
        (set! procedure?.77 tmp.148)
        (set! tmp.301 r12)
        (set! r12 (+ r12 16))
        (set! tmp.335 (+ tmp.301 2))
        (set! tmp.149 tmp.335)
        (mset! tmp.149 -2 L.pair?.76.10)
        (mset! tmp.149 6 8)
        (set! pair?.76 tmp.149)
        (set! tmp.302 r12)
        (set! r12 (+ r12 16))
        (set! tmp.336 (+ tmp.302 2))
        (set! tmp.150 tmp.336)
        (mset! tmp.150 -2 L.error?.75.11)
        (mset! tmp.150 6 8)
        (set! error?.75 tmp.150)
        (set! tmp.303 r12)
        (set! r12 (+ r12 16))
        (set! tmp.337 (+ tmp.303 2))
        (set! tmp.151 tmp.337)
        (mset! tmp.151 -2 L.ascii-char?.74.12)
        (mset! tmp.151 6 8)
        (set! ascii-char?.74 tmp.151)
        (set! tmp.304 r12)
        (set! r12 (+ r12 16))
        (set! tmp.338 (+ tmp.304 2))
        (set! tmp.152 tmp.338)
        (mset! tmp.152 -2 L.void?.73.13)
        (mset! tmp.152 6 8)
        (set! void?.73 tmp.152)
        (set! tmp.305 r12)
        (set! r12 (+ r12 16))
        (set! tmp.339 (+ tmp.305 2))
        (set! tmp.153 tmp.339)
        (mset! tmp.153 -2 L.empty?.72.14)
        (mset! tmp.153 6 8)
        (set! empty?.72 tmp.153)
        (set! tmp.306 r12)
        (set! r12 (+ r12 16))
        (set! tmp.340 (+ tmp.306 2))
        (set! tmp.154 tmp.340)
        (mset! tmp.154 -2 L.boolean?.71.15)
        (mset! tmp.154 6 8)
        (set! boolean?.71 tmp.154)
        (set! tmp.307 r12)
        (set! r12 (+ r12 16))
        (set! tmp.341 (+ tmp.307 2))
        (set! tmp.155 tmp.341)
        (mset! tmp.155 -2 L.fixnum?.70.16)
        (mset! tmp.155 6 8)
        (set! fixnum?.70 tmp.155)
        (set! tmp.308 r12)
        (set! r12 (+ r12 16))
        (set! tmp.342 (+ tmp.308 2))
        (set! tmp.156 tmp.342)
        (mset! tmp.156 -2 L.procedure-arity.69.17)
        (mset! tmp.156 6 8)
        (set! procedure-arity.69 tmp.156)
        (set! tmp.309 r12)
        (set! r12 (+ r12 16))
        (set! tmp.343 (+ tmp.309 2))
        (set! tmp.157 tmp.343)
        (mset! tmp.157 -2 L.cdr.68.18)
        (mset! tmp.157 6 8)
        (set! cdr.68 tmp.157)
        (set! tmp.310 r12)
        (set! r12 (+ r12 16))
        (set! tmp.344 (+ tmp.310 2))
        (set! tmp.158 tmp.344)
        (mset! tmp.158 -2 L.car.67.19)
        (mset! tmp.158 6 8)
        (set! car.67 tmp.158)
        (set! tmp.311 r12)
        (set! r12 (+ r12 24))
        (set! tmp.345 (+ tmp.311 2))
        (set! tmp.159 tmp.345)
        (mset! tmp.159 -2 L.vector-ref.66.20)
        (mset! tmp.159 6 16)
        (set! vector-ref.66 tmp.159)
        (set! tmp.312 r12)
        (set! r12 (+ r12 24))
        (set! tmp.346 (+ tmp.312 2))
        (set! tmp.160 tmp.346)
        (mset! tmp.160 -2 L.vector-set!.65.21)
        (mset! tmp.160 6 24)
        (set! vector-set!.65 tmp.160)
        (set! tmp.313 r12)
        (set! r12 (+ r12 16))
        (set! tmp.347 (+ tmp.313 2))
        (set! tmp.161 tmp.347)
        (mset! tmp.161 -2 L.vector-length.64.22)
        (mset! tmp.161 6 8)
        (set! vector-length.64 tmp.161)
        (set! tmp.314 r12)
        (set! r12 (+ r12 24))
        (set! tmp.348 (+ tmp.314 2))
        (set! tmp.162 tmp.348)
        (mset! tmp.162 -2 L.make-vector.63.23)
        (mset! tmp.162 6 8)
        (set! make-vector.63 tmp.162)
        (set! tmp.315 r12)
        (set! r12 (+ r12 16))
        (set! tmp.349 (+ tmp.315 2))
        (set! tmp.163 tmp.349)
        (mset! tmp.163 -2 L.>=.62.24)
        (mset! tmp.163 6 16)
        (set! >=.62 tmp.163)
        (set! tmp.316 r12)
        (set! r12 (+ r12 16))
        (set! tmp.350 (+ tmp.316 2))
        (set! tmp.164 tmp.350)
        (mset! tmp.164 -2 L.>.61.25)
        (mset! tmp.164 6 16)
        (set! >.61 tmp.164)
        (set! tmp.317 r12)
        (set! r12 (+ r12 16))
        (set! tmp.351 (+ tmp.317 2))
        (set! tmp.165 tmp.351)
        (mset! tmp.165 -2 L.<=.60.26)
        (mset! tmp.165 6 16)
        (set! <=.60 tmp.165)
        (set! tmp.318 r12)
        (set! r12 (+ r12 16))
        (set! tmp.352 (+ tmp.318 2))
        (set! tmp.166 tmp.352)
        (mset! tmp.166 -2 L.<.59.27)
        (mset! tmp.166 6 16)
        (set! <.59 tmp.166)
        (set! tmp.319 r12)
        (set! r12 (+ r12 16))
        (set! tmp.353 (+ tmp.319 2))
        (set! tmp.167 tmp.353)
        (mset! tmp.167 -2 L.-.58.28)
        (mset! tmp.167 6 16)
        (set! |-.58| tmp.167)
        (set! tmp.320 r12)
        (set! r12 (+ r12 16))
        (set! tmp.354 (+ tmp.320 2))
        (set! tmp.168 tmp.354)
        (mset! tmp.168 -2 L.+.57.29)
        (mset! tmp.168 6 16)
        (set! |+.57| tmp.168)
        (set! tmp.321 r12)
        (set! r12 (+ r12 16))
        (set! tmp.355 (+ tmp.321 2))
        (set! tmp.169 tmp.355)
        (mset! tmp.169 -2 L.*.56.30)
        (mset! tmp.169 6 16)
        (set! *.56 tmp.169)
        (mset! vector-init-loop.84 14 vector-init-loop.84)
        (mset! make-init-vector.1 14 vector-init-loop.84)
        (mset! vector-ref.66 14 unsafe-vector-ref.3)
        (mset! vector-set!.65 14 unsafe-vector-set!.2)
        (mset! make-vector.63 14 make-init-vector.1)
        (set! tmp.322 r12)
        (set! r12 (+ r12 24))
        (set! tmp.356 (+ tmp.322 2))
        (set! tmp.170 tmp.356)
        (mset! tmp.170 -2 L.sum.4.31)
        (mset! tmp.170 6 64)
        (set! sum.4 tmp.170)
        (mset! sum.4 14 |+.57|)
        (set! x.15 80)
        (set! tmp.135 eq?.81)
        (return-point L.rp.105
          (begin
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi eq?.81)
            (set! r15 L.rp.105)
            (jump L.eq?.81.5 rbp r15 rdx rsi rdi)))
        (set! tmp.324 rax)
        (if (neq? tmp.324 6)
          (begin
            (set! tmp.136 sum.4)
            (return-point L.rp.106
              (begin
                (set! nfv.359 64)
                (set! nfv.358 56)
                (set! nfv.357 48)
                (set! r9 40)
                (set! r8 32)
                (set! rcx 24)
                (set! rdx 16)
                (set! rsi 8)
                (set! rdi sum.4)
                (set! r15 L.rp.106)
                (jump
                 L.sum.4.31
                 rbp
                 r15
                 nfv.357
                 nfv.358
                 nfv.359
                 r9
                 r8
                 rcx
                 rdx
                 rsi
                 rdi)))
            (set! j.16 rax)
            (set! rax j.16)
            (jump ra.325 rbp rax))
          (begin
            (set! x.17 40)
            (set! tmp.137 sum.4)
            (set! fv2 x.17)
            (set! fv1 56)
            (set! fv0 48)
            (set! r9 40)
            (set! r8 32)
            (set! rcx 24)
            (set! rdx 16)
            (set! rsi 8)
            (set! rdi sum.4)
            (set! r15 ra.325)
            (jump L.sum.4.31 rbp r15 fv0 fv1 fv2 r9 r8 rcx rdx rsi rdi)))))
    (define L.sum.4.31
      ((new-frames ())
       (locals
        (tmp.134
         j.14
         tmp.133
         i.13
         tmp.132
         |+.57|
         h.12
         g.11
         f.10
         e.9
         d.8
         c.7
         b.6
         a.5
         c.126
         ra.360))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.360 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.126 ra.360 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.126 a.5 ra.360 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv1 fv2 c.126 a.5 b.6 ra.360 rbp)
         (fv2 c.126 a.5 b.6 g.11 ra.360 rbp)
         (c.126 a.5 b.6 g.11 h.12 ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         (a.5 b.6 g.11 h.12 |+.57| ra.360 rbp)
         ((rax g.11 h.12 |+.57| ra.360 rbp)
          ((a.5 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         (g.11 h.12 i.13 |+.57| ra.360 rbp)
         ((rax i.13 |+.57| ra.360 rbp)
          ((g.11 |+.57| rdx rbp)
           (|+.57| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.14 i.13 |+.57| ra.360 rbp)
         (j.14 i.13 |+.57| ra.360 rbp)
         (i.13 |+.57| ra.360 rdx rbp)
         (|+.57| ra.360 rsi rdx rbp)
         (ra.360 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (i.13 g.11 h.12 |+.57| ra.360))
       (conflicts
        ((ra.360
          (tmp.134
           j.14
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (tmp.134
           j.14
           tmp.133
           i.13
           r15
           rdi
           rsi
           rdx
           rax
           tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           c.126
           ra.360))
         (fv2 (g.11 f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv1 (f.10 e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (fv0 (e.9 d.8 c.7 b.6 a.5 c.126 ra.360))
         (r9 (d.8 c.7 b.6 a.5 c.126 ra.360))
         (r8 (c.7 b.6 a.5 c.126 ra.360))
         (rcx (b.6 a.5 c.126 ra.360))
         (rdx (i.13 g.11 r15 rdi rsi |+.57| rbp a.5 c.126 ra.360))
         (rsi (r15 rdi |+.57| rdx rbp c.126 ra.360))
         (rdi (r15 rsi rdx rbp ra.360))
         (c.126
          (h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           a.5
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.360
           rbp))
         (a.5
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           b.6
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           ra.360
           rbp))
         (b.6
          (tmp.132
           |+.57|
           h.12
           g.11
           f.10
           e.9
           d.8
           c.7
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.126
           a.5
           ra.360
           rbp))
         (c.7 (r8 r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (d.8 (r9 fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (e.9 (fv0 fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (f.10 (fv1 fv2 c.126 a.5 b.6 ra.360 rbp))
         (g.11
          (rdx
           tmp.133
           i.13
           rax
           tmp.132
           |+.57|
           h.12
           fv2
           c.126
           a.5
           b.6
           ra.360
           rbp))
         (h.12 (tmp.133 i.13 rax tmp.132 |+.57| c.126 a.5 b.6 g.11 ra.360 rbp))
         (|+.57| (j.14 i.13 rsi rdx rax rbp ra.360 h.12 g.11 b.6 a.5))
         (tmp.132 (a.5 b.6 g.11 h.12 ra.360 rbp))
         (rax (i.13 rbp ra.360 |+.57| h.12 g.11))
         (r15 (rdi rsi rdx rbp))
         (i.13 (rdx tmp.134 j.14 rax tmp.133 g.11 h.12 |+.57| ra.360 rbp))
         (tmp.133 (g.11 h.12 i.13 ra.360 rbp))
         (j.14 (tmp.134 i.13 |+.57| ra.360 rbp))
         (tmp.134 (j.14 i.13 ra.360 rbp)))))
      (begin
        (set! ra.360 r15)
        (set! c.126 rdi)
        (set! a.5 rsi)
        (set! b.6 rdx)
        (set! c.7 rcx)
        (set! d.8 r8)
        (set! e.9 r9)
        (set! f.10 fv0)
        (set! g.11 fv1)
        (set! h.12 fv2)
        (set! |+.57| (mref c.126 14))
        (set! tmp.132 |+.57|)
        (return-point L.rp.107
          (begin
            (set! rdx b.6)
            (set! rsi a.5)
            (set! rdi |+.57|)
            (set! r15 L.rp.107)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! i.13 rax)
        (set! tmp.133 |+.57|)
        (return-point L.rp.108
          (begin
            (set! rdx h.12)
            (set! rsi g.11)
            (set! rdi |+.57|)
            (set! r15 L.rp.108)
            (jump L.+.57.29 rbp r15 rdx rsi rdi)))
        (set! j.14 rax)
        (set! tmp.134 |+.57|)
        (set! rdx j.14)
        (set! rsi i.13)
        (set! rdi |+.57|)
        (set! r15 ra.360)
        (jump L.+.57.29 rbp r15 rdx rsi rdi)))
    (define L.*.56.30
      ((new-frames ())
       (locals (tmp.362 c.125 tmp.177 ra.361 tmp.18 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.361 rbp)
         (rsi rdx ra.361 rbp)
         (rdx tmp.18 ra.361 rbp)
         (tmp.19 tmp.18 ra.361 rbp)
         (tmp.362 tmp.19 tmp.18 ra.361 rbp)
         (tmp.177 tmp.19 tmp.18 ra.361 rbp)
         ((tmp.19 tmp.18 ra.361 rbp)
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.18 ra.361 rdx rbp)
           (ra.361 rsi rdx rbp)
           (ra.361 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.125 r15 rdi rsi tmp.18 ra.361 rbp))
         (rbp (tmp.177 tmp.362 tmp.19 tmp.18 c.125 ra.361 r15 rdi rsi rdx))
         (ra.361 (tmp.177 tmp.362 tmp.19 tmp.18 c.125 rbp rdi rsi rdx))
         (tmp.18 (tmp.177 tmp.362 tmp.19 ra.361 rbp rdx))
         (rsi (c.125 r15 rdi ra.361 rdx rbp))
         (rdi (r15 ra.361 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.125 (rsi rdx ra.361 rbp))
         (tmp.19 (tmp.177 tmp.362 tmp.18 ra.361 rbp))
         (tmp.362 (rbp ra.361 tmp.18 tmp.19))
         (tmp.177 (tmp.19 tmp.18 ra.361 rbp)))))
      (begin
        (set! ra.361 r15)
        (set! c.125 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (set! tmp.362 (bitwise-and tmp.19 7))
        (set! tmp.177 tmp.362)
        (if (eq? tmp.177 0)
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 14)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.19)
            (set! rsi tmp.18)
            (set! rdi 6)
            (set! r15 ra.361)
            (jump L.jp.35 rbp r15 rdx rsi rdi)))))
    (define L.+.57.29
      ((new-frames ())
       (locals (tmp.364 c.124 tmp.183 ra.363 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.363 rbp)
         (rsi rdx ra.363 rbp)
         (rdx tmp.20 ra.363 rbp)
         (tmp.21 tmp.20 ra.363 rbp)
         (tmp.364 tmp.21 tmp.20 ra.363 rbp)
         (tmp.183 tmp.21 tmp.20 ra.363 rbp)
         ((tmp.21 tmp.20 ra.363 rbp)
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.20 ra.363 rdx rbp)
           (ra.363 rsi rdx rbp)
           (ra.363 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.124 r15 rdi rsi tmp.20 ra.363 rbp))
         (rbp (tmp.183 tmp.364 tmp.21 tmp.20 c.124 ra.363 r15 rdi rsi rdx))
         (ra.363 (tmp.183 tmp.364 tmp.21 tmp.20 c.124 rbp rdi rsi rdx))
         (tmp.20 (tmp.183 tmp.364 tmp.21 ra.363 rbp rdx))
         (rsi (c.124 r15 rdi ra.363 rdx rbp))
         (rdi (r15 ra.363 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.124 (rsi rdx ra.363 rbp))
         (tmp.21 (tmp.183 tmp.364 tmp.20 ra.363 rbp))
         (tmp.364 (rbp ra.363 tmp.20 tmp.21))
         (tmp.183 (tmp.21 tmp.20 ra.363 rbp)))))
      (begin
        (set! ra.363 r15)
        (set! c.124 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (set! tmp.364 (bitwise-and tmp.21 7))
        (set! tmp.183 tmp.364)
        (if (eq? tmp.183 0)
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 14)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.21)
            (set! rsi tmp.20)
            (set! rdi 6)
            (set! r15 ra.363)
            (jump L.jp.39 rbp r15 rdx rsi rdi)))))
    (define L.-.58.28
      ((new-frames ())
       (locals (tmp.366 c.123 tmp.189 ra.365 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.365 rbp)
         (rsi rdx ra.365 rbp)
         (rdx tmp.22 ra.365 rbp)
         (tmp.23 tmp.22 ra.365 rbp)
         (tmp.366 tmp.23 tmp.22 ra.365 rbp)
         (tmp.189 tmp.23 tmp.22 ra.365 rbp)
         ((tmp.23 tmp.22 ra.365 rbp)
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.22 ra.365 rdx rbp)
           (ra.365 rsi rdx rbp)
           (ra.365 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.123 r15 rdi rsi tmp.22 ra.365 rbp))
         (rbp (tmp.189 tmp.366 tmp.23 tmp.22 c.123 ra.365 r15 rdi rsi rdx))
         (ra.365 (tmp.189 tmp.366 tmp.23 tmp.22 c.123 rbp rdi rsi rdx))
         (tmp.22 (tmp.189 tmp.366 tmp.23 ra.365 rbp rdx))
         (rsi (c.123 r15 rdi ra.365 rdx rbp))
         (rdi (r15 ra.365 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.123 (rsi rdx ra.365 rbp))
         (tmp.23 (tmp.189 tmp.366 tmp.22 ra.365 rbp))
         (tmp.366 (rbp ra.365 tmp.22 tmp.23))
         (tmp.189 (tmp.23 tmp.22 ra.365 rbp)))))
      (begin
        (set! ra.365 r15)
        (set! c.123 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (set! tmp.366 (bitwise-and tmp.23 7))
        (set! tmp.189 tmp.366)
        (if (eq? tmp.189 0)
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 14)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.23)
            (set! rsi tmp.22)
            (set! rdi 6)
            (set! r15 ra.365)
            (jump L.jp.43 rbp r15 rdx rsi rdi)))))
    (define L.<.59.27
      ((new-frames ())
       (locals (tmp.368 c.122 tmp.196 ra.367 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.367 rbp)
         (rsi rdx ra.367 rbp)
         (rdx tmp.24 ra.367 rbp)
         (tmp.25 tmp.24 ra.367 rbp)
         (tmp.368 tmp.25 tmp.24 ra.367 rbp)
         (tmp.196 tmp.25 tmp.24 ra.367 rbp)
         ((tmp.25 tmp.24 ra.367 rbp)
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.24 ra.367 rdx rbp)
           (ra.367 rsi rdx rbp)
           (ra.367 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.122 r15 rdi rsi tmp.24 ra.367 rbp))
         (rbp (tmp.196 tmp.368 tmp.25 tmp.24 c.122 ra.367 r15 rdi rsi rdx))
         (ra.367 (tmp.196 tmp.368 tmp.25 tmp.24 c.122 rbp rdi rsi rdx))
         (tmp.24 (tmp.196 tmp.368 tmp.25 ra.367 rbp rdx))
         (rsi (c.122 r15 rdi ra.367 rdx rbp))
         (rdi (r15 ra.367 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.122 (rsi rdx ra.367 rbp))
         (tmp.25 (tmp.196 tmp.368 tmp.24 ra.367 rbp))
         (tmp.368 (rbp ra.367 tmp.24 tmp.25))
         (tmp.196 (tmp.25 tmp.24 ra.367 rbp)))))
      (begin
        (set! ra.367 r15)
        (set! c.122 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (set! tmp.368 (bitwise-and tmp.25 7))
        (set! tmp.196 tmp.368)
        (if (eq? tmp.196 0)
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 14)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.25)
            (set! rsi tmp.24)
            (set! rdi 6)
            (set! r15 ra.367)
            (jump L.jp.48 rbp r15 rdx rsi rdi)))))
    (define L.<=.60.26
      ((new-frames ())
       (locals (tmp.370 c.121 tmp.203 ra.369 tmp.26 tmp.27))
       (undead-out
        ((rdi rsi rdx ra.369 rbp)
         (rsi rdx ra.369 rbp)
         (rdx tmp.26 ra.369 rbp)
         (tmp.27 tmp.26 ra.369 rbp)
         (tmp.370 tmp.27 tmp.26 ra.369 rbp)
         (tmp.203 tmp.27 tmp.26 ra.369 rbp)
         ((tmp.27 tmp.26 ra.369 rbp)
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.26 ra.369 rdx rbp)
           (ra.369 rsi rdx rbp)
           (ra.369 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.121 r15 rdi rsi tmp.26 ra.369 rbp))
         (rbp (tmp.203 tmp.370 tmp.27 tmp.26 c.121 ra.369 r15 rdi rsi rdx))
         (ra.369 (tmp.203 tmp.370 tmp.27 tmp.26 c.121 rbp rdi rsi rdx))
         (tmp.26 (tmp.203 tmp.370 tmp.27 ra.369 rbp rdx))
         (rsi (c.121 r15 rdi ra.369 rdx rbp))
         (rdi (r15 ra.369 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.121 (rsi rdx ra.369 rbp))
         (tmp.27 (tmp.203 tmp.370 tmp.26 ra.369 rbp))
         (tmp.370 (rbp ra.369 tmp.26 tmp.27))
         (tmp.203 (tmp.27 tmp.26 ra.369 rbp)))))
      (begin
        (set! ra.369 r15)
        (set! c.121 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (set! tmp.370 (bitwise-and tmp.27 7))
        (set! tmp.203 tmp.370)
        (if (eq? tmp.203 0)
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 14)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.27)
            (set! rsi tmp.26)
            (set! rdi 6)
            (set! r15 ra.369)
            (jump L.jp.53 rbp r15 rdx rsi rdi)))))
    (define L.>.61.25
      ((new-frames ())
       (locals (tmp.372 c.120 tmp.210 ra.371 tmp.28 tmp.29))
       (undead-out
        ((rdi rsi rdx ra.371 rbp)
         (rsi rdx ra.371 rbp)
         (rdx tmp.28 ra.371 rbp)
         (tmp.29 tmp.28 ra.371 rbp)
         (tmp.372 tmp.29 tmp.28 ra.371 rbp)
         (tmp.210 tmp.29 tmp.28 ra.371 rbp)
         ((tmp.29 tmp.28 ra.371 rbp)
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.28 ra.371 rdx rbp)
           (ra.371 rsi rdx rbp)
           (ra.371 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.120 r15 rdi rsi tmp.28 ra.371 rbp))
         (rbp (tmp.210 tmp.372 tmp.29 tmp.28 c.120 ra.371 r15 rdi rsi rdx))
         (ra.371 (tmp.210 tmp.372 tmp.29 tmp.28 c.120 rbp rdi rsi rdx))
         (tmp.28 (tmp.210 tmp.372 tmp.29 ra.371 rbp rdx))
         (rsi (c.120 r15 rdi ra.371 rdx rbp))
         (rdi (r15 ra.371 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.120 (rsi rdx ra.371 rbp))
         (tmp.29 (tmp.210 tmp.372 tmp.28 ra.371 rbp))
         (tmp.372 (rbp ra.371 tmp.28 tmp.29))
         (tmp.210 (tmp.29 tmp.28 ra.371 rbp)))))
      (begin
        (set! ra.371 r15)
        (set! c.120 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (set! tmp.372 (bitwise-and tmp.29 7))
        (set! tmp.210 tmp.372)
        (if (eq? tmp.210 0)
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 14)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.29)
            (set! rsi tmp.28)
            (set! rdi 6)
            (set! r15 ra.371)
            (jump L.jp.58 rbp r15 rdx rsi rdi)))))
    (define L.>=.62.24
      ((new-frames ())
       (locals (tmp.374 c.119 tmp.217 ra.373 tmp.30 tmp.31))
       (undead-out
        ((rdi rsi rdx ra.373 rbp)
         (rsi rdx ra.373 rbp)
         (rdx tmp.30 ra.373 rbp)
         (tmp.31 tmp.30 ra.373 rbp)
         (tmp.374 tmp.31 tmp.30 ra.373 rbp)
         (tmp.217 tmp.31 tmp.30 ra.373 rbp)
         ((tmp.31 tmp.30 ra.373 rbp)
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.30 ra.373 rdx rbp)
           (ra.373 rsi rdx rbp)
           (ra.373 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.119 r15 rdi rsi tmp.30 ra.373 rbp))
         (rbp (tmp.217 tmp.374 tmp.31 tmp.30 c.119 ra.373 r15 rdi rsi rdx))
         (ra.373 (tmp.217 tmp.374 tmp.31 tmp.30 c.119 rbp rdi rsi rdx))
         (tmp.30 (tmp.217 tmp.374 tmp.31 ra.373 rbp rdx))
         (rsi (c.119 r15 rdi ra.373 rdx rbp))
         (rdi (r15 ra.373 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.119 (rsi rdx ra.373 rbp))
         (tmp.31 (tmp.217 tmp.374 tmp.30 ra.373 rbp))
         (tmp.374 (rbp ra.373 tmp.30 tmp.31))
         (tmp.217 (tmp.31 tmp.30 ra.373 rbp)))))
      (begin
        (set! ra.373 r15)
        (set! c.119 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (set! tmp.374 (bitwise-and tmp.31 7))
        (set! tmp.217 tmp.374)
        (if (eq? tmp.217 0)
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 14)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.31)
            (set! rsi tmp.30)
            (set! rdi 6)
            (set! r15 ra.373)
            (jump L.jp.63 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.63.23
      ((new-frames ())
       (locals (tmp.376 c.118 tmp.220 ra.375 make-init-vector.1 tmp.32))
       (undead-out
        ((rdi rsi ra.375 rbp)
         (rsi c.118 ra.375 rbp)
         (c.118 tmp.32 ra.375 rbp)
         (tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.376 tmp.32 make-init-vector.1 ra.375 rbp)
         (tmp.220 tmp.32 make-init-vector.1 ra.375 rbp)
         ((tmp.32 make-init-vector.1 ra.375 rbp)
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.375 rdx rbp)
           (ra.375 rsi rdx rbp)
           (ra.375 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.375 rbp))
         (rbp
          (tmp.220
           tmp.376
           make-init-vector.1
           tmp.32
           c.118
           ra.375
           r15
           rdi
           rsi
           rdx))
         (ra.375
          (tmp.220 tmp.376 make-init-vector.1 tmp.32 c.118 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.220 tmp.376 rbp ra.375 tmp.32 rdx))
         (rsi (c.118 r15 rdi ra.375 rdx rbp))
         (rdi (r15 ra.375 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.118 (tmp.32 rsi ra.375 rbp))
         (tmp.32 (tmp.220 tmp.376 make-init-vector.1 c.118 ra.375 rbp))
         (tmp.376 (rbp ra.375 make-init-vector.1 tmp.32))
         (tmp.220 (tmp.32 make-init-vector.1 ra.375 rbp)))))
      (begin
        (set! ra.375 r15)
        (set! c.118 rdi)
        (set! tmp.32 rsi)
        (set! make-init-vector.1 (mref c.118 14))
        (set! tmp.376 (bitwise-and tmp.32 7))
        (set! tmp.220 tmp.376)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.32)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.375)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.64.22
      ((new-frames ())
       (locals (tmp.378 c.117 tmp.223 ra.377 tmp.33))
       (undead-out
        ((rdi rsi ra.377 rbp)
         (rsi ra.377 rbp)
         (tmp.33 ra.377 rbp)
         (tmp.378 tmp.33 ra.377 rbp)
         (tmp.223 tmp.33 ra.377 rbp)
         ((tmp.33 ra.377 rbp)
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.377 rsi rbp)
           (ra.377 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.117 r15 rdi ra.377 rbp))
         (rbp (tmp.223 tmp.378 tmp.33 c.117 ra.377 r15 rdi rsi))
         (ra.377 (tmp.223 tmp.378 tmp.33 c.117 rbp rdi rsi))
         (rdi (r15 ra.377 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.117 (rsi ra.377 rbp))
         (tmp.33 (tmp.223 tmp.378 ra.377 rbp))
         (tmp.378 (rbp ra.377 tmp.33))
         (tmp.223 (tmp.33 ra.377 rbp)))))
      (begin
        (set! ra.377 r15)
        (set! c.117 rdi)
        (set! tmp.33 rsi)
        (set! tmp.378 (bitwise-and tmp.33 7))
        (set! tmp.223 tmp.378)
        (if (eq? tmp.223 3)
          (begin
            (set! rsi tmp.33)
            (set! rdi 14)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.33)
            (set! rdi 6)
            (set! r15 ra.377)
            (jump L.jp.67 rbp r15 rsi rdi)))))
    (define L.vector-set!.65.21
      ((new-frames ())
       (locals
        (tmp.380
         c.116
         tmp.229
         ra.379
         tmp.34
         unsafe-vector-set!.2
         tmp.36
         tmp.35))
       (undead-out
        ((rdi rsi rdx rcx ra.379 rbp)
         (rsi rdx rcx c.116 ra.379 rbp)
         (rdx rcx c.116 tmp.34 ra.379 rbp)
         (rcx c.116 tmp.35 tmp.34 ra.379 rbp)
         (c.116 tmp.35 tmp.36 tmp.34 ra.379 rbp)
         (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.380 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         (tmp.229 tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
         ((tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 r8 rbp)
           (unsafe-vector-set!.2 tmp.34 ra.379 rcx r8 rbp)
           (tmp.34 ra.379 rdx rcx r8 rbp)
           (ra.379 rsi rdx rcx r8 rbp)
           (ra.379 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp))
         (rbp
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           ra.379
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.379
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           tmp.34
           c.116
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.34
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           tmp.35
           c.116
           ra.379
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.229 tmp.380 rbp ra.379 tmp.34 tmp.36 tmp.35 rcx r8))
         (tmp.36
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           c.116
           tmp.35
           tmp.34
           ra.379
           rbp
           r8))
         (rcx
          (tmp.35
           c.116
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.34
           ra.379
           r8
           rbp))
         (rdx (c.116 r15 rdi rsi tmp.34 ra.379 rcx r8 rbp))
         (rsi (c.116 r15 rdi ra.379 rdx rcx r8 rbp))
         (rdi (r15 ra.379 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.116 (tmp.36 tmp.35 tmp.34 rsi rdx rcx ra.379 rbp))
         (tmp.35
          (tmp.229
           tmp.380
           unsafe-vector-set!.2
           tmp.36
           rcx
           c.116
           tmp.34
           ra.379
           rbp))
         (tmp.380 (rbp ra.379 tmp.34 unsafe-vector-set!.2 tmp.36 tmp.35))
         (tmp.229 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.34 ra.379 rbp)))))
      (begin
        (set! ra.379 r15)
        (set! c.116 rdi)
        (set! tmp.34 rsi)
        (set! tmp.35 rdx)
        (set! tmp.36 rcx)
        (set! unsafe-vector-set!.2 (mref c.116 14))
        (set! tmp.380 (bitwise-and tmp.35 7))
        (set! tmp.229 tmp.380)
        (if (eq? tmp.229 0)
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 14)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.35)
            (set! rcx tmp.36)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.34)
            (set! rdi 6)
            (set! r15 ra.379)
            (jump L.jp.71 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.66.20
      ((new-frames ())
       (locals
        (tmp.382 c.115 tmp.235 ra.381 tmp.37 unsafe-vector-ref.3 tmp.38))
       (undead-out
        ((rdi rsi rdx ra.381 rbp)
         (rsi rdx c.115 ra.381 rbp)
         (rdx c.115 tmp.37 ra.381 rbp)
         (c.115 tmp.38 tmp.37 ra.381 rbp)
         (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.382 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         (tmp.235 tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
         ((tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.37 ra.381 rcx rbp)
           (tmp.37 ra.381 rdx rcx rbp)
           (ra.381 rsi rdx rcx rbp)
           (ra.381 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.37 ra.381 rbp))
         (rbp
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           ra.381
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.381
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           tmp.37
           c.115
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.37
          (tmp.235
           tmp.382
           unsafe-vector-ref.3
           tmp.38
           c.115
           ra.381
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.235 tmp.382 rbp ra.381 tmp.37 tmp.38 rcx))
         (rdx (c.115 r15 rdi rsi tmp.37 ra.381 rcx rbp))
         (rsi (c.115 r15 rdi ra.381 rdx rcx rbp))
         (rdi (r15 ra.381 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.115 (tmp.38 tmp.37 rsi rdx ra.381 rbp))
         (tmp.38 (tmp.235 tmp.382 unsafe-vector-ref.3 c.115 tmp.37 ra.381 rbp))
         (tmp.382 (rbp ra.381 tmp.37 unsafe-vector-ref.3 tmp.38))
         (tmp.235 (tmp.38 unsafe-vector-ref.3 tmp.37 ra.381 rbp)))))
      (begin
        (set! ra.381 r15)
        (set! c.115 rdi)
        (set! tmp.37 rsi)
        (set! tmp.38 rdx)
        (set! unsafe-vector-ref.3 (mref c.115 14))
        (set! tmp.382 (bitwise-and tmp.38 7))
        (set! tmp.235 tmp.382)
        (if (eq? tmp.235 0)
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 14)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.38)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.37)
            (set! rdi 6)
            (set! r15 ra.381)
            (jump L.jp.75 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.67.19
      ((new-frames ())
       (locals (tmp.384 c.114 tmp.238 ra.383 tmp.39))
       (undead-out
        ((rdi rsi ra.383 rbp)
         (rsi ra.383 rbp)
         (tmp.39 ra.383 rbp)
         (tmp.384 tmp.39 ra.383 rbp)
         (tmp.238 tmp.39 ra.383 rbp)
         ((tmp.39 ra.383 rbp)
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.383 rsi rbp)
           (ra.383 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.114 r15 rdi ra.383 rbp))
         (rbp (tmp.238 tmp.384 tmp.39 c.114 ra.383 r15 rdi rsi))
         (ra.383 (tmp.238 tmp.384 tmp.39 c.114 rbp rdi rsi))
         (rdi (r15 ra.383 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.114 (rsi ra.383 rbp))
         (tmp.39 (tmp.238 tmp.384 ra.383 rbp))
         (tmp.384 (rbp ra.383 tmp.39))
         (tmp.238 (tmp.39 ra.383 rbp)))))
      (begin
        (set! ra.383 r15)
        (set! c.114 rdi)
        (set! tmp.39 rsi)
        (set! tmp.384 (bitwise-and tmp.39 7))
        (set! tmp.238 tmp.384)
        (if (eq? tmp.238 1)
          (begin
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.383)
            (jump L.jp.77 rbp r15 rsi rdi)))))
    (define L.cdr.68.18
      ((new-frames ())
       (locals (tmp.386 c.113 tmp.241 ra.385 tmp.40))
       (undead-out
        ((rdi rsi ra.385 rbp)
         (rsi ra.385 rbp)
         (tmp.40 ra.385 rbp)
         (tmp.386 tmp.40 ra.385 rbp)
         (tmp.241 tmp.40 ra.385 rbp)
         ((tmp.40 ra.385 rbp)
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.385 rsi rbp)
           (ra.385 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.113 r15 rdi ra.385 rbp))
         (rbp (tmp.241 tmp.386 tmp.40 c.113 ra.385 r15 rdi rsi))
         (ra.385 (tmp.241 tmp.386 tmp.40 c.113 rbp rdi rsi))
         (rdi (r15 ra.385 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.113 (rsi ra.385 rbp))
         (tmp.40 (tmp.241 tmp.386 ra.385 rbp))
         (tmp.386 (rbp ra.385 tmp.40))
         (tmp.241 (tmp.40 ra.385 rbp)))))
      (begin
        (set! ra.385 r15)
        (set! c.113 rdi)
        (set! tmp.40 rsi)
        (set! tmp.386 (bitwise-and tmp.40 7))
        (set! tmp.241 tmp.386)
        (if (eq? tmp.241 1)
          (begin
            (set! rsi tmp.40)
            (set! rdi 14)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.40)
            (set! rdi 6)
            (set! r15 ra.385)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.procedure-arity.69.17
      ((new-frames ())
       (locals (tmp.388 c.112 tmp.244 ra.387 tmp.41))
       (undead-out
        ((rdi rsi ra.387 rbp)
         (rsi ra.387 rbp)
         (tmp.41 ra.387 rbp)
         (tmp.388 tmp.41 ra.387 rbp)
         (tmp.244 tmp.41 ra.387 rbp)
         ((tmp.41 ra.387 rbp)
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.387 rsi rbp)
           (ra.387 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.112 r15 rdi ra.387 rbp))
         (rbp (tmp.244 tmp.388 tmp.41 c.112 ra.387 r15 rdi rsi))
         (ra.387 (tmp.244 tmp.388 tmp.41 c.112 rbp rdi rsi))
         (rdi (r15 ra.387 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.112 (rsi ra.387 rbp))
         (tmp.41 (tmp.244 tmp.388 ra.387 rbp))
         (tmp.388 (rbp ra.387 tmp.41))
         (tmp.244 (tmp.41 ra.387 rbp)))))
      (begin
        (set! ra.387 r15)
        (set! c.112 rdi)
        (set! tmp.41 rsi)
        (set! tmp.388 (bitwise-and tmp.41 7))
        (set! tmp.244 tmp.388)
        (if (eq? tmp.244 2)
          (begin
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.387)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.fixnum?.70.16
      ((new-frames ())
       (locals (tmp.390 tmp.42 c.111 ra.389 tmp.246))
       (undead-out
        ((rdi rsi ra.389 rbp)
         (rsi ra.389 rbp)
         (tmp.42 ra.389 rbp)
         (tmp.390 ra.389 rbp)
         (tmp.246 ra.389 rbp)
         ((ra.389 rbp)
          ((ra.389 rax rbp) (rax rbp))
          ((ra.389 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.389 rbp))
         (rbp (tmp.246 tmp.390 tmp.42 c.111 ra.389 rax))
         (ra.389 (tmp.246 tmp.390 tmp.42 c.111 rdi rsi rbp rax))
         (rsi (c.111 ra.389))
         (rdi (ra.389))
         (c.111 (rsi ra.389 rbp))
         (tmp.42 (ra.389 rbp))
         (tmp.390 (rbp ra.389))
         (tmp.246 (ra.389 rbp)))))
      (begin
        (set! ra.389 r15)
        (set! c.111 rdi)
        (set! tmp.42 rsi)
        (set! tmp.390 (bitwise-and tmp.42 7))
        (set! tmp.246 tmp.390)
        (if (eq? tmp.246 0)
          (begin (set! rax 14) (jump ra.389 rbp rax))
          (begin (set! rax 6) (jump ra.389 rbp rax)))))
    (define L.boolean?.71.15
      ((new-frames ())
       (locals (tmp.392 tmp.43 c.110 ra.391 tmp.248))
       (undead-out
        ((rdi rsi ra.391 rbp)
         (rsi ra.391 rbp)
         (tmp.43 ra.391 rbp)
         (tmp.392 ra.391 rbp)
         (tmp.248 ra.391 rbp)
         ((ra.391 rbp)
          ((ra.391 rax rbp) (rax rbp))
          ((ra.391 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.391 rbp))
         (rbp (tmp.248 tmp.392 tmp.43 c.110 ra.391 rax))
         (ra.391 (tmp.248 tmp.392 tmp.43 c.110 rdi rsi rbp rax))
         (rsi (c.110 ra.391))
         (rdi (ra.391))
         (c.110 (rsi ra.391 rbp))
         (tmp.43 (ra.391 rbp))
         (tmp.392 (rbp ra.391))
         (tmp.248 (ra.391 rbp)))))
      (begin
        (set! ra.391 r15)
        (set! c.110 rdi)
        (set! tmp.43 rsi)
        (set! tmp.392 (bitwise-and tmp.43 247))
        (set! tmp.248 tmp.392)
        (if (eq? tmp.248 6)
          (begin (set! rax 14) (jump ra.391 rbp rax))
          (begin (set! rax 6) (jump ra.391 rbp rax)))))
    (define L.empty?.72.14
      ((new-frames ())
       (locals (tmp.394 tmp.44 c.109 ra.393 tmp.250))
       (undead-out
        ((rdi rsi ra.393 rbp)
         (rsi ra.393 rbp)
         (tmp.44 ra.393 rbp)
         (tmp.394 ra.393 rbp)
         (tmp.250 ra.393 rbp)
         ((ra.393 rbp)
          ((ra.393 rax rbp) (rax rbp))
          ((ra.393 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.393 rbp))
         (rbp (tmp.250 tmp.394 tmp.44 c.109 ra.393 rax))
         (ra.393 (tmp.250 tmp.394 tmp.44 c.109 rdi rsi rbp rax))
         (rsi (c.109 ra.393))
         (rdi (ra.393))
         (c.109 (rsi ra.393 rbp))
         (tmp.44 (ra.393 rbp))
         (tmp.394 (rbp ra.393))
         (tmp.250 (ra.393 rbp)))))
      (begin
        (set! ra.393 r15)
        (set! c.109 rdi)
        (set! tmp.44 rsi)
        (set! tmp.394 (bitwise-and tmp.44 255))
        (set! tmp.250 tmp.394)
        (if (eq? tmp.250 22)
          (begin (set! rax 14) (jump ra.393 rbp rax))
          (begin (set! rax 6) (jump ra.393 rbp rax)))))
    (define L.void?.73.13
      ((new-frames ())
       (locals (tmp.396 tmp.45 c.108 ra.395 tmp.252))
       (undead-out
        ((rdi rsi ra.395 rbp)
         (rsi ra.395 rbp)
         (tmp.45 ra.395 rbp)
         (tmp.396 ra.395 rbp)
         (tmp.252 ra.395 rbp)
         ((ra.395 rbp)
          ((ra.395 rax rbp) (rax rbp))
          ((ra.395 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.395 rbp))
         (rbp (tmp.252 tmp.396 tmp.45 c.108 ra.395 rax))
         (ra.395 (tmp.252 tmp.396 tmp.45 c.108 rdi rsi rbp rax))
         (rsi (c.108 ra.395))
         (rdi (ra.395))
         (c.108 (rsi ra.395 rbp))
         (tmp.45 (ra.395 rbp))
         (tmp.396 (rbp ra.395))
         (tmp.252 (ra.395 rbp)))))
      (begin
        (set! ra.395 r15)
        (set! c.108 rdi)
        (set! tmp.45 rsi)
        (set! tmp.396 (bitwise-and tmp.45 255))
        (set! tmp.252 tmp.396)
        (if (eq? tmp.252 30)
          (begin (set! rax 14) (jump ra.395 rbp rax))
          (begin (set! rax 6) (jump ra.395 rbp rax)))))
    (define L.ascii-char?.74.12
      ((new-frames ())
       (locals (tmp.398 tmp.46 c.107 ra.397 tmp.254))
       (undead-out
        ((rdi rsi ra.397 rbp)
         (rsi ra.397 rbp)
         (tmp.46 ra.397 rbp)
         (tmp.398 ra.397 rbp)
         (tmp.254 ra.397 rbp)
         ((ra.397 rbp)
          ((ra.397 rax rbp) (rax rbp))
          ((ra.397 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.397 rbp))
         (rbp (tmp.254 tmp.398 tmp.46 c.107 ra.397 rax))
         (ra.397 (tmp.254 tmp.398 tmp.46 c.107 rdi rsi rbp rax))
         (rsi (c.107 ra.397))
         (rdi (ra.397))
         (c.107 (rsi ra.397 rbp))
         (tmp.46 (ra.397 rbp))
         (tmp.398 (rbp ra.397))
         (tmp.254 (ra.397 rbp)))))
      (begin
        (set! ra.397 r15)
        (set! c.107 rdi)
        (set! tmp.46 rsi)
        (set! tmp.398 (bitwise-and tmp.46 255))
        (set! tmp.254 tmp.398)
        (if (eq? tmp.254 46)
          (begin (set! rax 14) (jump ra.397 rbp rax))
          (begin (set! rax 6) (jump ra.397 rbp rax)))))
    (define L.error?.75.11
      ((new-frames ())
       (locals (tmp.400 tmp.47 c.106 ra.399 tmp.256))
       (undead-out
        ((rdi rsi ra.399 rbp)
         (rsi ra.399 rbp)
         (tmp.47 ra.399 rbp)
         (tmp.400 ra.399 rbp)
         (tmp.256 ra.399 rbp)
         ((ra.399 rbp)
          ((ra.399 rax rbp) (rax rbp))
          ((ra.399 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.399 rbp))
         (rbp (tmp.256 tmp.400 tmp.47 c.106 ra.399 rax))
         (ra.399 (tmp.256 tmp.400 tmp.47 c.106 rdi rsi rbp rax))
         (rsi (c.106 ra.399))
         (rdi (ra.399))
         (c.106 (rsi ra.399 rbp))
         (tmp.47 (ra.399 rbp))
         (tmp.400 (rbp ra.399))
         (tmp.256 (ra.399 rbp)))))
      (begin
        (set! ra.399 r15)
        (set! c.106 rdi)
        (set! tmp.47 rsi)
        (set! tmp.400 (bitwise-and tmp.47 255))
        (set! tmp.256 tmp.400)
        (if (eq? tmp.256 62)
          (begin (set! rax 14) (jump ra.399 rbp rax))
          (begin (set! rax 6) (jump ra.399 rbp rax)))))
    (define L.pair?.76.10
      ((new-frames ())
       (locals (tmp.402 tmp.48 c.105 ra.401 tmp.258))
       (undead-out
        ((rdi rsi ra.401 rbp)
         (rsi ra.401 rbp)
         (tmp.48 ra.401 rbp)
         (tmp.402 ra.401 rbp)
         (tmp.258 ra.401 rbp)
         ((ra.401 rbp)
          ((ra.401 rax rbp) (rax rbp))
          ((ra.401 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.401 rbp))
         (rbp (tmp.258 tmp.402 tmp.48 c.105 ra.401 rax))
         (ra.401 (tmp.258 tmp.402 tmp.48 c.105 rdi rsi rbp rax))
         (rsi (c.105 ra.401))
         (rdi (ra.401))
         (c.105 (rsi ra.401 rbp))
         (tmp.48 (ra.401 rbp))
         (tmp.402 (rbp ra.401))
         (tmp.258 (ra.401 rbp)))))
      (begin
        (set! ra.401 r15)
        (set! c.105 rdi)
        (set! tmp.48 rsi)
        (set! tmp.402 (bitwise-and tmp.48 7))
        (set! tmp.258 tmp.402)
        (if (eq? tmp.258 1)
          (begin (set! rax 14) (jump ra.401 rbp rax))
          (begin (set! rax 6) (jump ra.401 rbp rax)))))
    (define L.procedure?.77.9
      ((new-frames ())
       (locals (tmp.404 tmp.49 c.104 ra.403 tmp.260))
       (undead-out
        ((rdi rsi ra.403 rbp)
         (rsi ra.403 rbp)
         (tmp.49 ra.403 rbp)
         (tmp.404 ra.403 rbp)
         (tmp.260 ra.403 rbp)
         ((ra.403 rbp)
          ((ra.403 rax rbp) (rax rbp))
          ((ra.403 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.403 rbp))
         (rbp (tmp.260 tmp.404 tmp.49 c.104 ra.403 rax))
         (ra.403 (tmp.260 tmp.404 tmp.49 c.104 rdi rsi rbp rax))
         (rsi (c.104 ra.403))
         (rdi (ra.403))
         (c.104 (rsi ra.403 rbp))
         (tmp.49 (ra.403 rbp))
         (tmp.404 (rbp ra.403))
         (tmp.260 (ra.403 rbp)))))
      (begin
        (set! ra.403 r15)
        (set! c.104 rdi)
        (set! tmp.49 rsi)
        (set! tmp.404 (bitwise-and tmp.49 7))
        (set! tmp.260 tmp.404)
        (if (eq? tmp.260 2)
          (begin (set! rax 14) (jump ra.403 rbp rax))
          (begin (set! rax 6) (jump ra.403 rbp rax)))))
    (define L.vector?.78.8
      ((new-frames ())
       (locals (tmp.406 tmp.50 c.103 ra.405 tmp.262))
       (undead-out
        ((rdi rsi ra.405 rbp)
         (rsi ra.405 rbp)
         (tmp.50 ra.405 rbp)
         (tmp.406 ra.405 rbp)
         (tmp.262 ra.405 rbp)
         ((ra.405 rbp)
          ((ra.405 rax rbp) (rax rbp))
          ((ra.405 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.405 rbp))
         (rbp (tmp.262 tmp.406 tmp.50 c.103 ra.405 rax))
         (ra.405 (tmp.262 tmp.406 tmp.50 c.103 rdi rsi rbp rax))
         (rsi (c.103 ra.405))
         (rdi (ra.405))
         (c.103 (rsi ra.405 rbp))
         (tmp.50 (ra.405 rbp))
         (tmp.406 (rbp ra.405))
         (tmp.262 (ra.405 rbp)))))
      (begin
        (set! ra.405 r15)
        (set! c.103 rdi)
        (set! tmp.50 rsi)
        (set! tmp.406 (bitwise-and tmp.50 7))
        (set! tmp.262 tmp.406)
        (if (eq? tmp.262 3)
          (begin (set! rax 14) (jump ra.405 rbp rax))
          (begin (set! rax 6) (jump ra.405 rbp rax)))))
    (define L.not.79.7
      ((new-frames ())
       (locals (c.102 ra.407 tmp.51))
       (undead-out
        ((rdi rsi ra.407 rbp)
         (rsi ra.407 rbp)
         (tmp.51 ra.407 rbp)
         ((ra.407 rbp)
          ((ra.407 rax rbp) (rax rbp))
          ((ra.407 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.407 rbp))
         (rbp (tmp.51 c.102 ra.407 rax))
         (ra.407 (tmp.51 c.102 rdi rsi rbp rax))
         (rsi (c.102 ra.407))
         (rdi (ra.407))
         (c.102 (rsi ra.407 rbp))
         (tmp.51 (ra.407 rbp)))))
      (begin
        (set! ra.407 r15)
        (set! c.102 rdi)
        (set! tmp.51 rsi)
        (if (neq? tmp.51 6)
          (begin (set! rax 6) (jump ra.407 rbp rax))
          (begin (set! rax 14) (jump ra.407 rbp rax)))))
    (define L.cons.80.6
      ((new-frames ())
       (locals (tmp.138 tmp.409 tmp.264 tmp.53 tmp.52 c.101 ra.408))
       (undead-out
        ((rdi rsi rdx r12 ra.408 rbp)
         (rsi rdx r12 ra.408 rbp)
         (rdx r12 ra.408 rbp tmp.52)
         (r12 tmp.53 ra.408 rbp tmp.52)
         (r12 tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.264 tmp.53 ra.408 rbp tmp.52)
         (tmp.409 tmp.53 ra.408 rbp tmp.52)
         (tmp.53 ra.408 rbp tmp.52 tmp.138)
         (rbp ra.408 tmp.53 tmp.138)
         (tmp.138 ra.408 rbp)
         (ra.408 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.408
          (rax
           tmp.138
           tmp.409
           tmp.264
           tmp.53
           tmp.52
           c.101
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.138 tmp.409 r12 tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (r12 (rbp tmp.264 tmp.53 tmp.52 c.101 ra.408))
         (rdx (tmp.52 c.101 ra.408))
         (rsi (c.101 ra.408))
         (rdi (ra.408))
         (c.101 (rsi rdx r12 ra.408 rbp))
         (tmp.52 (tmp.138 tmp.409 tmp.264 tmp.53 rdx r12 ra.408 rbp))
         (tmp.53 (tmp.138 tmp.409 tmp.264 r12 ra.408 rbp tmp.52))
         (tmp.264 (r12 tmp.53 ra.408 rbp tmp.52))
         (tmp.409 (tmp.52 rbp ra.408 tmp.53))
         (tmp.138 (tmp.53 ra.408 rbp tmp.52))
         (rax (ra.408 rbp)))))
      (begin
        (set! ra.408 r15)
        (set! c.101 rdi)
        (set! tmp.52 rsi)
        (set! tmp.53 rdx)
        (set! tmp.264 r12)
        (set! r12 (+ r12 16))
        (set! tmp.409 (+ tmp.264 1))
        (set! tmp.138 tmp.409)
        (mset! tmp.138 -1 tmp.52)
        (mset! tmp.138 7 tmp.53)
        (set! rax tmp.138)
        (jump ra.408 rbp rax)))
    (define L.eq?.81.5
      ((new-frames ())
       (locals (c.100 ra.410 tmp.55 tmp.54))
       (undead-out
        ((rdi rsi rdx ra.410 rbp)
         (rsi rdx ra.410 rbp)
         (rdx tmp.54 ra.410 rbp)
         (tmp.54 tmp.55 ra.410 rbp)
         ((ra.410 rbp)
          ((ra.410 rax rbp) (rax rbp))
          ((ra.410 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.410 rbp))
         (rbp (tmp.55 tmp.54 c.100 ra.410 rax))
         (ra.410 (tmp.55 tmp.54 c.100 rdi rsi rdx rbp rax))
         (rdx (tmp.54 c.100 ra.410))
         (rsi (c.100 ra.410))
         (rdi (ra.410))
         (c.100 (rsi rdx ra.410 rbp))
         (tmp.54 (tmp.55 rdx ra.410 rbp))
         (tmp.55 (tmp.54 ra.410 rbp)))))
      (begin
        (set! ra.410 r15)
        (set! c.100 rdi)
        (set! tmp.54 rsi)
        (set! tmp.55 rdx)
        (if (eq? tmp.54 tmp.55)
          (begin (set! rax 14) (jump ra.410 rbp rax))
          (begin (set! rax 6) (jump ra.410 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (tmp.128
         tmp.83
         tmp.139
         tmp.416
         tmp.269
         tmp.503
         tmp.268
         tmp.415
         tmp.267
         tmp.414
         tmp.413
         tmp.266
         tmp.412
         vector-init-loop.84
         tmp.82
         c.99
         ra.411))
       (undead-out
        ((rdi rsi r12 rbp ra.411)
         (rsi c.99 r12 rbp ra.411)
         (c.99 r12 rbp ra.411 tmp.82)
         (r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.412 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.266 tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.414 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.267 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.415 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.268 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.503 r12 tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.269 rbp ra.411 vector-init-loop.84 tmp.82)
         (tmp.416 rbp ra.411 vector-init-loop.84 tmp.82)
         (rbp ra.411 vector-init-loop.84 tmp.82 tmp.139)
         (tmp.139 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.83 tmp.82 vector-init-loop.84 ra.411 rbp)
         (tmp.82 vector-init-loop.84 ra.411 rcx rbp)
         (tmp.82 vector-init-loop.84 ra.411 rdx rcx rbp)
         (vector-init-loop.84 ra.411 rsi rdx rcx rbp)
         (ra.411 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.411
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           r12
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (r12
          (rbp
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           tmp.82
           c.99
           ra.411))
         (rsi (r15 rdi vector-init-loop.84 rdx rcx rbp c.99 ra.411))
         (rdi (r15 rsi rdx rcx rbp ra.411))
         (c.99 (tmp.82 rsi r12 rbp ra.411))
         (tmp.82
          (rdx
           rcx
           tmp.128
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           vector-init-loop.84
           c.99
           r12
           rbp
           ra.411))
         (vector-init-loop.84
          (rsi
           rdx
           rcx
           tmp.83
           tmp.139
           tmp.416
           tmp.269
           tmp.503
           tmp.268
           tmp.415
           tmp.267
           tmp.414
           tmp.413
           tmp.266
           tmp.412
           tmp.82
           ra.411
           rbp
           r12))
         (tmp.412 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.266 (tmp.413 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.413 (tmp.266 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.414 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.267 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.415 (tmp.82 vector-init-loop.84 ra.411 rbp r12))
         (tmp.268 (r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.503 (tmp.269 r12 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.269 (r12 tmp.503 rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.416 (tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.139 (rbp ra.411 vector-init-loop.84 tmp.82))
         (tmp.83 (tmp.128 tmp.82 vector-init-loop.84 ra.411 rbp))
         (tmp.128 (tmp.83 tmp.82 ra.411 rbp))
         (rcx (r15 rdi rsi rdx tmp.82 vector-init-loop.84 ra.411 rbp))
         (rdx (r15 rdi rsi tmp.82 vector-init-loop.84 ra.411 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp)))))
      (begin
        (set! ra.411 r15)
        (set! c.99 rdi)
        (set! tmp.82 rsi)
        (set! vector-init-loop.84 (mref c.99 14))
        (set! tmp.412 (arithmetic-shift-right tmp.82 3))
        (set! tmp.266 tmp.412)
        (set! tmp.413 1)
        (set! tmp.414 (+ tmp.413 tmp.266))
        (set! tmp.267 tmp.414)
        (set! tmp.415 (* tmp.267 8))
        (set! tmp.268 tmp.415)
        (set! tmp.503 tmp.268)
        (set! tmp.269 r12)
        (set! r12 (+ r12 tmp.503))
        (set! tmp.416 (+ tmp.269 3))
        (set! tmp.139 tmp.416)
        (mset! tmp.139 -3 tmp.82)
        (set! tmp.83 tmp.139)
        (set! tmp.128 vector-init-loop.84)
        (set! rcx tmp.83)
        (set! rdx 0)
        (set! rsi tmp.82)
        (set! rdi vector-init-loop.84)
        (set! r15 ra.411)
        (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.84.3
      ((new-frames ())
       (locals (c.98 ra.417 i.87 len.85 vector-init-loop.84 vec.86))
       (undead-out
        ((rdi rsi rdx rcx ra.417 rbp)
         (rsi rdx rcx c.98 ra.417 rbp)
         (rdx rcx c.98 len.85 ra.417 rbp)
         (rcx c.98 len.85 i.87 ra.417 rbp)
         (c.98 vec.86 len.85 i.87 ra.417 rbp)
         (vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
         ((vec.86 vector-init-loop.84 len.85 i.87 ra.417 rbp)
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.84 len.85 i.87 ra.417 r8 rbp)
           (len.85 i.87 ra.417 rcx r8 rbp)
           (i.87 ra.417 rdx rcx r8 rbp)
           (ra.417 rsi rdx rcx r8 rbp)
           (ra.417 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8 (r15 rdi rsi rdx rcx vector-init-loop.84 len.85 i.87 ra.417 rbp))
         (rbp
          (vector-init-loop.84
           vec.86
           i.87
           len.85
           c.98
           ra.417
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.417
          (vector-init-loop.84 vec.86 i.87 len.85 c.98 rbp rdi rsi rdx rcx r8))
         (i.87 (vector-init-loop.84 vec.86 c.98 len.85 ra.417 rbp rdx rcx r8))
         (len.85 (vector-init-loop.84 vec.86 i.87 rdx c.98 ra.417 rbp rcx r8))
         (vector-init-loop.84 (rbp ra.417 i.87 len.85 vec.86 r8))
         (rcx (c.98 r15 rdi rsi rdx len.85 i.87 ra.417 r8 rbp))
         (rdx (len.85 c.98 r15 rdi rsi i.87 ra.417 rcx r8 rbp))
         (rsi (c.98 r15 rdi ra.417 rdx rcx r8 rbp))
         (rdi (r15 ra.417 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.98 (vec.86 i.87 len.85 rsi rdx rcx ra.417 rbp))
         (vec.86 (vector-init-loop.84 c.98 len.85 i.87 ra.417 rbp)))))
      (begin
        (set! ra.417 r15)
        (set! c.98 rdi)
        (set! len.85 rsi)
        (set! i.87 rdx)
        (set! vec.86 rcx)
        (set! vector-init-loop.84 (mref c.98 14))
        (if (eq? len.85 i.87)
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 14)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.86)
            (set! rcx vector-init-loop.84)
            (set! rdx len.85)
            (set! rsi i.87)
            (set! rdi 6)
            (set! r15 ra.417)
            (jump L.jp.94 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (c.97 tmp.283 ra.418 tmp.94 tmp.95 tmp.93))
       (undead-out
        ((rdi rsi rdx rcx ra.418 rbp)
         (rsi rdx rcx ra.418 rbp)
         (rdx rcx tmp.93 ra.418 rbp)
         (rcx tmp.93 tmp.94 ra.418 rbp)
         (tmp.93 tmp.95 tmp.94 ra.418 rbp)
         (tmp.283 tmp.93 tmp.95 tmp.94 ra.418 rbp)
         ((tmp.93 tmp.95 tmp.94 ra.418 rbp)
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.95 tmp.94 ra.418 rcx rbp)
           (tmp.94 ra.418 rdx rcx rbp)
           (ra.418 rsi rdx rcx rbp)
           (ra.418 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.93 c.97 r15 rdi rsi rdx tmp.95 tmp.94 ra.418 rbp))
         (rbp (tmp.283 tmp.95 tmp.94 tmp.93 c.97 ra.418 r15 rdi rsi rdx rcx))
         (ra.418 (tmp.283 tmp.95 tmp.94 tmp.93 c.97 rbp rdi rsi rdx rcx))
         (tmp.94 (tmp.283 tmp.95 tmp.93 ra.418 rbp rdx rcx))
         (tmp.95 (tmp.283 tmp.93 tmp.94 ra.418 rbp rcx))
         (rdx (tmp.93 c.97 r15 rdi rsi tmp.94 ra.418 rcx rbp))
         (rsi (c.97 r15 rdi ra.418 rdx rcx rbp))
         (rdi (r15 ra.418 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.97 (rsi rdx rcx ra.418 rbp))
         (tmp.93 (tmp.283 tmp.95 tmp.94 rdx rcx ra.418 rbp))
         (tmp.283 (rbp ra.418 tmp.94 tmp.95 tmp.93)))))
      (begin
        (set! ra.418 r15)
        (set! c.97 rdi)
        (set! tmp.93 rsi)
        (set! tmp.94 rdx)
        (set! tmp.95 rcx)
        (set! tmp.283 (mref tmp.93 -3))
        (if (< tmp.94 tmp.283)
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.93)
            (set! rdx tmp.95)
            (set! rsi tmp.94)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.98 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (c.96 tmp.291 ra.419 tmp.91 tmp.90))
       (undead-out
        ((rdi rsi rdx ra.419 rbp)
         (rsi rdx ra.419 rbp)
         (rdx tmp.90 ra.419 rbp)
         (tmp.90 tmp.91 ra.419 rbp)
         (tmp.291 tmp.90 tmp.91 ra.419 rbp)
         ((tmp.90 tmp.91 ra.419 rbp)
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.91 ra.419 rdx rbp)
           (ra.419 rsi rdx rbp)
           (ra.419 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.90 c.96 r15 rdi rsi tmp.91 ra.419 rbp))
         (rbp (tmp.291 tmp.91 tmp.90 c.96 ra.419 r15 rdi rsi rdx))
         (ra.419 (tmp.291 tmp.91 tmp.90 c.96 rbp rdi rsi rdx))
         (tmp.91 (tmp.291 tmp.90 ra.419 rbp rdx))
         (rsi (c.96 r15 rdi ra.419 rdx rbp))
         (rdi (r15 ra.419 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.96 (rsi rdx ra.419 rbp))
         (tmp.90 (tmp.291 tmp.91 rdx ra.419 rbp))
         (tmp.291 (rbp ra.419 tmp.91 tmp.90)))))
      (begin
        (set! ra.419 r15)
        (set! c.96 rdi)
        (set! tmp.90 rsi)
        (set! tmp.91 rdx)
        (set! tmp.291 (mref tmp.90 -3))
        (if (< tmp.91 tmp.291)
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 14)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.90)
            (set! rsi tmp.91)
            (set! rdi 6)
            (set! r15 ra.419)
            (jump L.jp.102 rbp r15 rdx rsi rdi)))))
    (define L.jp.102
      ((new-frames ())
       (locals (tmp.285 ra.420 tmp.91 tmp.90))
       (undead-out
        ((rdi rsi rdx ra.420 rbp)
         (rsi rdx tmp.285 ra.420 rbp)
         (rdx tmp.285 tmp.91 ra.420 rbp)
         (tmp.285 tmp.90 tmp.91 ra.420 rbp)
         ((tmp.90 tmp.91 ra.420 rbp)
          ((tmp.90 tmp.91 ra.420 rbp)
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.91 ra.420 rdx rbp)
            (ra.420 rsi rdx rbp)
            (ra.420 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.420 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.420 rbp))
         (rbp (tmp.90 tmp.91 tmp.285 ra.420 r15 rdi rsi rdx rax))
         (ra.420 (tmp.90 tmp.91 tmp.285 rbp rdi rsi rdx rax))
         (rdx (tmp.285 r15 rdi rsi tmp.91 ra.420 rbp))
         (tmp.91 (tmp.90 tmp.285 ra.420 rbp rdx))
         (rsi (tmp.285 r15 rdi ra.420 rdx rbp))
         (rdi (r15 ra.420 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.285 (tmp.90 tmp.91 rsi rdx ra.420 rbp))
         (tmp.90 (tmp.285 tmp.91 ra.420 rbp)))))
      (begin
        (set! ra.420 r15)
        (set! tmp.285 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.285 6)
          (if (>= tmp.91 0)
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 14)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.90)
              (set! rsi tmp.91)
              (set! rdi 6)
              (set! r15 ra.420)
              (jump L.jp.101 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.420 rbp rax)))))
    (define L.jp.101
      ((new-frames ())
       (locals
        (ra.421
         tmp.287
         tmp.90
         tmp.290
         tmp.424
         tmp.289
         tmp.423
         tmp.288
         tmp.422
         tmp.91))
       (undead-out
        ((rdi rsi rdx ra.421 rbp)
         (rsi rdx tmp.287 ra.421 rbp)
         (rdx tmp.287 tmp.91 ra.421 rbp)
         (tmp.287 tmp.91 tmp.90 ra.421 rbp)
         ((tmp.91 tmp.90 ra.421 rbp)
          ((tmp.422 tmp.90 ra.421 rbp)
           (tmp.288 tmp.90 ra.421 rbp)
           (tmp.423 tmp.90 ra.421 rbp)
           (tmp.289 tmp.90 ra.421 rbp)
           (tmp.424 tmp.90 ra.421 rbp)
           (tmp.290 tmp.90 ra.421 rbp)
           (ra.421 rax rbp)
           (rax rbp))
          ((ra.421 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.421 rbp))
         (rbp
          (tmp.90
           tmp.91
           tmp.287
           ra.421
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (ra.421
          (tmp.90
           tmp.91
           tmp.287
           rdi
           rsi
           rdx
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422
           rax))
         (tmp.422 (rbp ra.421 tmp.90))
         (tmp.90
          (tmp.287
           tmp.91
           ra.421
           rbp
           tmp.290
           tmp.424
           tmp.289
           tmp.423
           tmp.288
           tmp.422))
         (tmp.288 (tmp.90 ra.421 rbp))
         (tmp.423 (rbp ra.421 tmp.90))
         (tmp.289 (tmp.90 ra.421 rbp))
         (tmp.424 (rbp ra.421 tmp.90))
         (tmp.290 (tmp.90 ra.421 rbp))
         (rdx (tmp.91 tmp.287 ra.421))
         (rsi (tmp.287 ra.421))
         (rdi (ra.421))
         (tmp.287 (tmp.90 tmp.91 rsi rdx ra.421 rbp))
         (tmp.91 (tmp.90 rdx tmp.287 ra.421 rbp)))))
      (begin
        (set! ra.421 r15)
        (set! tmp.287 rdi)
        (set! tmp.91 rsi)
        (set! tmp.90 rdx)
        (if (neq? tmp.287 6)
          (begin
            (set! tmp.422 (arithmetic-shift-right tmp.91 3))
            (set! tmp.288 tmp.422)
            (set! tmp.423 (* tmp.288 8))
            (set! tmp.289 tmp.423)
            (set! tmp.424 (+ tmp.289 5))
            (set! tmp.290 tmp.424)
            (set! rax (mref tmp.90 tmp.290))
            (jump ra.421 rbp rax))
          (begin (set! rax 2622) (jump ra.421 rbp rax)))))
    (define L.jp.98
      ((new-frames ())
       (locals (tmp.277 ra.425 tmp.94 tmp.93 tmp.95))
       (undead-out
        ((rdi rsi rdx rcx ra.425 rbp)
         (rsi rdx rcx tmp.277 ra.425 rbp)
         (rdx rcx tmp.277 tmp.94 ra.425 rbp)
         (rcx tmp.277 tmp.95 tmp.94 ra.425 rbp)
         (tmp.277 tmp.95 tmp.93 tmp.94 ra.425 rbp)
         ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
          ((tmp.95 tmp.93 tmp.94 ra.425 rbp)
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.93 tmp.94 ra.425 rcx rbp)
            (tmp.94 ra.425 rdx rcx rbp)
            (ra.425 rsi rdx rcx rbp)
            (ra.425 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.425 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.425 rbp))
         (rbp (tmp.93 tmp.95 tmp.94 tmp.277 ra.425 r15 rdi rsi rdx rcx rax))
         (ra.425 (tmp.93 tmp.95 tmp.94 tmp.277 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.95 tmp.277 r15 rdi rsi rdx tmp.93 tmp.94 ra.425 rbp))
         (tmp.94 (tmp.93 tmp.95 tmp.277 ra.425 rbp rdx rcx))
         (tmp.93 (tmp.277 tmp.95 tmp.94 ra.425 rbp rcx))
         (rdx (tmp.277 r15 rdi rsi tmp.94 ra.425 rcx rbp))
         (rsi (tmp.277 r15 rdi ra.425 rdx rcx rbp))
         (rdi (r15 ra.425 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.277 (tmp.93 tmp.95 tmp.94 rsi rdx rcx ra.425 rbp))
         (tmp.95 (tmp.93 rcx tmp.277 tmp.94 ra.425 rbp)))))
      (begin
        (set! ra.425 r15)
        (set! tmp.277 rdi)
        (set! tmp.94 rsi)
        (set! tmp.95 rdx)
        (set! tmp.93 rcx)
        (if (neq? tmp.277 6)
          (if (>= tmp.94 0)
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 14)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.95)
              (set! rdx tmp.93)
              (set! rsi tmp.94)
              (set! rdi 6)
              (set! r15 ra.425)
              (jump L.jp.97 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.425 rbp rax)))))
    (define L.jp.97
      ((new-frames ())
       (locals
        (ra.426
         tmp.279
         tmp.93
         tmp.95
         tmp.282
         tmp.429
         tmp.281
         tmp.428
         tmp.280
         tmp.427
         tmp.94))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.426)
         (rsi rdx rcx tmp.279 rbp ra.426)
         (rdx rcx tmp.279 tmp.94 rbp ra.426)
         (rcx tmp.279 tmp.94 rbp ra.426 tmp.93)
         (tmp.279 tmp.94 rbp ra.426 tmp.95 tmp.93)
         ((tmp.94 rbp ra.426 tmp.95 tmp.93)
          ((tmp.427 rbp ra.426 tmp.95 tmp.93)
           (tmp.280 rbp ra.426 tmp.95 tmp.93)
           (tmp.428 rbp ra.426 tmp.95 tmp.93)
           (tmp.281 rbp ra.426 tmp.95 tmp.93)
           (tmp.429 rbp ra.426 tmp.95 tmp.93)
           (rbp ra.426 tmp.95 tmp.282 tmp.93)
           (ra.426 rbp)
           (ra.426 rax rbp)
           (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (ra.426
          (tmp.95
           tmp.93
           tmp.94
           tmp.279
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427
           rax))
         (tmp.427 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.95
          (tmp.279
           tmp.94
           rbp
           ra.426
           tmp.93
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.93
          (tmp.95
           rcx
           tmp.279
           tmp.94
           rbp
           ra.426
           tmp.282
           tmp.429
           tmp.281
           tmp.428
           tmp.280
           tmp.427))
         (tmp.280 (rbp ra.426 tmp.95 tmp.93))
         (tmp.428 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.281 (rbp ra.426 tmp.95 tmp.93))
         (tmp.429 (tmp.93 tmp.95 ra.426 rbp))
         (tmp.282 (rbp ra.426 tmp.95 tmp.93))
         (rcx (tmp.93 tmp.94 tmp.279 ra.426))
         (rdx (tmp.94 tmp.279 ra.426))
         (rsi (tmp.279 ra.426))
         (rdi (ra.426))
         (tmp.279 (tmp.95 tmp.93 tmp.94 rsi rdx rcx rbp ra.426))
         (tmp.94 (tmp.95 tmp.93 rdx rcx tmp.279 rbp ra.426)))))
      (begin
        (set! ra.426 r15)
        (set! tmp.279 rdi)
        (set! tmp.94 rsi)
        (set! tmp.93 rdx)
        (set! tmp.95 rcx)
        (if (neq? tmp.279 6)
          (begin
            (set! tmp.427 (arithmetic-shift-right tmp.94 3))
            (set! tmp.280 tmp.427)
            (set! tmp.428 (* tmp.280 8))
            (set! tmp.281 tmp.428)
            (set! tmp.429 (+ tmp.281 5))
            (set! tmp.282 tmp.429)
            (mset! tmp.93 tmp.282 tmp.95)
            (set! rax 30)
            (jump ra.426 rbp rax))
          (begin (set! rax 2366) (jump ra.426 rbp rax)))))
    (define L.jp.94
      ((new-frames ())
       (locals
        (tmp.271
         i.87
         tmp.431
         tmp.272
         tmp.432
         tmp.273
         tmp.433
         tmp.274
         vector-init-loop.84
         tmp.127
         tmp.434
         tmp.275
         len.85
         ra.430
         vec.86))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.430 rbp)
         (rsi rdx rcx r8 tmp.271 ra.430 rbp)
         (rdx rcx r8 tmp.271 i.87 ra.430 rbp)
         (rcx r8 tmp.271 i.87 len.85 ra.430 rbp)
         (r8 tmp.271 i.87 len.85 vector-init-loop.84 ra.430 rbp)
         (tmp.271 i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
         ((i.87 len.85 vector-init-loop.84 vec.86 ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((tmp.431 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.272 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.432 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.273 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (tmp.433 rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86)
           (rbp ra.430 vector-init-loop.84 len.85 i.87 tmp.274 vec.86)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (i.87 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.434 vec.86 len.85 vector-init-loop.84 ra.430 rbp)
           (vec.86 tmp.275 len.85 vector-init-loop.84 ra.430 rbp)
           (tmp.275 len.85 vector-init-loop.84 ra.430 rcx rbp)
           (len.85 vector-init-loop.84 ra.430 rdx rcx rbp)
           (vector-init-loop.84 ra.430 rsi rdx rcx rbp)
           (ra.430 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.431 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (rbp
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           ra.430
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (ra.430
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           tmp.271
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vector-init-loop.84
          (vec.86
           r8
           tmp.271
           i.87
           len.85
           ra.430
           rbp
           rsi
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (len.85
          (vec.86
           vector-init-loop.84
           r8
           tmp.271
           i.87
           ra.430
           rbp
           rdx
           rcx
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (i.87
          (vec.86
           vector-init-loop.84
           len.85
           rdx
           rcx
           r8
           tmp.271
           ra.430
           rbp
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (vec.86
          (tmp.271
           i.87
           len.85
           vector-init-loop.84
           ra.430
           rbp
           tmp.275
           tmp.434
           tmp.127
           tmp.274
           tmp.433
           tmp.273
           tmp.432
           tmp.272
           tmp.431))
         (tmp.272 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.432 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.273 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.433 (vec.86 i.87 len.85 vector-init-loop.84 ra.430 rbp))
         (tmp.274 (rbp ra.430 vector-init-loop.84 len.85 i.87 vec.86))
         (tmp.127 (i.87 vec.86 len.85 ra.430 rbp))
         (tmp.434 (rbp ra.430 vector-init-loop.84 len.85 vec.86))
         (tmp.275 (rcx vec.86 len.85 vector-init-loop.84 ra.430 rbp))
         (rcx
          (i.87
           tmp.271
           r15
           rdi
           rsi
           rdx
           tmp.275
           len.85
           vector-init-loop.84
           ra.430
           rbp))
         (rdx
          (i.87 tmp.271 r15 rdi rsi len.85 vector-init-loop.84 ra.430 rcx rbp))
         (rsi (tmp.271 r15 rdi vector-init-loop.84 ra.430 rdx rcx rbp))
         (rdi (r15 ra.430 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.430 rbp))
         (r8 (vector-init-loop.84 len.85 i.87 tmp.271 ra.430))
         (tmp.271
          (vec.86
           vector-init-loop.84
           len.85
           i.87
           rsi
           rdx
           rcx
           r8
           ra.430
           rbp)))))
      (begin
        (set! ra.430 r15)
        (set! tmp.271 rdi)
        (set! i.87 rsi)
        (set! len.85 rdx)
        (set! vector-init-loop.84 rcx)
        (set! vec.86 r8)
        (if (neq? tmp.271 6)
          (begin (set! rax vec.86) (jump ra.430 rbp rax))
          (begin
            (set! tmp.431 (arithmetic-shift-right i.87 3))
            (set! tmp.272 tmp.431)
            (set! tmp.432 (* tmp.272 8))
            (set! tmp.273 tmp.432)
            (set! tmp.433 (+ tmp.273 5))
            (set! tmp.274 tmp.433)
            (mset! vec.86 tmp.274 0)
            (set! tmp.127 vector-init-loop.84)
            (set! tmp.434 (+ i.87 8))
            (set! tmp.275 tmp.434)
            (set! rcx vec.86)
            (set! rdx tmp.275)
            (set! rsi len.85)
            (set! rdi vector-init-loop.84)
            (set! r15 ra.430)
            (jump L.vector-init-loop.84.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.81
      ((new-frames ())
       (locals (ra.435 tmp.243 tmp.41))
       (undead-out
        ((rdi rsi ra.435 rbp)
         (rsi tmp.243 ra.435 rbp)
         (tmp.243 tmp.41 ra.435 rbp)
         ((tmp.41 ra.435 rbp)
          ((ra.435 rax rbp) (rax rbp))
          ((ra.435 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.435 rbp))
         (rbp (tmp.41 tmp.243 ra.435 rax))
         (ra.435 (tmp.41 tmp.243 rdi rsi rbp rax))
         (rsi (tmp.243 ra.435))
         (rdi (ra.435))
         (tmp.243 (tmp.41 rsi ra.435 rbp))
         (tmp.41 (tmp.243 ra.435 rbp)))))
      (begin
        (set! ra.435 r15)
        (set! tmp.243 rdi)
        (set! tmp.41 rsi)
        (if (neq? tmp.243 6)
          (begin (set! rax (mref tmp.41 6)) (jump ra.435 rbp rax))
          (begin (set! rax 3390) (jump ra.435 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (ra.436 tmp.240 tmp.40))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi tmp.240 ra.436 rbp)
         (tmp.240 tmp.40 ra.436 rbp)
         ((tmp.40 ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.40 tmp.240 ra.436 rax))
         (ra.436 (tmp.40 tmp.240 rdi rsi rbp rax))
         (rsi (tmp.240 ra.436))
         (rdi (ra.436))
         (tmp.240 (tmp.40 rsi ra.436 rbp))
         (tmp.40 (tmp.240 ra.436 rbp)))))
      (begin
        (set! ra.436 r15)
        (set! tmp.240 rdi)
        (set! tmp.40 rsi)
        (if (neq? tmp.240 6)
          (begin (set! rax (mref tmp.40 7)) (jump ra.436 rbp rax))
          (begin (set! rax 3134) (jump ra.436 rbp rax)))))
    (define L.jp.77
      ((new-frames ())
       (locals (ra.437 tmp.237 tmp.39))
       (undead-out
        ((rdi rsi ra.437 rbp)
         (rsi tmp.237 ra.437 rbp)
         (tmp.237 tmp.39 ra.437 rbp)
         ((tmp.39 ra.437 rbp)
          ((ra.437 rax rbp) (rax rbp))
          ((ra.437 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.437 rbp))
         (rbp (tmp.39 tmp.237 ra.437 rax))
         (ra.437 (tmp.39 tmp.237 rdi rsi rbp rax))
         (rsi (tmp.237 ra.437))
         (rdi (ra.437))
         (tmp.237 (tmp.39 rsi ra.437 rbp))
         (tmp.39 (tmp.237 ra.437 rbp)))))
      (begin
        (set! ra.437 r15)
        (set! tmp.237 rdi)
        (set! tmp.39 rsi)
        (if (neq? tmp.237 6)
          (begin (set! rax (mref tmp.39 -1)) (jump ra.437 rbp rax))
          (begin (set! rax 2878) (jump ra.437 rbp rax)))))
    (define L.jp.75
      ((new-frames ())
       (locals
        (tmp.231 tmp.439 tmp.234 ra.438 unsafe-vector-ref.3 tmp.38 tmp.37))
       (undead-out
        ((rdi rsi rdx rcx ra.438 rbp)
         (rsi rdx rcx tmp.231 ra.438 rbp)
         (rdx rcx tmp.231 tmp.37 ra.438 rbp)
         (rcx tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp)
         (tmp.231 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
         ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
          ((tmp.439 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           (tmp.234 tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
           ((tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp)
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.38 unsafe-vector-ref.3 ra.438 rcx rbp)
             (unsafe-vector-ref.3 ra.438 rdx rcx rbp)
             (ra.438 rsi rdx rcx rbp)
             (ra.438 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           ra.438
           tmp.234
           tmp.439
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.438
          (tmp.38
           unsafe-vector-ref.3
           tmp.37
           tmp.231
           rbp
           tmp.234
           tmp.439
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.37
           tmp.231
           r15
           rdi
           rsi
           rdx
           tmp.38
           unsafe-vector-ref.3
           ra.438
           rbp))
         (unsafe-vector-ref.3
          (tmp.38 tmp.231 tmp.37 ra.438 rbp tmp.234 tmp.439 rdx rcx))
         (tmp.38
          (tmp.231 tmp.37 unsafe-vector-ref.3 ra.438 rbp tmp.234 tmp.439 rcx))
         (rdx (tmp.37 tmp.231 r15 rdi rsi unsafe-vector-ref.3 ra.438 rcx rbp))
         (rsi (tmp.231 r15 rdi ra.438 rdx rcx rbp))
         (rdi (r15 ra.438 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.439 (rbp ra.438 unsafe-vector-ref.3 tmp.38 tmp.37))
         (tmp.37
          (tmp.38
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.231
           ra.438
           rbp
           tmp.234
           tmp.439))
         (tmp.234 (tmp.37 tmp.38 unsafe-vector-ref.3 ra.438 rbp))
         (tmp.231
          (tmp.38 unsafe-vector-ref.3 tmp.37 rsi rdx rcx ra.438 rbp)))))
      (begin
        (set! ra.438 r15)
        (set! tmp.231 rdi)
        (set! tmp.37 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.38 rcx)
        (if (neq? tmp.231 6)
          (begin
            (set! tmp.439 (bitwise-and tmp.37 7))
            (set! tmp.234 tmp.439)
            (if (eq? tmp.234 3)
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.37)
                (set! rdx tmp.38)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.438)
                (jump L.jp.74 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.438 rbp rax)))))
    (define L.jp.74
      ((new-frames ())
       (locals (tmp.233 ra.440 tmp.37 tmp.38 tmp.129 unsafe-vector-ref.3))
       (undead-out
        ((rdi rsi rdx rcx ra.440 rbp)
         (rsi rdx rcx tmp.233 ra.440 rbp)
         (rdx rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp)
         (rcx tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp)
         (tmp.233 tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
         ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
          ((tmp.38 tmp.37 unsafe-vector-ref.3 ra.440 rbp)
           (tmp.37 unsafe-vector-ref.3 ra.440 rdx rbp)
           (unsafe-vector-ref.3 ra.440 rsi rdx rbp)
           (ra.440 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           ra.440
           r15
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (ra.440
          (tmp.37
           tmp.38
           unsafe-vector-ref.3
           tmp.233
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.129
           rax))
         (tmp.129 (tmp.38 tmp.37 ra.440 rbp))
         (tmp.37 (tmp.233 tmp.38 unsafe-vector-ref.3 ra.440 rbp rdx tmp.129))
         (tmp.38 (tmp.37 rcx tmp.233 unsafe-vector-ref.3 ra.440 rbp tmp.129))
         (rdx (tmp.233 r15 rdi rsi tmp.37 unsafe-vector-ref.3 ra.440 rbp))
         (unsafe-vector-ref.3 (tmp.37 tmp.38 rcx tmp.233 ra.440 rbp rsi rdx))
         (rsi (tmp.233 r15 rdi unsafe-vector-ref.3 ra.440 rdx rbp))
         (rdi (r15 ra.440 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.38 unsafe-vector-ref.3 tmp.233 ra.440))
         (tmp.233
          (tmp.37 tmp.38 unsafe-vector-ref.3 rsi rdx rcx ra.440 rbp)))))
      (begin
        (set! ra.440 r15)
        (set! tmp.233 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.38 rdx)
        (set! tmp.37 rcx)
        (if (neq? tmp.233 6)
          (begin
            (set! tmp.129 unsafe-vector-ref.3)
            (set! rdx tmp.38)
            (set! rsi tmp.37)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.440)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.440 rbp rax)))))
    (define L.jp.71
      ((new-frames ())
       (locals
        (tmp.225
         tmp.442
         tmp.228
         ra.441
         unsafe-vector-set!.2
         tmp.36
         tmp.35
         tmp.34))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.441 rbp)
         (rsi rdx rcx r8 tmp.225 ra.441 rbp)
         (rdx rcx r8 tmp.225 tmp.34 ra.441 rbp)
         (rcx r8 tmp.225 tmp.34 unsafe-vector-set!.2 ra.441 rbp)
         (r8 tmp.225 tmp.34 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         (tmp.225 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
         ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
          ((tmp.442 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           (tmp.228 tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
           ((tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp)
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 r8 rbp)
             (tmp.36 unsafe-vector-set!.2 ra.441 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.441 rdx rcx r8 rbp)
             (ra.441 rsi rdx rcx r8 rbp)
             (ra.441 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.441 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.441 rbp))
         (rbp
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           ra.441
           tmp.228
           tmp.442
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.441
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           tmp.225
           rbp
           tmp.228
           tmp.442
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp))
         (unsafe-vector-set!.2
          (tmp.35 tmp.36 tmp.225 tmp.34 ra.441 rbp tmp.228 tmp.442 rdx rcx r8))
         (tmp.36
          (tmp.35
           tmp.225
           tmp.34
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           rcx
           r8))
         (tmp.35
          (tmp.225
           tmp.34
           tmp.36
           unsafe-vector-set!.2
           ra.441
           rbp
           tmp.228
           tmp.442
           r8))
         (rcx
          (tmp.34
           tmp.225
           r15
           rdi
           rsi
           rdx
           tmp.36
           unsafe-vector-set!.2
           ra.441
           r8
           rbp))
         (rdx
          (tmp.34 tmp.225 r15 rdi rsi unsafe-vector-set!.2 ra.441 rcx r8 rbp))
         (rsi (tmp.225 r15 rdi ra.441 rdx rcx r8 rbp))
         (rdi (r15 ra.441 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.442 (rbp ra.441 unsafe-vector-set!.2 tmp.36 tmp.35 tmp.34))
         (tmp.34
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.225
           ra.441
           rbp
           tmp.228
           tmp.442))
         (tmp.228 (tmp.34 tmp.35 tmp.36 unsafe-vector-set!.2 ra.441 rbp))
         (tmp.225
          (tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.34
           rsi
           rdx
           rcx
           r8
           ra.441
           rbp)))))
      (begin
        (set! ra.441 r15)
        (set! tmp.225 rdi)
        (set! tmp.34 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.36 rcx)
        (set! tmp.35 r8)
        (if (neq? tmp.225 6)
          (begin
            (set! tmp.442 (bitwise-and tmp.34 7))
            (set! tmp.228 tmp.442)
            (if (eq? tmp.228 3)
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.34)
                (set! rcx tmp.35)
                (set! rdx tmp.36)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.441)
                (jump L.jp.70 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.441 rbp rax)))))
    (define L.jp.70
      ((new-frames ())
       (locals
        (tmp.227 ra.443 tmp.34 tmp.35 tmp.36 tmp.130 unsafe-vector-set!.2))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.443 rbp)
         (rsi rdx rcx r8 tmp.227 ra.443 rbp)
         (rdx rcx r8 tmp.227 unsafe-vector-set!.2 ra.443 rbp)
         (rcx r8 tmp.227 tmp.36 unsafe-vector-set!.2 ra.443 rbp)
         (r8 tmp.227 tmp.36 tmp.35 unsafe-vector-set!.2 ra.443 rbp)
         (tmp.227 tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
         ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
          ((tmp.36 tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rbp)
           (tmp.35 tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp)
           (tmp.34 unsafe-vector-set!.2 ra.443 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.443 rsi rdx rcx rbp)
           (ra.443 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.443 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.443 rbp))
         (rbp
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           ra.443
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (ra.443
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           tmp.227
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.130
           rax))
         (tmp.130 (tmp.36 tmp.35 tmp.34 ra.443 rbp))
         (tmp.34
          (tmp.227
           tmp.36
           tmp.35
           unsafe-vector-set!.2
           ra.443
           rbp
           rdx
           rcx
           tmp.130))
         (tmp.35
          (tmp.34
           r8
           tmp.227
           tmp.36
           unsafe-vector-set!.2
           ra.443
           rbp
           rcx
           tmp.130))
         (tmp.36
          (tmp.34
           tmp.35
           rcx
           r8
           tmp.227
           unsafe-vector-set!.2
           ra.443
           rbp
           tmp.130))
         (rcx
          (tmp.36
           tmp.227
           r15
           rdi
           rsi
           rdx
           tmp.35
           tmp.34
           unsafe-vector-set!.2
           ra.443
           rbp))
         (unsafe-vector-set!.2
          (tmp.34 tmp.35 tmp.36 r8 tmp.227 ra.443 rbp rsi rdx rcx))
         (rdx (tmp.227 r15 rdi rsi tmp.34 unsafe-vector-set!.2 ra.443 rcx rbp))
         (rsi (tmp.227 r15 rdi unsafe-vector-set!.2 ra.443 rdx rcx rbp))
         (rdi (r15 ra.443 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.35 tmp.36 unsafe-vector-set!.2 tmp.227 ra.443))
         (tmp.227
          (tmp.34
           tmp.35
           tmp.36
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.443
           rbp)))))
      (begin
        (set! ra.443 r15)
        (set! tmp.227 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.36 rdx)
        (set! tmp.35 rcx)
        (set! tmp.34 r8)
        (if (neq? tmp.227 6)
          (begin
            (set! tmp.130 unsafe-vector-set!.2)
            (set! rcx tmp.36)
            (set! rdx tmp.35)
            (set! rsi tmp.34)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.443)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.443 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (ra.444 tmp.222 tmp.33))
       (undead-out
        ((rdi rsi ra.444 rbp)
         (rsi tmp.222 ra.444 rbp)
         (tmp.222 tmp.33 ra.444 rbp)
         ((tmp.33 ra.444 rbp)
          ((ra.444 rax rbp) (rax rbp))
          ((ra.444 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.444 rbp))
         (rbp (tmp.33 tmp.222 ra.444 rax))
         (ra.444 (tmp.33 tmp.222 rdi rsi rbp rax))
         (rsi (tmp.222 ra.444))
         (rdi (ra.444))
         (tmp.222 (tmp.33 rsi ra.444 rbp))
         (tmp.33 (tmp.222 ra.444 rbp)))))
      (begin
        (set! ra.444 r15)
        (set! tmp.222 rdi)
        (set! tmp.33 rsi)
        (if (neq? tmp.222 6)
          (begin (set! rax (mref tmp.33 -3)) (jump ra.444 rbp rax))
          (begin (set! rax 2110) (jump ra.444 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (tmp.219 ra.445 tmp.32 tmp.131 make-init-vector.1))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx tmp.219 ra.445 rbp)
         (rdx tmp.219 make-init-vector.1 ra.445 rbp)
         (tmp.219 tmp.32 make-init-vector.1 ra.445 rbp)
         ((tmp.32 make-init-vector.1 ra.445 rbp)
          ((tmp.32 make-init-vector.1 ra.445 rbp)
           (make-init-vector.1 ra.445 rsi rbp)
           (ra.445 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp
          (tmp.32 make-init-vector.1 tmp.219 ra.445 r15 rdi rsi tmp.131 rax))
         (ra.445
          (tmp.32 make-init-vector.1 tmp.219 rdx rbp rdi rsi tmp.131 rax))
         (tmp.131 (tmp.32 ra.445 rbp))
         (tmp.32 (tmp.219 make-init-vector.1 ra.445 rbp tmp.131))
         (rsi (tmp.219 r15 rdi make-init-vector.1 ra.445 rbp))
         (make-init-vector.1 (tmp.32 rdx tmp.219 ra.445 rbp rsi))
         (rdi (r15 ra.445 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.219 ra.445))
         (tmp.219 (tmp.32 make-init-vector.1 rsi rdx ra.445 rbp)))))
      (begin
        (set! ra.445 r15)
        (set! tmp.219 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.32 rdx)
        (if (neq? tmp.219 6)
          (begin
            (set! tmp.131 make-init-vector.1)
            (set! rsi tmp.32)
            (set! rdi make-init-vector.1)
            (set! r15 ra.445)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.445 rbp rax)))))
    (define L.jp.63
      ((new-frames ())
       (locals (tmp.212 tmp.447 tmp.216 ra.446 tmp.30 tmp.31))
       (undead-out
        ((rdi rsi rdx ra.446 rbp)
         (rsi rdx tmp.212 ra.446 rbp)
         (rdx tmp.212 tmp.30 ra.446 rbp)
         (tmp.212 tmp.31 tmp.30 ra.446 rbp)
         ((tmp.31 tmp.30 ra.446 rbp)
          ((tmp.447 tmp.31 tmp.30 ra.446 rbp)
           (tmp.216 tmp.31 tmp.30 ra.446 rbp)
           ((tmp.31 tmp.30 ra.446 rbp)
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.30 ra.446 rdx rbp)
             (ra.446 rsi rdx rbp)
             (ra.446 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.446 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.446 rbp))
         (rbp
          (tmp.31 tmp.30 tmp.212 ra.446 tmp.216 tmp.447 r15 rdi rsi rdx rax))
         (ra.446 (tmp.31 tmp.30 tmp.212 rbp tmp.216 tmp.447 rdi rsi rdx rax))
         (rdx (tmp.212 r15 rdi rsi tmp.30 ra.446 rbp))
         (tmp.30 (tmp.31 tmp.212 ra.446 rbp tmp.216 tmp.447 rdx))
         (rsi (tmp.212 r15 rdi ra.446 rdx rbp))
         (rdi (r15 ra.446 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.447 (rbp ra.446 tmp.30 tmp.31))
         (tmp.31 (tmp.212 tmp.30 ra.446 rbp tmp.216 tmp.447))
         (tmp.216 (tmp.31 tmp.30 ra.446 rbp))
         (tmp.212 (tmp.31 tmp.30 rsi rdx ra.446 rbp)))))
      (begin
        (set! ra.446 r15)
        (set! tmp.212 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.447 (bitwise-and tmp.30 7))
            (set! tmp.216 tmp.447)
            (if (eq? tmp.216 0)
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 14)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.31)
                (set! rsi tmp.30)
                (set! rdi 6)
                (set! r15 ra.446)
                (jump L.jp.62 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.446 rbp rax)))))
    (define L.jp.62
      ((new-frames ())
       (locals (ra.448 tmp.214 tmp.31 tmp.30))
       (undead-out
        ((rdi rsi rdx ra.448 rbp)
         (rsi rdx tmp.214 ra.448 rbp)
         (rdx tmp.214 tmp.30 ra.448 rbp)
         (tmp.214 tmp.30 tmp.31 ra.448 rbp)
         ((tmp.30 tmp.31 ra.448 rbp)
          ((ra.448 rbp)
           ((ra.448 rax rbp) (rax rbp))
           ((ra.448 rax rbp) (rax rbp)))
          ((ra.448 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.448 rbp))
         (rbp (tmp.31 tmp.30 tmp.214 ra.448 rax))
         (ra.448 (tmp.31 tmp.30 tmp.214 rdi rsi rdx rbp rax))
         (rdx (tmp.30 tmp.214 ra.448))
         (rsi (tmp.214 ra.448))
         (rdi (ra.448))
         (tmp.214 (tmp.31 tmp.30 rsi rdx ra.448 rbp))
         (tmp.30 (tmp.31 rdx tmp.214 ra.448 rbp))
         (tmp.31 (tmp.214 tmp.30 ra.448 rbp)))))
      (begin
        (set! ra.448 r15)
        (set! tmp.214 rdi)
        (set! tmp.30 rsi)
        (set! tmp.31 rdx)
        (if (neq? tmp.214 6)
          (if (>= tmp.30 tmp.31)
            (begin (set! rax 14) (jump ra.448 rbp rax))
            (begin (set! rax 6) (jump ra.448 rbp rax)))
          (begin (set! rax 1598) (jump ra.448 rbp rax)))))
    (define L.jp.58
      ((new-frames ())
       (locals (tmp.205 tmp.450 tmp.209 ra.449 tmp.28 tmp.29))
       (undead-out
        ((rdi rsi rdx ra.449 rbp)
         (rsi rdx tmp.205 ra.449 rbp)
         (rdx tmp.205 tmp.28 ra.449 rbp)
         (tmp.205 tmp.29 tmp.28 ra.449 rbp)
         ((tmp.29 tmp.28 ra.449 rbp)
          ((tmp.450 tmp.29 tmp.28 ra.449 rbp)
           (tmp.209 tmp.29 tmp.28 ra.449 rbp)
           ((tmp.29 tmp.28 ra.449 rbp)
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.28 ra.449 rdx rbp)
             (ra.449 rsi rdx rbp)
             (ra.449 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.449 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.449 rbp))
         (rbp
          (tmp.29 tmp.28 tmp.205 ra.449 tmp.209 tmp.450 r15 rdi rsi rdx rax))
         (ra.449 (tmp.29 tmp.28 tmp.205 rbp tmp.209 tmp.450 rdi rsi rdx rax))
         (rdx (tmp.205 r15 rdi rsi tmp.28 ra.449 rbp))
         (tmp.28 (tmp.29 tmp.205 ra.449 rbp tmp.209 tmp.450 rdx))
         (rsi (tmp.205 r15 rdi ra.449 rdx rbp))
         (rdi (r15 ra.449 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.450 (rbp ra.449 tmp.28 tmp.29))
         (tmp.29 (tmp.205 tmp.28 ra.449 rbp tmp.209 tmp.450))
         (tmp.209 (tmp.29 tmp.28 ra.449 rbp))
         (tmp.205 (tmp.29 tmp.28 rsi rdx ra.449 rbp)))))
      (begin
        (set! ra.449 r15)
        (set! tmp.205 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.450 (bitwise-and tmp.28 7))
            (set! tmp.209 tmp.450)
            (if (eq? tmp.209 0)
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 14)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.29)
                (set! rsi tmp.28)
                (set! rdi 6)
                (set! r15 ra.449)
                (jump L.jp.57 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.449 rbp rax)))))
    (define L.jp.57
      ((new-frames ())
       (locals (ra.451 tmp.207 tmp.29 tmp.28))
       (undead-out
        ((rdi rsi rdx ra.451 rbp)
         (rsi rdx tmp.207 ra.451 rbp)
         (rdx tmp.207 tmp.28 ra.451 rbp)
         (tmp.207 tmp.28 tmp.29 ra.451 rbp)
         ((tmp.28 tmp.29 ra.451 rbp)
          ((ra.451 rbp)
           ((ra.451 rax rbp) (rax rbp))
           ((ra.451 rax rbp) (rax rbp)))
          ((ra.451 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.451 rbp))
         (rbp (tmp.29 tmp.28 tmp.207 ra.451 rax))
         (ra.451 (tmp.29 tmp.28 tmp.207 rdi rsi rdx rbp rax))
         (rdx (tmp.28 tmp.207 ra.451))
         (rsi (tmp.207 ra.451))
         (rdi (ra.451))
         (tmp.207 (tmp.29 tmp.28 rsi rdx ra.451 rbp))
         (tmp.28 (tmp.29 rdx tmp.207 ra.451 rbp))
         (tmp.29 (tmp.207 tmp.28 ra.451 rbp)))))
      (begin
        (set! ra.451 r15)
        (set! tmp.207 rdi)
        (set! tmp.28 rsi)
        (set! tmp.29 rdx)
        (if (neq? tmp.207 6)
          (if (> tmp.28 tmp.29)
            (begin (set! rax 14) (jump ra.451 rbp rax))
            (begin (set! rax 6) (jump ra.451 rbp rax)))
          (begin (set! rax 1342) (jump ra.451 rbp rax)))))
    (define L.jp.53
      ((new-frames ())
       (locals (tmp.198 tmp.453 tmp.202 ra.452 tmp.26 tmp.27))
       (undead-out
        ((rdi rsi rdx ra.452 rbp)
         (rsi rdx tmp.198 ra.452 rbp)
         (rdx tmp.198 tmp.26 ra.452 rbp)
         (tmp.198 tmp.27 tmp.26 ra.452 rbp)
         ((tmp.27 tmp.26 ra.452 rbp)
          ((tmp.453 tmp.27 tmp.26 ra.452 rbp)
           (tmp.202 tmp.27 tmp.26 ra.452 rbp)
           ((tmp.27 tmp.26 ra.452 rbp)
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.26 ra.452 rdx rbp)
             (ra.452 rsi rdx rbp)
             (ra.452 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.452 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.452 rbp))
         (rbp
          (tmp.27 tmp.26 tmp.198 ra.452 tmp.202 tmp.453 r15 rdi rsi rdx rax))
         (ra.452 (tmp.27 tmp.26 tmp.198 rbp tmp.202 tmp.453 rdi rsi rdx rax))
         (rdx (tmp.198 r15 rdi rsi tmp.26 ra.452 rbp))
         (tmp.26 (tmp.27 tmp.198 ra.452 rbp tmp.202 tmp.453 rdx))
         (rsi (tmp.198 r15 rdi ra.452 rdx rbp))
         (rdi (r15 ra.452 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.453 (rbp ra.452 tmp.26 tmp.27))
         (tmp.27 (tmp.198 tmp.26 ra.452 rbp tmp.202 tmp.453))
         (tmp.202 (tmp.27 tmp.26 ra.452 rbp))
         (tmp.198 (tmp.27 tmp.26 rsi rdx ra.452 rbp)))))
      (begin
        (set! ra.452 r15)
        (set! tmp.198 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.198 6)
          (begin
            (set! tmp.453 (bitwise-and tmp.26 7))
            (set! tmp.202 tmp.453)
            (if (eq? tmp.202 0)
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 14)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.27)
                (set! rsi tmp.26)
                (set! rdi 6)
                (set! r15 ra.452)
                (jump L.jp.52 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.452 rbp rax)))))
    (define L.jp.52
      ((new-frames ())
       (locals (ra.454 tmp.200 tmp.27 tmp.26))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx tmp.200 ra.454 rbp)
         (rdx tmp.200 tmp.26 ra.454 rbp)
         (tmp.200 tmp.26 tmp.27 ra.454 rbp)
         ((tmp.26 tmp.27 ra.454 rbp)
          ((ra.454 rbp)
           ((ra.454 rax rbp) (rax rbp))
           ((ra.454 rax rbp) (rax rbp)))
          ((ra.454 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.454 rbp))
         (rbp (tmp.27 tmp.26 tmp.200 ra.454 rax))
         (ra.454 (tmp.27 tmp.26 tmp.200 rdi rsi rdx rbp rax))
         (rdx (tmp.26 tmp.200 ra.454))
         (rsi (tmp.200 ra.454))
         (rdi (ra.454))
         (tmp.200 (tmp.27 tmp.26 rsi rdx ra.454 rbp))
         (tmp.26 (tmp.27 rdx tmp.200 ra.454 rbp))
         (tmp.27 (tmp.200 tmp.26 ra.454 rbp)))))
      (begin
        (set! ra.454 r15)
        (set! tmp.200 rdi)
        (set! tmp.26 rsi)
        (set! tmp.27 rdx)
        (if (neq? tmp.200 6)
          (if (<= tmp.26 tmp.27)
            (begin (set! rax 14) (jump ra.454 rbp rax))
            (begin (set! rax 6) (jump ra.454 rbp rax)))
          (begin (set! rax 1086) (jump ra.454 rbp rax)))))
    (define L.jp.48
      ((new-frames ())
       (locals (tmp.191 tmp.456 tmp.195 ra.455 tmp.24 tmp.25))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.191 ra.455 rbp)
         (rdx tmp.191 tmp.24 ra.455 rbp)
         (tmp.191 tmp.25 tmp.24 ra.455 rbp)
         ((tmp.25 tmp.24 ra.455 rbp)
          ((tmp.456 tmp.25 tmp.24 ra.455 rbp)
           (tmp.195 tmp.25 tmp.24 ra.455 rbp)
           ((tmp.25 tmp.24 ra.455 rbp)
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.24 ra.455 rdx rbp)
             (ra.455 rsi rdx rbp)
             (ra.455 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp
          (tmp.25 tmp.24 tmp.191 ra.455 tmp.195 tmp.456 r15 rdi rsi rdx rax))
         (ra.455 (tmp.25 tmp.24 tmp.191 rbp tmp.195 tmp.456 rdi rsi rdx rax))
         (rdx (tmp.191 r15 rdi rsi tmp.24 ra.455 rbp))
         (tmp.24 (tmp.25 tmp.191 ra.455 rbp tmp.195 tmp.456 rdx))
         (rsi (tmp.191 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.456 (rbp ra.455 tmp.24 tmp.25))
         (tmp.25 (tmp.191 tmp.24 ra.455 rbp tmp.195 tmp.456))
         (tmp.195 (tmp.25 tmp.24 ra.455 rbp))
         (tmp.191 (tmp.25 tmp.24 rsi rdx ra.455 rbp)))))
      (begin
        (set! ra.455 r15)
        (set! tmp.191 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.191 6)
          (begin
            (set! tmp.456 (bitwise-and tmp.24 7))
            (set! tmp.195 tmp.456)
            (if (eq? tmp.195 0)
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 14)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.25)
                (set! rsi tmp.24)
                (set! rdi 6)
                (set! r15 ra.455)
                (jump L.jp.47 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.455 rbp rax)))))
    (define L.jp.47
      ((new-frames ())
       (locals (ra.457 tmp.193 tmp.25 tmp.24))
       (undead-out
        ((rdi rsi rdx ra.457 rbp)
         (rsi rdx tmp.193 ra.457 rbp)
         (rdx tmp.193 tmp.24 ra.457 rbp)
         (tmp.193 tmp.24 tmp.25 ra.457 rbp)
         ((tmp.24 tmp.25 ra.457 rbp)
          ((ra.457 rbp)
           ((ra.457 rax rbp) (rax rbp))
           ((ra.457 rax rbp) (rax rbp)))
          ((ra.457 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.457 rbp))
         (rbp (tmp.25 tmp.24 tmp.193 ra.457 rax))
         (ra.457 (tmp.25 tmp.24 tmp.193 rdi rsi rdx rbp rax))
         (rdx (tmp.24 tmp.193 ra.457))
         (rsi (tmp.193 ra.457))
         (rdi (ra.457))
         (tmp.193 (tmp.25 tmp.24 rsi rdx ra.457 rbp))
         (tmp.24 (tmp.25 rdx tmp.193 ra.457 rbp))
         (tmp.25 (tmp.193 tmp.24 ra.457 rbp)))))
      (begin
        (set! ra.457 r15)
        (set! tmp.193 rdi)
        (set! tmp.24 rsi)
        (set! tmp.25 rdx)
        (if (neq? tmp.193 6)
          (if (< tmp.24 tmp.25)
            (begin (set! rax 14) (jump ra.457 rbp rax))
            (begin (set! rax 6) (jump ra.457 rbp rax)))
          (begin (set! rax 830) (jump ra.457 rbp rax)))))
    (define L.jp.43
      ((new-frames ())
       (locals (tmp.185 tmp.459 tmp.188 ra.458 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.458 rbp)
         (rsi rdx tmp.185 ra.458 rbp)
         (rdx tmp.185 tmp.22 ra.458 rbp)
         (tmp.185 tmp.23 tmp.22 ra.458 rbp)
         ((tmp.23 tmp.22 ra.458 rbp)
          ((tmp.459 tmp.23 tmp.22 ra.458 rbp)
           (tmp.188 tmp.23 tmp.22 ra.458 rbp)
           ((tmp.23 tmp.22 ra.458 rbp)
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.22 ra.458 rdx rbp)
             (ra.458 rsi rdx rbp)
             (ra.458 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.458 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.458 rbp))
         (rbp
          (tmp.23 tmp.22 tmp.185 ra.458 tmp.188 tmp.459 r15 rdi rsi rdx rax))
         (ra.458 (tmp.23 tmp.22 tmp.185 rbp tmp.188 tmp.459 rdi rsi rdx rax))
         (rdx (tmp.185 r15 rdi rsi tmp.22 ra.458 rbp))
         (tmp.22 (tmp.23 tmp.185 ra.458 rbp tmp.188 tmp.459 rdx))
         (rsi (tmp.185 r15 rdi ra.458 rdx rbp))
         (rdi (r15 ra.458 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.459 (rbp ra.458 tmp.22 tmp.23))
         (tmp.23 (tmp.185 tmp.22 ra.458 rbp tmp.188 tmp.459))
         (tmp.188 (tmp.23 tmp.22 ra.458 rbp))
         (tmp.185 (tmp.23 tmp.22 rsi rdx ra.458 rbp)))))
      (begin
        (set! ra.458 r15)
        (set! tmp.185 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.185 6)
          (begin
            (set! tmp.459 (bitwise-and tmp.22 7))
            (set! tmp.188 tmp.459)
            (if (eq? tmp.188 0)
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 14)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.23)
                (set! rsi tmp.22)
                (set! rdi 6)
                (set! r15 ra.458)
                (jump L.jp.42 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.458 rbp rax)))))
    (define L.jp.42
      ((new-frames ())
       (locals (ra.460 tmp.187 tmp.461 tmp.22 tmp.23))
       (undead-out
        ((rdi rsi rdx ra.460 rbp)
         (rsi rdx tmp.187 ra.460 rbp)
         (rdx tmp.187 tmp.22 ra.460 rbp)
         (tmp.187 tmp.23 tmp.22 ra.460 rbp)
         ((tmp.23 tmp.22 ra.460 rbp)
          ((tmp.461 ra.460 rbp) (ra.460 rax rbp) (rax rbp))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.23 tmp.22 tmp.187 ra.460 tmp.461 rax))
         (ra.460 (tmp.23 tmp.22 tmp.187 rdi rsi rdx rbp tmp.461 rax))
         (tmp.461 (rbp ra.460))
         (rdx (tmp.22 tmp.187 ra.460))
         (rsi (tmp.187 ra.460))
         (rdi (ra.460))
         (tmp.187 (tmp.23 tmp.22 rsi rdx ra.460 rbp))
         (tmp.22 (tmp.23 rdx tmp.187 ra.460 rbp))
         (tmp.23 (tmp.187 tmp.22 ra.460 rbp)))))
      (begin
        (set! ra.460 r15)
        (set! tmp.187 rdi)
        (set! tmp.22 rsi)
        (set! tmp.23 rdx)
        (if (neq? tmp.187 6)
          (begin
            (set! tmp.461 (- tmp.22 tmp.23))
            (set! rax tmp.461)
            (jump ra.460 rbp rax))
          (begin (set! rax 574) (jump ra.460 rbp rax)))))
    (define L.jp.39
      ((new-frames ())
       (locals (tmp.179 tmp.463 tmp.182 ra.462 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.462 rbp)
         (rsi rdx tmp.179 ra.462 rbp)
         (rdx tmp.179 tmp.20 ra.462 rbp)
         (tmp.179 tmp.21 tmp.20 ra.462 rbp)
         ((tmp.21 tmp.20 ra.462 rbp)
          ((tmp.463 tmp.21 tmp.20 ra.462 rbp)
           (tmp.182 tmp.21 tmp.20 ra.462 rbp)
           ((tmp.21 tmp.20 ra.462 rbp)
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.20 ra.462 rdx rbp)
             (ra.462 rsi rdx rbp)
             (ra.462 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.462 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.462 rbp))
         (rbp
          (tmp.21 tmp.20 tmp.179 ra.462 tmp.182 tmp.463 r15 rdi rsi rdx rax))
         (ra.462 (tmp.21 tmp.20 tmp.179 rbp tmp.182 tmp.463 rdi rsi rdx rax))
         (rdx (tmp.179 r15 rdi rsi tmp.20 ra.462 rbp))
         (tmp.20 (tmp.21 tmp.179 ra.462 rbp tmp.182 tmp.463 rdx))
         (rsi (tmp.179 r15 rdi ra.462 rdx rbp))
         (rdi (r15 ra.462 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.463 (rbp ra.462 tmp.20 tmp.21))
         (tmp.21 (tmp.179 tmp.20 ra.462 rbp tmp.182 tmp.463))
         (tmp.182 (tmp.21 tmp.20 ra.462 rbp))
         (tmp.179 (tmp.21 tmp.20 rsi rdx ra.462 rbp)))))
      (begin
        (set! ra.462 r15)
        (set! tmp.179 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.179 6)
          (begin
            (set! tmp.463 (bitwise-and tmp.20 7))
            (set! tmp.182 tmp.463)
            (if (eq? tmp.182 0)
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 14)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.21)
                (set! rsi tmp.20)
                (set! rdi 6)
                (set! r15 ra.462)
                (jump L.jp.38 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.462 rbp rax)))))
    (define L.jp.38
      ((new-frames ())
       (locals (ra.464 tmp.181 tmp.465 tmp.20 tmp.21))
       (undead-out
        ((rdi rsi rdx ra.464 rbp)
         (rsi rdx tmp.181 ra.464 rbp)
         (rdx tmp.181 tmp.20 ra.464 rbp)
         (tmp.181 tmp.21 tmp.20 ra.464 rbp)
         ((tmp.21 tmp.20 ra.464 rbp)
          ((tmp.465 ra.464 rbp) (ra.464 rax rbp) (rax rbp))
          ((ra.464 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.464 rbp))
         (rbp (tmp.21 tmp.20 tmp.181 ra.464 tmp.465 rax))
         (ra.464 (tmp.21 tmp.20 tmp.181 rdi rsi rdx rbp tmp.465 rax))
         (tmp.465 (rbp ra.464))
         (rdx (tmp.20 tmp.181 ra.464))
         (rsi (tmp.181 ra.464))
         (rdi (ra.464))
         (tmp.181 (tmp.21 tmp.20 rsi rdx ra.464 rbp))
         (tmp.20 (tmp.21 rdx tmp.181 ra.464 rbp))
         (tmp.21 (tmp.181 tmp.20 ra.464 rbp)))))
      (begin
        (set! ra.464 r15)
        (set! tmp.181 rdi)
        (set! tmp.20 rsi)
        (set! tmp.21 rdx)
        (if (neq? tmp.181 6)
          (begin
            (set! tmp.465 (+ tmp.20 tmp.21))
            (set! rax tmp.465)
            (jump ra.464 rbp rax))
          (begin (set! rax 318) (jump ra.464 rbp rax)))))
    (define L.jp.35
      ((new-frames ())
       (locals (tmp.172 tmp.467 tmp.176 ra.466 tmp.19 tmp.18))
       (undead-out
        ((rdi rsi rdx ra.466 rbp)
         (rsi rdx tmp.172 ra.466 rbp)
         (rdx tmp.172 tmp.18 ra.466 rbp)
         (tmp.172 tmp.18 tmp.19 ra.466 rbp)
         ((tmp.18 tmp.19 ra.466 rbp)
          ((tmp.467 tmp.18 tmp.19 ra.466 rbp)
           (tmp.176 tmp.18 tmp.19 ra.466 rbp)
           ((tmp.18 tmp.19 ra.466 rbp)
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.19 ra.466 rdx rbp)
             (ra.466 rsi rdx rbp)
             (ra.466 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.466 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.466 rbp))
         (rbp
          (tmp.19 tmp.18 tmp.172 ra.466 tmp.176 tmp.467 r15 rdi rsi rdx rax))
         (ra.466 (tmp.19 tmp.18 tmp.172 rbp tmp.176 tmp.467 rdi rsi rdx rax))
         (rdx (tmp.18 tmp.172 r15 rdi rsi tmp.19 ra.466 rbp))
         (tmp.19 (tmp.172 tmp.18 ra.466 rbp tmp.176 tmp.467 rdx))
         (rsi (tmp.172 r15 rdi ra.466 rdx rbp))
         (rdi (r15 ra.466 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.467 (rbp ra.466 tmp.19 tmp.18))
         (tmp.18 (tmp.19 rdx tmp.172 ra.466 rbp tmp.176 tmp.467))
         (tmp.176 (tmp.18 tmp.19 ra.466 rbp))
         (tmp.172 (tmp.19 tmp.18 rsi rdx ra.466 rbp)))))
      (begin
        (set! ra.466 r15)
        (set! tmp.172 rdi)
        (set! tmp.18 rsi)
        (set! tmp.19 rdx)
        (if (neq? tmp.172 6)
          (begin
            (set! tmp.467 (bitwise-and tmp.18 7))
            (set! tmp.176 tmp.467)
            (if (eq? tmp.176 0)
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 14)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.18)
                (set! rsi tmp.19)
                (set! rdi 6)
                (set! r15 ra.466)
                (jump L.jp.34 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.466 rbp rax)))))
    (define L.jp.34
      ((new-frames ())
       (locals (ra.468 tmp.174 tmp.470 tmp.18 tmp.175 tmp.469 tmp.19))
       (undead-out
        ((rdi rsi rdx ra.468 rbp)
         (rsi rdx tmp.174 ra.468 rbp)
         (rdx tmp.174 tmp.19 ra.468 rbp)
         (tmp.174 tmp.19 tmp.18 ra.468 rbp)
         ((tmp.19 tmp.18 ra.468 rbp)
          ((tmp.469 tmp.18 ra.468 rbp)
           (tmp.175 tmp.18 ra.468 rbp)
           (tmp.470 ra.468 rbp)
           (ra.468 rax rbp)
           (rax rbp))
          ((ra.468 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.468 rbp))
         (rbp (tmp.18 tmp.19 tmp.174 ra.468 tmp.470 tmp.175 tmp.469 rax))
         (ra.468
          (tmp.18 tmp.19 tmp.174 rdi rsi rdx rbp tmp.470 tmp.175 tmp.469 rax))
         (tmp.469 (rbp ra.468 tmp.18))
         (tmp.18 (tmp.174 tmp.19 ra.468 rbp tmp.175 tmp.469))
         (tmp.175 (tmp.18 ra.468 rbp))
         (tmp.470 (rbp ra.468))
         (rdx (tmp.19 tmp.174 ra.468))
         (rsi (tmp.174 ra.468))
         (rdi (ra.468))
         (tmp.174 (tmp.18 tmp.19 rsi rdx ra.468 rbp))
         (tmp.19 (tmp.18 rdx tmp.174 ra.468 rbp)))))
      (begin
        (set! ra.468 r15)
        (set! tmp.174 rdi)
        (set! tmp.19 rsi)
        (set! tmp.18 rdx)
        (if (neq? tmp.174 6)
          (begin
            (set! tmp.469 (arithmetic-shift-right tmp.19 3))
            (set! tmp.175 tmp.469)
            (set! tmp.470 (* tmp.18 tmp.175))
            (set! rax tmp.470)
            (jump ra.468 rbp rax))
          (begin (set! rax 62) (jump ra.468 rbp rax))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.sum.4.31
      (lambda (c.126 a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
        (let ((|+.57| (mref c.126 14)))
          (let ((i.13
                 (let ((tmp.132 |+.57|)) (apply L.+.57.29 |+.57| a.5 b.6))))
            (let ((j.14
                   (let ((tmp.133 |+.57|))
                     (apply L.+.57.29 |+.57| g.11 h.12))))
              (let ((tmp.134 |+.57|)) (apply L.+.57.29 |+.57| i.13 j.14)))))))
    (define L.*.56.30
      (lambda (c.125 tmp.18 tmp.19)
        (if (neq? (if (eq? (bitwise-and tmp.19 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.18 7) 0) 14 6) 6)
            (* tmp.18 (arithmetic-shift-right tmp.19 3))
            62)
          62)))
    (define L.+.57.29
      (lambda (c.124 tmp.20 tmp.21)
        (if (neq? (if (eq? (bitwise-and tmp.21 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.20 7) 0) 14 6) 6)
            (+ tmp.20 tmp.21)
            318)
          318)))
    (define L.-.58.28
      (lambda (c.123 tmp.22 tmp.23)
        (if (neq? (if (eq? (bitwise-and tmp.23 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.22 7) 0) 14 6) 6)
            (- tmp.22 tmp.23)
            574)
          574)))
    (define L.<.59.27
      (lambda (c.122 tmp.24 tmp.25)
        (if (neq? (if (eq? (bitwise-and tmp.25 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.24 7) 0) 14 6) 6)
            (if (< tmp.24 tmp.25) 14 6)
            830)
          830)))
    (define L.<=.60.26
      (lambda (c.121 tmp.26 tmp.27)
        (if (neq? (if (eq? (bitwise-and tmp.27 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.26 7) 0) 14 6) 6)
            (if (<= tmp.26 tmp.27) 14 6)
            1086)
          1086)))
    (define L.>.61.25
      (lambda (c.120 tmp.28 tmp.29)
        (if (neq? (if (eq? (bitwise-and tmp.29 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.28 7) 0) 14 6) 6)
            (if (> tmp.28 tmp.29) 14 6)
            1342)
          1342)))
    (define L.>=.62.24
      (lambda (c.119 tmp.30 tmp.31)
        (if (neq? (if (eq? (bitwise-and tmp.31 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.30 7) 0) 14 6) 6)
            (if (>= tmp.30 tmp.31) 14 6)
            1598)
          1598)))
    (define L.make-vector.63.23
      (lambda (c.118 tmp.32)
        (let ((make-init-vector.1 (mref c.118 14)))
          (if (neq? (if (eq? (bitwise-and tmp.32 7) 0) 14 6) 6)
            (let ((tmp.131 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.32))
            1854))))
    (define L.vector-length.64.22
      (lambda (c.117 tmp.33)
        (if (neq? (if (eq? (bitwise-and tmp.33 7) 3) 14 6) 6)
          (mref tmp.33 -3)
          2110)))
    (define L.vector-set!.65.21
      (lambda (c.116 tmp.34 tmp.35 tmp.36)
        (let ((unsafe-vector-set!.2 (mref c.116 14)))
          (if (neq? (if (eq? (bitwise-and tmp.35 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.34 7) 3) 14 6) 6)
              (let ((tmp.130 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.34
                 tmp.35
                 tmp.36))
              2366)
            2366))))
    (define L.vector-ref.66.20
      (lambda (c.115 tmp.37 tmp.38)
        (let ((unsafe-vector-ref.3 (mref c.115 14)))
          (if (neq? (if (eq? (bitwise-and tmp.38 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.37 7) 3) 14 6) 6)
              (let ((tmp.129 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.37
                 tmp.38))
              2622)
            2622))))
    (define L.car.67.19
      (lambda (c.114 tmp.39)
        (if (neq? (if (eq? (bitwise-and tmp.39 7) 1) 14 6) 6)
          (mref tmp.39 -1)
          2878)))
    (define L.cdr.68.18
      (lambda (c.113 tmp.40)
        (if (neq? (if (eq? (bitwise-and tmp.40 7) 1) 14 6) 6)
          (mref tmp.40 7)
          3134)))
    (define L.procedure-arity.69.17
      (lambda (c.112 tmp.41)
        (if (neq? (if (eq? (bitwise-and tmp.41 7) 2) 14 6) 6)
          (mref tmp.41 6)
          3390)))
    (define L.fixnum?.70.16
      (lambda (c.111 tmp.42) (if (eq? (bitwise-and tmp.42 7) 0) 14 6)))
    (define L.boolean?.71.15
      (lambda (c.110 tmp.43) (if (eq? (bitwise-and tmp.43 247) 6) 14 6)))
    (define L.empty?.72.14
      (lambda (c.109 tmp.44) (if (eq? (bitwise-and tmp.44 255) 22) 14 6)))
    (define L.void?.73.13
      (lambda (c.108 tmp.45) (if (eq? (bitwise-and tmp.45 255) 30) 14 6)))
    (define L.ascii-char?.74.12
      (lambda (c.107 tmp.46) (if (eq? (bitwise-and tmp.46 255) 46) 14 6)))
    (define L.error?.75.11
      (lambda (c.106 tmp.47) (if (eq? (bitwise-and tmp.47 255) 62) 14 6)))
    (define L.pair?.76.10
      (lambda (c.105 tmp.48) (if (eq? (bitwise-and tmp.48 7) 1) 14 6)))
    (define L.procedure?.77.9
      (lambda (c.104 tmp.49) (if (eq? (bitwise-and tmp.49 7) 2) 14 6)))
    (define L.vector?.78.8
      (lambda (c.103 tmp.50) (if (eq? (bitwise-and tmp.50 7) 3) 14 6)))
    (define L.not.79.7 (lambda (c.102 tmp.51) (if (neq? tmp.51 6) 6 14)))
    (define L.cons.80.6
      (lambda (c.101 tmp.52 tmp.53)
        (let ((tmp.138 (+ (alloc 16) 1)))
          (begin (mset! tmp.138 -1 tmp.52) (mset! tmp.138 7 tmp.53) tmp.138))))
    (define L.eq?.81.5
      (lambda (c.100 tmp.54 tmp.55) (if (eq? tmp.54 tmp.55) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.99 tmp.82)
        (let ((vector-init-loop.84 (mref c.99 14)))
          (let ((tmp.83
                 (let ((tmp.139
                        (+
                         (alloc (* (+ 1 (arithmetic-shift-right tmp.82 3)) 8))
                         3)))
                   (begin (mset! tmp.139 -3 tmp.82) tmp.139))))
            (let ((tmp.128 vector-init-loop.84))
              (apply
               L.vector-init-loop.84.3
               vector-init-loop.84
               tmp.82
               0
               tmp.83))))))
    (define L.vector-init-loop.84.3
      (lambda (c.98 len.85 i.87 vec.86)
        (let ((vector-init-loop.84 (mref c.98 14)))
          (if (neq? (if (eq? len.85 i.87) 14 6) 6)
            vec.86
            (begin
              (mset! vec.86 (+ (* (arithmetic-shift-right i.87 3) 8) 5) 0)
              (let ((tmp.127 vector-init-loop.84))
                (apply
                 L.vector-init-loop.84.3
                 vector-init-loop.84
                 len.85
                 (+ i.87 8)
                 vec.86)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.97 tmp.93 tmp.94 tmp.95)
        (if (neq? (if (< tmp.94 (mref tmp.93 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.94 0) 14 6) 6)
            (begin
              (mset!
               tmp.93
               (+ (* (arithmetic-shift-right tmp.94 3) 8) 5)
               tmp.95)
              30)
            2366)
          2366)))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.96 tmp.90 tmp.91)
        (if (neq? (if (< tmp.91 (mref tmp.90 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.91 0) 14 6) 6)
            (mref tmp.90 (+ (* (arithmetic-shift-right tmp.91 3) 8) 5))
            2622)
          2622)))
    (let ((unsafe-vector-ref.3
           (let ((tmp.140 (+ (alloc 16) 2)))
             (begin
               (mset! tmp.140 -2 L.unsafe-vector-ref.3.1)
               (mset! tmp.140 6 16)
               tmp.140))))
      (let ((unsafe-vector-set!.2
             (let ((tmp.141 (+ (alloc 16) 2)))
               (begin
                 (mset! tmp.141 -2 L.unsafe-vector-set!.2.2)
                 (mset! tmp.141 6 24)
                 tmp.141))))
        (let ((vector-init-loop.84
               (let ((tmp.142 (+ (alloc 24) 2)))
                 (begin
                   (mset! tmp.142 -2 L.vector-init-loop.84.3)
                   (mset! tmp.142 6 24)
                   tmp.142))))
          (let ((make-init-vector.1
                 (let ((tmp.143 (+ (alloc 24) 2)))
                   (begin
                     (mset! tmp.143 -2 L.make-init-vector.1.4)
                     (mset! tmp.143 6 8)
                     tmp.143))))
            (let ((eq?.81
                   (let ((tmp.144 (+ (alloc 16) 2)))
                     (begin
                       (mset! tmp.144 -2 L.eq?.81.5)
                       (mset! tmp.144 6 16)
                       tmp.144))))
              (let ((cons.80
                     (let ((tmp.145 (+ (alloc 16) 2)))
                       (begin
                         (mset! tmp.145 -2 L.cons.80.6)
                         (mset! tmp.145 6 16)
                         tmp.145))))
                (let ((not.79
                       (let ((tmp.146 (+ (alloc 16) 2)))
                         (begin
                           (mset! tmp.146 -2 L.not.79.7)
                           (mset! tmp.146 6 8)
                           tmp.146))))
                  (let ((vector?.78
                         (let ((tmp.147 (+ (alloc 16) 2)))
                           (begin
                             (mset! tmp.147 -2 L.vector?.78.8)
                             (mset! tmp.147 6 8)
                             tmp.147))))
                    (let ((procedure?.77
                           (let ((tmp.148 (+ (alloc 16) 2)))
                             (begin
                               (mset! tmp.148 -2 L.procedure?.77.9)
                               (mset! tmp.148 6 8)
                               tmp.148))))
                      (let ((pair?.76
                             (let ((tmp.149 (+ (alloc 16) 2)))
                               (begin
                                 (mset! tmp.149 -2 L.pair?.76.10)
                                 (mset! tmp.149 6 8)
                                 tmp.149))))
                        (let ((error?.75
                               (let ((tmp.150 (+ (alloc 16) 2)))
                                 (begin
                                   (mset! tmp.150 -2 L.error?.75.11)
                                   (mset! tmp.150 6 8)
                                   tmp.150))))
                          (let ((ascii-char?.74
                                 (let ((tmp.151 (+ (alloc 16) 2)))
                                   (begin
                                     (mset! tmp.151 -2 L.ascii-char?.74.12)
                                     (mset! tmp.151 6 8)
                                     tmp.151))))
                            (let ((void?.73
                                   (let ((tmp.152 (+ (alloc 16) 2)))
                                     (begin
                                       (mset! tmp.152 -2 L.void?.73.13)
                                       (mset! tmp.152 6 8)
                                       tmp.152))))
                              (let ((empty?.72
                                     (let ((tmp.153 (+ (alloc 16) 2)))
                                       (begin
                                         (mset! tmp.153 -2 L.empty?.72.14)
                                         (mset! tmp.153 6 8)
                                         tmp.153))))
                                (let ((boolean?.71
                                       (let ((tmp.154 (+ (alloc 16) 2)))
                                         (begin
                                           (mset! tmp.154 -2 L.boolean?.71.15)
                                           (mset! tmp.154 6 8)
                                           tmp.154))))
                                  (let ((fixnum?.70
                                         (let ((tmp.155 (+ (alloc 16) 2)))
                                           (begin
                                             (mset! tmp.155 -2 L.fixnum?.70.16)
                                             (mset! tmp.155 6 8)
                                             tmp.155))))
                                    (let ((procedure-arity.69
                                           (let ((tmp.156 (+ (alloc 16) 2)))
                                             (begin
                                               (mset!
                                                tmp.156
                                                -2
                                                L.procedure-arity.69.17)
                                               (mset! tmp.156 6 8)
                                               tmp.156))))
                                      (let ((cdr.68
                                             (let ((tmp.157 (+ (alloc 16) 2)))
                                               (begin
                                                 (mset! tmp.157 -2 L.cdr.68.18)
                                                 (mset! tmp.157 6 8)
                                                 tmp.157))))
                                        (let ((car.67
                                               (let ((tmp.158
                                                      (+ (alloc 16) 2)))
                                                 (begin
                                                   (mset!
                                                    tmp.158
                                                    -2
                                                    L.car.67.19)
                                                   (mset! tmp.158 6 8)
                                                   tmp.158))))
                                          (let ((vector-ref.66
                                                 (let ((tmp.159
                                                        (+ (alloc 24) 2)))
                                                   (begin
                                                     (mset!
                                                      tmp.159
                                                      -2
                                                      L.vector-ref.66.20)
                                                     (mset! tmp.159 6 16)
                                                     tmp.159))))
                                            (let ((vector-set!.65
                                                   (let ((tmp.160
                                                          (+ (alloc 24) 2)))
                                                     (begin
                                                       (mset!
                                                        tmp.160
                                                        -2
                                                        L.vector-set!.65.21)
                                                       (mset! tmp.160 6 24)
                                                       tmp.160))))
                                              (let ((vector-length.64
                                                     (let ((tmp.161
                                                            (+ (alloc 16) 2)))
                                                       (begin
                                                         (mset!
                                                          tmp.161
                                                          -2
                                                          L.vector-length.64.22)
                                                         (mset! tmp.161 6 8)
                                                         tmp.161))))
                                                (let ((make-vector.63
                                                       (let ((tmp.162
                                                              (+
                                                               (alloc 24)
                                                               2)))
                                                         (begin
                                                           (mset!
                                                            tmp.162
                                                            -2
                                                            L.make-vector.63.23)
                                                           (mset! tmp.162 6 8)
                                                           tmp.162))))
                                                  (let ((>=.62
                                                         (let ((tmp.163
                                                                (+
                                                                 (alloc 16)
                                                                 2)))
                                                           (begin
                                                             (mset!
                                                              tmp.163
                                                              -2
                                                              L.>=.62.24)
                                                             (mset!
                                                              tmp.163
                                                              6
                                                              16)
                                                             tmp.163))))
                                                    (let ((>.61
                                                           (let ((tmp.164
                                                                  (+
                                                                   (alloc 16)
                                                                   2)))
                                                             (begin
                                                               (mset!
                                                                tmp.164
                                                                -2
                                                                L.>.61.25)
                                                               (mset!
                                                                tmp.164
                                                                6
                                                                16)
                                                               tmp.164))))
                                                      (let ((<=.60
                                                             (let ((tmp.165
                                                                    (+
                                                                     (alloc 16)
                                                                     2)))
                                                               (begin
                                                                 (mset!
                                                                  tmp.165
                                                                  -2
                                                                  L.<=.60.26)
                                                                 (mset!
                                                                  tmp.165
                                                                  6
                                                                  16)
                                                                 tmp.165))))
                                                        (let ((<.59
                                                               (let ((tmp.166
                                                                      (+
                                                                       (alloc
                                                                        16)
                                                                       2)))
                                                                 (begin
                                                                   (mset!
                                                                    tmp.166
                                                                    -2
                                                                    L.<.59.27)
                                                                   (mset!
                                                                    tmp.166
                                                                    6
                                                                    16)
                                                                   tmp.166))))
                                                          (let ((|-.58|
                                                                 (let ((tmp.167
                                                                        (+
                                                                         (alloc
                                                                          16)
                                                                         2)))
                                                                   (begin
                                                                     (mset!
                                                                      tmp.167
                                                                      -2
                                                                      L.-.58.28)
                                                                     (mset!
                                                                      tmp.167
                                                                      6
                                                                      16)
                                                                     tmp.167))))
                                                            (let ((|+.57|
                                                                   (let ((tmp.168
                                                                          (+
                                                                           (alloc
                                                                            16)
                                                                           2)))
                                                                     (begin
                                                                       (mset!
                                                                        tmp.168
                                                                        -2
                                                                        L.+.57.29)
                                                                       (mset!
                                                                        tmp.168
                                                                        6
                                                                        16)
                                                                       tmp.168))))
                                                              (let ((*.56
                                                                     (let ((tmp.169
                                                                            (+
                                                                             (alloc
                                                                              16)
                                                                             2)))
                                                                       (begin
                                                                         (mset!
                                                                          tmp.169
                                                                          -2
                                                                          L.*.56.30)
                                                                         (mset!
                                                                          tmp.169
                                                                          6
                                                                          16)
                                                                         tmp.169))))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-init-loop.84
                                                                     14
                                                                     vector-init-loop.84))
                                                                  (begin
                                                                    (mset!
                                                                     make-init-vector.1
                                                                     14
                                                                     vector-init-loop.84))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-ref.66
                                                                     14
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (mset!
                                                                     vector-set!.65
                                                                     14
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     make-vector.63
                                                                     14
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((sum.4
                                                                         (let ((tmp.170
                                                                                (+
                                                                                 (alloc
                                                                                  24)
                                                                                 2)))
                                                                           (begin
                                                                             (mset!
                                                                              tmp.170
                                                                              -2
                                                                              L.sum.4.31)
                                                                             (mset!
                                                                              tmp.170
                                                                              6
                                                                              64)
                                                                             tmp.170))))
                                                                    (begin
                                                                      (begin
                                                                        (mset!
                                                                         sum.4
                                                                         14
                                                                         |+.57|))
                                                                      (let ((x.15
                                                                             80))
                                                                        (if (neq?
                                                                             (let ((tmp.135
                                                                                    eq?.81))
                                                                               (apply
                                                                                L.eq?.81.5
                                                                                eq?.81
                                                                                8
                                                                                16))
                                                                             6)
                                                                          (let ((j.16
                                                                                 (let ((tmp.136
                                                                                        sum.4))
                                                                                   (apply
                                                                                    L.sum.4.31
                                                                                    sum.4
                                                                                    8
                                                                                    16
                                                                                    24
                                                                                    32
                                                                                    40
                                                                                    48
                                                                                    56
                                                                                    64))))
                                                                            j.16)
                                                                          (let ((x.17
                                                                                 40))
                                                                            (let ((tmp.137
                                                                                   sum.4))
                                                                              (apply
                                                                               L.sum.4.31
                                                                               sum.4
                                                                               8
                                                                               16
                                                                               24
                                                                               32
                                                                               40
                                                                               48
                                                                               56
                                                                               x.17)))))))))))))))))))))))))))))))))))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.sum.4.31
      (lambda (c.126 a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
        (let ((|+.57| (unsafe-procedure-ref c.126 0)))
          (let ((i.13
                 (let ((tmp.132 |+.57|)) (apply L.+.57.29 |+.57| a.5 b.6))))
            (let ((j.14
                   (let ((tmp.133 |+.57|))
                     (apply L.+.57.29 |+.57| g.11 h.12))))
              (let ((tmp.134 |+.57|)) (apply L.+.57.29 |+.57| i.13 j.14)))))))
    (define L.*.56.30
      (lambda (c.125 tmp.18 tmp.19)
        (if (fixnum? tmp.19)
          (if (fixnum? tmp.18) (unsafe-fx* tmp.18 tmp.19) (error 0))
          (error 0))))
    (define L.+.57.29
      (lambda (c.124 tmp.20 tmp.21)
        (if (fixnum? tmp.21)
          (if (fixnum? tmp.20) (unsafe-fx+ tmp.20 tmp.21) (error 1))
          (error 1))))
    (define L.-.58.28
      (lambda (c.123 tmp.22 tmp.23)
        (if (fixnum? tmp.23)
          (if (fixnum? tmp.22) (unsafe-fx- tmp.22 tmp.23) (error 2))
          (error 2))))
    (define L.<.59.27
      (lambda (c.122 tmp.24 tmp.25)
        (if (fixnum? tmp.25)
          (if (fixnum? tmp.24) (unsafe-fx< tmp.24 tmp.25) (error 3))
          (error 3))))
    (define L.<=.60.26
      (lambda (c.121 tmp.26 tmp.27)
        (if (fixnum? tmp.27)
          (if (fixnum? tmp.26) (unsafe-fx<= tmp.26 tmp.27) (error 4))
          (error 4))))
    (define L.>.61.25
      (lambda (c.120 tmp.28 tmp.29)
        (if (fixnum? tmp.29)
          (if (fixnum? tmp.28) (unsafe-fx> tmp.28 tmp.29) (error 5))
          (error 5))))
    (define L.>=.62.24
      (lambda (c.119 tmp.30 tmp.31)
        (if (fixnum? tmp.31)
          (if (fixnum? tmp.30) (unsafe-fx>= tmp.30 tmp.31) (error 6))
          (error 6))))
    (define L.make-vector.63.23
      (lambda (c.118 tmp.32)
        (let ((make-init-vector.1 (unsafe-procedure-ref c.118 0)))
          (if (fixnum? tmp.32)
            (let ((tmp.131 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.32))
            (error 7)))))
    (define L.vector-length.64.22
      (lambda (c.117 tmp.33)
        (if (vector? tmp.33) (unsafe-vector-length tmp.33) (error 8))))
    (define L.vector-set!.65.21
      (lambda (c.116 tmp.34 tmp.35 tmp.36)
        (let ((unsafe-vector-set!.2 (unsafe-procedure-ref c.116 0)))
          (if (fixnum? tmp.35)
            (if (vector? tmp.34)
              (let ((tmp.130 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.34
                 tmp.35
                 tmp.36))
              (error 9))
            (error 9)))))
    (define L.vector-ref.66.20
      (lambda (c.115 tmp.37 tmp.38)
        (let ((unsafe-vector-ref.3 (unsafe-procedure-ref c.115 0)))
          (if (fixnum? tmp.38)
            (if (vector? tmp.37)
              (let ((tmp.129 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.37
                 tmp.38))
              (error 10))
            (error 10)))))
    (define L.car.67.19
      (lambda (c.114 tmp.39)
        (if (pair? tmp.39) (unsafe-car tmp.39) (error 11))))
    (define L.cdr.68.18
      (lambda (c.113 tmp.40)
        (if (pair? tmp.40) (unsafe-cdr tmp.40) (error 12))))
    (define L.procedure-arity.69.17
      (lambda (c.112 tmp.41)
        (if (procedure? tmp.41) (unsafe-procedure-arity tmp.41) (error 13))))
    (define L.fixnum?.70.16 (lambda (c.111 tmp.42) (fixnum? tmp.42)))
    (define L.boolean?.71.15 (lambda (c.110 tmp.43) (boolean? tmp.43)))
    (define L.empty?.72.14 (lambda (c.109 tmp.44) (empty? tmp.44)))
    (define L.void?.73.13 (lambda (c.108 tmp.45) (void? tmp.45)))
    (define L.ascii-char?.74.12 (lambda (c.107 tmp.46) (ascii-char? tmp.46)))
    (define L.error?.75.11 (lambda (c.106 tmp.47) (error? tmp.47)))
    (define L.pair?.76.10 (lambda (c.105 tmp.48) (pair? tmp.48)))
    (define L.procedure?.77.9 (lambda (c.104 tmp.49) (procedure? tmp.49)))
    (define L.vector?.78.8 (lambda (c.103 tmp.50) (vector? tmp.50)))
    (define L.not.79.7 (lambda (c.102 tmp.51) (not tmp.51)))
    (define L.cons.80.6 (lambda (c.101 tmp.52 tmp.53) (cons tmp.52 tmp.53)))
    (define L.eq?.81.5 (lambda (c.100 tmp.54 tmp.55) (eq? tmp.54 tmp.55)))
    (define L.make-init-vector.1.4
      (lambda (c.99 tmp.82)
        (let ((vector-init-loop.84 (unsafe-procedure-ref c.99 0)))
          (let ((tmp.83 (unsafe-make-vector tmp.82)))
            (let ((tmp.128 vector-init-loop.84))
              (apply
               L.vector-init-loop.84.3
               vector-init-loop.84
               tmp.82
               0
               tmp.83))))))
    (define L.vector-init-loop.84.3
      (lambda (c.98 len.85 i.87 vec.86)
        (let ((vector-init-loop.84 (unsafe-procedure-ref c.98 0)))
          (if (eq? len.85 i.87)
            vec.86
            (begin
              (unsafe-vector-set! vec.86 i.87 0)
              (let ((tmp.127 vector-init-loop.84))
                (apply
                 L.vector-init-loop.84.3
                 vector-init-loop.84
                 len.85
                 (unsafe-fx+ i.87 1)
                 vec.86)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.97 tmp.93 tmp.94 tmp.95)
        (if (unsafe-fx< tmp.94 (unsafe-vector-length tmp.93))
          (if (unsafe-fx>= tmp.94 0)
            (begin (unsafe-vector-set! tmp.93 tmp.94 tmp.95) (void))
            (error 9))
          (error 9))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.96 tmp.90 tmp.91)
        (if (unsafe-fx< tmp.91 (unsafe-vector-length tmp.90))
          (if (unsafe-fx>= tmp.91 0)
            (unsafe-vector-ref tmp.90 tmp.91)
            (error 10))
          (error 10))))
    (let ((unsafe-vector-ref.3 (make-procedure L.unsafe-vector-ref.3.1 2 0)))
      (let ((unsafe-vector-set!.2
             (make-procedure L.unsafe-vector-set!.2.2 3 0)))
        (let ((vector-init-loop.84
               (make-procedure L.vector-init-loop.84.3 3 1)))
          (let ((make-init-vector.1
                 (make-procedure L.make-init-vector.1.4 1 1)))
            (let ((eq?.81 (make-procedure L.eq?.81.5 2 0)))
              (let ((cons.80 (make-procedure L.cons.80.6 2 0)))
                (let ((not.79 (make-procedure L.not.79.7 1 0)))
                  (let ((vector?.78 (make-procedure L.vector?.78.8 1 0)))
                    (let ((procedure?.77
                           (make-procedure L.procedure?.77.9 1 0)))
                      (let ((pair?.76 (make-procedure L.pair?.76.10 1 0)))
                        (let ((error?.75 (make-procedure L.error?.75.11 1 0)))
                          (let ((ascii-char?.74
                                 (make-procedure L.ascii-char?.74.12 1 0)))
                            (let ((void?.73
                                   (make-procedure L.void?.73.13 1 0)))
                              (let ((empty?.72
                                     (make-procedure L.empty?.72.14 1 0)))
                                (let ((boolean?.71
                                       (make-procedure L.boolean?.71.15 1 0)))
                                  (let ((fixnum?.70
                                         (make-procedure L.fixnum?.70.16 1 0)))
                                    (let ((procedure-arity.69
                                           (make-procedure
                                            L.procedure-arity.69.17
                                            1
                                            0)))
                                      (let ((cdr.68
                                             (make-procedure L.cdr.68.18 1 0)))
                                        (let ((car.67
                                               (make-procedure
                                                L.car.67.19
                                                1
                                                0)))
                                          (let ((vector-ref.66
                                                 (make-procedure
                                                  L.vector-ref.66.20
                                                  2
                                                  1)))
                                            (let ((vector-set!.65
                                                   (make-procedure
                                                    L.vector-set!.65.21
                                                    3
                                                    1)))
                                              (let ((vector-length.64
                                                     (make-procedure
                                                      L.vector-length.64.22
                                                      1
                                                      0)))
                                                (let ((make-vector.63
                                                       (make-procedure
                                                        L.make-vector.63.23
                                                        1
                                                        1)))
                                                  (let ((>=.62
                                                         (make-procedure
                                                          L.>=.62.24
                                                          2
                                                          0)))
                                                    (let ((>.61
                                                           (make-procedure
                                                            L.>.61.25
                                                            2
                                                            0)))
                                                      (let ((<=.60
                                                             (make-procedure
                                                              L.<=.60.26
                                                              2
                                                              0)))
                                                        (let ((<.59
                                                               (make-procedure
                                                                L.<.59.27
                                                                2
                                                                0)))
                                                          (let ((|-.58|
                                                                 (make-procedure
                                                                  L.-.58.28
                                                                  2
                                                                  0)))
                                                            (let ((|+.57|
                                                                   (make-procedure
                                                                    L.+.57.29
                                                                    2
                                                                    0)))
                                                              (let ((*.56
                                                                     (make-procedure
                                                                      L.*.56.30
                                                                      2
                                                                      0)))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-init-loop.84
                                                                     0
                                                                     vector-init-loop.84))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-init-vector.1
                                                                     0
                                                                     vector-init-loop.84))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-ref.66
                                                                     0
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-set!.65
                                                                     0
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-vector.63
                                                                     0
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((sum.4
                                                                         (make-procedure
                                                                          L.sum.4.31
                                                                          8
                                                                          1)))
                                                                    (begin
                                                                      (begin
                                                                        (unsafe-procedure-set!
                                                                         sum.4
                                                                         0
                                                                         |+.57|))
                                                                      (let ((x.15
                                                                             10))
                                                                        (if (let ((tmp.135
                                                                                   eq?.81))
                                                                              (apply
                                                                               L.eq?.81.5
                                                                               eq?.81
                                                                               1
                                                                               2))
                                                                          (let ((j.16
                                                                                 (let ((tmp.136
                                                                                        sum.4))
                                                                                   (apply
                                                                                    L.sum.4.31
                                                                                    sum.4
                                                                                    1
                                                                                    2
                                                                                    3
                                                                                    4
                                                                                    5
                                                                                    6
                                                                                    7
                                                                                    8))))
                                                                            j.16)
                                                                          (let ((x.17
                                                                                 5))
                                                                            (let ((tmp.137
                                                                                   sum.4))
                                                                              (apply
                                                                               L.sum.4.31
                                                                               sum.4
                                                                               1
                                                                               2
                                                                               3
                                                                               4
                                                                               5
                                                                               6
                                                                               7
                                                                               x.17)))))))))))))))))))))))))))))))))))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.sum.4.31
      (lambda (c.126 a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
        (let ((|+.57| (closure-ref c.126 0)))
          (let ((i.13
                 (let ((tmp.132 |+.57|))
                   (unsafe-apply L.+.57.29 |+.57| a.5 b.6))))
            (let ((j.14
                   (let ((tmp.133 |+.57|))
                     (unsafe-apply L.+.57.29 |+.57| g.11 h.12))))
              (let ((tmp.134 |+.57|))
                (unsafe-apply L.+.57.29 |+.57| i.13 j.14)))))))
    (define L.*.56.30
      (lambda (c.125 tmp.18 tmp.19)
        (let ()
          (if (fixnum? tmp.19)
            (if (fixnum? tmp.18) (unsafe-fx* tmp.18 tmp.19) (error 0))
            (error 0)))))
    (define L.+.57.29
      (lambda (c.124 tmp.20 tmp.21)
        (let ()
          (if (fixnum? tmp.21)
            (if (fixnum? tmp.20) (unsafe-fx+ tmp.20 tmp.21) (error 1))
            (error 1)))))
    (define L.-.58.28
      (lambda (c.123 tmp.22 tmp.23)
        (let ()
          (if (fixnum? tmp.23)
            (if (fixnum? tmp.22) (unsafe-fx- tmp.22 tmp.23) (error 2))
            (error 2)))))
    (define L.<.59.27
      (lambda (c.122 tmp.24 tmp.25)
        (let ()
          (if (fixnum? tmp.25)
            (if (fixnum? tmp.24) (unsafe-fx< tmp.24 tmp.25) (error 3))
            (error 3)))))
    (define L.<=.60.26
      (lambda (c.121 tmp.26 tmp.27)
        (let ()
          (if (fixnum? tmp.27)
            (if (fixnum? tmp.26) (unsafe-fx<= tmp.26 tmp.27) (error 4))
            (error 4)))))
    (define L.>.61.25
      (lambda (c.120 tmp.28 tmp.29)
        (let ()
          (if (fixnum? tmp.29)
            (if (fixnum? tmp.28) (unsafe-fx> tmp.28 tmp.29) (error 5))
            (error 5)))))
    (define L.>=.62.24
      (lambda (c.119 tmp.30 tmp.31)
        (let ()
          (if (fixnum? tmp.31)
            (if (fixnum? tmp.30) (unsafe-fx>= tmp.30 tmp.31) (error 6))
            (error 6)))))
    (define L.make-vector.63.23
      (lambda (c.118 tmp.32)
        (let ((make-init-vector.1 (closure-ref c.118 0)))
          (if (fixnum? tmp.32)
            (let ((tmp.131 make-init-vector.1))
              (unsafe-apply L.make-init-vector.1.4 make-init-vector.1 tmp.32))
            (error 7)))))
    (define L.vector-length.64.22
      (lambda (c.117 tmp.33)
        (let ()
          (if (vector? tmp.33) (unsafe-vector-length tmp.33) (error 8)))))
    (define L.vector-set!.65.21
      (lambda (c.116 tmp.34 tmp.35 tmp.36)
        (let ((unsafe-vector-set!.2 (closure-ref c.116 0)))
          (if (fixnum? tmp.35)
            (if (vector? tmp.34)
              (let ((tmp.130 unsafe-vector-set!.2))
                (unsafe-apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.34
                 tmp.35
                 tmp.36))
              (error 9))
            (error 9)))))
    (define L.vector-ref.66.20
      (lambda (c.115 tmp.37 tmp.38)
        (let ((unsafe-vector-ref.3 (closure-ref c.115 0)))
          (if (fixnum? tmp.38)
            (if (vector? tmp.37)
              (let ((tmp.129 unsafe-vector-ref.3))
                (unsafe-apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.37
                 tmp.38))
              (error 10))
            (error 10)))))
    (define L.car.67.19
      (lambda (c.114 tmp.39)
        (let () (if (pair? tmp.39) (unsafe-car tmp.39) (error 11)))))
    (define L.cdr.68.18
      (lambda (c.113 tmp.40)
        (let () (if (pair? tmp.40) (unsafe-cdr tmp.40) (error 12)))))
    (define L.procedure-arity.69.17
      (lambda (c.112 tmp.41)
        (let ()
          (if (procedure? tmp.41)
            (unsafe-procedure-arity tmp.41)
            (error 13)))))
    (define L.fixnum?.70.16 (lambda (c.111 tmp.42) (let () (fixnum? tmp.42))))
    (define L.boolean?.71.15
      (lambda (c.110 tmp.43) (let () (boolean? tmp.43))))
    (define L.empty?.72.14 (lambda (c.109 tmp.44) (let () (empty? tmp.44))))
    (define L.void?.73.13 (lambda (c.108 tmp.45) (let () (void? tmp.45))))
    (define L.ascii-char?.74.12
      (lambda (c.107 tmp.46) (let () (ascii-char? tmp.46))))
    (define L.error?.75.11 (lambda (c.106 tmp.47) (let () (error? tmp.47))))
    (define L.pair?.76.10 (lambda (c.105 tmp.48) (let () (pair? tmp.48))))
    (define L.procedure?.77.9
      (lambda (c.104 tmp.49) (let () (procedure? tmp.49))))
    (define L.vector?.78.8 (lambda (c.103 tmp.50) (let () (vector? tmp.50))))
    (define L.not.79.7 (lambda (c.102 tmp.51) (let () (not tmp.51))))
    (define L.cons.80.6
      (lambda (c.101 tmp.52 tmp.53) (let () (cons tmp.52 tmp.53))))
    (define L.eq?.81.5
      (lambda (c.100 tmp.54 tmp.55) (let () (eq? tmp.54 tmp.55))))
    (define L.make-init-vector.1.4
      (lambda (c.99 tmp.82)
        (let ((vector-init-loop.84 (closure-ref c.99 0)))
          (let ((tmp.83 (unsafe-make-vector tmp.82)))
            (let ((tmp.128 vector-init-loop.84))
              (unsafe-apply
               L.vector-init-loop.84.3
               vector-init-loop.84
               tmp.82
               0
               tmp.83))))))
    (define L.vector-init-loop.84.3
      (lambda (c.98 len.85 i.87 vec.86)
        (let ((vector-init-loop.84 (closure-ref c.98 0)))
          (if (eq? len.85 i.87)
            vec.86
            (begin
              (unsafe-vector-set! vec.86 i.87 0)
              (let ((tmp.127 vector-init-loop.84))
                (unsafe-apply
                 L.vector-init-loop.84.3
                 vector-init-loop.84
                 len.85
                 (unsafe-fx+ i.87 1)
                 vec.86)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.97 tmp.93 tmp.94 tmp.95)
        (let ()
          (if (unsafe-fx< tmp.94 (unsafe-vector-length tmp.93))
            (if (unsafe-fx>= tmp.94 0)
              (begin (unsafe-vector-set! tmp.93 tmp.94 tmp.95) (void))
              (error 9))
            (error 9)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.96 tmp.90 tmp.91)
        (let ()
          (if (unsafe-fx< tmp.91 (unsafe-vector-length tmp.90))
            (if (unsafe-fx>= tmp.91 0)
              (unsafe-vector-ref tmp.90 tmp.91)
              (error 10))
            (error 10)))))
    (cletrec
     ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
      (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
      (vector-init-loop.84
       (make-closure L.vector-init-loop.84.3 3 vector-init-loop.84))
      (make-init-vector.1
       (make-closure L.make-init-vector.1.4 1 vector-init-loop.84))
      (eq?.81 (make-closure L.eq?.81.5 2))
      (cons.80 (make-closure L.cons.80.6 2))
      (not.79 (make-closure L.not.79.7 1))
      (vector?.78 (make-closure L.vector?.78.8 1))
      (procedure?.77 (make-closure L.procedure?.77.9 1))
      (pair?.76 (make-closure L.pair?.76.10 1))
      (error?.75 (make-closure L.error?.75.11 1))
      (ascii-char?.74 (make-closure L.ascii-char?.74.12 1))
      (void?.73 (make-closure L.void?.73.13 1))
      (empty?.72 (make-closure L.empty?.72.14 1))
      (boolean?.71 (make-closure L.boolean?.71.15 1))
      (fixnum?.70 (make-closure L.fixnum?.70.16 1))
      (procedure-arity.69 (make-closure L.procedure-arity.69.17 1))
      (cdr.68 (make-closure L.cdr.68.18 1))
      (car.67 (make-closure L.car.67.19 1))
      (vector-ref.66 (make-closure L.vector-ref.66.20 2 unsafe-vector-ref.3))
      (vector-set!.65
       (make-closure L.vector-set!.65.21 3 unsafe-vector-set!.2))
      (vector-length.64 (make-closure L.vector-length.64.22 1))
      (make-vector.63 (make-closure L.make-vector.63.23 1 make-init-vector.1))
      (>=.62 (make-closure L.>=.62.24 2))
      (>.61 (make-closure L.>.61.25 2))
      (<=.60 (make-closure L.<=.60.26 2))
      (<.59 (make-closure L.<.59.27 2))
      (|-.58| (make-closure L.-.58.28 2))
      (|+.57| (make-closure L.+.57.29 2))
      (*.56 (make-closure L.*.56.30 2)))
     (let ()
       (let ()
         (cletrec
          ((sum.4 (make-closure L.sum.4.31 8 |+.57|)))
          (let ()
            (let ((x.15 10))
              (if (let ((tmp.135 eq?.81)) (unsafe-apply L.eq?.81.5 eq?.81 1 2))
                (let ((j.16
                       (let ((tmp.136 sum.4))
                         (unsafe-apply L.sum.4.31 sum.4 1 2 3 4 5 6 7 8))))
                  j.16)
                (let ((x.17 5))
                  (let ((tmp.137 sum.4))
                    (unsafe-apply
                     L.sum.4.31
                     sum.4
                     1
                     2
                     3
                     4
                     5
                     6
                     7
                     x.17)))))))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.96 tmp.90 tmp.91)
                (let ()
                  (if (unsafe-fx< tmp.91 (unsafe-vector-length tmp.90))
                    (if (unsafe-fx>= tmp.91 0)
                      (unsafe-vector-ref tmp.90 tmp.91)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.97 tmp.93 tmp.94 tmp.95)
                (let ()
                  (if (unsafe-fx< tmp.94 (unsafe-vector-length tmp.93))
                    (if (unsafe-fx>= tmp.94 0)
                      (begin (unsafe-vector-set! tmp.93 tmp.94 tmp.95) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.84.3
              (lambda (c.98 len.85 i.87 vec.86)
                (let ((vector-init-loop.84 (closure-ref c.98 0)))
                  (if (eq? len.85 i.87)
                    vec.86
                    (begin
                      (unsafe-vector-set! vec.86 i.87 0)
                      (let ((tmp.127 vector-init-loop.84))
                        (unsafe-apply
                         L.vector-init-loop.84.3
                         vector-init-loop.84
                         len.85
                         (unsafe-fx+ i.87 1)
                         vec.86)))))))
             (L.make-init-vector.1.4
              (lambda (c.99 tmp.82)
                (let ((vector-init-loop.84 (closure-ref c.99 0)))
                  (let ((tmp.83 (unsafe-make-vector tmp.82)))
                    (let ((tmp.128 vector-init-loop.84))
                      (unsafe-apply
                       L.vector-init-loop.84.3
                       vector-init-loop.84
                       tmp.82
                       0
                       tmp.83))))))
             (L.eq?.81.5
              (lambda (c.100 tmp.54 tmp.55) (let () (eq? tmp.54 tmp.55))))
             (L.cons.80.6
              (lambda (c.101 tmp.52 tmp.53) (let () (cons tmp.52 tmp.53))))
             (L.not.79.7 (lambda (c.102 tmp.51) (let () (not tmp.51))))
             (L.vector?.78.8 (lambda (c.103 tmp.50) (let () (vector? tmp.50))))
             (L.procedure?.77.9
              (lambda (c.104 tmp.49) (let () (procedure? tmp.49))))
             (L.pair?.76.10 (lambda (c.105 tmp.48) (let () (pair? tmp.48))))
             (L.error?.75.11 (lambda (c.106 tmp.47) (let () (error? tmp.47))))
             (L.ascii-char?.74.12
              (lambda (c.107 tmp.46) (let () (ascii-char? tmp.46))))
             (L.void?.73.13 (lambda (c.108 tmp.45) (let () (void? tmp.45))))
             (L.empty?.72.14 (lambda (c.109 tmp.44) (let () (empty? tmp.44))))
             (L.boolean?.71.15
              (lambda (c.110 tmp.43) (let () (boolean? tmp.43))))
             (L.fixnum?.70.16
              (lambda (c.111 tmp.42) (let () (fixnum? tmp.42))))
             (L.procedure-arity.69.17
              (lambda (c.112 tmp.41)
                (let ()
                  (if (procedure? tmp.41)
                    (unsafe-procedure-arity tmp.41)
                    (error 13)))))
             (L.cdr.68.18
              (lambda (c.113 tmp.40)
                (let () (if (pair? tmp.40) (unsafe-cdr tmp.40) (error 12)))))
             (L.car.67.19
              (lambda (c.114 tmp.39)
                (let () (if (pair? tmp.39) (unsafe-car tmp.39) (error 11)))))
             (L.vector-ref.66.20
              (lambda (c.115 tmp.37 tmp.38)
                (let ((unsafe-vector-ref.3 (closure-ref c.115 0)))
                  (if (fixnum? tmp.38)
                    (if (vector? tmp.37)
                      (let ((tmp.129 unsafe-vector-ref.3))
                        (unsafe-apply
                         L.unsafe-vector-ref.3.1
                         unsafe-vector-ref.3
                         tmp.37
                         tmp.38))
                      (error 10))
                    (error 10)))))
             (L.vector-set!.65.21
              (lambda (c.116 tmp.34 tmp.35 tmp.36)
                (let ((unsafe-vector-set!.2 (closure-ref c.116 0)))
                  (if (fixnum? tmp.35)
                    (if (vector? tmp.34)
                      (let ((tmp.130 unsafe-vector-set!.2))
                        (unsafe-apply
                         L.unsafe-vector-set!.2.2
                         unsafe-vector-set!.2
                         tmp.34
                         tmp.35
                         tmp.36))
                      (error 9))
                    (error 9)))))
             (L.vector-length.64.22
              (lambda (c.117 tmp.33)
                (let ()
                  (if (vector? tmp.33)
                    (unsafe-vector-length tmp.33)
                    (error 8)))))
             (L.make-vector.63.23
              (lambda (c.118 tmp.32)
                (let ((make-init-vector.1 (closure-ref c.118 0)))
                  (if (fixnum? tmp.32)
                    (let ((tmp.131 make-init-vector.1))
                      (unsafe-apply
                       L.make-init-vector.1.4
                       make-init-vector.1
                       tmp.32))
                    (error 7)))))
             (L.>=.62.24
              (lambda (c.119 tmp.30 tmp.31)
                (let ()
                  (if (fixnum? tmp.31)
                    (if (fixnum? tmp.30) (unsafe-fx>= tmp.30 tmp.31) (error 6))
                    (error 6)))))
             (L.>.61.25
              (lambda (c.120 tmp.28 tmp.29)
                (let ()
                  (if (fixnum? tmp.29)
                    (if (fixnum? tmp.28) (unsafe-fx> tmp.28 tmp.29) (error 5))
                    (error 5)))))
             (L.<=.60.26
              (lambda (c.121 tmp.26 tmp.27)
                (let ()
                  (if (fixnum? tmp.27)
                    (if (fixnum? tmp.26) (unsafe-fx<= tmp.26 tmp.27) (error 4))
                    (error 4)))))
             (L.<.59.27
              (lambda (c.122 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx< tmp.24 tmp.25) (error 3))
                    (error 3)))))
             (L.-.58.28
              (lambda (c.123 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx- tmp.22 tmp.23) (error 2))
                    (error 2)))))
             (L.+.57.29
              (lambda (c.124 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx+ tmp.20 tmp.21) (error 1))
                    (error 1)))))
             (L.*.56.30
              (lambda (c.125 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx* tmp.18 tmp.19) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.84
         (make-closure L.vector-init-loop.84.3 3 vector-init-loop.84))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.84))
        (eq?.81 (make-closure L.eq?.81.5 2))
        (cons.80 (make-closure L.cons.80.6 2))
        (not.79 (make-closure L.not.79.7 1))
        (vector?.78 (make-closure L.vector?.78.8 1))
        (procedure?.77 (make-closure L.procedure?.77.9 1))
        (pair?.76 (make-closure L.pair?.76.10 1))
        (error?.75 (make-closure L.error?.75.11 1))
        (ascii-char?.74 (make-closure L.ascii-char?.74.12 1))
        (void?.73 (make-closure L.void?.73.13 1))
        (empty?.72 (make-closure L.empty?.72.14 1))
        (boolean?.71 (make-closure L.boolean?.71.15 1))
        (fixnum?.70 (make-closure L.fixnum?.70.16 1))
        (procedure-arity.69 (make-closure L.procedure-arity.69.17 1))
        (cdr.68 (make-closure L.cdr.68.18 1))
        (car.67 (make-closure L.car.67.19 1))
        (vector-ref.66 (make-closure L.vector-ref.66.20 2 unsafe-vector-ref.3))
        (vector-set!.65
         (make-closure L.vector-set!.65.21 3 unsafe-vector-set!.2))
        (vector-length.64 (make-closure L.vector-length.64.22 1))
        (make-vector.63
         (make-closure L.make-vector.63.23 1 make-init-vector.1))
        (>=.62 (make-closure L.>=.62.24 2))
        (>.61 (make-closure L.>.61.25 2))
        (<=.60 (make-closure L.<=.60.26 2))
        (<.59 (make-closure L.<.59.27 2))
        (|-.58| (make-closure L.-.58.28 2))
        (|+.57| (make-closure L.+.57.29 2))
        (*.56 (make-closure L.*.56.30 2)))
       (let ()
         (let ()
           (letrec ((L.sum.4.31
                     (lambda (c.126 a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
                       (let ((|+.57| (closure-ref c.126 0)))
                         (let ((i.13
                                (let ((tmp.132 |+.57|))
                                  (unsafe-apply L.+.57.29 |+.57| a.5 b.6))))
                           (let ((j.14
                                  (let ((tmp.133 |+.57|))
                                    (unsafe-apply
                                     L.+.57.29
                                     |+.57|
                                     g.11
                                     h.12))))
                             (let ((tmp.134 |+.57|))
                               (unsafe-apply L.+.57.29 |+.57| i.13 j.14))))))))
             (cletrec
              ((sum.4 (make-closure L.sum.4.31 8 |+.57|)))
              (let ()
                (let ((x.15 10))
                  (if (let ((tmp.135 eq?.81))
                        (unsafe-apply L.eq?.81.5 eq?.81 1 2))
                    (let ((j.16
                           (let ((tmp.136 sum.4))
                             (unsafe-apply L.sum.4.31 sum.4 1 2 3 4 5 6 7 8))))
                      j.16)
                    (let ((x.17 5))
                      (let ((tmp.137 sum.4))
                        (unsafe-apply
                         L.sum.4.31
                         sum.4
                         1
                         2
                         3
                         4
                         5
                         6
                         7
                         x.17)))))))))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.96 tmp.90 tmp.91)
                (let ()
                  (if (unsafe-fx< tmp.91 (unsafe-vector-length tmp.90))
                    (if (unsafe-fx>= tmp.91 0)
                      (unsafe-vector-ref tmp.90 tmp.91)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.97 tmp.93 tmp.94 tmp.95)
                (let ()
                  (if (unsafe-fx< tmp.94 (unsafe-vector-length tmp.93))
                    (if (unsafe-fx>= tmp.94 0)
                      (begin (unsafe-vector-set! tmp.93 tmp.94 tmp.95) (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.84.3
              (lambda (c.98 len.85 i.87 vec.86)
                (let ((vector-init-loop.84 (closure-ref c.98 0)))
                  (if (eq? len.85 i.87)
                    vec.86
                    (begin
                      (unsafe-vector-set! vec.86 i.87 0)
                      (closure-apply
                       vector-init-loop.84
                       vector-init-loop.84
                       len.85
                       (unsafe-fx+ i.87 1)
                       vec.86))))))
             (L.make-init-vector.1.4
              (lambda (c.99 tmp.82)
                (let ((vector-init-loop.84 (closure-ref c.99 0)))
                  (let ((tmp.83 (unsafe-make-vector tmp.82)))
                    (closure-apply
                     vector-init-loop.84
                     vector-init-loop.84
                     tmp.82
                     0
                     tmp.83)))))
             (L.eq?.81.5
              (lambda (c.100 tmp.54 tmp.55) (let () (eq? tmp.54 tmp.55))))
             (L.cons.80.6
              (lambda (c.101 tmp.52 tmp.53) (let () (cons tmp.52 tmp.53))))
             (L.not.79.7 (lambda (c.102 tmp.51) (let () (not tmp.51))))
             (L.vector?.78.8 (lambda (c.103 tmp.50) (let () (vector? tmp.50))))
             (L.procedure?.77.9
              (lambda (c.104 tmp.49) (let () (procedure? tmp.49))))
             (L.pair?.76.10 (lambda (c.105 tmp.48) (let () (pair? tmp.48))))
             (L.error?.75.11 (lambda (c.106 tmp.47) (let () (error? tmp.47))))
             (L.ascii-char?.74.12
              (lambda (c.107 tmp.46) (let () (ascii-char? tmp.46))))
             (L.void?.73.13 (lambda (c.108 tmp.45) (let () (void? tmp.45))))
             (L.empty?.72.14 (lambda (c.109 tmp.44) (let () (empty? tmp.44))))
             (L.boolean?.71.15
              (lambda (c.110 tmp.43) (let () (boolean? tmp.43))))
             (L.fixnum?.70.16
              (lambda (c.111 tmp.42) (let () (fixnum? tmp.42))))
             (L.procedure-arity.69.17
              (lambda (c.112 tmp.41)
                (let ()
                  (if (procedure? tmp.41)
                    (unsafe-procedure-arity tmp.41)
                    (error 13)))))
             (L.cdr.68.18
              (lambda (c.113 tmp.40)
                (let () (if (pair? tmp.40) (unsafe-cdr tmp.40) (error 12)))))
             (L.car.67.19
              (lambda (c.114 tmp.39)
                (let () (if (pair? tmp.39) (unsafe-car tmp.39) (error 11)))))
             (L.vector-ref.66.20
              (lambda (c.115 tmp.37 tmp.38)
                (let ((unsafe-vector-ref.3 (closure-ref c.115 0)))
                  (if (fixnum? tmp.38)
                    (if (vector? tmp.37)
                      (closure-apply
                       unsafe-vector-ref.3
                       unsafe-vector-ref.3
                       tmp.37
                       tmp.38)
                      (error 10))
                    (error 10)))))
             (L.vector-set!.65.21
              (lambda (c.116 tmp.34 tmp.35 tmp.36)
                (let ((unsafe-vector-set!.2 (closure-ref c.116 0)))
                  (if (fixnum? tmp.35)
                    (if (vector? tmp.34)
                      (closure-apply
                       unsafe-vector-set!.2
                       unsafe-vector-set!.2
                       tmp.34
                       tmp.35
                       tmp.36)
                      (error 9))
                    (error 9)))))
             (L.vector-length.64.22
              (lambda (c.117 tmp.33)
                (let ()
                  (if (vector? tmp.33)
                    (unsafe-vector-length tmp.33)
                    (error 8)))))
             (L.make-vector.63.23
              (lambda (c.118 tmp.32)
                (let ((make-init-vector.1 (closure-ref c.118 0)))
                  (if (fixnum? tmp.32)
                    (closure-apply
                     make-init-vector.1
                     make-init-vector.1
                     tmp.32)
                    (error 7)))))
             (L.>=.62.24
              (lambda (c.119 tmp.30 tmp.31)
                (let ()
                  (if (fixnum? tmp.31)
                    (if (fixnum? tmp.30) (unsafe-fx>= tmp.30 tmp.31) (error 6))
                    (error 6)))))
             (L.>.61.25
              (lambda (c.120 tmp.28 tmp.29)
                (let ()
                  (if (fixnum? tmp.29)
                    (if (fixnum? tmp.28) (unsafe-fx> tmp.28 tmp.29) (error 5))
                    (error 5)))))
             (L.<=.60.26
              (lambda (c.121 tmp.26 tmp.27)
                (let ()
                  (if (fixnum? tmp.27)
                    (if (fixnum? tmp.26) (unsafe-fx<= tmp.26 tmp.27) (error 4))
                    (error 4)))))
             (L.<.59.27
              (lambda (c.122 tmp.24 tmp.25)
                (let ()
                  (if (fixnum? tmp.25)
                    (if (fixnum? tmp.24) (unsafe-fx< tmp.24 tmp.25) (error 3))
                    (error 3)))))
             (L.-.58.28
              (lambda (c.123 tmp.22 tmp.23)
                (let ()
                  (if (fixnum? tmp.23)
                    (if (fixnum? tmp.22) (unsafe-fx- tmp.22 tmp.23) (error 2))
                    (error 2)))))
             (L.+.57.29
              (lambda (c.124 tmp.20 tmp.21)
                (let ()
                  (if (fixnum? tmp.21)
                    (if (fixnum? tmp.20) (unsafe-fx+ tmp.20 tmp.21) (error 1))
                    (error 1)))))
             (L.*.56.30
              (lambda (c.125 tmp.18 tmp.19)
                (let ()
                  (if (fixnum? tmp.19)
                    (if (fixnum? tmp.18) (unsafe-fx* tmp.18 tmp.19) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.84
         (make-closure L.vector-init-loop.84.3 3 vector-init-loop.84))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.84))
        (eq?.81 (make-closure L.eq?.81.5 2))
        (cons.80 (make-closure L.cons.80.6 2))
        (not.79 (make-closure L.not.79.7 1))
        (vector?.78 (make-closure L.vector?.78.8 1))
        (procedure?.77 (make-closure L.procedure?.77.9 1))
        (pair?.76 (make-closure L.pair?.76.10 1))
        (error?.75 (make-closure L.error?.75.11 1))
        (ascii-char?.74 (make-closure L.ascii-char?.74.12 1))
        (void?.73 (make-closure L.void?.73.13 1))
        (empty?.72 (make-closure L.empty?.72.14 1))
        (boolean?.71 (make-closure L.boolean?.71.15 1))
        (fixnum?.70 (make-closure L.fixnum?.70.16 1))
        (procedure-arity.69 (make-closure L.procedure-arity.69.17 1))
        (cdr.68 (make-closure L.cdr.68.18 1))
        (car.67 (make-closure L.car.67.19 1))
        (vector-ref.66 (make-closure L.vector-ref.66.20 2 unsafe-vector-ref.3))
        (vector-set!.65
         (make-closure L.vector-set!.65.21 3 unsafe-vector-set!.2))
        (vector-length.64 (make-closure L.vector-length.64.22 1))
        (make-vector.63
         (make-closure L.make-vector.63.23 1 make-init-vector.1))
        (>=.62 (make-closure L.>=.62.24 2))
        (>.61 (make-closure L.>.61.25 2))
        (<=.60 (make-closure L.<=.60.26 2))
        (<.59 (make-closure L.<.59.27 2))
        (|-.58| (make-closure L.-.58.28 2))
        (|+.57| (make-closure L.+.57.29 2))
        (*.56 (make-closure L.*.56.30 2)))
       (let ()
         (let ()
           (letrec ((L.sum.4.31
                     (lambda (c.126 a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
                       (let ((|+.57| (closure-ref c.126 0)))
                         (let ((i.13 (closure-apply |+.57| |+.57| a.5 b.6)))
                           (let ((j.14
                                  (closure-apply |+.57| |+.57| g.11 h.12)))
                             (closure-apply |+.57| |+.57| i.13 j.14)))))))
             (cletrec
              ((sum.4 (make-closure L.sum.4.31 8 |+.57|)))
              (let ()
                (let ((x.15 10))
                  (if (closure-apply eq?.81 eq?.81 1 2)
                    (let ((j.16 (closure-apply sum.4 sum.4 1 2 3 4 5 6 7 8)))
                      j.16)
                    (let ((x.17 5))
                      (closure-apply sum.4 sum.4 1 2 3 4 5 6 7 x.17))))))))))))
     ) 15)

  )
  (parameterize ([current-pass-list
                  (list
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (let ()
      (let ()
        (letrec ((sum.4
                  (lambda (a.5 b.6 c.7 d.8 e.9 f.10 g.11 h.12)
                    (let ((i.13 (apply + a.5 b.6)))
                      (let ((j.14 (apply + g.11 h.12)))
                        (apply + i.13 j.14))))))
          (let ()
            (let ((x.15 10))
              (if (apply eq? 1 2)
                (let ((j.16 (apply sum.4 1 2 3 4 5 6 7 8))) j.16)
                (let ((x.17 5)) (apply sum.4 1 2 3 4 5 6 7 x.17)))))))))
     ) 15)

  )

  (parameterize ([current-pass-list
                  (list
                   uniquify
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
        (define sum
        (lambda (a b c d e f g h)
            (let ((i (+ a b)))
            (let ((j (+ g h))) (+ i j)))))
        (let ((x 10))
        (if (eq? 1 2)
            (let ((j (sum 1 2 3 4 5 6 7 8))) j)
            (let ((x 5)) (sum 1 2 3 4 5 6 7 x)))))
     ) 15)

  )
  
  )