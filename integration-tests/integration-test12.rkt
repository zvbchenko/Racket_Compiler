#lang racket
(require
  "../a10.rkt"
  "../a10-implement-safe-primops.rkt"
  "../a10-compiler-lib.rkt"
  "../a10-graph-lib.rkt")
(module+ test
  (require rackunit))


(module+ test
#|
(parameterize ([current-pass-list
                  (list
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute 
     ) 55))

(parameterize ([current-pass-list
                  (list
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute 
     ) 55))

(parameterize ([current-pass-list
                  (list
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute 
     ) 55))
  
(parameterize ([current-pass-list
                  (list
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ()
      (begin
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-ref.3.1)
        (mset! r14 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.unsafe-vector-set!.2.2)
        (mset! r13 6 24)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.vector-init-loop.105.3)
        (mset! r9 6 24)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 24))
        (set! r8 (+ r8 2))
        (nop)
        (mset! r8 -2 L.make-init-vector.1.4)
        (mset! r8 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.eq?.102.5)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.101.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.100.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.99.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.98.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.97.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.96.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.95.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.94.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.93.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.92.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.91.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.90.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.89.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.88.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.87.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.86.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.85.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.84.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.83.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.82.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.81.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.80.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.79.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.78.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.77.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r14)
        (mset! rsi 14 r13)
        (mset! rdx 14 r8)
        (set! r14 r12)
        (set! r12 (+ r12 32))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.F.4.31)
        (mset! r14 6 56)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.G.5.32)
        (mset! r13 6 64)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.H.6.33)
        (mset! r9 6 72)
        (nop)
        (mset! r14 14 r13)
        (mset! r14 22 rcx)
        (mset! r13 14 r9)
        (mset! r9 14 rcx)
        (nop)
        (set! (rbp + 8) 56)
        (set! (rbp + 0) 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi r14)
        (nop)
        (jump L.F.4.31)))
    (define L.jp.36
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.254) (jump L.nest_f.255))))
    (define L.nest_t.254
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r14 (* r14 r13))
        (set! rax r14)
        (jump r15)))
    (define L.nest_f.255 () (begin (set! rax 62) (jump r15)))
    (define L.jp.37
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.252) (jump L.nest_f.253))))
    (define L.nest_t.250
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.36)))
    (define L.nest_f.251
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.36)))
    (define L.nest_t.252
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.250) (jump L.nest_f.251))))
    (define L.nest_f.253 () (begin (set! rax 62) (jump r15)))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.248) (jump L.nest_f.249))))
    (define L.nest_t.248
      ()
      (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.249 () (begin (set! rax 318) (jump r15)))
    (define L.jp.41
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.246) (jump L.nest_f.247))))
    (define L.nest_t.244
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.40)))
    (define L.nest_f.245
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.40)))
    (define L.nest_t.246
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.244) (jump L.nest_f.245))))
    (define L.nest_f.247 () (begin (set! rax 318) (jump r15)))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.242) (jump L.nest_f.243))))
    (define L.nest_t.242
      ()
      (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15)))
    (define L.nest_f.243 () (begin (set! rax 574) (jump r15)))
    (define L.jp.45
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.240) (jump L.nest_f.241))))
    (define L.nest_t.238
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.44)))
    (define L.nest_f.239
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.44)))
    (define L.nest_t.240
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.238) (jump L.nest_f.239))))
    (define L.nest_f.241 () (begin (set! rax 574) (jump r15)))
    (define L.jp.49
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.236) (jump L.nest_f.237))))
    (define L.nest_t.234 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.235 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.236
      ()
      (if (< r13 r9) (jump L.nest_t.234) (jump L.nest_f.235)))
    (define L.nest_f.237 () (begin (set! rax 830) (jump r15)))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.232) (jump L.nest_f.233))))
    (define L.nest_t.230
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.49)))
    (define L.nest_f.231
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.49)))
    (define L.nest_t.232
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.230) (jump L.nest_f.231))))
    (define L.nest_f.233 () (begin (set! rax 830) (jump r15)))
    (define L.jp.54
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.228) (jump L.nest_f.229))))
    (define L.nest_t.226 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.227 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.228
      ()
      (if (<= r13 r9) (jump L.nest_t.226) (jump L.nest_f.227)))
    (define L.nest_f.229 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.224) (jump L.nest_f.225))))
    (define L.nest_t.222
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.54)))
    (define L.nest_f.223
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.54)))
    (define L.nest_t.224
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.222) (jump L.nest_f.223))))
    (define L.nest_f.225 () (begin (set! rax 1086) (jump r15)))
    (define L.jp.59
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.220) (jump L.nest_f.221))))
    (define L.nest_t.218 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.219 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.220
      ()
      (if (> r13 r9) (jump L.nest_t.218) (jump L.nest_f.219)))
    (define L.nest_f.221 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.216) (jump L.nest_f.217))))
    (define L.nest_t.214
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.59)))
    (define L.nest_f.215
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.59)))
    (define L.nest_t.216
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.214) (jump L.nest_f.215))))
    (define L.nest_f.217 () (begin (set! rax 1342) (jump r15)))
    (define L.jp.64
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.212) (jump L.nest_f.213))))
    (define L.nest_t.210 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.211 () (begin (set! rax 6) (jump r15)))
    (define L.nest_t.212
      ()
      (if (>= r13 r9) (jump L.nest_t.210) (jump L.nest_f.211)))
    (define L.nest_f.213 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6) (jump L.nest_t.208) (jump L.nest_f.209))))
    (define L.nest_t.206
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.64)))
    (define L.nest_f.207
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.64)))
    (define L.nest_t.208
      ()
      (begin
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.206) (jump L.nest_f.207))))
    (define L.nest_f.209 () (begin (set! rax 1598) (jump r15)))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6) (jump L.nest_t.204) (jump L.nest_f.205))))
    (define L.nest_t.204
      ()
      (begin
        (nop)
        (set! rsi r9)
        (set! rdi r14)
        (nop)
        (jump L.make-init-vector.1.4)))
    (define L.nest_f.205 () (begin (set! rax 1854) (jump r15)))
    (define L.jp.69
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.202) (jump L.nest_f.203))))
    (define L.nest_t.202 () (begin (set! rax (mref r13 -3)) (jump r15)))
    (define L.nest_f.203 () (begin (set! rax 2110) (jump r15)))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6) (jump L.nest_t.200) (jump L.nest_f.201))))
    (define L.nest_t.200
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-set!.2.2)))
    (define L.nest_f.201 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.73
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6) (jump L.nest_t.198) (jump L.nest_f.199))))
    (define L.nest_t.196
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.72)))
    (define L.nest_f.197
      ()
      (begin
        (set! r8 r14)
        (set! rcx rsi)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.72)))
    (define L.nest_t.198
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.196) (jump L.nest_f.197))))
    (define L.nest_f.199 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.76
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6) (jump L.nest_t.194) (jump L.nest_f.195))))
    (define L.nest_t.194
      ()
      (begin
        (nop)
        (set! rdx r9)
        (set! rsi r8)
        (set! rdi r14)
        (nop)
        (jump L.unsafe-vector-ref.3.1)))
    (define L.nest_f.195 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6) (jump L.nest_t.192) (jump L.nest_f.193))))
    (define L.nest_t.190
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.76)))
    (define L.nest_f.191
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.76)))
    (define L.nest_t.192
      ()
      (begin
        (set! r8 (bitwise-and r14 7))
        (nop)
        (if (eq? r8 3) (jump L.nest_t.190) (jump L.nest_f.191))))
    (define L.nest_f.193 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.188) (jump L.nest_f.189))))
    (define L.nest_t.188 () (begin (set! rax (mref r13 -1)) (jump r15)))
    (define L.nest_f.189 () (begin (set! rax 2878) (jump r15)))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.186) (jump L.nest_f.187))))
    (define L.nest_t.186 () (begin (set! rax (mref r13 7)) (jump r15)))
    (define L.nest_f.187 () (begin (set! rax 3134) (jump r15)))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6) (jump L.nest_t.184) (jump L.nest_f.185))))
    (define L.nest_t.184 () (begin (set! rax (mref r13 6)) (jump r15)))
    (define L.nest_f.185 () (begin (set! rax 3390) (jump r15)))
    (define L.jp.96
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6) (jump L.nest_t.182) (jump L.nest_f.183))))
    (define L.nest_t.182 () (begin (set! rax r8) (jump r15)))
    (define L.nest_f.183
      ()
      (begin
        (set! rdi (arithmetic-shift-right r9 3))
        (nop)
        (set! rdi (* rdi 8))
        (nop)
        (set! rdi (+ rdi 5))
        (nop)
        (mset! r8 rdi 0)
        (nop)
        (set! r9 (+ r9 8))
        (nop)
        (set! rcx r8)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.105.3)))
    (define L.jp.99
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6) (jump L.nest_t.180) (jump L.nest_f.181))))
    (define L.nest_t.180
      ()
      (begin
        (set! r9 (arithmetic-shift-right r8 3))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (set! r9 (+ r9 5))
        (nop)
        (mset! r14 r9 r13)
        (set! rax 30)
        (jump r15)))
    (define L.nest_f.181 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.100
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6) (jump L.nest_t.178) (jump L.nest_f.179))))
    (define L.nest_t.176
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.99)))
    (define L.nest_f.177
      ()
      (begin
        (set! rcx r9)
        (set! rdx r8)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.99)))
    (define L.nest_t.178
      ()
      (if (>= r13 0) (jump L.nest_t.176) (jump L.nest_f.177)))
    (define L.nest_f.179 () (begin (set! rax 2366) (jump r15)))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6) (jump L.nest_t.174) (jump L.nest_f.175))))
    (define L.nest_t.174
      ()
      (begin
        (set! r13 (arithmetic-shift-right r9 3))
        (nop)
        (set! r13 (* r13 8))
        (nop)
        (set! r13 (+ r13 5))
        (nop)
        (set! rax (mref r14 r13))
        (jump r15)))
    (define L.nest_f.175 () (begin (set! rax 2622) (jump r15)))
    (define L.jp.104
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6) (jump L.nest_t.172) (jump L.nest_f.173))))
    (define L.nest_t.170
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.103)))
    (define L.nest_f.171
      ()
      (begin (set! rdx r9) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.103)))
    (define L.nest_t.172
      ()
      (if (>= r13 0) (jump L.nest_t.170) (jump L.nest_f.171)))
    (define L.nest_f.173 () (begin (set! rax 2622) (jump r15)))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9) (jump L.nest_t.168) (jump L.nest_f.169))))
    (define L.nest_t.168
      ()
      (begin
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.104)))
    (define L.nest_f.169
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.104)))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8) (jump L.nest_t.166) (jump L.nest_f.167))))
    (define L.nest_t.166
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.100)))
    (define L.nest_f.167
      ()
      (begin
        (set! rcx r14)
        (set! rdx r9)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.100)))
    (define L.vector-init-loop.105.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13) (jump L.nest_t.164) (jump L.nest_f.165))))
    (define L.nest_t.164
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 14)
        (nop)
        (jump L.jp.96)))
    (define L.nest_f.165
      ()
      (begin
        (nop)
        (set! rcx r9)
        (set! rdx r14)
        (set! rsi r13)
        (set! rdi 6)
        (nop)
        (jump L.jp.96)))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.105.3)))
    (define L.eq?.102.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13) (jump L.nest_t.162) (jump L.nest_f.163))))
    (define L.nest_t.162 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.163 () (begin (set! rax 6) (jump r15)))
    (define L.cons.101.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.not.100.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6) (jump L.nest_t.160) (jump L.nest_f.161))))
    (define L.nest_t.160 () (begin (set! rax 6) (jump r15)))
    (define L.nest_f.161 () (begin (set! rax 14) (jump r15)))
    (define L.vector?.99.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3) (jump L.nest_t.158) (jump L.nest_f.159))))
    (define L.nest_t.158 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.159 () (begin (set! rax 6) (jump r15)))
    (define L.procedure?.98.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2) (jump L.nest_t.156) (jump L.nest_f.157))))
    (define L.nest_t.156 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.157 () (begin (set! rax 6) (jump r15)))
    (define L.pair?.97.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1) (jump L.nest_t.154) (jump L.nest_f.155))))
    (define L.nest_t.154 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.155 () (begin (set! rax 6) (jump r15)))
    (define L.error?.96.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62) (jump L.nest_t.152) (jump L.nest_f.153))))
    (define L.nest_t.152 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.153 () (begin (set! rax 6) (jump r15)))
    (define L.ascii-char?.95.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46) (jump L.nest_t.150) (jump L.nest_f.151))))
    (define L.nest_t.150 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.151 () (begin (set! rax 6) (jump r15)))
    (define L.void?.94.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30) (jump L.nest_t.148) (jump L.nest_f.149))))
    (define L.nest_t.148 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.149 () (begin (set! rax 6) (jump r15)))
    (define L.empty?.93.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22) (jump L.nest_t.146) (jump L.nest_f.147))))
    (define L.nest_t.146 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.147 () (begin (set! rax 6) (jump r15)))
    (define L.boolean?.92.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6) (jump L.nest_t.144) (jump L.nest_f.145))))
    (define L.nest_t.144 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.145 () (begin (set! rax 6) (jump r15)))
    (define L.fixnum?.91.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0) (jump L.nest_t.142) (jump L.nest_f.143))))
    (define L.nest_t.142 () (begin (set! rax 14) (jump r15)))
    (define L.nest_f.143 () (begin (set! rax 6) (jump r15)))
    (define L.procedure-arity.90.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2) (jump L.nest_t.140) (jump L.nest_f.141))))
    (define L.nest_t.140
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.83)))
    (define L.nest_f.141
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.83)))
    (define L.cdr.89.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.138) (jump L.nest_f.139))))
    (define L.nest_t.138
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81)))
    (define L.nest_f.139
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))
    (define L.car.88.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1) (jump L.nest_t.136) (jump L.nest_f.137))))
    (define L.nest_t.136
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79)))
    (define L.nest_f.137
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))
    (define L.vector-ref.87.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.134) (jump L.nest_f.135))))
    (define L.nest_t.134
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.77)))
    (define L.nest_f.135
      ()
      (begin
        (set! rcx r13)
        (set! rdx r9)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.77)))
    (define L.vector-set!.86.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0) (jump L.nest_t.132) (jump L.nest_f.133))))
    (define L.nest_t.132
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 14)
        (nop)
        (jump L.jp.73)))
    (define L.nest_f.133
      ()
      (begin
        (set! r8 r13)
        (set! rcx r9)
        (set! rdx rdi)
        (set! rsi r14)
        (set! rdi 6)
        (nop)
        (jump L.jp.73)))
    (define L.vector-length.85.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3) (jump L.nest_t.130) (jump L.nest_f.131))))
    (define L.nest_t.130
      ()
      (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.69)))
    (define L.nest_f.131
      ()
      (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.69)))
    (define L.make-vector.84.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.128) (jump L.nest_f.129))))
    (define L.nest_t.128
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 14) (nop) (jump L.jp.67)))
    (define L.nest_f.129
      ()
      (begin (set! rdx r14) (set! rsi r13) (set! rdi 6) (nop) (jump L.jp.67)))
    (define L.>=.83.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.126) (jump L.nest_f.127))))
    (define L.nest_t.126
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.65)))
    (define L.nest_f.127
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.65)))
    (define L.>.82.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.124) (jump L.nest_f.125))))
    (define L.nest_t.124
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.60)))
    (define L.nest_f.125
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.60)))
    (define L.<=.81.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.122) (jump L.nest_f.123))))
    (define L.nest_t.122
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.55)))
    (define L.nest_f.123
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.55)))
    (define L.<.80.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.120) (jump L.nest_f.121))))
    (define L.nest_t.120
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.50)))
    (define L.nest_f.121
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.50)))
    (define L.-.79.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.118) (jump L.nest_f.119))))
    (define L.nest_t.118
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.45)))
    (define L.nest_f.119
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.45)))
    (define L.+.78.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.116) (jump L.nest_f.117))))
    (define L.nest_t.116
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.41)))
    (define L.nest_f.117
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.41)))
    (define L.*.77.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0) (jump L.nest_t.114) (jump L.nest_f.115))))
    (define L.nest_t.114
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.37)))
    (define L.nest_f.115
      ()
      (begin (set! rdx r13) (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.37)))
    (define L.F.4.31
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! rbx rdi)
        (set! r15 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (nop)
        (set! rsi (rbp + 0))
        (set! rdx (rbp + 8))
        (set! rdi (mref rbx 14))
        (set! (rbp + 0) (mref rbx 22))
        (nop)
        (set! rbp (+ rbp 24))
        (set! (rbp + 16) 64)
        (set! (rbp + 8) rdx)
        (set! (rbp + 0) rsi)
        (nop)
        (nop)
        (set! rcx r13)
        (set! rdx r14)
        (set! rsi r15)
        (nop)
        (set! r15 L.rp.113)
        (jump L.G.5.32)))
    (define L.rp.113
      ()
      (begin
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx 80)
        (set! rsi r15)
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 16))
        (jump L.+.78.29)))
    (define L.G.5.32
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! rsi rcx)
        (nop)
        (nop)
        (set! rdx (rbp + 0))
        (set! rcx (rbp + 8))
        (set! rbx (rbp + 16))
        (set! rdi (mref rdi 14))
        (nop)
        (set! (rbp + 24) 72)
        (set! (rbp + 16) rbx)
        (set! (rbp + 8) rcx)
        (set! (rbp + 0) rdx)
        (nop)
        (nop)
        (set! rcx rsi)
        (set! rdx r13)
        (set! rsi r14)
        (nop)
        (nop)
        (jump L.H.6.33)))
    (define L.H.6.33
      ()
      (begin
        (set! (rbp + 32) r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! (rbp + 72) rcx)
        (set! (rbp + 64) r8)
        (set! (rbp + 56) r9)
        (set! (rbp + 48) (rbp + 0))
        (set! (rbp + 40) (rbp + 8))
        (nop)
        (set! (rbp + 8) (rbp + 24))
        (set! (rbp + 0) (mref r14 14))
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx r13)
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.106)
        (jump L.+.78.29)))
    (define L.rp.106
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -8))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.107)
        (jump L.+.78.29)))
    (define L.rp.107
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -16))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.108)
        (jump L.+.78.29)))
    (define L.rp.108
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -24))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.109)
        (jump L.+.78.29)))
    (define L.rp.109
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -32))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.110)
        (jump L.+.78.29)))
    (define L.rp.110
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -40))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.111)
        (jump L.+.78.29)))
    (define L.rp.111
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (set! rdx (rbp + -64))
        (set! rsi r15)
        (set! rdi (rbp + -80))
        (set! r15 L.rp.112)
        (jump L.+.78.29)))
    (define L.rp.112
      ()
      (begin
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx (rbp + 8))
        (set! rsi r15)
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 32))
        (jump L.+.78.29))))
     ) 55))

(parameterize ([current-pass-list
                  (list
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ()
      (begin
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-ref.3.1)
        (mset! r14 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.unsafe-vector-set!.2.2)
        (mset! r13 6 24)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.vector-init-loop.105.3)
        (mset! r9 6 24)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 24))
        (set! r8 (+ r8 2))
        (nop)
        (mset! r8 -2 L.make-init-vector.1.4)
        (mset! r8 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.eq?.102.5)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.101.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.100.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.99.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.98.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.97.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.96.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.95.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.94.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.93.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.92.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.91.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.90.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.89.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.88.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.87.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.86.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.85.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.84.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.83.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.82.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.81.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.80.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.79.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.78.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.77.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r14)
        (mset! rsi 14 r13)
        (mset! rdx 14 r8)
        (set! r14 r12)
        (set! r12 (+ r12 32))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.F.4.31)
        (mset! r14 6 56)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.G.5.32)
        (mset! r13 6 64)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.H.6.33)
        (mset! r9 6 72)
        (nop)
        (mset! r14 14 r13)
        (mset! r14 22 rcx)
        (mset! r13 14 r9)
        (mset! r9 14 rcx)
        (nop)
        (set! (rbp + 8) 56)
        (set! (rbp + 0) 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi r14)
        (nop)
        (jump L.F.4.31)))
    (define L.H.6.33
      ()
      (begin
        (set! (rbp + 32) r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! (rbp + 72) rcx)
        (set! (rbp + 64) r8)
        (set! (rbp + 56) r9)
        (set! (rbp + 48) (rbp + 0))
        (set! (rbp + 40) (rbp + 8))
        (nop)
        (set! (rbp + 8) (rbp + 24))
        (set! (rbp + 0) (mref r14 14))
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx r13)
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.106)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx (rbp + -8))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.107)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx (rbp + -16))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.108)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx (rbp + -24))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.109)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx (rbp + -32))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.110)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx (rbp + -40))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.111)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx (rbp + -64))
            (set! rsi r15)
            (set! rdi (rbp + -80))
            (set! r15 L.rp.112)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx (rbp + 8))
        (set! rsi r15)
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 32))
        (jump L.+.78.29)))
    (define L.G.5.32
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! rsi rcx)
        (nop)
        (nop)
        (set! rdx (rbp + 0))
        (set! rcx (rbp + 8))
        (set! rbx (rbp + 16))
        (set! rdi (mref rdi 14))
        (nop)
        (set! (rbp + 24) 72)
        (set! (rbp + 16) rbx)
        (set! (rbp + 8) rcx)
        (set! (rbp + 0) rdx)
        (nop)
        (nop)
        (set! rcx rsi)
        (set! rdx r13)
        (set! rsi r14)
        (nop)
        (nop)
        (jump L.H.6.33)))
    (define L.F.4.31
      ()
      (begin
        (set! (rbp + 16) r15)
        (set! rbx rdi)
        (set! r15 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (nop)
        (set! rsi (rbp + 0))
        (set! rdx (rbp + 8))
        (set! rdi (mref rbx 14))
        (set! (rbp + 0) (mref rbx 22))
        (nop)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! (rbp + 16) 64)
            (set! (rbp + 8) rdx)
            (set! (rbp + 0) rsi)
            (nop)
            (nop)
            (set! rcx r13)
            (set! rdx r14)
            (set! rsi r15)
            (nop)
            (set! r15 L.rp.113)
            (jump L.G.5.32)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 (rbp + 0))
        (set! rdx 80)
        (set! rsi r15)
        (set! rdi (rbp + 0))
        (set! r15 (rbp + 16))
        (jump L.+.78.29)))
    (define L.*.77.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.37))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.37)))))
    (define L.+.78.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.41))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.41)))))
    (define L.-.79.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.45))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.45)))))
    (define L.<.80.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.50))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.50)))))
    (define L.<=.81.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.55))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.55)))))
    (define L.>.82.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.60))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.60)))))
    (define L.>=.83.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.65))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.65)))))
    (define L.make-vector.84.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.67))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.67)))))
    (define L.vector-length.85.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.69))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.69)))))
    (define L.vector-set!.86.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.73))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.73)))))
    (define L.vector-ref.87.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.77))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.77)))))
    (define L.car.88.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))))
    (define L.cdr.89.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))))
    (define L.procedure-arity.90.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.83))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.83)))))
    (define L.fixnum?.91.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.92.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.93.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.94.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.95.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.96.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.97.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.98.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.99.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.100.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.101.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.102.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.105.3)))
    (define L.vector-init-loop.105.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.96))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.96)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.100))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.100)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.104))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.104)))))
    (define L.jp.104
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.103))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.103)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.100
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.99))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.99)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.99
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.96
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.105.3)))))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.76))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.76))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.76
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.73
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.72))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.72))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.69
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.64))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.64))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.64
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.59))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.59))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.59
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.54))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.54))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.54
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.49))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.49))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.49
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.45
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.44))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.44))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.41
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.40))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.40))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.37
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.36))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.36))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.36
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) 55))

(parameterize ([current-pass-list
                  (list
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ()
      (begin
        (nop)
        (set! r14 r12)
        (set! r12 (+ r12 16))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.unsafe-vector-ref.3.1)
        (mset! r14 6 16)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 16))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.unsafe-vector-set!.2.2)
        (mset! r13 6 24)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.vector-init-loop.105.3)
        (mset! r9 6 24)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 24))
        (set! r8 (+ r8 2))
        (nop)
        (mset! r8 -2 L.make-init-vector.1.4)
        (mset! r8 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.eq?.102.5)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cons.101.6)
        (mset! rdi 6 16)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.not.100.7)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector?.99.8)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure?.98.9)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.pair?.97.10)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.error?.96.11)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.ascii-char?.95.12)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.void?.94.13)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.empty?.93.14)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.boolean?.92.15)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.fixnum?.91.16)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.procedure-arity.90.17)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.cdr.89.18)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 16))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.car.88.19)
        (mset! rdi 6 8)
        (nop)
        (set! rdi r12)
        (set! r12 (+ r12 24))
        (set! rdi (+ rdi 2))
        (nop)
        (mset! rdi -2 L.vector-ref.87.20)
        (mset! rdi 6 16)
        (nop)
        (set! rsi r12)
        (set! r12 (+ r12 24))
        (set! rsi (+ rsi 2))
        (nop)
        (mset! rsi -2 L.vector-set!.86.21)
        (mset! rsi 6 24)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 16))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.vector-length.85.22)
        (mset! rdx 6 8)
        (nop)
        (set! rdx r12)
        (set! r12 (+ r12 24))
        (set! rdx (+ rdx 2))
        (nop)
        (mset! rdx -2 L.make-vector.84.23)
        (mset! rdx 6 8)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>=.83.24)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.>.82.25)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<=.81.26)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.<.80.27)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.-.79.28)
        (mset! rcx 6 16)
        (nop)
        (set! rcx r12)
        (set! r12 (+ r12 16))
        (set! rcx (+ rcx 2))
        (nop)
        (mset! rcx -2 L.+.78.29)
        (mset! rcx 6 16)
        (nop)
        (set! rbx r12)
        (set! r12 (+ r12 16))
        (set! rbx (+ rbx 2))
        (nop)
        (mset! rbx -2 L.*.77.30)
        (mset! rbx 6 16)
        (nop)
        (mset! r9 14 r9)
        (mset! r8 14 r9)
        (mset! rdi 14 r14)
        (mset! rsi 14 r13)
        (mset! rdx 14 r8)
        (set! r14 r12)
        (set! r12 (+ r12 32))
        (set! r14 (+ r14 2))
        (nop)
        (mset! r14 -2 L.F.4.31)
        (mset! r14 6 56)
        (nop)
        (set! r13 r12)
        (set! r12 (+ r12 24))
        (set! r13 (+ r13 2))
        (nop)
        (mset! r13 -2 L.G.5.32)
        (mset! r13 6 64)
        (nop)
        (set! r9 r12)
        (set! r12 (+ r12 24))
        (set! r9 (+ r9 2))
        (nop)
        (mset! r9 -2 L.H.6.33)
        (mset! r9 6 72)
        (nop)
        (mset! r14 14 r13)
        (mset! r14 22 rcx)
        (mset! r13 14 r9)
        (mset! r9 14 rcx)
        (nop)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi r14)
        (nop)
        (jump L.F.4.31)))
    (define L.H.6.33
      ()
      (begin
        (set! fv4 r15)
        (set! r14 rdi)
        (set! r15 rsi)
        (set! r13 rdx)
        (set! fv9 rcx)
        (set! fv8 r8)
        (set! fv7 r9)
        (set! fv6 fv0)
        (set! fv5 fv1)
        (nop)
        (set! fv1 fv3)
        (set! fv0 (mref r14 14))
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx r13)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.106)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx fv9)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.107)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx fv8)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.108)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx fv7)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.109)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx fv6)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.110)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx fv5)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.111)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx fv2)
            (set! rsi r15)
            (set! rdi fv0)
            (set! r15 L.rp.112)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rdx fv1)
        (set! rsi r15)
        (set! rdi fv0)
        (set! r15 fv4)
        (jump L.+.78.29)))
    (define L.G.5.32
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! rsi rcx)
        (nop)
        (nop)
        (set! rdx fv0)
        (set! rcx fv1)
        (set! rbx fv2)
        (set! rdi (mref rdi 14))
        (nop)
        (set! fv3 72)
        (set! fv2 rbx)
        (set! fv1 rcx)
        (set! fv0 rdx)
        (nop)
        (nop)
        (set! rcx rsi)
        (set! rdx r13)
        (set! rsi r14)
        (nop)
        (nop)
        (jump L.H.6.33)))
    (define L.F.4.31
      ()
      (begin
        (set! fv2 r15)
        (set! rbx rdi)
        (set! r15 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (nop)
        (set! rsi fv0)
        (set! rdx fv1)
        (set! rdi (mref rbx 14))
        (set! fv0 (mref rbx 22))
        (nop)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! fv5 64)
            (set! fv4 rdx)
            (set! fv3 rsi)
            (nop)
            (nop)
            (set! rcx r13)
            (set! rdx r14)
            (set! rsi r15)
            (nop)
            (set! r15 L.rp.113)
            (jump L.G.5.32)))
        (set! rbp (- rbp 24))
        (set! r15 rax)
        (set! r14 fv0)
        (set! rdx 80)
        (set! rsi r15)
        (set! rdi fv0)
        (set! r15 fv2)
        (jump L.+.78.29)))
    (define L.*.77.30
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.37))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.37)))))
    (define L.+.78.29
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.41))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.41)))))
    (define L.-.79.28
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.45))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.45)))))
    (define L.<.80.27
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.50))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.50)))))
    (define L.<=.81.26
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.55))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.55)))))
    (define L.>.82.25
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.60))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.60)))))
    (define L.>=.83.24
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (bitwise-and r13 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.65))
          (begin
            (set! rdx r13)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.65)))))
    (define L.make-vector.84.23
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (bitwise-and r14 7))
        (nop)
        (if (eq? r9 0)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.67))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.67)))))
    (define L.vector-length.85.22
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 3)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.69))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.69)))))
    (define L.vector-set!.86.21
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rdi (mref r8 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.73))
          (begin
            (set! r8 r13)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.73)))))
    (define L.vector-ref.87.20
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r9 14))
        (set! r8 (bitwise-and r13 7))
        (nop)
        (if (eq? r8 0)
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 14)
            (nop)
            (jump L.jp.77))
          (begin
            (set! rcx r13)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi 6)
            (nop)
            (jump L.jp.77)))))
    (define L.car.88.19
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.79))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.79)))))
    (define L.cdr.89.18
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 1)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.81))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.81)))))
    (define L.procedure-arity.90.17
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 (bitwise-and r14 7))
        (nop)
        (if (eq? r13 2)
          (begin (set! rsi r14) (set! rdi 14) (nop) (jump L.jp.83))
          (begin (set! rsi r14) (set! rdi 6) (nop) (jump L.jp.83)))))
    (define L.fixnum?.91.16
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 0)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.boolean?.92.15
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 247))
        (nop)
        (if (eq? r14 6)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.empty?.93.14
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 22)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.void?.94.13
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 30)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.ascii-char?.95.12
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 46)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.error?.96.11
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 255))
        (nop)
        (if (eq? r14 62)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.pair?.97.10
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 1)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.procedure?.98.9
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 2)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.vector?.99.8
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r14 (bitwise-and r14 7))
        (nop)
        (if (eq? r14 3)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.not.100.7
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (if (neq? r14 6)
          (begin (set! rax 6) (jump r15))
          (begin (set! rax 14) (jump r15)))))
    (define L.cons.101.6
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 r12)
        (set! r12 (+ r12 16))
        (set! r9 (+ r9 1))
        (nop)
        (mset! r9 -1 r14)
        (mset! r9 7 r13)
        (set! rax r9)
        (jump r15)))
    (define L.eq?.102.5
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (eq? r14 r13)
          (begin (set! rax 14) (jump r15))
          (begin (set! rax 6) (jump r15)))))
    (define L.make-init-vector.1.4
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r13 (mref r13 14))
        (set! r9 (arithmetic-shift-right r14 3))
        (nop)
        (set! r8 1)
        (set! r9 (+ r9 r8))
        (nop)
        (set! r9 (* r9 8))
        (nop)
        (nop)
        (set! r8 r12)
        (set! r12 (+ r12 r9))
        (set! r9 (+ r8 3))
        (nop)
        (mset! r9 -3 r14)
        (nop)
        (nop)
        (set! rcx r9)
        (set! rdx 0)
        (set! rsi r14)
        (set! rdi r13)
        (nop)
        (jump L.vector-init-loop.105.3)))
    (define L.vector-init-loop.105.3
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r8 rcx)
        (set! r9 (mref r9 14))
        (if (eq? r14 r13)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.96))
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.96)))))
    (define L.unsafe-vector-set!.2.2
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! r8 (mref r14 -3))
        (if (< r13 r8)
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.100))
          (begin
            (set! rcx r14)
            (set! rdx r9)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.100)))))
    (define L.unsafe-vector-ref.3.1
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 (mref r14 -3))
        (if (< r13 r9)
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 14)
            (nop)
            (jump L.jp.104))
          (begin
            (set! rdx r14)
            (set! rsi r13)
            (set! rdi 6)
            (nop)
            (jump L.jp.104)))))
    (define L.jp.104
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.103))
            (begin
              (set! rdx r9)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.103)))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.103
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r13 (* r13 8))
            (nop)
            (set! r13 (+ r13 5))
            (nop)
            (set! rax (mref r14 r13))
            (jump r15))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.100
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r14 6)
          (if (>= r13 0)
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 14)
              (nop)
              (jump L.jp.99))
            (begin
              (set! rcx r9)
              (set! rdx r8)
              (set! rsi r13)
              (set! rdi 6)
              (nop)
              (jump L.jp.99)))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.99
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r8 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (if (neq? r9 6)
          (begin
            (set! r9 (arithmetic-shift-right r8 3))
            (nop)
            (set! r9 (* r9 8))
            (nop)
            (set! r9 (+ r9 5))
            (nop)
            (mset! r14 r9 r13)
            (set! rax 30)
            (jump r15))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.96
      ()
      (begin
        (nop)
        (nop)
        (set! r9 rsi)
        (set! r14 rdx)
        (set! r13 rcx)
        (nop)
        (if (neq? rdi 6)
          (begin (set! rax r8) (jump r15))
          (begin
            (set! rdi (arithmetic-shift-right r9 3))
            (nop)
            (set! rdi (* rdi 8))
            (nop)
            (set! rdi (+ rdi 5))
            (nop)
            (mset! r8 rdi 0)
            (nop)
            (set! r9 (+ r9 8))
            (nop)
            (set! rcx r8)
            (set! rdx r9)
            (set! rsi r14)
            (set! rdi r13)
            (nop)
            (jump L.vector-init-loop.105.3)))))
    (define L.jp.83
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 6)) (jump r15))
          (begin (set! rax 3390) (jump r15)))))
    (define L.jp.81
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 7)) (jump r15))
          (begin (set! rax 3134) (jump r15)))))
    (define L.jp.79
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -1)) (jump r15))
          (begin (set! rax 2878) (jump r15)))))
    (define L.jp.77
      ()
      (begin
        (nop)
        (set! r8 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (if (neq? r8 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.76))
              (begin
                (set! rcx r14)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.76))))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.76
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! r8 rcx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rdx r9)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump r15)))))
    (define L.jp.73
      ()
      (begin
        (nop)
        (nop)
        (set! r14 rsi)
        (set! r13 rdx)
        (set! r9 rcx)
        (set! rsi r8)
        (if (neq? rdi 6)
          (begin
            (set! r8 (bitwise-and r14 7))
            (nop)
            (if (eq? r8 3)
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.72))
              (begin
                (set! r8 r14)
                (set! rcx rsi)
                (set! rdx r9)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.72))))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.72
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (set! rdi rcx)
        (nop)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rcx r9)
            (set! rdx rdi)
            (set! rsi r8)
            (set! rdi r14)
            (nop)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump r15)))))
    (define L.jp.69
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (if (neq? r14 6)
          (begin (set! rax (mref r13 -3)) (jump r15))
          (begin (set! rax 2110) (jump r15)))))
    (define L.jp.67
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r14 rsi)
        (set! r9 rdx)
        (if (neq? r13 6)
          (begin
            (nop)
            (set! rsi r9)
            (set! rdi r14)
            (nop)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump r15)))))
    (define L.jp.65
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.64))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.64))))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.64
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (>= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1598) (jump r15)))))
    (define L.jp.60
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.59))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.59))))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.59
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (> r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1342) (jump r15)))))
    (define L.jp.55
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.54))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.54))))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.54
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (<= r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 1086) (jump r15)))))
    (define L.jp.50
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.49))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.49))))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.49
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (if (< r13 r9)
            (begin (set! rax 14) (jump r15))
            (begin (set! rax 6) (jump r15)))
          (begin (set! rax 830) (jump r15)))))
    (define L.jp.45
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.44))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.44))))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.44
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (- r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 574) (jump r15)))))
    (define L.jp.41
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 14)
                (nop)
                (jump L.jp.40))
              (begin
                (set! rdx r13)
                (set! rsi r14)
                (set! rdi 6)
                (nop)
                (jump L.jp.40))))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.40
      ()
      (begin
        (nop)
        (set! r14 rdi)
        (set! r13 rsi)
        (set! r9 rdx)
        (if (neq? r14 6)
          (begin (set! r14 (+ r13 r9)) (set! rax r14) (jump r15))
          (begin (set! rax 318) (jump r15)))))
    (define L.jp.37
      ()
      (begin
        (nop)
        (set! r9 rdi)
        (set! r14 rsi)
        (set! r13 rdx)
        (if (neq? r9 6)
          (begin
            (set! r9 (bitwise-and r14 7))
            (nop)
            (if (eq? r9 0)
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 14)
                (nop)
                (jump L.jp.36))
              (begin
                (set! rdx r14)
                (set! rsi r13)
                (set! rdi 6)
                (nop)
                (jump L.jp.36))))
          (begin (set! rax 62) (jump r15)))))
    (define L.jp.36
      ()
      (begin
        (nop)
        (set! r13 rdi)
        (set! r9 rsi)
        (set! r14 rdx)
        (if (neq? r13 6)
          (begin
            (set! r13 (arithmetic-shift-right r9 3))
            (nop)
            (set! r14 (* r14 r13))
            (set! rax r14)
            (jump r15))
          (begin (set! rax 62) (jump r15))))))
     ) 55))



(parameterize ([current-pass-list
                  (list
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((assignment
        ((ra.356 r15)
         (unsafe-vector-ref.3 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.105 r9)
         (make-init-vector.1 r8)
         (vector-ref.87 rdi)
         (vector-set!.86 rsi)
         (make-vector.84 rdx)
         (|+.78| rcx)
         (F.4 r14)
         (tmp.352 rbx)
         (tmp.386 rbx)
         (tmp.198 rbx)
         (*.77 rbx)
         (tmp.346 rcx)
         (tmp.380 rcx)
         (tmp.192 rcx)
         (>=.83 rcx)
         (tmp.347 rcx)
         (tmp.381 rcx)
         (tmp.193 rcx)
         (>.82 rcx)
         (tmp.348 rcx)
         (tmp.382 rcx)
         (tmp.194 rcx)
         (<=.81 rcx)
         (tmp.349 rcx)
         (tmp.383 rcx)
         (tmp.195 rcx)
         (<.80 rcx)
         (tmp.350 rcx)
         (tmp.384 rcx)
         (tmp.196 rcx)
         (|-.79| rcx)
         (tmp.351 rcx)
         (tmp.385 rcx)
         (tmp.197 rcx)
         (tmp.344 rdx)
         (tmp.378 rdx)
         (tmp.190 rdx)
         (vector-length.85 rdx)
         (tmp.345 rdx)
         (tmp.379 rdx)
         (tmp.191 rdx)
         (G.5 r13)
         (tmp.343 rsi)
         (tmp.377 rsi)
         (tmp.189 rsi)
         (tmp.327 rdi)
         (tmp.361 rdi)
         (tmp.173 rdi)
         (eq?.102 rdi)
         (tmp.328 rdi)
         (tmp.362 rdi)
         (tmp.174 rdi)
         (cons.101 rdi)
         (tmp.329 rdi)
         (tmp.363 rdi)
         (tmp.175 rdi)
         (not.100 rdi)
         (tmp.330 rdi)
         (tmp.364 rdi)
         (tmp.176 rdi)
         (vector?.99 rdi)
         (tmp.331 rdi)
         (tmp.365 rdi)
         (tmp.177 rdi)
         (procedure?.98 rdi)
         (tmp.332 rdi)
         (tmp.366 rdi)
         (tmp.178 rdi)
         (pair?.97 rdi)
         (tmp.333 rdi)
         (tmp.367 rdi)
         (tmp.179 rdi)
         (error?.96 rdi)
         (tmp.334 rdi)
         (tmp.368 rdi)
         (tmp.180 rdi)
         (ascii-char?.95 rdi)
         (tmp.335 rdi)
         (tmp.369 rdi)
         (tmp.181 rdi)
         (void?.94 rdi)
         (tmp.336 rdi)
         (tmp.370 rdi)
         (tmp.182 rdi)
         (empty?.93 rdi)
         (tmp.337 rdi)
         (tmp.371 rdi)
         (tmp.183 rdi)
         (boolean?.92 rdi)
         (tmp.338 rdi)
         (tmp.372 rdi)
         (tmp.184 rdi)
         (fixnum?.91 rdi)
         (tmp.339 rdi)
         (tmp.373 rdi)
         (tmp.185 rdi)
         (procedure-arity.90 rdi)
         (tmp.340 rdi)
         (tmp.374 rdi)
         (tmp.186 rdi)
         (cdr.89 rdi)
         (tmp.341 rdi)
         (tmp.375 rdi)
         (tmp.187 rdi)
         (car.88 rdi)
         (tmp.342 rdi)
         (tmp.376 rdi)
         (tmp.188 rdi)
         (tmp.326 r8)
         (tmp.360 r8)
         (tmp.172 r8)
         (tmp.355 r9)
         (tmp.325 r9)
         (tmp.359 r9)
         (tmp.171 r9)
         (tmp.354 r13)
         (tmp.388 r13)
         (tmp.200 r13)
         (tmp.389 r9)
         (tmp.201 r9)
         (H.6 r9)
         (tmp.324 r13)
         (tmp.358 r13)
         (tmp.170 r13)
         (tmp.353 r14)
         (tmp.387 r14)
         (tmp.199 r14)
         (tmp.323 r14)
         (tmp.357 r14)
         (tmp.169 r14)
         (tmp.166 r14))))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31)))
    (define L.H.6.33
      ((assignment
        ((ra.390 fv4)
         (|+.78| fv0)
         (j.31 fv1)
         (h.30 fv2)
         (g.29 fv5)
         (f.28 fv6)
         (e.27 fv7)
         (d.26 fv8)
         (c.25 fv9)
         (a.23 r15)
         (c.149 r14)
         (b.24 r13)
         (r1.32 r15)
         (tmp.158 r14)
         (r2.33 r15)
         (tmp.159 r14)
         (r3.34 r15)
         (tmp.160 r14)
         (r4.35 r15)
         (tmp.161 r14)
         (r5.36 r15)
         (tmp.162 r14)
         (r6.37 r15)
         (tmp.163 r14)
         (r7.38 r15)
         (tmp.164 r14)
         (tmp.165 r14))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29)))
        (set! rbp (- rbp 80))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29)))
    (define L.G.5.32
      ((assignment
        ((ra.391 r15)
         (a.15 r14)
         (b.16 r13)
         (H.6 rdi)
         (c.148 rdi)
         (c.17 rsi)
         (d.18 r8)
         (e.19 r9)
         (f.20 rdx)
         (g.21 rcx)
         (h.22 rbx)
         (tmp.157 rdi))))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33)))
    (define L.F.4.31
      ((assignment
        ((ra.392 fv2)
         (|+.78| fv0)
         (nfv.393 fv3)
         (nfv.394 fv4)
         (nfv.395 fv5)
         (a.7 r15)
         (b.8 r14)
         (c.9 r13)
         (G.5 rdi)
         (d.10 r8)
         (c.147 rbx)
         (e.11 r9)
         (f.12 rsi)
         (g.13 rdx)
         (tmp.155 rdi)
         (r.14 r15)
         (tmp.156 r14))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump L.G.5.32)))
        (set! rbp (- rbp 24))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29)))
    (define L.*.77.30
      ((assignment
        ((ra.396 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.208 r9)
         (c.146 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37)))))
    (define L.+.78.29
      ((assignment
        ((ra.398 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.214 r9)
         (c.145 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41)))))
    (define L.-.79.28
      ((assignment
        ((ra.400 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.220 r9)
         (c.144 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45)))))
    (define L.<.80.27
      ((assignment
        ((ra.402 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.227 r9)
         (c.143 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50)))))
    (define L.<=.81.26
      ((assignment
        ((ra.404 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.234 r9)
         (c.142 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55)))))
    (define L.>.82.25
      ((assignment
        ((ra.406 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.241 r9)
         (c.141 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60)))))
    (define L.>=.83.24
      ((assignment
        ((ra.408 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.248 r9)
         (c.140 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65)))))
    (define L.make-vector.84.23
      ((assignment
        ((ra.410 r15)
         (tmp.53 r14)
         (make-init-vector.1 r13)
         (tmp.251 r9)
         (c.139 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67)))))
    (define L.vector-length.85.22
      ((assignment
        ((ra.412 r15) (tmp.54 r14) (tmp.254 r13) (c.138 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69)))))
    (define L.vector-set!.86.21
      ((assignment
        ((ra.414 r15)
         (tmp.55 r14)
         (tmp.56 r13)
         (tmp.57 r9)
         (unsafe-vector-set!.2 rdi)
         (c.137 r8)
         (tmp.260 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73)))))
    (define L.vector-ref.87.20
      ((assignment
        ((ra.416 r15)
         (tmp.58 r14)
         (tmp.59 r13)
         (unsafe-vector-ref.3 r9)
         (c.136 r9)
         (tmp.266 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77)))))
    (define L.car.88.19
      ((assignment
        ((ra.418 r15) (tmp.60 r14) (tmp.269 r13) (c.135 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79)))))
    (define L.cdr.89.18
      ((assignment
        ((ra.420 r15) (tmp.61 r14) (tmp.272 r13) (c.134 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81)))))
    (define L.procedure-arity.90.17
      ((assignment
        ((ra.422 r15) (tmp.62 r14) (tmp.275 r13) (c.133 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83)))))
    (define L.fixnum?.91.16
      ((assignment
        ((ra.424 r15) (c.132 r14) (tmp.277 r14) (tmp.63 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424))
          (begin (set! rax 6) (jump ra.424)))))
    (define L.boolean?.92.15
      ((assignment
        ((ra.426 r15) (c.131 r14) (tmp.279 r14) (tmp.64 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426))
          (begin (set! rax 6) (jump ra.426)))))
    (define L.empty?.93.14
      ((assignment
        ((ra.428 r15) (c.130 r14) (tmp.281 r14) (tmp.65 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428))
          (begin (set! rax 6) (jump ra.428)))))
    (define L.void?.94.13
      ((assignment
        ((ra.430 r15) (c.129 r14) (tmp.283 r14) (tmp.66 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430))
          (begin (set! rax 6) (jump ra.430)))))
    (define L.ascii-char?.95.12
      ((assignment
        ((ra.432 r15) (c.128 r14) (tmp.285 r14) (tmp.67 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432))
          (begin (set! rax 6) (jump ra.432)))))
    (define L.error?.96.11
      ((assignment
        ((ra.434 r15) (c.127 r14) (tmp.287 r14) (tmp.68 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434))
          (begin (set! rax 6) (jump ra.434)))))
    (define L.pair?.97.10
      ((assignment
        ((ra.436 r15) (c.126 r14) (tmp.289 r14) (tmp.69 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436))
          (begin (set! rax 6) (jump ra.436)))))
    (define L.procedure?.98.9
      ((assignment
        ((ra.438 r15) (c.125 r14) (tmp.291 r14) (tmp.70 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438))
          (begin (set! rax 6) (jump ra.438)))))
    (define L.vector?.99.8
      ((assignment
        ((ra.440 r15) (c.124 r14) (tmp.293 r14) (tmp.71 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440))
          (begin (set! rax 6) (jump ra.440)))))
    (define L.not.100.7
      ((assignment ((ra.442 r15) (c.123 r14) (tmp.72 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442))
          (begin (set! rax 14) (jump ra.442)))))
    (define L.cons.101.6
      ((assignment
        ((ra.443 r15)
         (tmp.73 r14)
         (tmp.74 r13)
         (c.122 r14)
         (tmp.295 r9)
         (tmp.444 r9)
         (tmp.167 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443)))
    (define L.eq?.102.5
      ((assignment ((ra.445 r15) (tmp.75 r14) (c.121 r14) (tmp.76 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445))
          (begin (set! rax 6) (jump ra.445)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.446 r15)
         (tmp.103 r14)
         (vector-init-loop.105 r13)
         (tmp.297 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.300 r8)
         (c.120 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.298 r9)
         (tmp.450 r9)
         (tmp.299 r9)
         (tmp.104 r9)
         (tmp.451 r9)
         (tmp.168 r9)
         (tmp.151 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3)))
    (define L.vector-init-loop.105.3
      ((assignment
        ((ra.452 r15)
         (len.106 r14)
         (i.108 r13)
         (c.119 r9)
         (vec.107 r8)
         (vector-init-loop.105 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.453 r15)
         (tmp.114 r14)
         (tmp.115 r13)
         (tmp.116 r9)
         (tmp.314 r8)
         (c.118 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.454 r15) (tmp.111 r14) (tmp.112 r13) (tmp.322 r9) (c.117 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104)))))
    (define L.jp.104
      ((assignment ((ra.455 r15) (tmp.316 r14) (tmp.112 r13) (tmp.111 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103)))
          (begin (set! rax 2622) (jump ra.455)))))
    (define L.jp.103
      ((assignment
        ((ra.456 r15)
         (tmp.111 r14)
         (tmp.318 r13)
         (tmp.112 r9)
         (tmp.457 r13)
         (tmp.319 r13)
         (tmp.458 r13)
         (tmp.320 r13)
         (tmp.459 r13)
         (tmp.321 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456))
          (begin (set! rax 2622) (jump ra.456)))))
    (define L.jp.100
      ((assignment
        ((ra.460 r15) (tmp.308 r14) (tmp.115 r13) (tmp.116 r9) (tmp.114 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99)))
          (begin (set! rax 2366) (jump ra.460)))))
    (define L.jp.99
      ((assignment
        ((ra.461 r15)
         (tmp.114 r14)
         (tmp.116 r13)
         (tmp.310 r9)
         (tmp.115 r8)
         (tmp.462 r9)
         (tmp.311 r9)
         (tmp.463 r9)
         (tmp.312 r9)
         (tmp.464 r9)
         (tmp.313 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461))
          (begin (set! rax 2366) (jump ra.461)))))
    (define L.jp.96
      ((assignment
        ((ra.465 r15)
         (len.106 r14)
         (vector-init-loop.105 r13)
         (i.108 r9)
         (vec.107 r8)
         (tmp.302 rdi)
         (tmp.306 r9)
         (tmp.305 rdi)
         (tmp.468 rdi)
         (tmp.304 rdi)
         (tmp.467 rdi)
         (tmp.303 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.150 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3)))))
    (define L.jp.83
      ((assignment ((ra.470 r15) (tmp.274 r14) (tmp.62 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470))
          (begin (set! rax 3390) (jump ra.470)))))
    (define L.jp.81
      ((assignment ((ra.471 r15) (tmp.271 r14) (tmp.61 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471))
          (begin (set! rax 3134) (jump ra.471)))))
    (define L.jp.79
      ((assignment ((ra.472 r15) (tmp.268 r14) (tmp.60 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472))
          (begin (set! rax 2878) (jump ra.472)))))
    (define L.jp.77
      ((assignment
        ((ra.473 r15)
         (tmp.58 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.59 r9)
         (tmp.262 r8)
         (tmp.265 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76))))
          (begin (set! rax 2622) (jump ra.473)))))
    (define L.jp.76
      ((assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.264 r13)
         (tmp.59 r9)
         (tmp.58 r8)
         (tmp.152 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1))
          (begin (set! rax 2622) (jump ra.475)))))
    (define L.jp.73
      ((assignment
        ((ra.476 r15)
         (tmp.55 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.57 r9)
         (tmp.256 rdi)
         (tmp.56 rsi)
         (tmp.259 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72))))
          (begin (set! rax 2366) (jump ra.476)))))
    (define L.jp.72
      ((assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.258 r13)
         (tmp.57 r9)
         (tmp.56 rdi)
         (tmp.55 r8)
         (tmp.153 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2))
          (begin (set! rax 2366) (jump ra.478)))))
    (define L.jp.69
      ((assignment ((ra.479 r15) (tmp.253 r14) (tmp.54 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479))
          (begin (set! rax 2110) (jump ra.479)))))
    (define L.jp.67
      ((assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.250 r13)
         (tmp.53 r9)
         (tmp.154 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4))
          (begin (set! rax 1854) (jump ra.480)))))
    (define L.jp.65
      ((assignment
        ((ra.481 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.243 r9)
         (tmp.247 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64))))
          (begin (set! rax 1598) (jump ra.481)))))
    (define L.jp.64
      ((assignment ((ra.483 r15) (tmp.245 r14) (tmp.51 r13) (tmp.52 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483))
            (begin (set! rax 6) (jump ra.483)))
          (begin (set! rax 1598) (jump ra.483)))))
    (define L.jp.60
      ((assignment
        ((ra.484 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59))))
          (begin (set! rax 1342) (jump ra.484)))))
    (define L.jp.59
      ((assignment ((ra.486 r15) (tmp.238 r14) (tmp.49 r13) (tmp.50 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486))
            (begin (set! rax 6) (jump ra.486)))
          (begin (set! rax 1342) (jump ra.486)))))
    (define L.jp.55
      ((assignment
        ((ra.487 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54))))
          (begin (set! rax 1086) (jump ra.487)))))
    (define L.jp.54
      ((assignment ((ra.489 r15) (tmp.231 r14) (tmp.47 r13) (tmp.48 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489))
            (begin (set! rax 6) (jump ra.489)))
          (begin (set! rax 1086) (jump ra.489)))))
    (define L.jp.50
      ((assignment
        ((ra.490 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49))))
          (begin (set! rax 830) (jump ra.490)))))
    (define L.jp.49
      ((assignment ((ra.492 r15) (tmp.224 r14) (tmp.45 r13) (tmp.46 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492))
            (begin (set! rax 6) (jump ra.492)))
          (begin (set! rax 830) (jump ra.492)))))
    (define L.jp.45
      ((assignment
        ((ra.493 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.216 r9)
         (tmp.219 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44))))
          (begin (set! rax 574) (jump ra.493)))))
    (define L.jp.44
      ((assignment
        ((ra.495 r15) (tmp.218 r14) (tmp.43 r13) (tmp.44 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495))
          (begin (set! rax 574) (jump ra.495)))))
    (define L.jp.41
      ((assignment
        ((ra.497 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.210 r9)
         (tmp.213 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40))))
          (begin (set! rax 318) (jump ra.497)))))
    (define L.jp.40
      ((assignment
        ((ra.499 r15) (tmp.212 r14) (tmp.41 r13) (tmp.42 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499))
          (begin (set! rax 318) (jump ra.499)))))
    (define L.jp.37
      ((assignment
        ((ra.501 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.203 r9)
         (tmp.207 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36))))
          (begin (set! rax 62) (jump ra.501)))))
    (define L.jp.36
      ((assignment
        ((ra.503 r15)
         (tmp.39 r14)
         (tmp.205 r13)
         (tmp.40 r9)
         (tmp.504 r13)
         (tmp.206 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503))
          (begin (set! rax 62) (jump ra.503))))))
     ) 55))



(parameterize ([current-pass-list
                  (list
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((assignment
        ((ra.356 r15)
         (unsafe-vector-ref.3 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.105 r9)
         (make-init-vector.1 r8)
         (vector-ref.87 rdi)
         (vector-set!.86 rsi)
         (make-vector.84 rdx)
         (|+.78| rcx)
         (F.4 r14)
         (tmp.352 rbx)
         (tmp.386 rbx)
         (tmp.198 rbx)
         (*.77 rbx)
         (tmp.346 rcx)
         (tmp.380 rcx)
         (tmp.192 rcx)
         (>=.83 rcx)
         (tmp.347 rcx)
         (tmp.381 rcx)
         (tmp.193 rcx)
         (>.82 rcx)
         (tmp.348 rcx)
         (tmp.382 rcx)
         (tmp.194 rcx)
         (<=.81 rcx)
         (tmp.349 rcx)
         (tmp.383 rcx)
         (tmp.195 rcx)
         (<.80 rcx)
         (tmp.350 rcx)
         (tmp.384 rcx)
         (tmp.196 rcx)
         (|-.79| rcx)
         (tmp.351 rcx)
         (tmp.385 rcx)
         (tmp.197 rcx)
         (tmp.344 rdx)
         (tmp.378 rdx)
         (tmp.190 rdx)
         (vector-length.85 rdx)
         (tmp.345 rdx)
         (tmp.379 rdx)
         (tmp.191 rdx)
         (G.5 r13)
         (tmp.343 rsi)
         (tmp.377 rsi)
         (tmp.189 rsi)
         (tmp.327 rdi)
         (tmp.361 rdi)
         (tmp.173 rdi)
         (eq?.102 rdi)
         (tmp.328 rdi)
         (tmp.362 rdi)
         (tmp.174 rdi)
         (cons.101 rdi)
         (tmp.329 rdi)
         (tmp.363 rdi)
         (tmp.175 rdi)
         (not.100 rdi)
         (tmp.330 rdi)
         (tmp.364 rdi)
         (tmp.176 rdi)
         (vector?.99 rdi)
         (tmp.331 rdi)
         (tmp.365 rdi)
         (tmp.177 rdi)
         (procedure?.98 rdi)
         (tmp.332 rdi)
         (tmp.366 rdi)
         (tmp.178 rdi)
         (pair?.97 rdi)
         (tmp.333 rdi)
         (tmp.367 rdi)
         (tmp.179 rdi)
         (error?.96 rdi)
         (tmp.334 rdi)
         (tmp.368 rdi)
         (tmp.180 rdi)
         (ascii-char?.95 rdi)
         (tmp.335 rdi)
         (tmp.369 rdi)
         (tmp.181 rdi)
         (void?.94 rdi)
         (tmp.336 rdi)
         (tmp.370 rdi)
         (tmp.182 rdi)
         (empty?.93 rdi)
         (tmp.337 rdi)
         (tmp.371 rdi)
         (tmp.183 rdi)
         (boolean?.92 rdi)
         (tmp.338 rdi)
         (tmp.372 rdi)
         (tmp.184 rdi)
         (fixnum?.91 rdi)
         (tmp.339 rdi)
         (tmp.373 rdi)
         (tmp.185 rdi)
         (procedure-arity.90 rdi)
         (tmp.340 rdi)
         (tmp.374 rdi)
         (tmp.186 rdi)
         (cdr.89 rdi)
         (tmp.341 rdi)
         (tmp.375 rdi)
         (tmp.187 rdi)
         (car.88 rdi)
         (tmp.342 rdi)
         (tmp.376 rdi)
         (tmp.188 rdi)
         (tmp.326 r8)
         (tmp.360 r8)
         (tmp.172 r8)
         (tmp.355 r9)
         (tmp.325 r9)
         (tmp.359 r9)
         (tmp.171 r9)
         (tmp.354 r13)
         (tmp.388 r13)
         (tmp.200 r13)
         (tmp.389 r9)
         (tmp.201 r9)
         (H.6 r9)
         (tmp.324 r13)
         (tmp.358 r13)
         (tmp.170 r13)
         (tmp.353 r14)
         (tmp.387 r14)
         (tmp.199 r14)
         (tmp.323 r14)
         (tmp.357 r14)
         (tmp.169 r14)
         (tmp.166 r14))))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((assignment
        ((ra.390 fv4)
         (|+.78| fv0)
         (j.31 fv1)
         (h.30 fv2)
         (g.29 fv5)
         (f.28 fv6)
         (e.27 fv7)
         (d.26 fv8)
         (c.25 fv9)
         (a.23 r15)
         (c.149 r14)
         (b.24 r13)
         (r1.32 r15)
         (tmp.158 r14)
         (r2.33 r15)
         (tmp.159 r14)
         (r3.34 r15)
         (tmp.160 r14)
         (r4.35 r15)
         (tmp.161 r14)
         (r5.36 r15)
         (tmp.162 r14)
         (r6.37 r15)
         (tmp.163 r14)
         (r7.38 r15)
         (tmp.164 r14)
         (tmp.165 r14))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((assignment
        ((ra.391 r15)
         (a.15 r14)
         (b.16 r13)
         (H.6 rdi)
         (c.148 rdi)
         (c.17 rsi)
         (d.18 r8)
         (e.19 r9)
         (f.20 rdx)
         (g.21 rcx)
         (h.22 rbx)
         (tmp.157 rdi))))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((assignment
        ((ra.392 fv2)
         (|+.78| fv0)
         (nfv.393 fv3)
         (nfv.394 fv4)
         (nfv.395 fv5)
         (a.7 r15)
         (b.8 r14)
         (c.9 r13)
         (G.5 rdi)
         (d.10 r8)
         (c.147 rbx)
         (e.11 r9)
         (f.12 rsi)
         (g.13 rdx)
         (tmp.155 rdi)
         (r.14 r15)
         (tmp.156 r14))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! rbp (- rbp 24))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((assignment
        ((ra.396 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.208 r9)
         (c.146 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((assignment
        ((ra.398 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.214 r9)
         (c.145 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((assignment
        ((ra.400 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.220 r9)
         (c.144 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((assignment
        ((ra.402 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.227 r9)
         (c.143 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((assignment
        ((ra.404 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.234 r9)
         (c.142 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((assignment
        ((ra.406 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.241 r9)
         (c.141 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((assignment
        ((ra.408 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.248 r9)
         (c.140 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((assignment
        ((ra.410 r15)
         (tmp.53 r14)
         (make-init-vector.1 r13)
         (tmp.251 r9)
         (c.139 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((assignment
        ((ra.412 r15) (tmp.54 r14) (tmp.254 r13) (c.138 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((assignment
        ((ra.414 r15)
         (tmp.55 r14)
         (tmp.56 r13)
         (tmp.57 r9)
         (unsafe-vector-set!.2 rdi)
         (c.137 r8)
         (tmp.260 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((assignment
        ((ra.416 r15)
         (tmp.58 r14)
         (tmp.59 r13)
         (unsafe-vector-ref.3 r9)
         (c.136 r9)
         (tmp.266 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((assignment
        ((ra.418 r15) (tmp.60 r14) (tmp.269 r13) (c.135 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((assignment
        ((ra.420 r15) (tmp.61 r14) (tmp.272 r13) (c.134 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((assignment
        ((ra.422 r15) (tmp.62 r14) (tmp.275 r13) (c.133 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((assignment
        ((ra.424 r15) (c.132 r14) (tmp.277 r14) (tmp.63 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((assignment
        ((ra.426 r15) (c.131 r14) (tmp.279 r14) (tmp.64 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((assignment
        ((ra.428 r15) (c.130 r14) (tmp.281 r14) (tmp.65 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((assignment
        ((ra.430 r15) (c.129 r14) (tmp.283 r14) (tmp.66 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((assignment
        ((ra.432 r15) (c.128 r14) (tmp.285 r14) (tmp.67 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((assignment
        ((ra.434 r15) (c.127 r14) (tmp.287 r14) (tmp.68 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((assignment
        ((ra.436 r15) (c.126 r14) (tmp.289 r14) (tmp.69 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((assignment
        ((ra.438 r15) (c.125 r14) (tmp.291 r14) (tmp.70 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((assignment
        ((ra.440 r15) (c.124 r14) (tmp.293 r14) (tmp.71 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((assignment ((ra.442 r15) (c.123 r14) (tmp.72 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((assignment
        ((ra.443 r15)
         (tmp.73 r14)
         (tmp.74 r13)
         (c.122 r14)
         (tmp.295 r9)
         (tmp.444 r9)
         (tmp.167 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((assignment ((ra.445 r15) (tmp.75 r14) (c.121 r14) (tmp.76 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((assignment
        ((ra.446 r15)
         (tmp.103 r14)
         (vector-init-loop.105 r13)
         (tmp.297 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.300 r8)
         (c.120 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.298 r9)
         (tmp.450 r9)
         (tmp.299 r9)
         (tmp.104 r9)
         (tmp.451 r9)
         (tmp.168 r9)
         (tmp.151 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((assignment
        ((ra.452 r15)
         (len.106 r14)
         (i.108 r13)
         (c.119 r9)
         (vec.107 r8)
         (vector-init-loop.105 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((assignment
        ((ra.453 r15)
         (tmp.114 r14)
         (tmp.115 r13)
         (tmp.116 r9)
         (tmp.314 r8)
         (c.118 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((assignment
        ((ra.454 r15) (tmp.111 r14) (tmp.112 r13) (tmp.322 r9) (c.117 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((assignment ((ra.455 r15) (tmp.316 r14) (tmp.112 r13) (tmp.111 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((assignment
        ((ra.456 r15)
         (tmp.111 r14)
         (tmp.318 r13)
         (tmp.112 r9)
         (tmp.457 r13)
         (tmp.319 r13)
         (tmp.458 r13)
         (tmp.320 r13)
         (tmp.459 r13)
         (tmp.321 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((assignment
        ((ra.460 r15) (tmp.308 r14) (tmp.115 r13) (tmp.116 r9) (tmp.114 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((assignment
        ((ra.461 r15)
         (tmp.114 r14)
         (tmp.116 r13)
         (tmp.310 r9)
         (tmp.115 r8)
         (tmp.462 r9)
         (tmp.311 r9)
         (tmp.463 r9)
         (tmp.312 r9)
         (tmp.464 r9)
         (tmp.313 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((assignment
        ((ra.465 r15)
         (len.106 r14)
         (vector-init-loop.105 r13)
         (i.108 r9)
         (vec.107 r8)
         (tmp.302 rdi)
         (tmp.306 r9)
         (tmp.305 rdi)
         (tmp.468 rdi)
         (tmp.304 rdi)
         (tmp.467 rdi)
         (tmp.303 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.150 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((assignment ((ra.470 r15) (tmp.274 r14) (tmp.62 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((assignment ((ra.471 r15) (tmp.271 r14) (tmp.61 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((assignment ((ra.472 r15) (tmp.268 r14) (tmp.60 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((assignment
        ((ra.473 r15)
         (tmp.58 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.59 r9)
         (tmp.262 r8)
         (tmp.265 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.264 r13)
         (tmp.59 r9)
         (tmp.58 r8)
         (tmp.152 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((assignment
        ((ra.476 r15)
         (tmp.55 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.57 r9)
         (tmp.256 rdi)
         (tmp.56 rsi)
         (tmp.259 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.258 r13)
         (tmp.57 r9)
         (tmp.56 rdi)
         (tmp.55 r8)
         (tmp.153 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((assignment ((ra.479 r15) (tmp.253 r14) (tmp.54 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.250 r13)
         (tmp.53 r9)
         (tmp.154 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((assignment
        ((ra.481 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.243 r9)
         (tmp.247 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((assignment ((ra.483 r15) (tmp.245 r14) (tmp.51 r13) (tmp.52 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((assignment
        ((ra.484 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((assignment ((ra.486 r15) (tmp.238 r14) (tmp.49 r13) (tmp.50 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((assignment
        ((ra.487 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((assignment ((ra.489 r15) (tmp.231 r14) (tmp.47 r13) (tmp.48 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((assignment
        ((ra.490 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((assignment ((ra.492 r15) (tmp.224 r14) (tmp.45 r13) (tmp.46 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((assignment
        ((ra.493 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.216 r9)
         (tmp.219 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((assignment
        ((ra.495 r15) (tmp.218 r14) (tmp.43 r13) (tmp.44 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((assignment
        ((ra.497 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.210 r9)
         (tmp.213 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((assignment
        ((ra.499 r15) (tmp.212 r14) (tmp.41 r13) (tmp.42 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((assignment
        ((ra.501 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.203 r9)
         (tmp.207 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((assignment
        ((ra.503 r15)
         (tmp.39 r14)
         (tmp.205 r13)
         (tmp.40 r9)
         (tmp.504 r13)
         (tmp.206 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55))

  (parameterize ([current-pass-list
                  (list
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((locals ())
       (undead-out
        ((r12 rbp ra.356)
         (r12 tmp.323 rbp ra.356)
         (tmp.323 r12 rbp ra.356)
         (tmp.357 r12 rbp ra.356)
         (r12 rbp ra.356 tmp.169)
         (ra.356 rbp r12 tmp.169)
         (tmp.169 r12 rbp ra.356)
         (r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.324 rbp ra.356 unsafe-vector-ref.3)
         (tmp.324 r12 rbp ra.356 unsafe-vector-ref.3)
         (tmp.358 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 rbp ra.356 unsafe-vector-ref.3 tmp.170)
         (unsafe-vector-ref.3 ra.356 rbp r12 tmp.170)
         (tmp.170 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.325 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.325 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.359 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3 tmp.171)
         (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12 tmp.171)
         (tmp.171 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.326
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.326
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.360
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.172)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          r12
          tmp.172)
         (tmp.172
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.173)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.174)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.175)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.176)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.177)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.178)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.179)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.180)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.181)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.181)
         (tmp.181
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.182)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.182)
         (tmp.182
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.183)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.183)
         (tmp.183
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.184)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.184)
         (tmp.184
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.185)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.185)
         (tmp.185
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.340
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.186)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.186)
         (tmp.186
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.341
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.187)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.187)
         (tmp.187
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.342
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.188)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.188)
         (tmp.188
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.343
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.189)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.189)
         (tmp.189
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.190)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.190)
         (tmp.190
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.379
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.191)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.191)
         (tmp.191
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.380
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.192)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.192)
         (tmp.192
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.193)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.193)
         (tmp.193
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.194)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.194)
         (tmp.194
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.349
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.195)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.195)
         (tmp.195
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.350
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.196)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.196)
         (tmp.196
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.351
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.197)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.197)
         (tmp.197
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.386
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.198)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          tmp.198)
         (tmp.198
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          vector-init-loop.105
          make-init-vector.1)
         (vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-init-vector.1
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87)
         (make-vector.84
          make-init-vector.1
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86)
         (rbp ra.356 |+.78| r12 make-init-vector.1 make-vector.84)
         (r12 |+.78| ra.356 rbp)
         (r12 tmp.353 |+.78| ra.356 rbp)
         (tmp.353 r12 |+.78| ra.356 rbp)
         (tmp.387 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp tmp.199)
         (rbp ra.356 |+.78| r12 tmp.199)
         (tmp.199 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp F.4)
         (r12 tmp.354 |+.78| ra.356 rbp F.4)
         (tmp.354 r12 |+.78| ra.356 rbp F.4)
         (tmp.388 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp F.4 tmp.200)
         (F.4 rbp ra.356 |+.78| r12 tmp.200)
         (tmp.200 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp G.5 F.4)
         (r12 tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.389 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp G.5 F.4 tmp.201)
         (F.4 G.5 rbp ra.356 |+.78| tmp.201)
         (tmp.201 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp H.6 G.5 F.4)
         (G.5 H.6 rbp ra.356 |+.78| F.4)
         (|+.78| F.4 ra.356 rbp H.6 G.5)
         (rbp ra.356 F.4 |+.78| H.6)
         (F.4 ra.356 rbp)
         (F.4 ra.356 rbp)
         (F.4 ra.356 fv1 rbp)
         (F.4 ra.356 fv1 fv0 rbp)
         (F.4 ra.356 r9 fv1 fv0 rbp)
         (F.4 ra.356 r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (ra.356 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))
       (conflicts
        ((ra.356
          (rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           tmp.323
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           r12
           tmp.323
           ra.356))
         (r12
          (tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           rbp
           tmp.323
           ra.356))
         (tmp.323 (r12 rbp ra.356))
         (tmp.357 (ra.356 rbp r12))
         (tmp.169 (r12 rbp ra.356))
         (unsafe-vector-ref.3
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           r12
           rbp
           ra.356))
         (tmp.324 (r12 rbp ra.356 unsafe-vector-ref.3))
         (tmp.358 (unsafe-vector-ref.3 ra.356 rbp r12))
         (tmp.170 (r12 rbp ra.356 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           r12
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.325 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (tmp.359 (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12))
         (tmp.171 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (vector-init-loop.105
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.326
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.360
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.172
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (make-init-vector.1
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.361
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (eq?.102
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.362
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cons.101
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.363
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (not.100
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.364
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector?.99
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.365
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure?.98
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.366
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (pair?.97
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.367
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (error?.96
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.368
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (ascii-char?.95
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.369
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.181
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (void?.94
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.370
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.182
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (empty?.93
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.371
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.183
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (boolean?.92
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.372
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.184
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (fixnum?.91
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.373
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.185
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure-arity.90
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.340
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.374
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.186
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cdr.89
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.341
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.375
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.187
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (car.88
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.342
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.376
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.188
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector-ref.87
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.343
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.377
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.189
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-set!.86
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.378
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.190
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-length.85
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.379
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.191
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (make-vector.84
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.380
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.192
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>=.83
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.381
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.193
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>.82
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.382
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.194
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<=.81
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.349
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.383
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.195
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<.80
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.350
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.384
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.196
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|-.79|
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.351
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.385
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.197
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|+.78|
          (H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.352
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.386
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           r12
           |+.78|
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1))
         (tmp.198
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (*.77
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.353 (r12 |+.78| ra.356 rbp))
         (tmp.387 (rbp ra.356 |+.78| r12))
         (tmp.199 (r12 |+.78| ra.356 rbp))
         (F.4
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           r12
           |+.78|
           ra.356
           rbp))
         (tmp.354 (r12 |+.78| ra.356 rbp F.4))
         (tmp.388 (F.4 rbp ra.356 |+.78| r12))
         (tmp.200 (r12 |+.78| ra.356 rbp F.4))
         (G.5 (H.6 tmp.201 tmp.389 tmp.355 r12 |+.78| ra.356 rbp F.4))
         (tmp.355 (r12 |+.78| ra.356 rbp G.5 F.4))
         (tmp.389 (F.4 G.5 rbp ra.356 |+.78|))
         (tmp.201 (|+.78| ra.356 rbp G.5 F.4))
         (H.6 (|+.78| ra.356 rbp G.5 F.4))
         (tmp.166 (ra.356 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 F.4 ra.356 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 F.4 ra.356 fv1 rbp))
         (r9 (r15 rdi rsi rdx rcx r8 F.4 ra.356 fv1 fv0 rbp))
         (r8 (r15 rdi rsi rdx rcx F.4 ra.356 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx F.4 ra.356 r8 r9 fv1 fv0 rbp))
         (rdx (r15 rdi rsi F.4 ra.356 rcx r8 r9 fv1 fv0 rbp))
         (rsi (r15 rdi F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))))
       (assignment
        ((ra.356 r15)
         (unsafe-vector-ref.3 r14)
         (unsafe-vector-set!.2 r13)
         (vector-init-loop.105 r9)
         (make-init-vector.1 r8)
         (vector-ref.87 rdi)
         (vector-set!.86 rsi)
         (make-vector.84 rdx)
         (|+.78| rcx)
         (F.4 r14)
         (tmp.352 rbx)
         (tmp.386 rbx)
         (tmp.198 rbx)
         (*.77 rbx)
         (tmp.346 rcx)
         (tmp.380 rcx)
         (tmp.192 rcx)
         (>=.83 rcx)
         (tmp.347 rcx)
         (tmp.381 rcx)
         (tmp.193 rcx)
         (>.82 rcx)
         (tmp.348 rcx)
         (tmp.382 rcx)
         (tmp.194 rcx)
         (<=.81 rcx)
         (tmp.349 rcx)
         (tmp.383 rcx)
         (tmp.195 rcx)
         (<.80 rcx)
         (tmp.350 rcx)
         (tmp.384 rcx)
         (tmp.196 rcx)
         (|-.79| rcx)
         (tmp.351 rcx)
         (tmp.385 rcx)
         (tmp.197 rcx)
         (tmp.344 rdx)
         (tmp.378 rdx)
         (tmp.190 rdx)
         (vector-length.85 rdx)
         (tmp.345 rdx)
         (tmp.379 rdx)
         (tmp.191 rdx)
         (G.5 r13)
         (tmp.343 rsi)
         (tmp.377 rsi)
         (tmp.189 rsi)
         (tmp.327 rdi)
         (tmp.361 rdi)
         (tmp.173 rdi)
         (eq?.102 rdi)
         (tmp.328 rdi)
         (tmp.362 rdi)
         (tmp.174 rdi)
         (cons.101 rdi)
         (tmp.329 rdi)
         (tmp.363 rdi)
         (tmp.175 rdi)
         (not.100 rdi)
         (tmp.330 rdi)
         (tmp.364 rdi)
         (tmp.176 rdi)
         (vector?.99 rdi)
         (tmp.331 rdi)
         (tmp.365 rdi)
         (tmp.177 rdi)
         (procedure?.98 rdi)
         (tmp.332 rdi)
         (tmp.366 rdi)
         (tmp.178 rdi)
         (pair?.97 rdi)
         (tmp.333 rdi)
         (tmp.367 rdi)
         (tmp.179 rdi)
         (error?.96 rdi)
         (tmp.334 rdi)
         (tmp.368 rdi)
         (tmp.180 rdi)
         (ascii-char?.95 rdi)
         (tmp.335 rdi)
         (tmp.369 rdi)
         (tmp.181 rdi)
         (void?.94 rdi)
         (tmp.336 rdi)
         (tmp.370 rdi)
         (tmp.182 rdi)
         (empty?.93 rdi)
         (tmp.337 rdi)
         (tmp.371 rdi)
         (tmp.183 rdi)
         (boolean?.92 rdi)
         (tmp.338 rdi)
         (tmp.372 rdi)
         (tmp.184 rdi)
         (fixnum?.91 rdi)
         (tmp.339 rdi)
         (tmp.373 rdi)
         (tmp.185 rdi)
         (procedure-arity.90 rdi)
         (tmp.340 rdi)
         (tmp.374 rdi)
         (tmp.186 rdi)
         (cdr.89 rdi)
         (tmp.341 rdi)
         (tmp.375 rdi)
         (tmp.187 rdi)
         (car.88 rdi)
         (tmp.342 rdi)
         (tmp.376 rdi)
         (tmp.188 rdi)
         (tmp.326 r8)
         (tmp.360 r8)
         (tmp.172 r8)
         (tmp.355 r9)
         (tmp.325 r9)
         (tmp.359 r9)
         (tmp.171 r9)
         (tmp.354 r13)
         (tmp.388 r13)
         (tmp.200 r13)
         (tmp.389 r9)
         (tmp.201 r9)
         (H.6 r9)
         (tmp.324 r13)
         (tmp.358 r13)
         (tmp.170 r13)
         (tmp.353 r14)
         (tmp.387 r14)
         (tmp.199 r14)
         (tmp.323 r14)
         (tmp.357 r14)
         (tmp.169 r14)
         (tmp.166 r14))))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 ra.390 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 ra.390 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 ra.390 rbp)
         (rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 ra.390 rbp)
         (r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 ra.390 rbp)
         (r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 ra.390 rbp)
         (fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 ra.390 rbp)
         (fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 ra.390 rbp)
         (fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 ra.390 rbp)
         (fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 ra.390 rbp)
         (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((a.23 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r1.32 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r2.33 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r3.34 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r4.35 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax h.30 j.31 |+.78| ra.390 rbp)
          ((r5.36 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         ((rax j.31 |+.78| ra.390 rbp)
          ((r6.37 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.31 r7.38 |+.78| ra.390 rbp)
         (j.31 r7.38 |+.78| ra.390 rbp)
         (r7.38 |+.78| ra.390 rdx rbp)
         (|+.78| ra.390 rsi rdx rbp)
         (ra.390 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.390
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp))
         (rbp
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           r15
           rdi
           rsi
           rdx
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           ra.390))
         (fv3 (h.30 g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv2 (g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv1 (f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv0 (e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (r9 (d.26 c.25 b.24 a.23 c.149 ra.390))
         (r8 (c.25 b.24 a.23 c.149 ra.390))
         (rcx (b.24 a.23 c.149 ra.390))
         (rdx
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           r15
           rdi
           rsi
           |+.78|
           rbp
           a.23
           c.149
           ra.390))
         (rsi (r15 rdi |+.78| rdx rbp c.149 ra.390))
         (rdi (r15 rsi rdx rbp ra.390))
         (c.149
          (j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           ra.390
           rbp))
         (a.23
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           ra.390
           rbp))
         (b.24
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           ra.390
           rbp))
         (c.25
          (tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           ra.390
           rbp))
         (d.26
          (tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           ra.390
           rbp))
         (e.27
          (tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           ra.390
           rbp))
         (f.28
          (tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           ra.390
           rbp))
         (g.29
          (tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           ra.390
           rbp))
         (h.30
          (tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           ra.390
           rbp))
         (j.31
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           h.30
           ra.390
           rbp))
         (|+.78|
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           rsi
           rdx
           rax
           rbp
           ra.390
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23))
         (tmp.158 (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (rax (rbp ra.390 |+.78| j.31 h.30 g.29 f.28 e.27 d.26 c.25))
         (r15 (rdi rsi rdx rbp))
         (r1.32
          (rdx tmp.159 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.159 (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r2.33 (rdx tmp.160 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.160 (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r3.34 (rdx tmp.161 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.161 (r3.34 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r4.35 (rdx tmp.162 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.162 (r4.35 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r5.36 (rdx tmp.163 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.163 (r5.36 g.29 h.30 j.31 ra.390 rbp))
         (r6.37 (rdx tmp.164 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.164 (r6.37 h.30 j.31 ra.390 rbp))
         (r7.38 (rdx tmp.165 j.31 |+.78| ra.390 rbp))
         (tmp.165 (j.31 r7.38 ra.390 rbp))))
       (assignment
        ((ra.390 fv4)
         (|+.78| fv0)
         (j.31 fv1)
         (h.30 fv2)
         (g.29 fv5)
         (f.28 fv6)
         (e.27 fv7)
         (d.26 fv8)
         (c.25 fv9)
         (a.23 r15)
         (c.149 r14)
         (b.24 r13)
         (r1.32 r15)
         (tmp.158 r14)
         (r2.33 r15)
         (tmp.159 r14)
         (r3.34 r15)
         (tmp.160 r14)
         (r4.35 r15)
         (tmp.161 r14)
         (r5.36 r15)
         (tmp.162 r14)
         (r6.37 r15)
         (tmp.163 r14)
         (r7.38 r15)
         (tmp.164 r14)
         (tmp.165 r14))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.391 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.148 ra.391 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.148 a.15 ra.391 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.148 b.16 a.15 ra.391 rbp)
         (r8 r9 fv0 fv1 fv2 c.148 c.17 b.16 a.15 ra.391 rbp)
         (r9 fv0 fv1 fv2 c.148 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv0 fv1 fv2 c.148 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv1 fv2 c.148 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv2 c.148 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (c.148 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 rbp)
         (g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 rbp)
         (f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 rbp)
         (e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 fv0 rbp)
         (d.18 c.17 b.16 a.15 H.6 ra.391 r9 fv3 fv2 fv1 fv0 rbp)
         (c.17 b.16 a.15 H.6 ra.391 r8 r9 fv3 fv2 fv1 fv0 rbp)
         (b.16 a.15 H.6 ra.391 rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (a.15 H.6 ra.391 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (H.6 ra.391 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (ra.391 rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)))
       (conflicts
        ((ra.391
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv2
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           fv3
           rbp
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           H.6
           fv3
           fv2
           rbp
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           H.6
           fv3
           fv2
           fv1
           rbp
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           H.6
           fv3
           fv2
           fv1
           fv0
           rbp
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           H.6
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (rcx
          (r15
           rdi
           rsi
           rdx
           H.6
           r8
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           b.16
           a.15
           c.148
           ra.391))
         (rdx
          (r15 rdi rsi H.6 rcx r8 r9 fv3 fv2 fv1 fv0 rbp a.15 c.148 ra.391))
         (rsi (r15 rdi H.6 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp c.148 ra.391))
         (rdi (r15 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp ra.391))
         (c.148
          (h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.391
           rbp))
         (a.15
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           ra.391
           rbp))
         (b.16
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           a.15
           ra.391
           rbp))
         (c.17
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           b.16
           a.15
           ra.391
           rbp))
         (d.18
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           r9
           fv0
           fv1
           fv2
           c.148
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (e.19
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           fv0
           fv1
           fv2
           c.148
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (f.20
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           fv1
           fv2
           c.148
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (g.21
          (fv3
           tmp.157
           H.6
           h.22
           fv2
           c.148
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (h.22
          (fv3
           tmp.157
           H.6
           c.148
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (H.6
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp
           ra.391
           a.15
           b.16
           c.17
           d.18
           e.19
           f.20
           g.21
           h.22))
         (tmp.157 (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp))
         (fv3
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           H.6
           ra.391
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp))))
       (assignment
        ((ra.391 r15)
         (a.15 r14)
         (b.16 r13)
         (H.6 rdi)
         (c.148 rdi)
         (c.17 rsi)
         (d.18 r8)
         (e.19 r9)
         (f.20 rdx)
         (g.21 rcx)
         (h.22 rbx)
         (tmp.157 rdi))))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.392 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 c.147 ra.392 rbp)
         (rdx rcx r8 r9 fv0 fv1 c.147 a.7 ra.392 rbp)
         (rcx r8 r9 fv0 fv1 c.147 a.7 b.8 ra.392 rbp)
         (r8 r9 fv0 fv1 c.147 a.7 b.8 c.9 ra.392 rbp)
         (r9 fv0 fv1 c.147 a.7 b.8 c.9 d.10 ra.392 rbp)
         (fv0 fv1 c.147 a.7 b.8 c.9 d.10 e.11 ra.392 rbp)
         (fv1 c.147 a.7 b.8 c.9 d.10 e.11 f.12 ra.392 rbp)
         (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (c.147 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         ((rax |+.78| ra.392 rbp)
          ((g.13 f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 rbp)
           (f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 rbp)
           (e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 nfv.393 rbp)
           (d.10 c.9 b.8 a.7 G.5 r9 nfv.395 nfv.394 nfv.393 rbp)
           (c.9 b.8 a.7 G.5 r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (b.8 a.7 G.5 rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (a.7 G.5 rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (G.5 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)))
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rdx rbp)
         (|+.78| ra.392 rsi rdx rbp)
         (ra.392 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.392
          (tmp.156
           r.14
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           rbp))
         (rbp
          (tmp.156
           r.14
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (fv1 (f.12 e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (fv0 (e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           G.5
           nfv.395
           nfv.394
           nfv.393
           rbp
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           G.5
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (rcx
          (r15
           rdi
           rsi
           rdx
           G.5
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           b.8
           a.7
           c.147
           ra.392))
         (rdx
          (r.14
           |+.78|
           r15
           rdi
           rsi
           G.5
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           a.7
           c.147
           ra.392))
         (rsi
          (|+.78|
           r15
           rdi
           G.5
           rdx
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.147
           ra.392))
         (rdi (r15 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp ra.392))
         (c.147
          (G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.392
           rbp))
         (a.7
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           ra.392
           rbp))
         (b.8
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           ra.392
           rbp))
         (c.9
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           ra.392
           rbp))
         (d.10
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           ra.392
           rbp))
         (e.11
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           ra.392
           rbp))
         (f.12
          (nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           ra.392
           rbp))
         (g.13
          (nfv.395
           tmp.155
           |+.78|
           G.5
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           f.12
           ra.392
           rbp))
         (G.5
          (rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           |+.78|
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147))
         (|+.78|
          (rsi
           rdx
           r.14
           rax
           tmp.155
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5))
         (tmp.155 (a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp))
         (rax (rbp ra.392 |+.78|))
         (nfv.395
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           rbp))
         (nfv.394
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           rbp))
         (nfv.393
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           nfv.394
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp))
         (r.14 (rdx tmp.156 |+.78| ra.392 rbp))
         (tmp.156 (r.14 ra.392 rbp))))
       (assignment
        ((ra.392 fv2)
         (|+.78| fv0)
         (nfv.393 fv3)
         (nfv.394 fv4)
         (nfv.395 fv5)
         (a.7 r15)
         (b.8 r14)
         (c.9 r13)
         (G.5 rdi)
         (d.10 r8)
         (c.147 rbx)
         (e.11 r9)
         (f.12 rsi)
         (g.13 rdx)
         (tmp.155 rdi)
         (r.14 r15)
         (tmp.156 r14))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! rbp (- rbp 24))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.39 ra.396 rbp)
         (tmp.40 tmp.39 ra.396 rbp)
         (tmp.397 tmp.40 tmp.39 ra.396 rbp)
         (tmp.208 tmp.40 tmp.39 ra.396 rbp)
         ((tmp.40 tmp.39 ra.396 rbp)
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.146 r15 rdi rsi tmp.39 ra.396 rbp))
         (rbp (tmp.208 tmp.397 tmp.40 tmp.39 c.146 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.208 tmp.397 tmp.40 tmp.39 c.146 rbp rdi rsi rdx))
         (tmp.39 (tmp.208 tmp.397 tmp.40 ra.396 rbp rdx))
         (rsi (c.146 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.146 (rsi rdx ra.396 rbp))
         (tmp.40 (tmp.208 tmp.397 tmp.39 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.39 tmp.40))
         (tmp.208 (tmp.40 tmp.39 ra.396 rbp))))
       (assignment
        ((ra.396 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.208 r9)
         (c.146 r14)
         (tmp.397 r9))))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.41 ra.398 rbp)
         (tmp.42 tmp.41 ra.398 rbp)
         (tmp.399 tmp.42 tmp.41 ra.398 rbp)
         (tmp.214 tmp.42 tmp.41 ra.398 rbp)
         ((tmp.42 tmp.41 ra.398 rbp)
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.145 r15 rdi rsi tmp.41 ra.398 rbp))
         (rbp (tmp.214 tmp.399 tmp.42 tmp.41 c.145 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.214 tmp.399 tmp.42 tmp.41 c.145 rbp rdi rsi rdx))
         (tmp.41 (tmp.214 tmp.399 tmp.42 ra.398 rbp rdx))
         (rsi (c.145 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.145 (rsi rdx ra.398 rbp))
         (tmp.42 (tmp.214 tmp.399 tmp.41 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.41 tmp.42))
         (tmp.214 (tmp.42 tmp.41 ra.398 rbp))))
       (assignment
        ((ra.398 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.214 r9)
         (c.145 r14)
         (tmp.399 r9))))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.43 ra.400 rbp)
         (tmp.44 tmp.43 ra.400 rbp)
         (tmp.401 tmp.44 tmp.43 ra.400 rbp)
         (tmp.220 tmp.44 tmp.43 ra.400 rbp)
         ((tmp.44 tmp.43 ra.400 rbp)
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.144 r15 rdi rsi tmp.43 ra.400 rbp))
         (rbp (tmp.220 tmp.401 tmp.44 tmp.43 c.144 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.220 tmp.401 tmp.44 tmp.43 c.144 rbp rdi rsi rdx))
         (tmp.43 (tmp.220 tmp.401 tmp.44 ra.400 rbp rdx))
         (rsi (c.144 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.144 (rsi rdx ra.400 rbp))
         (tmp.44 (tmp.220 tmp.401 tmp.43 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.43 tmp.44))
         (tmp.220 (tmp.44 tmp.43 ra.400 rbp))))
       (assignment
        ((ra.400 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.220 r9)
         (c.144 r14)
         (tmp.401 r9))))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.45 ra.402 rbp)
         (tmp.46 tmp.45 ra.402 rbp)
         (tmp.403 tmp.46 tmp.45 ra.402 rbp)
         (tmp.227 tmp.46 tmp.45 ra.402 rbp)
         ((tmp.46 tmp.45 ra.402 rbp)
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.143 r15 rdi rsi tmp.45 ra.402 rbp))
         (rbp (tmp.227 tmp.403 tmp.46 tmp.45 c.143 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.227 tmp.403 tmp.46 tmp.45 c.143 rbp rdi rsi rdx))
         (tmp.45 (tmp.227 tmp.403 tmp.46 ra.402 rbp rdx))
         (rsi (c.143 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.143 (rsi rdx ra.402 rbp))
         (tmp.46 (tmp.227 tmp.403 tmp.45 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.45 tmp.46))
         (tmp.227 (tmp.46 tmp.45 ra.402 rbp))))
       (assignment
        ((ra.402 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.227 r9)
         (c.143 r14)
         (tmp.403 r9))))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.47 ra.404 rbp)
         (tmp.48 tmp.47 ra.404 rbp)
         (tmp.405 tmp.48 tmp.47 ra.404 rbp)
         (tmp.234 tmp.48 tmp.47 ra.404 rbp)
         ((tmp.48 tmp.47 ra.404 rbp)
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.142 r15 rdi rsi tmp.47 ra.404 rbp))
         (rbp (tmp.234 tmp.405 tmp.48 tmp.47 c.142 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.234 tmp.405 tmp.48 tmp.47 c.142 rbp rdi rsi rdx))
         (tmp.47 (tmp.234 tmp.405 tmp.48 ra.404 rbp rdx))
         (rsi (c.142 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.142 (rsi rdx ra.404 rbp))
         (tmp.48 (tmp.234 tmp.405 tmp.47 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.47 tmp.48))
         (tmp.234 (tmp.48 tmp.47 ra.404 rbp))))
       (assignment
        ((ra.404 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.234 r9)
         (c.142 r14)
         (tmp.405 r9))))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.49 ra.406 rbp)
         (tmp.50 tmp.49 ra.406 rbp)
         (tmp.407 tmp.50 tmp.49 ra.406 rbp)
         (tmp.241 tmp.50 tmp.49 ra.406 rbp)
         ((tmp.50 tmp.49 ra.406 rbp)
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.141 r15 rdi rsi tmp.49 ra.406 rbp))
         (rbp (tmp.241 tmp.407 tmp.50 tmp.49 c.141 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.241 tmp.407 tmp.50 tmp.49 c.141 rbp rdi rsi rdx))
         (tmp.49 (tmp.241 tmp.407 tmp.50 ra.406 rbp rdx))
         (rsi (c.141 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.141 (rsi rdx ra.406 rbp))
         (tmp.50 (tmp.241 tmp.407 tmp.49 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.49 tmp.50))
         (tmp.241 (tmp.50 tmp.49 ra.406 rbp))))
       (assignment
        ((ra.406 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.241 r9)
         (c.141 r14)
         (tmp.407 r9))))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.51 ra.408 rbp)
         (tmp.52 tmp.51 ra.408 rbp)
         (tmp.409 tmp.52 tmp.51 ra.408 rbp)
         (tmp.248 tmp.52 tmp.51 ra.408 rbp)
         ((tmp.52 tmp.51 ra.408 rbp)
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.140 r15 rdi rsi tmp.51 ra.408 rbp))
         (rbp (tmp.248 tmp.409 tmp.52 tmp.51 c.140 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.248 tmp.409 tmp.52 tmp.51 c.140 rbp rdi rsi rdx))
         (tmp.51 (tmp.248 tmp.409 tmp.52 ra.408 rbp rdx))
         (rsi (c.140 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.140 (rsi rdx ra.408 rbp))
         (tmp.52 (tmp.248 tmp.409 tmp.51 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.51 tmp.52))
         (tmp.248 (tmp.52 tmp.51 ra.408 rbp))))
       (assignment
        ((ra.408 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.248 r9)
         (c.140 r14)
         (tmp.409 r9))))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((locals ())
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.139 ra.410 rbp)
         (c.139 tmp.53 ra.410 rbp)
         (tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.251 tmp.53 make-init-vector.1 ra.410 rbp)
         ((tmp.53 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.251
           tmp.411
           make-init-vector.1
           tmp.53
           c.139
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.251 tmp.411 make-init-vector.1 tmp.53 c.139 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.251 tmp.411 rbp ra.410 tmp.53 rdx))
         (rsi (c.139 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.139 (tmp.53 rsi ra.410 rbp))
         (tmp.53 (tmp.251 tmp.411 make-init-vector.1 c.139 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.53))
         (tmp.251 (tmp.53 make-init-vector.1 ra.410 rbp))))
       (assignment
        ((ra.410 r15)
         (tmp.53 r14)
         (make-init-vector.1 r13)
         (tmp.251 r9)
         (c.139 r13)
         (tmp.411 r9))))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((locals ())
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.54 ra.412 rbp)
         (tmp.413 tmp.54 ra.412 rbp)
         (tmp.254 tmp.54 ra.412 rbp)
         ((tmp.54 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.138 r15 rdi ra.412 rbp))
         (rbp (tmp.254 tmp.413 tmp.54 c.138 ra.412 r15 rdi rsi))
         (ra.412 (tmp.254 tmp.413 tmp.54 c.138 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.138 (rsi ra.412 rbp))
         (tmp.54 (tmp.254 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.54))
         (tmp.254 (tmp.54 ra.412 rbp))))
       (assignment
        ((ra.412 r15) (tmp.54 r14) (tmp.254 r13) (c.138 r14) (tmp.413 r13))))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.137 ra.414 rbp)
         (rdx rcx c.137 tmp.55 ra.414 rbp)
         (rcx c.137 tmp.56 tmp.55 ra.414 rbp)
         (c.137 tmp.56 tmp.57 tmp.55 ra.414 rbp)
         (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.415 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.260 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         ((tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))
         (rbp
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.55
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           c.137
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.260 tmp.415 rbp ra.414 tmp.55 tmp.57 tmp.56 rcx r8))
         (tmp.57
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           c.137
           tmp.56
           tmp.55
           ra.414
           rbp
           r8))
         (rcx
          (tmp.56
           c.137
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.55
           ra.414
           r8
           rbp))
         (rdx (c.137 r15 rdi rsi tmp.55 ra.414 rcx r8 rbp))
         (rsi (c.137 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.137 (tmp.57 tmp.56 tmp.55 rsi rdx rcx ra.414 rbp))
         (tmp.56
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           rcx
           c.137
           tmp.55
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56))
         (tmp.260 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))))
       (assignment
        ((ra.414 r15)
         (tmp.55 r14)
         (tmp.56 r13)
         (tmp.57 r9)
         (unsafe-vector-set!.2 rdi)
         (c.137 r8)
         (tmp.260 r8)
         (tmp.415 r8))))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.136 ra.416 rbp)
         (rdx c.136 tmp.58 ra.416 rbp)
         (c.136 tmp.59 tmp.58 ra.416 rbp)
         (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.417 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.266 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         ((tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.58 ra.416 rbp))
         (rbp
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.58
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           c.136
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.266 tmp.417 rbp ra.416 tmp.58 tmp.59 rcx))
         (rdx (c.136 r15 rdi rsi tmp.58 ra.416 rcx rbp))
         (rsi (c.136 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.136 (tmp.59 tmp.58 rsi rdx ra.416 rbp))
         (tmp.59 (tmp.266 tmp.417 unsafe-vector-ref.3 c.136 tmp.58 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
         (tmp.266 (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp))))
       (assignment
        ((ra.416 r15)
         (tmp.58 r14)
         (tmp.59 r13)
         (unsafe-vector-ref.3 r9)
         (c.136 r9)
         (tmp.266 r8)
         (tmp.417 r8))))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((locals ())
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.60 ra.418 rbp)
         (tmp.419 tmp.60 ra.418 rbp)
         (tmp.269 tmp.60 ra.418 rbp)
         ((tmp.60 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.135 r15 rdi ra.418 rbp))
         (rbp (tmp.269 tmp.419 tmp.60 c.135 ra.418 r15 rdi rsi))
         (ra.418 (tmp.269 tmp.419 tmp.60 c.135 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.135 (rsi ra.418 rbp))
         (tmp.60 (tmp.269 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.60))
         (tmp.269 (tmp.60 ra.418 rbp))))
       (assignment
        ((ra.418 r15) (tmp.60 r14) (tmp.269 r13) (c.135 r14) (tmp.419 r13))))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((locals ())
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.61 ra.420 rbp)
         (tmp.421 tmp.61 ra.420 rbp)
         (tmp.272 tmp.61 ra.420 rbp)
         ((tmp.61 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.134 r15 rdi ra.420 rbp))
         (rbp (tmp.272 tmp.421 tmp.61 c.134 ra.420 r15 rdi rsi))
         (ra.420 (tmp.272 tmp.421 tmp.61 c.134 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.134 (rsi ra.420 rbp))
         (tmp.61 (tmp.272 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.61))
         (tmp.272 (tmp.61 ra.420 rbp))))
       (assignment
        ((ra.420 r15) (tmp.61 r14) (tmp.272 r13) (c.134 r14) (tmp.421 r13))))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((locals ())
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.62 ra.422 rbp)
         (tmp.423 tmp.62 ra.422 rbp)
         (tmp.275 tmp.62 ra.422 rbp)
         ((tmp.62 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.133 r15 rdi ra.422 rbp))
         (rbp (tmp.275 tmp.423 tmp.62 c.133 ra.422 r15 rdi rsi))
         (ra.422 (tmp.275 tmp.423 tmp.62 c.133 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.133 (rsi ra.422 rbp))
         (tmp.62 (tmp.275 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.62))
         (tmp.275 (tmp.62 ra.422 rbp))))
       (assignment
        ((ra.422 r15) (tmp.62 r14) (tmp.275 r13) (c.133 r14) (tmp.423 r13))))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((locals ())
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.63 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.277 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.277 tmp.425 tmp.63 c.132 ra.424 rax))
         (ra.424 (tmp.277 tmp.425 tmp.63 c.132 rdi rsi rbp rax))
         (rsi (c.132 ra.424))
         (rdi (ra.424))
         (c.132 (rsi ra.424 rbp))
         (tmp.63 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.277 (ra.424 rbp))))
       (assignment
        ((ra.424 r15) (c.132 r14) (tmp.277 r14) (tmp.63 r14) (tmp.425 r14))))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((locals ())
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.64 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.279 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.279 tmp.427 tmp.64 c.131 ra.426 rax))
         (ra.426 (tmp.279 tmp.427 tmp.64 c.131 rdi rsi rbp rax))
         (rsi (c.131 ra.426))
         (rdi (ra.426))
         (c.131 (rsi ra.426 rbp))
         (tmp.64 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.279 (ra.426 rbp))))
       (assignment
        ((ra.426 r15) (c.131 r14) (tmp.279 r14) (tmp.64 r14) (tmp.427 r14))))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((locals ())
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.65 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.281 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.281 tmp.429 tmp.65 c.130 ra.428 rax))
         (ra.428 (tmp.281 tmp.429 tmp.65 c.130 rdi rsi rbp rax))
         (rsi (c.130 ra.428))
         (rdi (ra.428))
         (c.130 (rsi ra.428 rbp))
         (tmp.65 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.281 (ra.428 rbp))))
       (assignment
        ((ra.428 r15) (c.130 r14) (tmp.281 r14) (tmp.65 r14) (tmp.429 r14))))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((locals ())
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.66 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.283 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.283 tmp.431 tmp.66 c.129 ra.430 rax))
         (ra.430 (tmp.283 tmp.431 tmp.66 c.129 rdi rsi rbp rax))
         (rsi (c.129 ra.430))
         (rdi (ra.430))
         (c.129 (rsi ra.430 rbp))
         (tmp.66 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.283 (ra.430 rbp))))
       (assignment
        ((ra.430 r15) (c.129 r14) (tmp.283 r14) (tmp.66 r14) (tmp.431 r14))))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((locals ())
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.67 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.285 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.285 tmp.433 tmp.67 c.128 ra.432 rax))
         (ra.432 (tmp.285 tmp.433 tmp.67 c.128 rdi rsi rbp rax))
         (rsi (c.128 ra.432))
         (rdi (ra.432))
         (c.128 (rsi ra.432 rbp))
         (tmp.67 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.285 (ra.432 rbp))))
       (assignment
        ((ra.432 r15) (c.128 r14) (tmp.285 r14) (tmp.67 r14) (tmp.433 r14))))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((locals ())
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.68 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.287 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.287 tmp.435 tmp.68 c.127 ra.434 rax))
         (ra.434 (tmp.287 tmp.435 tmp.68 c.127 rdi rsi rbp rax))
         (rsi (c.127 ra.434))
         (rdi (ra.434))
         (c.127 (rsi ra.434 rbp))
         (tmp.68 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.287 (ra.434 rbp))))
       (assignment
        ((ra.434 r15) (c.127 r14) (tmp.287 r14) (tmp.68 r14) (tmp.435 r14))))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((locals ())
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.69 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.289 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.289 tmp.437 tmp.69 c.126 ra.436 rax))
         (ra.436 (tmp.289 tmp.437 tmp.69 c.126 rdi rsi rbp rax))
         (rsi (c.126 ra.436))
         (rdi (ra.436))
         (c.126 (rsi ra.436 rbp))
         (tmp.69 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.289 (ra.436 rbp))))
       (assignment
        ((ra.436 r15) (c.126 r14) (tmp.289 r14) (tmp.69 r14) (tmp.437 r14))))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((locals ())
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.70 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.291 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.291 tmp.439 tmp.70 c.125 ra.438 rax))
         (ra.438 (tmp.291 tmp.439 tmp.70 c.125 rdi rsi rbp rax))
         (rsi (c.125 ra.438))
         (rdi (ra.438))
         (c.125 (rsi ra.438 rbp))
         (tmp.70 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.291 (ra.438 rbp))))
       (assignment
        ((ra.438 r15) (c.125 r14) (tmp.291 r14) (tmp.70 r14) (tmp.439 r14))))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((locals ())
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.71 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.293 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.293 tmp.441 tmp.71 c.124 ra.440 rax))
         (ra.440 (tmp.293 tmp.441 tmp.71 c.124 rdi rsi rbp rax))
         (rsi (c.124 ra.440))
         (rdi (ra.440))
         (c.124 (rsi ra.440 rbp))
         (tmp.71 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.293 (ra.440 rbp))))
       (assignment
        ((ra.440 r15) (c.124 r14) (tmp.293 r14) (tmp.71 r14) (tmp.441 r14))))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((locals ())
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.72 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.72 c.123 ra.442 rax))
         (ra.442 (tmp.72 c.123 rdi rsi rbp rax))
         (rsi (c.123 ra.442))
         (rdi (ra.442))
         (c.123 (rsi ra.442 rbp))
         (tmp.72 (ra.442 rbp))))
       (assignment ((ra.442 r15) (c.123 r14) (tmp.72 r14))))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((locals ())
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.73)
         (r12 tmp.74 ra.443 rbp tmp.73)
         (r12 tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.444 tmp.74 ra.443 rbp tmp.73)
         (tmp.74 ra.443 rbp tmp.73 tmp.167)
         (rbp ra.443 tmp.74 tmp.167)
         (tmp.167 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.443
          (rax
           tmp.167
           tmp.444
           tmp.295
           tmp.74
           tmp.73
           c.122
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.167 tmp.444 r12 tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (r12 (rbp tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (rdx (tmp.73 c.122 ra.443))
         (rsi (c.122 ra.443))
         (rdi (ra.443))
         (c.122 (rsi rdx r12 ra.443 rbp))
         (tmp.73 (tmp.167 tmp.444 tmp.295 tmp.74 rdx r12 ra.443 rbp))
         (tmp.74 (tmp.167 tmp.444 tmp.295 r12 ra.443 rbp tmp.73))
         (tmp.295 (r12 tmp.74 ra.443 rbp tmp.73))
         (tmp.444 (tmp.73 rbp ra.443 tmp.74))
         (tmp.167 (tmp.74 ra.443 rbp tmp.73))
         (rax (ra.443 rbp))))
       (assignment
        ((ra.443 r15)
         (tmp.73 r14)
         (tmp.74 r13)
         (c.122 r14)
         (tmp.295 r9)
         (tmp.444 r9)
         (tmp.167 r9))))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.75 ra.445 rbp)
         (tmp.75 tmp.76 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.76 tmp.75 c.121 ra.445 rax))
         (ra.445 (tmp.76 tmp.75 c.121 rdi rsi rdx rbp rax))
         (rdx (tmp.75 c.121 ra.445))
         (rsi (c.121 ra.445))
         (rdi (ra.445))
         (c.121 (rsi rdx ra.445 rbp))
         (tmp.75 (tmp.76 rdx ra.445 rbp))
         (tmp.76 (tmp.75 ra.445 rbp))))
       (assignment ((ra.445 r15) (tmp.75 r14) (c.121 r14) (tmp.76 r13))))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((locals ())
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.120 r12 rbp ra.446)
         (c.120 r12 rbp ra.446 tmp.103)
         (r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.447 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.449 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.298 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.450 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.299 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.451 rbp ra.446 vector-init-loop.105 tmp.103)
         (rbp ra.446 vector-init-loop.105 tmp.103 tmp.168)
         (tmp.168 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.103 vector-init-loop.105 ra.446 rcx rbp)
         (tmp.103 vector-init-loop.105 ra.446 rdx rcx rbp)
         (vector-init-loop.105 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           r12
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (r12
          (rbp
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (rsi (r15 rdi vector-init-loop.105 rdx rcx rbp c.120 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.120 (tmp.103 rsi r12 rbp ra.446))
         (tmp.103
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           c.120
           r12
           rbp
           ra.446))
         (vector-init-loop.105
          (rsi
           rdx
           rcx
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           tmp.103
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.297 (tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.448 (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.449 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.298 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.450 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.299 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.540 (tmp.300 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.300 (r12 tmp.540 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.451 (tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.168 (rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.104 (tmp.151 tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.151 (tmp.104 tmp.103 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.103 vector-init-loop.105 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.103 vector-init-loop.105 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment
        ((ra.446 r15)
         (tmp.103 r14)
         (vector-init-loop.105 r13)
         (tmp.297 r9)
         (tmp.448 r8)
         (tmp.540 r9)
         (tmp.300 r8)
         (c.120 r13)
         (tmp.447 r9)
         (tmp.449 r9)
         (tmp.298 r9)
         (tmp.450 r9)
         (tmp.299 r9)
         (tmp.104 r9)
         (tmp.451 r9)
         (tmp.168 r9)
         (tmp.151 r13))))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.119 ra.452 rbp)
         (rdx rcx c.119 len.106 ra.452 rbp)
         (rcx c.119 len.106 i.108 ra.452 rbp)
         (c.119 vec.107 len.106 i.108 ra.452 rbp)
         (vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
         ((vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx vector-init-loop.105 len.106 i.108 ra.452 rbp))
         (rbp
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (i.108
          (vector-init-loop.105 vec.107 c.119 len.106 ra.452 rbp rdx rcx r8))
         (len.106
          (vector-init-loop.105 vec.107 i.108 rdx c.119 ra.452 rbp rcx r8))
         (vector-init-loop.105 (rbp ra.452 i.108 len.106 vec.107 r8))
         (rcx (c.119 r15 rdi rsi rdx len.106 i.108 ra.452 r8 rbp))
         (rdx (len.106 c.119 r15 rdi rsi i.108 ra.452 rcx r8 rbp))
         (rsi (c.119 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.119 (vec.107 i.108 len.106 rsi rdx rcx ra.452 rbp))
         (vec.107 (vector-init-loop.105 c.119 len.106 i.108 ra.452 rbp))))
       (assignment
        ((ra.452 r15)
         (len.106 r14)
         (i.108 r13)
         (c.119 r9)
         (vec.107 r8)
         (vector-init-loop.105 r9))))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.114 ra.453 rbp)
         (rcx tmp.114 tmp.115 ra.453 rbp)
         (tmp.114 tmp.116 tmp.115 ra.453 rbp)
         (tmp.314 tmp.114 tmp.116 tmp.115 ra.453 rbp)
         ((tmp.114 tmp.116 tmp.115 ra.453 rbp)
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (tmp.114 c.118 r15 rdi rsi rdx tmp.116 tmp.115 ra.453 rbp))
         (rbp
          (tmp.314 tmp.116 tmp.115 tmp.114 c.118 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.314 tmp.116 tmp.115 tmp.114 c.118 rbp rdi rsi rdx rcx))
         (tmp.115 (tmp.314 tmp.116 tmp.114 ra.453 rbp rdx rcx))
         (tmp.116 (tmp.314 tmp.114 tmp.115 ra.453 rbp rcx))
         (rdx (tmp.114 c.118 r15 rdi rsi tmp.115 ra.453 rcx rbp))
         (rsi (c.118 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.118 (rsi rdx rcx ra.453 rbp))
         (tmp.114 (tmp.314 tmp.116 tmp.115 rdx rcx ra.453 rbp))
         (tmp.314 (rbp ra.453 tmp.115 tmp.116 tmp.114))))
       (assignment
        ((ra.453 r15)
         (tmp.114 r14)
         (tmp.115 r13)
         (tmp.116 r9)
         (tmp.314 r8)
         (c.118 r14))))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.111 ra.454 rbp)
         (tmp.111 tmp.112 ra.454 rbp)
         (tmp.322 tmp.111 tmp.112 ra.454 rbp)
         ((tmp.111 tmp.112 ra.454 rbp)
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (tmp.111 c.117 r15 rdi rsi tmp.112 ra.454 rbp))
         (rbp (tmp.322 tmp.112 tmp.111 c.117 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.322 tmp.112 tmp.111 c.117 rbp rdi rsi rdx))
         (tmp.112 (tmp.322 tmp.111 ra.454 rbp rdx))
         (rsi (c.117 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.454 rbp))
         (tmp.111 (tmp.322 tmp.112 rdx ra.454 rbp))
         (tmp.322 (rbp ra.454 tmp.112 tmp.111))))
       (assignment
        ((ra.454 r15) (tmp.111 r14) (tmp.112 r13) (tmp.322 r9) (c.117 r14))))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.316 ra.455 rbp)
         (rdx tmp.316 tmp.112 ra.455 rbp)
         (tmp.316 tmp.111 tmp.112 ra.455 rbp)
         ((tmp.111 tmp.112 ra.455 rbp)
          ((tmp.111 tmp.112 ra.455 rbp)
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.111 tmp.112 tmp.316 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.111 tmp.112 tmp.316 rbp rdi rsi rdx rax))
         (rdx (tmp.316 r15 rdi rsi tmp.112 ra.455 rbp))
         (tmp.112 (tmp.111 tmp.316 ra.455 rbp rdx))
         (rsi (tmp.316 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.316 (tmp.111 tmp.112 rsi rdx ra.455 rbp))
         (tmp.111 (tmp.316 tmp.112 ra.455 rbp))))
       (assignment ((ra.455 r15) (tmp.316 r14) (tmp.112 r13) (tmp.111 r9))))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.318 ra.456 rbp)
         (rdx tmp.318 tmp.112 ra.456 rbp)
         (tmp.318 tmp.112 tmp.111 ra.456 rbp)
         ((tmp.112 tmp.111 ra.456 rbp)
          ((tmp.457 tmp.111 ra.456 rbp)
           (tmp.319 tmp.111 ra.456 rbp)
           (tmp.458 tmp.111 ra.456 rbp)
           (tmp.320 tmp.111 ra.456 rbp)
           (tmp.459 tmp.111 ra.456 rbp)
           (tmp.321 tmp.111 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.111
           tmp.112
           tmp.318
           ra.456
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (ra.456
          (tmp.111
           tmp.112
           tmp.318
           rdi
           rsi
           rdx
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.111))
         (tmp.111
          (tmp.318
           tmp.112
           ra.456
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457))
         (tmp.319 (tmp.111 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.111))
         (tmp.320 (tmp.111 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.111))
         (tmp.321 (tmp.111 ra.456 rbp))
         (rdx (tmp.112 tmp.318 ra.456))
         (rsi (tmp.318 ra.456))
         (rdi (ra.456))
         (tmp.318 (tmp.111 tmp.112 rsi rdx ra.456 rbp))
         (tmp.112 (tmp.111 rdx tmp.318 ra.456 rbp))))
       (assignment
        ((ra.456 r15)
         (tmp.111 r14)
         (tmp.318 r13)
         (tmp.112 r9)
         (tmp.457 r13)
         (tmp.319 r13)
         (tmp.458 r13)
         (tmp.320 r13)
         (tmp.459 r13)
         (tmp.321 r13))))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.308 ra.460 rbp)
         (rdx rcx tmp.308 tmp.115 ra.460 rbp)
         (rcx tmp.308 tmp.116 tmp.115 ra.460 rbp)
         (tmp.308 tmp.116 tmp.114 tmp.115 ra.460 rbp)
         ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
          ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.114 tmp.116 tmp.115 tmp.308 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.114 tmp.116 tmp.115 tmp.308 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.116 tmp.308 r15 rdi rsi rdx tmp.114 tmp.115 ra.460 rbp))
         (tmp.115 (tmp.114 tmp.116 tmp.308 ra.460 rbp rdx rcx))
         (tmp.114 (tmp.308 tmp.116 tmp.115 ra.460 rbp rcx))
         (rdx (tmp.308 r15 rdi rsi tmp.115 ra.460 rcx rbp))
         (rsi (tmp.308 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.308 (tmp.114 tmp.116 tmp.115 rsi rdx rcx ra.460 rbp))
         (tmp.116 (tmp.114 rcx tmp.308 tmp.115 ra.460 rbp))))
       (assignment
        ((ra.460 r15) (tmp.308 r14) (tmp.115 r13) (tmp.116 r9) (tmp.114 r8))))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.310 rbp ra.461)
         (rdx rcx tmp.310 tmp.115 rbp ra.461)
         (rcx tmp.310 tmp.115 rbp ra.461 tmp.114)
         (tmp.310 tmp.115 rbp ra.461 tmp.116 tmp.114)
         ((tmp.115 rbp ra.461 tmp.116 tmp.114)
          ((tmp.462 rbp ra.461 tmp.116 tmp.114)
           (tmp.311 rbp ra.461 tmp.116 tmp.114)
           (tmp.463 rbp ra.461 tmp.116 tmp.114)
           (tmp.312 rbp ra.461 tmp.116 tmp.114)
           (tmp.464 rbp ra.461 tmp.116 tmp.114)
           (rbp ra.461 tmp.116 tmp.313 tmp.114)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (ra.461
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (tmp.462 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.116
          (tmp.310
           tmp.115
           rbp
           ra.461
           tmp.114
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.114
          (tmp.116
           rcx
           tmp.310
           tmp.115
           rbp
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.311 (rbp ra.461 tmp.116 tmp.114))
         (tmp.463 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.312 (rbp ra.461 tmp.116 tmp.114))
         (tmp.464 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.313 (rbp ra.461 tmp.116 tmp.114))
         (rcx (tmp.114 tmp.115 tmp.310 ra.461))
         (rdx (tmp.115 tmp.310 ra.461))
         (rsi (tmp.310 ra.461))
         (rdi (ra.461))
         (tmp.310 (tmp.116 tmp.114 tmp.115 rsi rdx rcx rbp ra.461))
         (tmp.115 (tmp.116 tmp.114 rdx rcx tmp.310 rbp ra.461))))
       (assignment
        ((ra.461 r15)
         (tmp.114 r14)
         (tmp.116 r13)
         (tmp.310 r9)
         (tmp.115 r8)
         (tmp.462 r9)
         (tmp.311 r9)
         (tmp.463 r9)
         (tmp.312 r9)
         (tmp.464 r9)
         (tmp.313 r9))))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.302 ra.465 rbp)
         (rdx rcx r8 tmp.302 i.108 ra.465 rbp)
         (rcx r8 tmp.302 i.108 len.106 ra.465 rbp)
         (r8 tmp.302 i.108 len.106 vector-init-loop.105 ra.465 rbp)
         (tmp.302 i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
         ((i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.303 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.467 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.304 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.468 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (rbp ra.465 vector-init-loop.105 len.106 i.108 tmp.305 vec.107)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.469 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (vec.107 tmp.306 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.306 len.106 vector-init-loop.105 ra.465 rcx rbp)
           (len.106 vector-init-loop.105 ra.465 rdx rcx rbp)
           (vector-init-loop.105 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((tmp.466 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (rbp
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (ra.465
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vector-init-loop.105
          (vec.107
           r8
           tmp.302
           i.108
           len.106
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (len.106
          (vec.107
           vector-init-loop.105
           r8
           tmp.302
           i.108
           ra.465
           rbp
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (i.108
          (vec.107
           vector-init-loop.105
           len.106
           rdx
           rcx
           r8
           tmp.302
           ra.465
           rbp
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vec.107
          (tmp.302
           i.108
           len.106
           vector-init-loop.105
           ra.465
           rbp
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (tmp.303 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.467 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.304 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.468 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.305 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.150 (i.108 vec.107 len.106 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.105 len.106 vec.107))
         (tmp.306 (rcx vec.107 len.106 vector-init-loop.105 ra.465 rbp))
         (rcx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           rdx
           tmp.306
           len.106
           vector-init-loop.105
           ra.465
           rbp))
         (rdx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           len.106
           vector-init-loop.105
           ra.465
           rcx
           rbp))
         (rsi (tmp.302 r15 rdi vector-init-loop.105 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.105 len.106 i.108 tmp.302 ra.465))
         (tmp.302
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           rsi
           rdx
           rcx
           r8
           ra.465
           rbp))))
       (assignment
        ((ra.465 r15)
         (len.106 r14)
         (vector-init-loop.105 r13)
         (i.108 r9)
         (vec.107 r8)
         (tmp.302 rdi)
         (tmp.306 r9)
         (tmp.305 rdi)
         (tmp.468 rdi)
         (tmp.304 rdi)
         (tmp.467 rdi)
         (tmp.303 rdi)
         (tmp.466 rdi)
         (tmp.469 r9)
         (tmp.150 r13))))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((locals ())
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.274 ra.470 rbp)
         (tmp.274 tmp.62 ra.470 rbp)
         ((tmp.62 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.62 tmp.274 ra.470 rax))
         (ra.470 (tmp.62 tmp.274 rdi rsi rbp rax))
         (rsi (tmp.274 ra.470))
         (rdi (ra.470))
         (tmp.274 (tmp.62 rsi ra.470 rbp))
         (tmp.62 (tmp.274 ra.470 rbp))))
       (assignment ((ra.470 r15) (tmp.274 r14) (tmp.62 r13))))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((locals ())
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.271 ra.471 rbp)
         (tmp.271 tmp.61 ra.471 rbp)
         ((tmp.61 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.61 tmp.271 ra.471 rax))
         (ra.471 (tmp.61 tmp.271 rdi rsi rbp rax))
         (rsi (tmp.271 ra.471))
         (rdi (ra.471))
         (tmp.271 (tmp.61 rsi ra.471 rbp))
         (tmp.61 (tmp.271 ra.471 rbp))))
       (assignment ((ra.471 r15) (tmp.271 r14) (tmp.61 r13))))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((locals ())
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.268 ra.472 rbp)
         (tmp.268 tmp.60 ra.472 rbp)
         ((tmp.60 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.60 tmp.268 ra.472 rax))
         (ra.472 (tmp.60 tmp.268 rdi rsi rbp rax))
         (rsi (tmp.268 ra.472))
         (rdi (ra.472))
         (tmp.268 (tmp.60 rsi ra.472 rbp))
         (tmp.60 (tmp.268 ra.472 rbp))))
       (assignment ((ra.472 r15) (tmp.268 r14) (tmp.60 r13))))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.262 ra.473 rbp)
         (rdx rcx tmp.262 tmp.58 ra.473 rbp)
         (rcx tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.262 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.265 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           ra.473
           tmp.265
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           rbp
           tmp.265
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.58
           tmp.262
           r15
           rdi
           rsi
           rdx
           tmp.59
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.59 tmp.262 tmp.58 ra.473 rbp tmp.265 tmp.474 rdx rcx))
         (tmp.59
          (tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp tmp.265 tmp.474 rcx))
         (rdx (tmp.58 tmp.262 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.262 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
         (tmp.58
          (tmp.59
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.262
           ra.473
           rbp
           tmp.265
           tmp.474))
         (tmp.265 (tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.262 (tmp.59 unsafe-vector-ref.3 tmp.58 rsi rdx rcx ra.473 rbp))))
       (assignment
        ((ra.473 r15)
         (tmp.58 r14)
         (unsafe-vector-ref.3 r13)
         (tmp.59 r9)
         (tmp.262 r8)
         (tmp.265 r8)
         (tmp.474 r8))))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.264 ra.475 rbp)
         (rdx rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.264 tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.58 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (ra.475
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (tmp.152 (tmp.59 tmp.58 ra.475 rbp))
         (tmp.58 (tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp rdx tmp.152))
         (tmp.59 (tmp.58 rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp tmp.152))
         (rdx (tmp.264 r15 rdi rsi tmp.58 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.58 tmp.59 rcx tmp.264 ra.475 rbp rsi rdx))
         (rsi (tmp.264 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.59 unsafe-vector-ref.3 tmp.264 ra.475))
         (tmp.264 (tmp.58 tmp.59 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp))))
       (assignment
        ((ra.475 r15)
         (unsafe-vector-ref.3 r14)
         (tmp.264 r13)
         (tmp.59 r9)
         (tmp.58 r8)
         (tmp.152 r14))))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.256 ra.476 rbp)
         (rdx rcx r8 tmp.256 tmp.55 ra.476 rbp)
         (rcx r8 tmp.256 tmp.55 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.256 tmp.55 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.256 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.259 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           ra.476
           tmp.259
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           rbp
           tmp.259
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.56 tmp.57 tmp.256 tmp.55 ra.476 rbp tmp.259 tmp.477 rdx rcx r8))
         (tmp.57
          (tmp.56
           tmp.256
           tmp.55
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           rcx
           r8))
         (tmp.56
          (tmp.256
           tmp.55
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           r8))
         (rcx
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           tmp.57
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.55 tmp.256 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.256 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55))
         (tmp.55
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.256
           ra.476
           rbp
           tmp.259
           tmp.477))
         (tmp.259 (tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.256
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp))))
       (assignment
        ((ra.476 r15)
         (tmp.55 r14)
         (unsafe-vector-set!.2 r13)
         (tmp.57 r9)
         (tmp.256 rdi)
         (tmp.56 rsi)
         (tmp.259 r8)
         (tmp.477 r8))))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((locals ())
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.258 ra.478 rbp)
         (rdx rcx r8 tmp.258 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.258 tmp.57 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.258 tmp.57 tmp.56 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.258 tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.55 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (ra.478
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (tmp.153 (tmp.57 tmp.56 tmp.55 ra.478 rbp))
         (tmp.55
          (tmp.258
           tmp.57
           tmp.56
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.153))
         (tmp.56
          (tmp.55
           r8
           tmp.258
           tmp.57
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.153))
         (tmp.57
          (tmp.55
           tmp.56
           rcx
           r8
           tmp.258
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.153))
         (rcx
          (tmp.57
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.56
           tmp.55
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.55 tmp.56 tmp.57 r8 tmp.258 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.258 r15 rdi rsi tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.258 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.258 ra.478))
         (tmp.258
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp))))
       (assignment
        ((ra.478 r15)
         (unsafe-vector-set!.2 r14)
         (tmp.258 r13)
         (tmp.57 r9)
         (tmp.56 rdi)
         (tmp.55 r8)
         (tmp.153 r14))))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((locals ())
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.253 ra.479 rbp)
         (tmp.253 tmp.54 ra.479 rbp)
         ((tmp.54 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.54 tmp.253 ra.479 rax))
         (ra.479 (tmp.54 tmp.253 rdi rsi rbp rax))
         (rsi (tmp.253 ra.479))
         (rdi (ra.479))
         (tmp.253 (tmp.54 rsi ra.479 rbp))
         (tmp.54 (tmp.253 ra.479 rbp))))
       (assignment ((ra.479 r15) (tmp.253 r14) (tmp.54 r13))))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.250 ra.480 rbp)
         (rdx tmp.250 make-init-vector.1 ra.480 rbp)
         (tmp.250 tmp.53 make-init-vector.1 ra.480 rbp)
         ((tmp.53 make-init-vector.1 ra.480 rbp)
          ((tmp.53 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.53 make-init-vector.1 tmp.250 ra.480 r15 rdi rsi tmp.154 rax))
         (ra.480
          (tmp.53 make-init-vector.1 tmp.250 rdx rbp rdi rsi tmp.154 rax))
         (tmp.154 (tmp.53 ra.480 rbp))
         (tmp.53 (tmp.250 make-init-vector.1 ra.480 rbp tmp.154))
         (rsi (tmp.250 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.53 rdx tmp.250 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.250 ra.480))
         (tmp.250 (tmp.53 make-init-vector.1 rsi rdx ra.480 rbp))))
       (assignment
        ((ra.480 r15)
         (make-init-vector.1 r14)
         (tmp.250 r13)
         (tmp.53 r9)
         (tmp.154 r14))))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.243 ra.481 rbp)
         (rdx tmp.243 tmp.51 ra.481 rbp)
         (tmp.243 tmp.52 tmp.51 ra.481 rbp)
         ((tmp.52 tmp.51 ra.481 rbp)
          ((tmp.482 tmp.52 tmp.51 ra.481 rbp)
           (tmp.247 tmp.52 tmp.51 ra.481 rbp)
           ((tmp.52 tmp.51 ra.481 rbp)
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.52 tmp.51 tmp.243 ra.481 tmp.247 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.52 tmp.51 tmp.243 rbp tmp.247 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.243 r15 rdi rsi tmp.51 ra.481 rbp))
         (tmp.51 (tmp.52 tmp.243 ra.481 rbp tmp.247 tmp.482 rdx))
         (rsi (tmp.243 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.51 tmp.52))
         (tmp.52 (tmp.243 tmp.51 ra.481 rbp tmp.247 tmp.482))
         (tmp.247 (tmp.52 tmp.51 ra.481 rbp))
         (tmp.243 (tmp.52 tmp.51 rsi rdx ra.481 rbp))))
       (assignment
        ((ra.481 r15)
         (tmp.51 r14)
         (tmp.52 r13)
         (tmp.243 r9)
         (tmp.247 r9)
         (tmp.482 r9))))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.245 ra.483 rbp)
         (rdx tmp.245 tmp.51 ra.483 rbp)
         (tmp.245 tmp.51 tmp.52 ra.483 rbp)
         ((tmp.51 tmp.52 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.52 tmp.51 tmp.245 ra.483 rax))
         (ra.483 (tmp.52 tmp.51 tmp.245 rdi rsi rdx rbp rax))
         (rdx (tmp.51 tmp.245 ra.483))
         (rsi (tmp.245 ra.483))
         (rdi (ra.483))
         (tmp.245 (tmp.52 tmp.51 rsi rdx ra.483 rbp))
         (tmp.51 (tmp.52 rdx tmp.245 ra.483 rbp))
         (tmp.52 (tmp.245 tmp.51 ra.483 rbp))))
       (assignment ((ra.483 r15) (tmp.245 r14) (tmp.51 r13) (tmp.52 r9))))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.236 ra.484 rbp)
         (rdx tmp.236 tmp.49 ra.484 rbp)
         (tmp.236 tmp.50 tmp.49 ra.484 rbp)
         ((tmp.50 tmp.49 ra.484 rbp)
          ((tmp.485 tmp.50 tmp.49 ra.484 rbp)
           (tmp.240 tmp.50 tmp.49 ra.484 rbp)
           ((tmp.50 tmp.49 ra.484 rbp)
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.50 tmp.49 tmp.236 ra.484 tmp.240 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.50 tmp.49 tmp.236 rbp tmp.240 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.49 ra.484 rbp))
         (tmp.49 (tmp.50 tmp.236 ra.484 rbp tmp.240 tmp.485 rdx))
         (rsi (tmp.236 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.49 tmp.50))
         (tmp.50 (tmp.236 tmp.49 ra.484 rbp tmp.240 tmp.485))
         (tmp.240 (tmp.50 tmp.49 ra.484 rbp))
         (tmp.236 (tmp.50 tmp.49 rsi rdx ra.484 rbp))))
       (assignment
        ((ra.484 r15)
         (tmp.49 r14)
         (tmp.50 r13)
         (tmp.236 r9)
         (tmp.240 r9)
         (tmp.485 r9))))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.238 ra.486 rbp)
         (rdx tmp.238 tmp.49 ra.486 rbp)
         (tmp.238 tmp.49 tmp.50 ra.486 rbp)
         ((tmp.49 tmp.50 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.50 tmp.49 tmp.238 ra.486 rax))
         (ra.486 (tmp.50 tmp.49 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.49 tmp.238 ra.486))
         (rsi (tmp.238 ra.486))
         (rdi (ra.486))
         (tmp.238 (tmp.50 tmp.49 rsi rdx ra.486 rbp))
         (tmp.49 (tmp.50 rdx tmp.238 ra.486 rbp))
         (tmp.50 (tmp.238 tmp.49 ra.486 rbp))))
       (assignment ((ra.486 r15) (tmp.238 r14) (tmp.49 r13) (tmp.50 r9))))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.229 ra.487 rbp)
         (rdx tmp.229 tmp.47 ra.487 rbp)
         (tmp.229 tmp.48 tmp.47 ra.487 rbp)
         ((tmp.48 tmp.47 ra.487 rbp)
          ((tmp.488 tmp.48 tmp.47 ra.487 rbp)
           (tmp.233 tmp.48 tmp.47 ra.487 rbp)
           ((tmp.48 tmp.47 ra.487 rbp)
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.48 tmp.47 tmp.229 ra.487 tmp.233 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.48 tmp.47 tmp.229 rbp tmp.233 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.47 ra.487 rbp))
         (tmp.47 (tmp.48 tmp.229 ra.487 rbp tmp.233 tmp.488 rdx))
         (rsi (tmp.229 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.47 tmp.48))
         (tmp.48 (tmp.229 tmp.47 ra.487 rbp tmp.233 tmp.488))
         (tmp.233 (tmp.48 tmp.47 ra.487 rbp))
         (tmp.229 (tmp.48 tmp.47 rsi rdx ra.487 rbp))))
       (assignment
        ((ra.487 r15)
         (tmp.47 r14)
         (tmp.48 r13)
         (tmp.229 r9)
         (tmp.233 r9)
         (tmp.488 r9))))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.231 ra.489 rbp)
         (rdx tmp.231 tmp.47 ra.489 rbp)
         (tmp.231 tmp.47 tmp.48 ra.489 rbp)
         ((tmp.47 tmp.48 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.48 tmp.47 tmp.231 ra.489 rax))
         (ra.489 (tmp.48 tmp.47 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.47 tmp.231 ra.489))
         (rsi (tmp.231 ra.489))
         (rdi (ra.489))
         (tmp.231 (tmp.48 tmp.47 rsi rdx ra.489 rbp))
         (tmp.47 (tmp.48 rdx tmp.231 ra.489 rbp))
         (tmp.48 (tmp.231 tmp.47 ra.489 rbp))))
       (assignment ((ra.489 r15) (tmp.231 r14) (tmp.47 r13) (tmp.48 r9))))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.222 ra.490 rbp)
         (rdx tmp.222 tmp.45 ra.490 rbp)
         (tmp.222 tmp.46 tmp.45 ra.490 rbp)
         ((tmp.46 tmp.45 ra.490 rbp)
          ((tmp.491 tmp.46 tmp.45 ra.490 rbp)
           (tmp.226 tmp.46 tmp.45 ra.490 rbp)
           ((tmp.46 tmp.45 ra.490 rbp)
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.46 tmp.45 tmp.222 ra.490 tmp.226 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.46 tmp.45 tmp.222 rbp tmp.226 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.45 ra.490 rbp))
         (tmp.45 (tmp.46 tmp.222 ra.490 rbp tmp.226 tmp.491 rdx))
         (rsi (tmp.222 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.45 tmp.46))
         (tmp.46 (tmp.222 tmp.45 ra.490 rbp tmp.226 tmp.491))
         (tmp.226 (tmp.46 tmp.45 ra.490 rbp))
         (tmp.222 (tmp.46 tmp.45 rsi rdx ra.490 rbp))))
       (assignment
        ((ra.490 r15)
         (tmp.45 r14)
         (tmp.46 r13)
         (tmp.222 r9)
         (tmp.226 r9)
         (tmp.491 r9))))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.224 ra.492 rbp)
         (rdx tmp.224 tmp.45 ra.492 rbp)
         (tmp.224 tmp.45 tmp.46 ra.492 rbp)
         ((tmp.45 tmp.46 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.46 tmp.45 tmp.224 ra.492 rax))
         (ra.492 (tmp.46 tmp.45 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.45 tmp.224 ra.492))
         (rsi (tmp.224 ra.492))
         (rdi (ra.492))
         (tmp.224 (tmp.46 tmp.45 rsi rdx ra.492 rbp))
         (tmp.45 (tmp.46 rdx tmp.224 ra.492 rbp))
         (tmp.46 (tmp.224 tmp.45 ra.492 rbp))))
       (assignment ((ra.492 r15) (tmp.224 r14) (tmp.45 r13) (tmp.46 r9))))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.216 ra.493 rbp)
         (rdx tmp.216 tmp.43 ra.493 rbp)
         (tmp.216 tmp.44 tmp.43 ra.493 rbp)
         ((tmp.44 tmp.43 ra.493 rbp)
          ((tmp.494 tmp.44 tmp.43 ra.493 rbp)
           (tmp.219 tmp.44 tmp.43 ra.493 rbp)
           ((tmp.44 tmp.43 ra.493 rbp)
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.44 tmp.43 tmp.216 ra.493 tmp.219 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.44 tmp.43 tmp.216 rbp tmp.219 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.216 r15 rdi rsi tmp.43 ra.493 rbp))
         (tmp.43 (tmp.44 tmp.216 ra.493 rbp tmp.219 tmp.494 rdx))
         (rsi (tmp.216 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.43 tmp.44))
         (tmp.44 (tmp.216 tmp.43 ra.493 rbp tmp.219 tmp.494))
         (tmp.219 (tmp.44 tmp.43 ra.493 rbp))
         (tmp.216 (tmp.44 tmp.43 rsi rdx ra.493 rbp))))
       (assignment
        ((ra.493 r15)
         (tmp.43 r14)
         (tmp.44 r13)
         (tmp.216 r9)
         (tmp.219 r9)
         (tmp.494 r9))))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.218 ra.495 rbp)
         (rdx tmp.218 tmp.43 ra.495 rbp)
         (tmp.218 tmp.44 tmp.43 ra.495 rbp)
         ((tmp.44 tmp.43 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.44 tmp.43 tmp.218 ra.495 tmp.496 rax))
         (ra.495 (tmp.44 tmp.43 tmp.218 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.43 tmp.218 ra.495))
         (rsi (tmp.218 ra.495))
         (rdi (ra.495))
         (tmp.218 (tmp.44 tmp.43 rsi rdx ra.495 rbp))
         (tmp.43 (tmp.44 rdx tmp.218 ra.495 rbp))
         (tmp.44 (tmp.218 tmp.43 ra.495 rbp))))
       (assignment
        ((ra.495 r15) (tmp.218 r14) (tmp.43 r13) (tmp.44 r9) (tmp.496 r14))))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.210 ra.497 rbp)
         (rdx tmp.210 tmp.41 ra.497 rbp)
         (tmp.210 tmp.42 tmp.41 ra.497 rbp)
         ((tmp.42 tmp.41 ra.497 rbp)
          ((tmp.498 tmp.42 tmp.41 ra.497 rbp)
           (tmp.213 tmp.42 tmp.41 ra.497 rbp)
           ((tmp.42 tmp.41 ra.497 rbp)
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.42 tmp.41 tmp.210 ra.497 tmp.213 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.42 tmp.41 tmp.210 rbp tmp.213 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.210 r15 rdi rsi tmp.41 ra.497 rbp))
         (tmp.41 (tmp.42 tmp.210 ra.497 rbp tmp.213 tmp.498 rdx))
         (rsi (tmp.210 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.41 tmp.42))
         (tmp.42 (tmp.210 tmp.41 ra.497 rbp tmp.213 tmp.498))
         (tmp.213 (tmp.42 tmp.41 ra.497 rbp))
         (tmp.210 (tmp.42 tmp.41 rsi rdx ra.497 rbp))))
       (assignment
        ((ra.497 r15)
         (tmp.41 r14)
         (tmp.42 r13)
         (tmp.210 r9)
         (tmp.213 r9)
         (tmp.498 r9))))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.212 ra.499 rbp)
         (rdx tmp.212 tmp.41 ra.499 rbp)
         (tmp.212 tmp.42 tmp.41 ra.499 rbp)
         ((tmp.42 tmp.41 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.42 tmp.41 tmp.212 ra.499 tmp.500 rax))
         (ra.499 (tmp.42 tmp.41 tmp.212 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.41 tmp.212 ra.499))
         (rsi (tmp.212 ra.499))
         (rdi (ra.499))
         (tmp.212 (tmp.42 tmp.41 rsi rdx ra.499 rbp))
         (tmp.41 (tmp.42 rdx tmp.212 ra.499 rbp))
         (tmp.42 (tmp.212 tmp.41 ra.499 rbp))))
       (assignment
        ((ra.499 r15) (tmp.212 r14) (tmp.41 r13) (tmp.42 r9) (tmp.500 r14))))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.203 ra.501 rbp)
         (rdx tmp.203 tmp.39 ra.501 rbp)
         (tmp.203 tmp.39 tmp.40 ra.501 rbp)
         ((tmp.39 tmp.40 ra.501 rbp)
          ((tmp.502 tmp.39 tmp.40 ra.501 rbp)
           (tmp.207 tmp.39 tmp.40 ra.501 rbp)
           ((tmp.39 tmp.40 ra.501 rbp)
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.40 tmp.39 tmp.203 ra.501 tmp.207 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.40 tmp.39 tmp.203 rbp tmp.207 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.39 tmp.203 r15 rdi rsi tmp.40 ra.501 rbp))
         (tmp.40 (tmp.203 tmp.39 ra.501 rbp tmp.207 tmp.502 rdx))
         (rsi (tmp.203 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.40 tmp.39))
         (tmp.39 (tmp.40 rdx tmp.203 ra.501 rbp tmp.207 tmp.502))
         (tmp.207 (tmp.39 tmp.40 ra.501 rbp))
         (tmp.203 (tmp.40 tmp.39 rsi rdx ra.501 rbp))))
       (assignment
        ((ra.501 r15)
         (tmp.39 r14)
         (tmp.40 r13)
         (tmp.203 r9)
         (tmp.207 r9)
         (tmp.502 r9))))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((locals ())
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.205 ra.503 rbp)
         (rdx tmp.205 tmp.40 ra.503 rbp)
         (tmp.205 tmp.40 tmp.39 ra.503 rbp)
         ((tmp.40 tmp.39 ra.503 rbp)
          ((tmp.504 tmp.39 ra.503 rbp)
           (tmp.206 tmp.39 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.39 tmp.40 tmp.205 ra.503 tmp.505 tmp.206 tmp.504 rax))
         (ra.503
          (tmp.39 tmp.40 tmp.205 rdi rsi rdx rbp tmp.505 tmp.206 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.39))
         (tmp.39 (tmp.205 tmp.40 ra.503 rbp tmp.206 tmp.504))
         (tmp.206 (tmp.39 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.40 tmp.205 ra.503))
         (rsi (tmp.205 ra.503))
         (rdi (ra.503))
         (tmp.205 (tmp.39 tmp.40 rsi rdx ra.503 rbp))
         (tmp.40 (tmp.39 rdx tmp.205 ra.503 rbp))))
       (assignment
        ((ra.503 r15)
         (tmp.39 r14)
         (tmp.205 r13)
         (tmp.40 r9)
         (tmp.504 r13)
         (tmp.206 r13)
         (tmp.505 r14))))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55)

  )
|#
(parameterize ([current-pass-list
                  (list
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((locals
        (tmp.166
         H.6
         tmp.201
         tmp.389
         tmp.355
         G.5
         tmp.200
         tmp.388
         tmp.354
         F.4
         tmp.199
         tmp.387
         tmp.353
         *.77
         tmp.198
         tmp.386
         tmp.352
         |+.78|
         tmp.197
         tmp.385
         tmp.351
         |-.79|
         tmp.196
         tmp.384
         tmp.350
         <.80
         tmp.195
         tmp.383
         tmp.349
         <=.81
         tmp.194
         tmp.382
         tmp.348
         >.82
         tmp.193
         tmp.381
         tmp.347
         >=.83
         tmp.192
         tmp.380
         tmp.346
         make-vector.84
         tmp.191
         tmp.379
         tmp.345
         vector-length.85
         tmp.190
         tmp.378
         tmp.344
         vector-set!.86
         tmp.189
         tmp.377
         tmp.343
         vector-ref.87
         tmp.188
         tmp.376
         tmp.342
         car.88
         tmp.187
         tmp.375
         tmp.341
         cdr.89
         tmp.186
         tmp.374
         tmp.340
         procedure-arity.90
         tmp.185
         tmp.373
         tmp.339
         fixnum?.91
         tmp.184
         tmp.372
         tmp.338
         boolean?.92
         tmp.183
         tmp.371
         tmp.337
         empty?.93
         tmp.182
         tmp.370
         tmp.336
         void?.94
         tmp.181
         tmp.369
         tmp.335
         ascii-char?.95
         tmp.180
         tmp.368
         tmp.334
         error?.96
         tmp.179
         tmp.367
         tmp.333
         pair?.97
         tmp.178
         tmp.366
         tmp.332
         procedure?.98
         tmp.177
         tmp.365
         tmp.331
         vector?.99
         tmp.176
         tmp.364
         tmp.330
         not.100
         tmp.175
         tmp.363
         tmp.329
         cons.101
         tmp.174
         tmp.362
         tmp.328
         eq?.102
         tmp.173
         tmp.361
         tmp.327
         make-init-vector.1
         tmp.172
         tmp.360
         tmp.326
         vector-init-loop.105
         tmp.171
         tmp.359
         tmp.325
         unsafe-vector-set!.2
         tmp.170
         tmp.358
         tmp.324
         unsafe-vector-ref.3
         tmp.169
         tmp.357
         tmp.323
         ra.356))
       (undead-out
        ((r12 rbp ra.356)
         (r12 tmp.323 rbp ra.356)
         (tmp.323 r12 rbp ra.356)
         (tmp.357 r12 rbp ra.356)
         (r12 rbp ra.356 tmp.169)
         (ra.356 rbp r12 tmp.169)
         (tmp.169 r12 rbp ra.356)
         (r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.324 rbp ra.356 unsafe-vector-ref.3)
         (tmp.324 r12 rbp ra.356 unsafe-vector-ref.3)
         (tmp.358 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 rbp ra.356 unsafe-vector-ref.3 tmp.170)
         (unsafe-vector-ref.3 ra.356 rbp r12 tmp.170)
         (tmp.170 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.325 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.325 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.359 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3 tmp.171)
         (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12 tmp.171)
         (tmp.171 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.326
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.326
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.360
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.172)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          r12
          tmp.172)
         (tmp.172
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.173)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.174)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.175)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.176)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.177)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.178)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.179)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.180)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.181)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.181)
         (tmp.181
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.182)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.182)
         (tmp.182
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.183)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.183)
         (tmp.183
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.184)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.184)
         (tmp.184
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.185)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.185)
         (tmp.185
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.340
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.186)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.186)
         (tmp.186
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.341
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.187)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.187)
         (tmp.187
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.342
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.188)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.188)
         (tmp.188
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.343
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.189)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.189)
         (tmp.189
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.190)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.190)
         (tmp.190
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.379
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.191)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.191)
         (tmp.191
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.380
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.192)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.192)
         (tmp.192
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.193)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.193)
         (tmp.193
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.194)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.194)
         (tmp.194
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.349
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.195)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.195)
         (tmp.195
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.350
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.196)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.196)
         (tmp.196
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.351
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.197)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.197)
         (tmp.197
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.386
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.198)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          tmp.198)
         (tmp.198
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          vector-init-loop.105
          make-init-vector.1)
         (vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-init-vector.1
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87)
         (make-vector.84
          make-init-vector.1
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86)
         (rbp ra.356 |+.78| r12 make-init-vector.1 make-vector.84)
         (r12 |+.78| ra.356 rbp)
         (r12 tmp.353 |+.78| ra.356 rbp)
         (tmp.353 r12 |+.78| ra.356 rbp)
         (tmp.387 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp tmp.199)
         (rbp ra.356 |+.78| r12 tmp.199)
         (tmp.199 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp F.4)
         (r12 tmp.354 |+.78| ra.356 rbp F.4)
         (tmp.354 r12 |+.78| ra.356 rbp F.4)
         (tmp.388 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp F.4 tmp.200)
         (F.4 rbp ra.356 |+.78| r12 tmp.200)
         (tmp.200 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp G.5 F.4)
         (r12 tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.389 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp G.5 F.4 tmp.201)
         (F.4 G.5 rbp ra.356 |+.78| tmp.201)
         (tmp.201 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp H.6 G.5 F.4)
         (G.5 H.6 rbp ra.356 |+.78| F.4)
         (|+.78| F.4 ra.356 rbp H.6 G.5)
         (rbp ra.356 F.4 |+.78| H.6)
         (F.4 ra.356 rbp)
         (F.4 ra.356 rbp)
         (F.4 ra.356 fv1 rbp)
         (F.4 ra.356 fv1 fv0 rbp)
         (F.4 ra.356 r9 fv1 fv0 rbp)
         (F.4 ra.356 r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (ra.356 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))
       (conflicts
        ((ra.356
          (rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           tmp.323
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           r12
           tmp.323
           ra.356))
         (r12
          (tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           rbp
           tmp.323
           ra.356))
         (tmp.323 (r12 rbp ra.356))
         (tmp.357 (ra.356 rbp r12))
         (tmp.169 (r12 rbp ra.356))
         (unsafe-vector-ref.3
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           r12
           rbp
           ra.356))
         (tmp.324 (r12 rbp ra.356 unsafe-vector-ref.3))
         (tmp.358 (unsafe-vector-ref.3 ra.356 rbp r12))
         (tmp.170 (r12 rbp ra.356 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           r12
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.325 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (tmp.359 (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12))
         (tmp.171 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (vector-init-loop.105
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.326
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.360
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.172
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (make-init-vector.1
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.361
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (eq?.102
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.362
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cons.101
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.363
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (not.100
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.364
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector?.99
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.365
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure?.98
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.366
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (pair?.97
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.367
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (error?.96
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.368
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (ascii-char?.95
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.369
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.181
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (void?.94
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.370
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.182
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (empty?.93
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.371
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.183
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (boolean?.92
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.372
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.184
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (fixnum?.91
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.373
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.185
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure-arity.90
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.340
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.374
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.186
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cdr.89
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.341
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.375
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.187
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (car.88
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.342
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.376
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.188
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector-ref.87
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.343
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.377
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.189
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-set!.86
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.378
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.190
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-length.85
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.379
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.191
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (make-vector.84
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.380
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.192
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>=.83
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.381
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.193
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>.82
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.382
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.194
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<=.81
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.349
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.383
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.195
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<.80
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.350
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.384
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.196
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|-.79|
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.351
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.385
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.197
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|+.78|
          (H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.352
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.386
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           r12
           |+.78|
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1))
         (tmp.198
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (*.77
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.353 (r12 |+.78| ra.356 rbp))
         (tmp.387 (rbp ra.356 |+.78| r12))
         (tmp.199 (r12 |+.78| ra.356 rbp))
         (F.4
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           r12
           |+.78|
           ra.356
           rbp))
         (tmp.354 (r12 |+.78| ra.356 rbp F.4))
         (tmp.388 (F.4 rbp ra.356 |+.78| r12))
         (tmp.200 (r12 |+.78| ra.356 rbp F.4))
         (G.5 (H.6 tmp.201 tmp.389 tmp.355 r12 |+.78| ra.356 rbp F.4))
         (tmp.355 (r12 |+.78| ra.356 rbp G.5 F.4))
         (tmp.389 (F.4 G.5 rbp ra.356 |+.78|))
         (tmp.201 (|+.78| ra.356 rbp G.5 F.4))
         (H.6 (|+.78| ra.356 rbp G.5 F.4))
         (tmp.166 (ra.356 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 F.4 ra.356 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 F.4 ra.356 fv1 rbp))
         (r9 (r15 rdi rsi rdx rcx r8 F.4 ra.356 fv1 fv0 rbp))
         (r8 (r15 rdi rsi rdx rcx F.4 ra.356 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx F.4 ra.356 r8 r9 fv1 fv0 rbp))
         (rdx (r15 rdi rsi F.4 ra.356 rcx r8 r9 fv1 fv0 rbp))
         (rsi (r15 rdi F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))))
       (assignment ()))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((locals
        (tmp.165
         r7.38
         tmp.164
         r6.37
         tmp.163
         r5.36
         tmp.162
         r4.35
         tmp.161
         r3.34
         tmp.160
         r2.33
         tmp.159
         r1.32
         tmp.158
         b.24
         a.23
         c.149))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 ra.390 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 ra.390 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 ra.390 rbp)
         (rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 ra.390 rbp)
         (r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 ra.390 rbp)
         (r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 ra.390 rbp)
         (fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 ra.390 rbp)
         (fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 ra.390 rbp)
         (fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 ra.390 rbp)
         (fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 ra.390 rbp)
         (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((a.23 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r1.32 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r2.33 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r3.34 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r4.35 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax h.30 j.31 |+.78| ra.390 rbp)
          ((r5.36 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         ((rax j.31 |+.78| ra.390 rbp)
          ((r6.37 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.31 r7.38 |+.78| ra.390 rbp)
         (j.31 r7.38 |+.78| ra.390 rbp)
         (r7.38 |+.78| ra.390 rdx rbp)
         (|+.78| ra.390 rsi rdx rbp)
         (ra.390 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.390
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp))
         (rbp
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           r15
           rdi
           rsi
           rdx
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           ra.390))
         (fv3 (h.30 g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv2 (g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv1 (f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv0 (e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (r9 (d.26 c.25 b.24 a.23 c.149 ra.390))
         (r8 (c.25 b.24 a.23 c.149 ra.390))
         (rcx (b.24 a.23 c.149 ra.390))
         (rdx
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           r15
           rdi
           rsi
           |+.78|
           rbp
           a.23
           c.149
           ra.390))
         (rsi (r15 rdi |+.78| rdx rbp c.149 ra.390))
         (rdi (r15 rsi rdx rbp ra.390))
         (c.149
          (j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           ra.390
           rbp))
         (a.23
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           ra.390
           rbp))
         (b.24
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           ra.390
           rbp))
         (c.25
          (tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           ra.390
           rbp))
         (d.26
          (tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           ra.390
           rbp))
         (e.27
          (tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           ra.390
           rbp))
         (f.28
          (tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           ra.390
           rbp))
         (g.29
          (tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           ra.390
           rbp))
         (h.30
          (tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           ra.390
           rbp))
         (j.31
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           h.30
           ra.390
           rbp))
         (|+.78|
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           rsi
           rdx
           rax
           rbp
           ra.390
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23))
         (tmp.158 (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (rax (rbp ra.390 |+.78| j.31 h.30 g.29 f.28 e.27 d.26 c.25))
         (r15 (rdi rsi rdx rbp))
         (r1.32
          (rdx tmp.159 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.159 (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r2.33 (rdx tmp.160 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.160 (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r3.34 (rdx tmp.161 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.161 (r3.34 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r4.35 (rdx tmp.162 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.162 (r4.35 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r5.36 (rdx tmp.163 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.163 (r5.36 g.29 h.30 j.31 ra.390 rbp))
         (r6.37 (rdx tmp.164 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.164 (r6.37 h.30 j.31 ra.390 rbp))
         (r7.38 (rdx tmp.165 j.31 |+.78| ra.390 rbp))
         (tmp.165 (j.31 r7.38 ra.390 rbp))))
       (assignment
        ((ra.390 fv4)
         (|+.78| fv0)
         (j.31 fv1)
         (h.30 fv2)
         (g.29 fv5)
         (f.28 fv6)
         (e.27 fv7)
         (d.26 fv8)
         (c.25 fv9))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (set! rbp (+ rbp 80))
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! rbp (- rbp 80))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((locals
        (tmp.157 H.6 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 c.148 ra.391))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.391 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.148 ra.391 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.148 a.15 ra.391 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.148 b.16 a.15 ra.391 rbp)
         (r8 r9 fv0 fv1 fv2 c.148 c.17 b.16 a.15 ra.391 rbp)
         (r9 fv0 fv1 fv2 c.148 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv0 fv1 fv2 c.148 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv1 fv2 c.148 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv2 c.148 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (c.148 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 rbp)
         (g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 rbp)
         (f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 rbp)
         (e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 fv0 rbp)
         (d.18 c.17 b.16 a.15 H.6 ra.391 r9 fv3 fv2 fv1 fv0 rbp)
         (c.17 b.16 a.15 H.6 ra.391 r8 r9 fv3 fv2 fv1 fv0 rbp)
         (b.16 a.15 H.6 ra.391 rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (a.15 H.6 ra.391 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (H.6 ra.391 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (ra.391 rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)))
       (conflicts
        ((ra.391
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv2
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           fv3
           rbp
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           H.6
           fv3
           fv2
           rbp
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           H.6
           fv3
           fv2
           fv1
           rbp
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           H.6
           fv3
           fv2
           fv1
           fv0
           rbp
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           H.6
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (rcx
          (r15
           rdi
           rsi
           rdx
           H.6
           r8
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           b.16
           a.15
           c.148
           ra.391))
         (rdx
          (r15 rdi rsi H.6 rcx r8 r9 fv3 fv2 fv1 fv0 rbp a.15 c.148 ra.391))
         (rsi (r15 rdi H.6 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp c.148 ra.391))
         (rdi (r15 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp ra.391))
         (c.148
          (h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.391
           rbp))
         (a.15
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           ra.391
           rbp))
         (b.16
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           a.15
           ra.391
           rbp))
         (c.17
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           b.16
           a.15
           ra.391
           rbp))
         (d.18
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           r9
           fv0
           fv1
           fv2
           c.148
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (e.19
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           fv0
           fv1
           fv2
           c.148
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (f.20
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           fv1
           fv2
           c.148
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (g.21
          (fv3
           tmp.157
           H.6
           h.22
           fv2
           c.148
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (h.22
          (fv3
           tmp.157
           H.6
           c.148
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (H.6
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp
           ra.391
           a.15
           b.16
           c.17
           d.18
           e.19
           f.20
           g.21
           h.22))
         (tmp.157 (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp))
         (fv3
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           H.6
           ra.391
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp))))
       (assignment ()))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((locals
        (tmp.156 r.14 tmp.155 G.5 g.13 f.12 e.11 d.10 c.9 b.8 a.7 c.147))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.392 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 c.147 ra.392 rbp)
         (rdx rcx r8 r9 fv0 fv1 c.147 a.7 ra.392 rbp)
         (rcx r8 r9 fv0 fv1 c.147 a.7 b.8 ra.392 rbp)
         (r8 r9 fv0 fv1 c.147 a.7 b.8 c.9 ra.392 rbp)
         (r9 fv0 fv1 c.147 a.7 b.8 c.9 d.10 ra.392 rbp)
         (fv0 fv1 c.147 a.7 b.8 c.9 d.10 e.11 ra.392 rbp)
         (fv1 c.147 a.7 b.8 c.9 d.10 e.11 f.12 ra.392 rbp)
         (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (c.147 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         ((rax |+.78| ra.392 rbp)
          ((g.13 f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 rbp)
           (f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 rbp)
           (e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 nfv.393 rbp)
           (d.10 c.9 b.8 a.7 G.5 r9 nfv.395 nfv.394 nfv.393 rbp)
           (c.9 b.8 a.7 G.5 r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (b.8 a.7 G.5 rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (a.7 G.5 rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (G.5 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)))
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rdx rbp)
         (|+.78| ra.392 rsi rdx rbp)
         (ra.392 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (conflicts
        ((ra.392
          (tmp.156
           r.14
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           rbp))
         (rbp
          (tmp.156
           r.14
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (fv1 (f.12 e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (fv0 (e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           G.5
           nfv.395
           nfv.394
           nfv.393
           rbp
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           G.5
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (rcx
          (r15
           rdi
           rsi
           rdx
           G.5
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           b.8
           a.7
           c.147
           ra.392))
         (rdx
          (r.14
           |+.78|
           r15
           rdi
           rsi
           G.5
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           a.7
           c.147
           ra.392))
         (rsi
          (|+.78|
           r15
           rdi
           G.5
           rdx
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.147
           ra.392))
         (rdi (r15 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp ra.392))
         (c.147
          (G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.392
           rbp))
         (a.7
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           ra.392
           rbp))
         (b.8
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           ra.392
           rbp))
         (c.9
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           ra.392
           rbp))
         (d.10
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           ra.392
           rbp))
         (e.11
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           ra.392
           rbp))
         (f.12
          (nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           ra.392
           rbp))
         (g.13
          (nfv.395
           tmp.155
           |+.78|
           G.5
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           f.12
           ra.392
           rbp))
         (G.5
          (rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           |+.78|
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147))
         (|+.78|
          (rsi
           rdx
           r.14
           rax
           tmp.155
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5))
         (tmp.155 (a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp))
         (rax (rbp ra.392 |+.78|))
         (nfv.395
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           rbp))
         (nfv.394
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           rbp))
         (nfv.393
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           nfv.394
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp))
         (r.14 (rdx tmp.156 |+.78| ra.392 rbp))
         (tmp.156 (r.14 ra.392 rbp))))
       (assignment
        ((ra.392 fv2) (|+.78| fv0) (nfv.393 fv3) (nfv.394 fv4) (nfv.395 fv5))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (set! rbp (+ rbp 24))
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! rbp (- rbp 24))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((locals (tmp.397 c.146 tmp.208 ra.396 tmp.39 tmp.40))
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.39 ra.396 rbp)
         (tmp.40 tmp.39 ra.396 rbp)
         (tmp.397 tmp.40 tmp.39 ra.396 rbp)
         (tmp.208 tmp.40 tmp.39 ra.396 rbp)
         ((tmp.40 tmp.39 ra.396 rbp)
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.146 r15 rdi rsi tmp.39 ra.396 rbp))
         (rbp (tmp.208 tmp.397 tmp.40 tmp.39 c.146 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.208 tmp.397 tmp.40 tmp.39 c.146 rbp rdi rsi rdx))
         (tmp.39 (tmp.208 tmp.397 tmp.40 ra.396 rbp rdx))
         (rsi (c.146 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.146 (rsi rdx ra.396 rbp))
         (tmp.40 (tmp.208 tmp.397 tmp.39 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.39 tmp.40))
         (tmp.208 (tmp.40 tmp.39 ra.396 rbp))))
       (assignment ()))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((locals (tmp.399 c.145 tmp.214 ra.398 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.41 ra.398 rbp)
         (tmp.42 tmp.41 ra.398 rbp)
         (tmp.399 tmp.42 tmp.41 ra.398 rbp)
         (tmp.214 tmp.42 tmp.41 ra.398 rbp)
         ((tmp.42 tmp.41 ra.398 rbp)
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.145 r15 rdi rsi tmp.41 ra.398 rbp))
         (rbp (tmp.214 tmp.399 tmp.42 tmp.41 c.145 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.214 tmp.399 tmp.42 tmp.41 c.145 rbp rdi rsi rdx))
         (tmp.41 (tmp.214 tmp.399 tmp.42 ra.398 rbp rdx))
         (rsi (c.145 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.145 (rsi rdx ra.398 rbp))
         (tmp.42 (tmp.214 tmp.399 tmp.41 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.41 tmp.42))
         (tmp.214 (tmp.42 tmp.41 ra.398 rbp))))
       (assignment ()))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((locals (tmp.401 c.144 tmp.220 ra.400 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.43 ra.400 rbp)
         (tmp.44 tmp.43 ra.400 rbp)
         (tmp.401 tmp.44 tmp.43 ra.400 rbp)
         (tmp.220 tmp.44 tmp.43 ra.400 rbp)
         ((tmp.44 tmp.43 ra.400 rbp)
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.144 r15 rdi rsi tmp.43 ra.400 rbp))
         (rbp (tmp.220 tmp.401 tmp.44 tmp.43 c.144 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.220 tmp.401 tmp.44 tmp.43 c.144 rbp rdi rsi rdx))
         (tmp.43 (tmp.220 tmp.401 tmp.44 ra.400 rbp rdx))
         (rsi (c.144 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.144 (rsi rdx ra.400 rbp))
         (tmp.44 (tmp.220 tmp.401 tmp.43 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.43 tmp.44))
         (tmp.220 (tmp.44 tmp.43 ra.400 rbp))))
       (assignment ()))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((locals (tmp.403 c.143 tmp.227 ra.402 tmp.45 tmp.46))
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.45 ra.402 rbp)
         (tmp.46 tmp.45 ra.402 rbp)
         (tmp.403 tmp.46 tmp.45 ra.402 rbp)
         (tmp.227 tmp.46 tmp.45 ra.402 rbp)
         ((tmp.46 tmp.45 ra.402 rbp)
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.143 r15 rdi rsi tmp.45 ra.402 rbp))
         (rbp (tmp.227 tmp.403 tmp.46 tmp.45 c.143 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.227 tmp.403 tmp.46 tmp.45 c.143 rbp rdi rsi rdx))
         (tmp.45 (tmp.227 tmp.403 tmp.46 ra.402 rbp rdx))
         (rsi (c.143 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.143 (rsi rdx ra.402 rbp))
         (tmp.46 (tmp.227 tmp.403 tmp.45 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.45 tmp.46))
         (tmp.227 (tmp.46 tmp.45 ra.402 rbp))))
       (assignment ()))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((locals (tmp.405 c.142 tmp.234 ra.404 tmp.47 tmp.48))
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.47 ra.404 rbp)
         (tmp.48 tmp.47 ra.404 rbp)
         (tmp.405 tmp.48 tmp.47 ra.404 rbp)
         (tmp.234 tmp.48 tmp.47 ra.404 rbp)
         ((tmp.48 tmp.47 ra.404 rbp)
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.142 r15 rdi rsi tmp.47 ra.404 rbp))
         (rbp (tmp.234 tmp.405 tmp.48 tmp.47 c.142 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.234 tmp.405 tmp.48 tmp.47 c.142 rbp rdi rsi rdx))
         (tmp.47 (tmp.234 tmp.405 tmp.48 ra.404 rbp rdx))
         (rsi (c.142 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.142 (rsi rdx ra.404 rbp))
         (tmp.48 (tmp.234 tmp.405 tmp.47 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.47 tmp.48))
         (tmp.234 (tmp.48 tmp.47 ra.404 rbp))))
       (assignment ()))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((locals (tmp.407 c.141 tmp.241 ra.406 tmp.49 tmp.50))
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.49 ra.406 rbp)
         (tmp.50 tmp.49 ra.406 rbp)
         (tmp.407 tmp.50 tmp.49 ra.406 rbp)
         (tmp.241 tmp.50 tmp.49 ra.406 rbp)
         ((tmp.50 tmp.49 ra.406 rbp)
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.141 r15 rdi rsi tmp.49 ra.406 rbp))
         (rbp (tmp.241 tmp.407 tmp.50 tmp.49 c.141 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.241 tmp.407 tmp.50 tmp.49 c.141 rbp rdi rsi rdx))
         (tmp.49 (tmp.241 tmp.407 tmp.50 ra.406 rbp rdx))
         (rsi (c.141 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.141 (rsi rdx ra.406 rbp))
         (tmp.50 (tmp.241 tmp.407 tmp.49 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.49 tmp.50))
         (tmp.241 (tmp.50 tmp.49 ra.406 rbp))))
       (assignment ()))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((locals (tmp.409 c.140 tmp.248 ra.408 tmp.51 tmp.52))
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.51 ra.408 rbp)
         (tmp.52 tmp.51 ra.408 rbp)
         (tmp.409 tmp.52 tmp.51 ra.408 rbp)
         (tmp.248 tmp.52 tmp.51 ra.408 rbp)
         ((tmp.52 tmp.51 ra.408 rbp)
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (c.140 r15 rdi rsi tmp.51 ra.408 rbp))
         (rbp (tmp.248 tmp.409 tmp.52 tmp.51 c.140 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.248 tmp.409 tmp.52 tmp.51 c.140 rbp rdi rsi rdx))
         (tmp.51 (tmp.248 tmp.409 tmp.52 ra.408 rbp rdx))
         (rsi (c.140 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.140 (rsi rdx ra.408 rbp))
         (tmp.52 (tmp.248 tmp.409 tmp.51 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.51 tmp.52))
         (tmp.248 (tmp.52 tmp.51 ra.408 rbp))))
       (assignment ()))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((locals (tmp.411 c.139 tmp.251 ra.410 make-init-vector.1 tmp.53))
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.139 ra.410 rbp)
         (c.139 tmp.53 ra.410 rbp)
         (tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.251 tmp.53 make-init-vector.1 ra.410 rbp)
         ((tmp.53 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.251
           tmp.411
           make-init-vector.1
           tmp.53
           c.139
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.251 tmp.411 make-init-vector.1 tmp.53 c.139 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.251 tmp.411 rbp ra.410 tmp.53 rdx))
         (rsi (c.139 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.139 (tmp.53 rsi ra.410 rbp))
         (tmp.53 (tmp.251 tmp.411 make-init-vector.1 c.139 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.53))
         (tmp.251 (tmp.53 make-init-vector.1 ra.410 rbp))))
       (assignment ()))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((locals (tmp.413 c.138 tmp.254 ra.412 tmp.54))
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.54 ra.412 rbp)
         (tmp.413 tmp.54 ra.412 rbp)
         (tmp.254 tmp.54 ra.412 rbp)
         ((tmp.54 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.138 r15 rdi ra.412 rbp))
         (rbp (tmp.254 tmp.413 tmp.54 c.138 ra.412 r15 rdi rsi))
         (ra.412 (tmp.254 tmp.413 tmp.54 c.138 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.138 (rsi ra.412 rbp))
         (tmp.54 (tmp.254 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.54))
         (tmp.254 (tmp.54 ra.412 rbp))))
       (assignment ()))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((locals
        (tmp.415
         c.137
         tmp.260
         ra.414
         tmp.55
         unsafe-vector-set!.2
         tmp.57
         tmp.56))
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.137 ra.414 rbp)
         (rdx rcx c.137 tmp.55 ra.414 rbp)
         (rcx c.137 tmp.56 tmp.55 ra.414 rbp)
         (c.137 tmp.56 tmp.57 tmp.55 ra.414 rbp)
         (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.415 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.260 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         ((tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))
         (rbp
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.55
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           c.137
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.260 tmp.415 rbp ra.414 tmp.55 tmp.57 tmp.56 rcx r8))
         (tmp.57
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           c.137
           tmp.56
           tmp.55
           ra.414
           rbp
           r8))
         (rcx
          (tmp.56
           c.137
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.55
           ra.414
           r8
           rbp))
         (rdx (c.137 r15 rdi rsi tmp.55 ra.414 rcx r8 rbp))
         (rsi (c.137 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.137 (tmp.57 tmp.56 tmp.55 rsi rdx rcx ra.414 rbp))
         (tmp.56
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           rcx
           c.137
           tmp.55
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56))
         (tmp.260 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))))
       (assignment ()))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((locals
        (tmp.417 c.136 tmp.266 ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.136 ra.416 rbp)
         (rdx c.136 tmp.58 ra.416 rbp)
         (c.136 tmp.59 tmp.58 ra.416 rbp)
         (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.417 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.266 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         ((tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.58 ra.416 rbp))
         (rbp
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.58
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           c.136
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.266 tmp.417 rbp ra.416 tmp.58 tmp.59 rcx))
         (rdx (c.136 r15 rdi rsi tmp.58 ra.416 rcx rbp))
         (rsi (c.136 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.136 (tmp.59 tmp.58 rsi rdx ra.416 rbp))
         (tmp.59 (tmp.266 tmp.417 unsafe-vector-ref.3 c.136 tmp.58 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
         (tmp.266 (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp))))
       (assignment ()))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((locals (tmp.419 c.135 tmp.269 ra.418 tmp.60))
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.60 ra.418 rbp)
         (tmp.419 tmp.60 ra.418 rbp)
         (tmp.269 tmp.60 ra.418 rbp)
         ((tmp.60 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.135 r15 rdi ra.418 rbp))
         (rbp (tmp.269 tmp.419 tmp.60 c.135 ra.418 r15 rdi rsi))
         (ra.418 (tmp.269 tmp.419 tmp.60 c.135 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.135 (rsi ra.418 rbp))
         (tmp.60 (tmp.269 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.60))
         (tmp.269 (tmp.60 ra.418 rbp))))
       (assignment ()))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((locals (tmp.421 c.134 tmp.272 ra.420 tmp.61))
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.61 ra.420 rbp)
         (tmp.421 tmp.61 ra.420 rbp)
         (tmp.272 tmp.61 ra.420 rbp)
         ((tmp.61 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.134 r15 rdi ra.420 rbp))
         (rbp (tmp.272 tmp.421 tmp.61 c.134 ra.420 r15 rdi rsi))
         (ra.420 (tmp.272 tmp.421 tmp.61 c.134 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.134 (rsi ra.420 rbp))
         (tmp.61 (tmp.272 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.61))
         (tmp.272 (tmp.61 ra.420 rbp))))
       (assignment ()))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((locals (tmp.423 c.133 tmp.275 ra.422 tmp.62))
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.62 ra.422 rbp)
         (tmp.423 tmp.62 ra.422 rbp)
         (tmp.275 tmp.62 ra.422 rbp)
         ((tmp.62 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (conflicts
        ((rsi (c.133 r15 rdi ra.422 rbp))
         (rbp (tmp.275 tmp.423 tmp.62 c.133 ra.422 r15 rdi rsi))
         (ra.422 (tmp.275 tmp.423 tmp.62 c.133 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.133 (rsi ra.422 rbp))
         (tmp.62 (tmp.275 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.62))
         (tmp.275 (tmp.62 ra.422 rbp))))
       (assignment ()))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((locals (tmp.425 tmp.63 c.132 ra.424 tmp.277))
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.63 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.277 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.277 tmp.425 tmp.63 c.132 ra.424 rax))
         (ra.424 (tmp.277 tmp.425 tmp.63 c.132 rdi rsi rbp rax))
         (rsi (c.132 ra.424))
         (rdi (ra.424))
         (c.132 (rsi ra.424 rbp))
         (tmp.63 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.277 (ra.424 rbp))))
       (assignment ()))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((locals (tmp.427 tmp.64 c.131 ra.426 tmp.279))
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.64 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.279 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.279 tmp.427 tmp.64 c.131 ra.426 rax))
         (ra.426 (tmp.279 tmp.427 tmp.64 c.131 rdi rsi rbp rax))
         (rsi (c.131 ra.426))
         (rdi (ra.426))
         (c.131 (rsi ra.426 rbp))
         (tmp.64 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.279 (ra.426 rbp))))
       (assignment ()))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((locals (tmp.429 tmp.65 c.130 ra.428 tmp.281))
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.65 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.281 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.281 tmp.429 tmp.65 c.130 ra.428 rax))
         (ra.428 (tmp.281 tmp.429 tmp.65 c.130 rdi rsi rbp rax))
         (rsi (c.130 ra.428))
         (rdi (ra.428))
         (c.130 (rsi ra.428 rbp))
         (tmp.65 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.281 (ra.428 rbp))))
       (assignment ()))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((locals (tmp.431 tmp.66 c.129 ra.430 tmp.283))
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.66 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.283 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.283 tmp.431 tmp.66 c.129 ra.430 rax))
         (ra.430 (tmp.283 tmp.431 tmp.66 c.129 rdi rsi rbp rax))
         (rsi (c.129 ra.430))
         (rdi (ra.430))
         (c.129 (rsi ra.430 rbp))
         (tmp.66 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.283 (ra.430 rbp))))
       (assignment ()))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((locals (tmp.433 tmp.67 c.128 ra.432 tmp.285))
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.67 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.285 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.285 tmp.433 tmp.67 c.128 ra.432 rax))
         (ra.432 (tmp.285 tmp.433 tmp.67 c.128 rdi rsi rbp rax))
         (rsi (c.128 ra.432))
         (rdi (ra.432))
         (c.128 (rsi ra.432 rbp))
         (tmp.67 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.285 (ra.432 rbp))))
       (assignment ()))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((locals (tmp.435 tmp.68 c.127 ra.434 tmp.287))
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.68 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.287 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.287 tmp.435 tmp.68 c.127 ra.434 rax))
         (ra.434 (tmp.287 tmp.435 tmp.68 c.127 rdi rsi rbp rax))
         (rsi (c.127 ra.434))
         (rdi (ra.434))
         (c.127 (rsi ra.434 rbp))
         (tmp.68 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.287 (ra.434 rbp))))
       (assignment ()))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((locals (tmp.437 tmp.69 c.126 ra.436 tmp.289))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.69 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.289 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.289 tmp.437 tmp.69 c.126 ra.436 rax))
         (ra.436 (tmp.289 tmp.437 tmp.69 c.126 rdi rsi rbp rax))
         (rsi (c.126 ra.436))
         (rdi (ra.436))
         (c.126 (rsi ra.436 rbp))
         (tmp.69 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.289 (ra.436 rbp))))
       (assignment ()))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((locals (tmp.439 tmp.70 c.125 ra.438 tmp.291))
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.70 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.291 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.291 tmp.439 tmp.70 c.125 ra.438 rax))
         (ra.438 (tmp.291 tmp.439 tmp.70 c.125 rdi rsi rbp rax))
         (rsi (c.125 ra.438))
         (rdi (ra.438))
         (c.125 (rsi ra.438 rbp))
         (tmp.70 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.291 (ra.438 rbp))))
       (assignment ()))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((locals (tmp.441 tmp.71 c.124 ra.440 tmp.293))
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.71 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.293 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.293 tmp.441 tmp.71 c.124 ra.440 rax))
         (ra.440 (tmp.293 tmp.441 tmp.71 c.124 rdi rsi rbp rax))
         (rsi (c.124 ra.440))
         (rdi (ra.440))
         (c.124 (rsi ra.440 rbp))
         (tmp.71 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.293 (ra.440 rbp))))
       (assignment ()))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((locals (c.123 ra.442 tmp.72))
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.72 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.72 c.123 ra.442 rax))
         (ra.442 (tmp.72 c.123 rdi rsi rbp rax))
         (rsi (c.123 ra.442))
         (rdi (ra.442))
         (c.123 (rsi ra.442 rbp))
         (tmp.72 (ra.442 rbp))))
       (assignment ()))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((locals (tmp.167 tmp.444 tmp.295 tmp.74 tmp.73 c.122 ra.443))
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.73)
         (r12 tmp.74 ra.443 rbp tmp.73)
         (r12 tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.444 tmp.74 ra.443 rbp tmp.73)
         (tmp.74 ra.443 rbp tmp.73 tmp.167)
         (rbp ra.443 tmp.74 tmp.167)
         (tmp.167 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (conflicts
        ((ra.443
          (rax
           tmp.167
           tmp.444
           tmp.295
           tmp.74
           tmp.73
           c.122
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.167 tmp.444 r12 tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (r12 (rbp tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (rdx (tmp.73 c.122 ra.443))
         (rsi (c.122 ra.443))
         (rdi (ra.443))
         (c.122 (rsi rdx r12 ra.443 rbp))
         (tmp.73 (tmp.167 tmp.444 tmp.295 tmp.74 rdx r12 ra.443 rbp))
         (tmp.74 (tmp.167 tmp.444 tmp.295 r12 ra.443 rbp tmp.73))
         (tmp.295 (r12 tmp.74 ra.443 rbp tmp.73))
         (tmp.444 (tmp.73 rbp ra.443 tmp.74))
         (tmp.167 (tmp.74 ra.443 rbp tmp.73))
         (rax (ra.443 rbp))))
       (assignment ()))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((locals (c.121 ra.445 tmp.76 tmp.75))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.75 ra.445 rbp)
         (tmp.75 tmp.76 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.76 tmp.75 c.121 ra.445 rax))
         (ra.445 (tmp.76 tmp.75 c.121 rdi rsi rdx rbp rax))
         (rdx (tmp.75 c.121 ra.445))
         (rsi (c.121 ra.445))
         (rdi (ra.445))
         (c.121 (rsi rdx ra.445 rbp))
         (tmp.75 (tmp.76 rdx ra.445 rbp))
         (tmp.76 (tmp.75 ra.445 rbp))))
       (assignment ()))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((locals
        (tmp.151
         tmp.104
         tmp.168
         tmp.451
         tmp.300
         tmp.540
         tmp.299
         tmp.450
         tmp.298
         tmp.449
         tmp.448
         tmp.297
         tmp.447
         vector-init-loop.105
         tmp.103
         c.120
         ra.446))
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.120 r12 rbp ra.446)
         (c.120 r12 rbp ra.446 tmp.103)
         (r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.447 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.449 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.298 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.450 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.299 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.451 rbp ra.446 vector-init-loop.105 tmp.103)
         (rbp ra.446 vector-init-loop.105 tmp.103 tmp.168)
         (tmp.168 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.103 vector-init-loop.105 ra.446 rcx rbp)
         (tmp.103 vector-init-loop.105 ra.446 rdx rcx rbp)
         (vector-init-loop.105 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           r12
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (r12
          (rbp
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (rsi (r15 rdi vector-init-loop.105 rdx rcx rbp c.120 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.120 (tmp.103 rsi r12 rbp ra.446))
         (tmp.103
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           c.120
           r12
           rbp
           ra.446))
         (vector-init-loop.105
          (rsi
           rdx
           rcx
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           tmp.103
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.297 (tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.448 (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.449 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.298 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.450 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.299 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.540 (tmp.300 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.300 (r12 tmp.540 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.451 (tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.168 (rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.104 (tmp.151 tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.151 (tmp.104 tmp.103 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.103 vector-init-loop.105 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.103 vector-init-loop.105 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment ()))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((locals (c.119 ra.452 i.108 len.106 vector-init-loop.105 vec.107))
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.119 ra.452 rbp)
         (rdx rcx c.119 len.106 ra.452 rbp)
         (rcx c.119 len.106 i.108 ra.452 rbp)
         (c.119 vec.107 len.106 i.108 ra.452 rbp)
         (vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
         ((vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx vector-init-loop.105 len.106 i.108 ra.452 rbp))
         (rbp
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (i.108
          (vector-init-loop.105 vec.107 c.119 len.106 ra.452 rbp rdx rcx r8))
         (len.106
          (vector-init-loop.105 vec.107 i.108 rdx c.119 ra.452 rbp rcx r8))
         (vector-init-loop.105 (rbp ra.452 i.108 len.106 vec.107 r8))
         (rcx (c.119 r15 rdi rsi rdx len.106 i.108 ra.452 r8 rbp))
         (rdx (len.106 c.119 r15 rdi rsi i.108 ra.452 rcx r8 rbp))
         (rsi (c.119 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.119 (vec.107 i.108 len.106 rsi rdx rcx ra.452 rbp))
         (vec.107 (vector-init-loop.105 c.119 len.106 i.108 ra.452 rbp))))
       (assignment ()))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((locals (c.118 tmp.314 ra.453 tmp.115 tmp.116 tmp.114))
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.114 ra.453 rbp)
         (rcx tmp.114 tmp.115 ra.453 rbp)
         (tmp.114 tmp.116 tmp.115 ra.453 rbp)
         (tmp.314 tmp.114 tmp.116 tmp.115 ra.453 rbp)
         ((tmp.114 tmp.116 tmp.115 ra.453 rbp)
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((rcx (tmp.114 c.118 r15 rdi rsi rdx tmp.116 tmp.115 ra.453 rbp))
         (rbp
          (tmp.314 tmp.116 tmp.115 tmp.114 c.118 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.314 tmp.116 tmp.115 tmp.114 c.118 rbp rdi rsi rdx rcx))
         (tmp.115 (tmp.314 tmp.116 tmp.114 ra.453 rbp rdx rcx))
         (tmp.116 (tmp.314 tmp.114 tmp.115 ra.453 rbp rcx))
         (rdx (tmp.114 c.118 r15 rdi rsi tmp.115 ra.453 rcx rbp))
         (rsi (c.118 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.118 (rsi rdx rcx ra.453 rbp))
         (tmp.114 (tmp.314 tmp.116 tmp.115 rdx rcx ra.453 rbp))
         (tmp.314 (rbp ra.453 tmp.115 tmp.116 tmp.114))))
       (assignment ()))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((locals (c.117 tmp.322 ra.454 tmp.112 tmp.111))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.111 ra.454 rbp)
         (tmp.111 tmp.112 ra.454 rbp)
         (tmp.322 tmp.111 tmp.112 ra.454 rbp)
         ((tmp.111 tmp.112 ra.454 rbp)
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (conflicts
        ((rdx (tmp.111 c.117 r15 rdi rsi tmp.112 ra.454 rbp))
         (rbp (tmp.322 tmp.112 tmp.111 c.117 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.322 tmp.112 tmp.111 c.117 rbp rdi rsi rdx))
         (tmp.112 (tmp.322 tmp.111 ra.454 rbp rdx))
         (rsi (c.117 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.454 rbp))
         (tmp.111 (tmp.322 tmp.112 rdx ra.454 rbp))
         (tmp.322 (rbp ra.454 tmp.112 tmp.111))))
       (assignment ()))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((locals (tmp.316 ra.455 tmp.112 tmp.111))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.316 ra.455 rbp)
         (rdx tmp.316 tmp.112 ra.455 rbp)
         (tmp.316 tmp.111 tmp.112 ra.455 rbp)
         ((tmp.111 tmp.112 ra.455 rbp)
          ((tmp.111 tmp.112 ra.455 rbp)
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.111 tmp.112 tmp.316 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.111 tmp.112 tmp.316 rbp rdi rsi rdx rax))
         (rdx (tmp.316 r15 rdi rsi tmp.112 ra.455 rbp))
         (tmp.112 (tmp.111 tmp.316 ra.455 rbp rdx))
         (rsi (tmp.316 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.316 (tmp.111 tmp.112 rsi rdx ra.455 rbp))
         (tmp.111 (tmp.316 tmp.112 ra.455 rbp))))
       (assignment ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((locals
        (ra.456
         tmp.318
         tmp.111
         tmp.321
         tmp.459
         tmp.320
         tmp.458
         tmp.319
         tmp.457
         tmp.112))
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.318 ra.456 rbp)
         (rdx tmp.318 tmp.112 ra.456 rbp)
         (tmp.318 tmp.112 tmp.111 ra.456 rbp)
         ((tmp.112 tmp.111 ra.456 rbp)
          ((tmp.457 tmp.111 ra.456 rbp)
           (tmp.319 tmp.111 ra.456 rbp)
           (tmp.458 tmp.111 ra.456 rbp)
           (tmp.320 tmp.111 ra.456 rbp)
           (tmp.459 tmp.111 ra.456 rbp)
           (tmp.321 tmp.111 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.111
           tmp.112
           tmp.318
           ra.456
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (ra.456
          (tmp.111
           tmp.112
           tmp.318
           rdi
           rsi
           rdx
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.111))
         (tmp.111
          (tmp.318
           tmp.112
           ra.456
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457))
         (tmp.319 (tmp.111 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.111))
         (tmp.320 (tmp.111 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.111))
         (tmp.321 (tmp.111 ra.456 rbp))
         (rdx (tmp.112 tmp.318 ra.456))
         (rsi (tmp.318 ra.456))
         (rdi (ra.456))
         (tmp.318 (tmp.111 tmp.112 rsi rdx ra.456 rbp))
         (tmp.112 (tmp.111 rdx tmp.318 ra.456 rbp))))
       (assignment ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((locals (tmp.308 ra.460 tmp.115 tmp.114 tmp.116))
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.308 ra.460 rbp)
         (rdx rcx tmp.308 tmp.115 ra.460 rbp)
         (rcx tmp.308 tmp.116 tmp.115 ra.460 rbp)
         (tmp.308 tmp.116 tmp.114 tmp.115 ra.460 rbp)
         ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
          ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.114 tmp.116 tmp.115 tmp.308 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.114 tmp.116 tmp.115 tmp.308 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.116 tmp.308 r15 rdi rsi rdx tmp.114 tmp.115 ra.460 rbp))
         (tmp.115 (tmp.114 tmp.116 tmp.308 ra.460 rbp rdx rcx))
         (tmp.114 (tmp.308 tmp.116 tmp.115 ra.460 rbp rcx))
         (rdx (tmp.308 r15 rdi rsi tmp.115 ra.460 rcx rbp))
         (rsi (tmp.308 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.308 (tmp.114 tmp.116 tmp.115 rsi rdx rcx ra.460 rbp))
         (tmp.116 (tmp.114 rcx tmp.308 tmp.115 ra.460 rbp))))
       (assignment ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((locals
        (ra.461
         tmp.310
         tmp.114
         tmp.116
         tmp.313
         tmp.464
         tmp.312
         tmp.463
         tmp.311
         tmp.462
         tmp.115))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.310 rbp ra.461)
         (rdx rcx tmp.310 tmp.115 rbp ra.461)
         (rcx tmp.310 tmp.115 rbp ra.461 tmp.114)
         (tmp.310 tmp.115 rbp ra.461 tmp.116 tmp.114)
         ((tmp.115 rbp ra.461 tmp.116 tmp.114)
          ((tmp.462 rbp ra.461 tmp.116 tmp.114)
           (tmp.311 rbp ra.461 tmp.116 tmp.114)
           (tmp.463 rbp ra.461 tmp.116 tmp.114)
           (tmp.312 rbp ra.461 tmp.116 tmp.114)
           (tmp.464 rbp ra.461 tmp.116 tmp.114)
           (rbp ra.461 tmp.116 tmp.313 tmp.114)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (ra.461
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (tmp.462 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.116
          (tmp.310
           tmp.115
           rbp
           ra.461
           tmp.114
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.114
          (tmp.116
           rcx
           tmp.310
           tmp.115
           rbp
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.311 (rbp ra.461 tmp.116 tmp.114))
         (tmp.463 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.312 (rbp ra.461 tmp.116 tmp.114))
         (tmp.464 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.313 (rbp ra.461 tmp.116 tmp.114))
         (rcx (tmp.114 tmp.115 tmp.310 ra.461))
         (rdx (tmp.115 tmp.310 ra.461))
         (rsi (tmp.310 ra.461))
         (rdi (ra.461))
         (tmp.310 (tmp.116 tmp.114 tmp.115 rsi rdx rcx rbp ra.461))
         (tmp.115 (tmp.116 tmp.114 rdx rcx tmp.310 rbp ra.461))))
       (assignment ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((locals
        (tmp.302
         i.108
         tmp.466
         tmp.303
         tmp.467
         tmp.304
         tmp.468
         tmp.305
         vector-init-loop.105
         tmp.150
         tmp.469
         tmp.306
         len.106
         ra.465
         vec.107))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.302 ra.465 rbp)
         (rdx rcx r8 tmp.302 i.108 ra.465 rbp)
         (rcx r8 tmp.302 i.108 len.106 ra.465 rbp)
         (r8 tmp.302 i.108 len.106 vector-init-loop.105 ra.465 rbp)
         (tmp.302 i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
         ((i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.303 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.467 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.304 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.468 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (rbp ra.465 vector-init-loop.105 len.106 i.108 tmp.305 vec.107)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.469 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (vec.107 tmp.306 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.306 len.106 vector-init-loop.105 ra.465 rcx rbp)
           (len.106 vector-init-loop.105 ra.465 rdx rcx rbp)
           (vector-init-loop.105 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (conflicts
        ((tmp.466 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (rbp
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (ra.465
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vector-init-loop.105
          (vec.107
           r8
           tmp.302
           i.108
           len.106
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (len.106
          (vec.107
           vector-init-loop.105
           r8
           tmp.302
           i.108
           ra.465
           rbp
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (i.108
          (vec.107
           vector-init-loop.105
           len.106
           rdx
           rcx
           r8
           tmp.302
           ra.465
           rbp
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vec.107
          (tmp.302
           i.108
           len.106
           vector-init-loop.105
           ra.465
           rbp
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (tmp.303 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.467 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.304 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.468 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.305 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.150 (i.108 vec.107 len.106 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.105 len.106 vec.107))
         (tmp.306 (rcx vec.107 len.106 vector-init-loop.105 ra.465 rbp))
         (rcx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           rdx
           tmp.306
           len.106
           vector-init-loop.105
           ra.465
           rbp))
         (rdx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           len.106
           vector-init-loop.105
           ra.465
           rcx
           rbp))
         (rsi (tmp.302 r15 rdi vector-init-loop.105 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.105 len.106 i.108 tmp.302 ra.465))
         (tmp.302
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           rsi
           rdx
           rcx
           r8
           ra.465
           rbp))))
       (assignment ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((locals (ra.470 tmp.274 tmp.62))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.274 ra.470 rbp)
         (tmp.274 tmp.62 ra.470 rbp)
         ((tmp.62 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.62 tmp.274 ra.470 rax))
         (ra.470 (tmp.62 tmp.274 rdi rsi rbp rax))
         (rsi (tmp.274 ra.470))
         (rdi (ra.470))
         (tmp.274 (tmp.62 rsi ra.470 rbp))
         (tmp.62 (tmp.274 ra.470 rbp))))
       (assignment ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((locals (ra.471 tmp.271 tmp.61))
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.271 ra.471 rbp)
         (tmp.271 tmp.61 ra.471 rbp)
         ((tmp.61 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.61 tmp.271 ra.471 rax))
         (ra.471 (tmp.61 tmp.271 rdi rsi rbp rax))
         (rsi (tmp.271 ra.471))
         (rdi (ra.471))
         (tmp.271 (tmp.61 rsi ra.471 rbp))
         (tmp.61 (tmp.271 ra.471 rbp))))
       (assignment ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((locals (ra.472 tmp.268 tmp.60))
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.268 ra.472 rbp)
         (tmp.268 tmp.60 ra.472 rbp)
         ((tmp.60 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.60 tmp.268 ra.472 rax))
         (ra.472 (tmp.60 tmp.268 rdi rsi rbp rax))
         (rsi (tmp.268 ra.472))
         (rdi (ra.472))
         (tmp.268 (tmp.60 rsi ra.472 rbp))
         (tmp.60 (tmp.268 ra.472 rbp))))
       (assignment ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((locals
        (tmp.262 tmp.474 tmp.265 ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.262 ra.473 rbp)
         (rdx rcx tmp.262 tmp.58 ra.473 rbp)
         (rcx tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.262 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.265 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           ra.473
           tmp.265
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           rbp
           tmp.265
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.58
           tmp.262
           r15
           rdi
           rsi
           rdx
           tmp.59
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.59 tmp.262 tmp.58 ra.473 rbp tmp.265 tmp.474 rdx rcx))
         (tmp.59
          (tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp tmp.265 tmp.474 rcx))
         (rdx (tmp.58 tmp.262 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.262 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
         (tmp.58
          (tmp.59
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.262
           ra.473
           rbp
           tmp.265
           tmp.474))
         (tmp.265 (tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.262 (tmp.59 unsafe-vector-ref.3 tmp.58 rsi rdx rcx ra.473 rbp))))
       (assignment ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((locals (tmp.264 ra.475 tmp.58 tmp.59 tmp.152 unsafe-vector-ref.3))
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.264 ra.475 rbp)
         (rdx rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.264 tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.58 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (ra.475
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (tmp.152 (tmp.59 tmp.58 ra.475 rbp))
         (tmp.58 (tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp rdx tmp.152))
         (tmp.59 (tmp.58 rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp tmp.152))
         (rdx (tmp.264 r15 rdi rsi tmp.58 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.58 tmp.59 rcx tmp.264 ra.475 rbp rsi rdx))
         (rsi (tmp.264 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.59 unsafe-vector-ref.3 tmp.264 ra.475))
         (tmp.264 (tmp.58 tmp.59 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp))))
       (assignment ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((locals
        (tmp.256
         tmp.477
         tmp.259
         ra.476
         unsafe-vector-set!.2
         tmp.57
         tmp.56
         tmp.55))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.256 ra.476 rbp)
         (rdx rcx r8 tmp.256 tmp.55 ra.476 rbp)
         (rcx r8 tmp.256 tmp.55 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.256 tmp.55 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.256 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.259 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           ra.476
           tmp.259
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           rbp
           tmp.259
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.56 tmp.57 tmp.256 tmp.55 ra.476 rbp tmp.259 tmp.477 rdx rcx r8))
         (tmp.57
          (tmp.56
           tmp.256
           tmp.55
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           rcx
           r8))
         (tmp.56
          (tmp.256
           tmp.55
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           r8))
         (rcx
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           tmp.57
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.55 tmp.256 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.256 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55))
         (tmp.55
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.256
           ra.476
           rbp
           tmp.259
           tmp.477))
         (tmp.259 (tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.256
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp))))
       (assignment ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((locals
        (tmp.258 ra.478 tmp.55 tmp.56 tmp.57 tmp.153 unsafe-vector-set!.2))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.258 ra.478 rbp)
         (rdx rcx r8 tmp.258 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.258 tmp.57 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.258 tmp.57 tmp.56 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.258 tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.55 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (ra.478
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (tmp.153 (tmp.57 tmp.56 tmp.55 ra.478 rbp))
         (tmp.55
          (tmp.258
           tmp.57
           tmp.56
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.153))
         (tmp.56
          (tmp.55
           r8
           tmp.258
           tmp.57
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.153))
         (tmp.57
          (tmp.55
           tmp.56
           rcx
           r8
           tmp.258
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.153))
         (rcx
          (tmp.57
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.56
           tmp.55
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.55 tmp.56 tmp.57 r8 tmp.258 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.258 r15 rdi rsi tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.258 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.258 ra.478))
         (tmp.258
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp))))
       (assignment ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((locals (ra.479 tmp.253 tmp.54))
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.253 ra.479 rbp)
         (tmp.253 tmp.54 ra.479 rbp)
         ((tmp.54 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.54 tmp.253 ra.479 rax))
         (ra.479 (tmp.54 tmp.253 rdi rsi rbp rax))
         (rsi (tmp.253 ra.479))
         (rdi (ra.479))
         (tmp.253 (tmp.54 rsi ra.479 rbp))
         (tmp.54 (tmp.253 ra.479 rbp))))
       (assignment ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((locals (tmp.250 ra.480 tmp.53 tmp.154 make-init-vector.1))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.250 ra.480 rbp)
         (rdx tmp.250 make-init-vector.1 ra.480 rbp)
         (tmp.250 tmp.53 make-init-vector.1 ra.480 rbp)
         ((tmp.53 make-init-vector.1 ra.480 rbp)
          ((tmp.53 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.53 make-init-vector.1 tmp.250 ra.480 r15 rdi rsi tmp.154 rax))
         (ra.480
          (tmp.53 make-init-vector.1 tmp.250 rdx rbp rdi rsi tmp.154 rax))
         (tmp.154 (tmp.53 ra.480 rbp))
         (tmp.53 (tmp.250 make-init-vector.1 ra.480 rbp tmp.154))
         (rsi (tmp.250 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.53 rdx tmp.250 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.250 ra.480))
         (tmp.250 (tmp.53 make-init-vector.1 rsi rdx ra.480 rbp))))
       (assignment ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((locals (tmp.243 tmp.482 tmp.247 ra.481 tmp.51 tmp.52))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.243 ra.481 rbp)
         (rdx tmp.243 tmp.51 ra.481 rbp)
         (tmp.243 tmp.52 tmp.51 ra.481 rbp)
         ((tmp.52 tmp.51 ra.481 rbp)
          ((tmp.482 tmp.52 tmp.51 ra.481 rbp)
           (tmp.247 tmp.52 tmp.51 ra.481 rbp)
           ((tmp.52 tmp.51 ra.481 rbp)
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.52 tmp.51 tmp.243 ra.481 tmp.247 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.52 tmp.51 tmp.243 rbp tmp.247 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.243 r15 rdi rsi tmp.51 ra.481 rbp))
         (tmp.51 (tmp.52 tmp.243 ra.481 rbp tmp.247 tmp.482 rdx))
         (rsi (tmp.243 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.51 tmp.52))
         (tmp.52 (tmp.243 tmp.51 ra.481 rbp tmp.247 tmp.482))
         (tmp.247 (tmp.52 tmp.51 ra.481 rbp))
         (tmp.243 (tmp.52 tmp.51 rsi rdx ra.481 rbp))))
       (assignment ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((locals (ra.483 tmp.245 tmp.52 tmp.51))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.245 ra.483 rbp)
         (rdx tmp.245 tmp.51 ra.483 rbp)
         (tmp.245 tmp.51 tmp.52 ra.483 rbp)
         ((tmp.51 tmp.52 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.52 tmp.51 tmp.245 ra.483 rax))
         (ra.483 (tmp.52 tmp.51 tmp.245 rdi rsi rdx rbp rax))
         (rdx (tmp.51 tmp.245 ra.483))
         (rsi (tmp.245 ra.483))
         (rdi (ra.483))
         (tmp.245 (tmp.52 tmp.51 rsi rdx ra.483 rbp))
         (tmp.51 (tmp.52 rdx tmp.245 ra.483 rbp))
         (tmp.52 (tmp.245 tmp.51 ra.483 rbp))))
       (assignment ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((locals (tmp.236 tmp.485 tmp.240 ra.484 tmp.49 tmp.50))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.236 ra.484 rbp)
         (rdx tmp.236 tmp.49 ra.484 rbp)
         (tmp.236 tmp.50 tmp.49 ra.484 rbp)
         ((tmp.50 tmp.49 ra.484 rbp)
          ((tmp.485 tmp.50 tmp.49 ra.484 rbp)
           (tmp.240 tmp.50 tmp.49 ra.484 rbp)
           ((tmp.50 tmp.49 ra.484 rbp)
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.50 tmp.49 tmp.236 ra.484 tmp.240 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.50 tmp.49 tmp.236 rbp tmp.240 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.49 ra.484 rbp))
         (tmp.49 (tmp.50 tmp.236 ra.484 rbp tmp.240 tmp.485 rdx))
         (rsi (tmp.236 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.49 tmp.50))
         (tmp.50 (tmp.236 tmp.49 ra.484 rbp tmp.240 tmp.485))
         (tmp.240 (tmp.50 tmp.49 ra.484 rbp))
         (tmp.236 (tmp.50 tmp.49 rsi rdx ra.484 rbp))))
       (assignment ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((locals (ra.486 tmp.238 tmp.50 tmp.49))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.238 ra.486 rbp)
         (rdx tmp.238 tmp.49 ra.486 rbp)
         (tmp.238 tmp.49 tmp.50 ra.486 rbp)
         ((tmp.49 tmp.50 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.50 tmp.49 tmp.238 ra.486 rax))
         (ra.486 (tmp.50 tmp.49 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.49 tmp.238 ra.486))
         (rsi (tmp.238 ra.486))
         (rdi (ra.486))
         (tmp.238 (tmp.50 tmp.49 rsi rdx ra.486 rbp))
         (tmp.49 (tmp.50 rdx tmp.238 ra.486 rbp))
         (tmp.50 (tmp.238 tmp.49 ra.486 rbp))))
       (assignment ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((locals (tmp.229 tmp.488 tmp.233 ra.487 tmp.47 tmp.48))
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.229 ra.487 rbp)
         (rdx tmp.229 tmp.47 ra.487 rbp)
         (tmp.229 tmp.48 tmp.47 ra.487 rbp)
         ((tmp.48 tmp.47 ra.487 rbp)
          ((tmp.488 tmp.48 tmp.47 ra.487 rbp)
           (tmp.233 tmp.48 tmp.47 ra.487 rbp)
           ((tmp.48 tmp.47 ra.487 rbp)
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.48 tmp.47 tmp.229 ra.487 tmp.233 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.48 tmp.47 tmp.229 rbp tmp.233 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.47 ra.487 rbp))
         (tmp.47 (tmp.48 tmp.229 ra.487 rbp tmp.233 tmp.488 rdx))
         (rsi (tmp.229 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.47 tmp.48))
         (tmp.48 (tmp.229 tmp.47 ra.487 rbp tmp.233 tmp.488))
         (tmp.233 (tmp.48 tmp.47 ra.487 rbp))
         (tmp.229 (tmp.48 tmp.47 rsi rdx ra.487 rbp))))
       (assignment ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((locals (ra.489 tmp.231 tmp.48 tmp.47))
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.231 ra.489 rbp)
         (rdx tmp.231 tmp.47 ra.489 rbp)
         (tmp.231 tmp.47 tmp.48 ra.489 rbp)
         ((tmp.47 tmp.48 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.48 tmp.47 tmp.231 ra.489 rax))
         (ra.489 (tmp.48 tmp.47 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.47 tmp.231 ra.489))
         (rsi (tmp.231 ra.489))
         (rdi (ra.489))
         (tmp.231 (tmp.48 tmp.47 rsi rdx ra.489 rbp))
         (tmp.47 (tmp.48 rdx tmp.231 ra.489 rbp))
         (tmp.48 (tmp.231 tmp.47 ra.489 rbp))))
       (assignment ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((locals (tmp.222 tmp.491 tmp.226 ra.490 tmp.45 tmp.46))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.222 ra.490 rbp)
         (rdx tmp.222 tmp.45 ra.490 rbp)
         (tmp.222 tmp.46 tmp.45 ra.490 rbp)
         ((tmp.46 tmp.45 ra.490 rbp)
          ((tmp.491 tmp.46 tmp.45 ra.490 rbp)
           (tmp.226 tmp.46 tmp.45 ra.490 rbp)
           ((tmp.46 tmp.45 ra.490 rbp)
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.46 tmp.45 tmp.222 ra.490 tmp.226 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.46 tmp.45 tmp.222 rbp tmp.226 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.45 ra.490 rbp))
         (tmp.45 (tmp.46 tmp.222 ra.490 rbp tmp.226 tmp.491 rdx))
         (rsi (tmp.222 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.45 tmp.46))
         (tmp.46 (tmp.222 tmp.45 ra.490 rbp tmp.226 tmp.491))
         (tmp.226 (tmp.46 tmp.45 ra.490 rbp))
         (tmp.222 (tmp.46 tmp.45 rsi rdx ra.490 rbp))))
       (assignment ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((locals (ra.492 tmp.224 tmp.46 tmp.45))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.224 ra.492 rbp)
         (rdx tmp.224 tmp.45 ra.492 rbp)
         (tmp.224 tmp.45 tmp.46 ra.492 rbp)
         ((tmp.45 tmp.46 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.46 tmp.45 tmp.224 ra.492 rax))
         (ra.492 (tmp.46 tmp.45 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.45 tmp.224 ra.492))
         (rsi (tmp.224 ra.492))
         (rdi (ra.492))
         (tmp.224 (tmp.46 tmp.45 rsi rdx ra.492 rbp))
         (tmp.45 (tmp.46 rdx tmp.224 ra.492 rbp))
         (tmp.46 (tmp.224 tmp.45 ra.492 rbp))))
       (assignment ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((locals (tmp.216 tmp.494 tmp.219 ra.493 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.216 ra.493 rbp)
         (rdx tmp.216 tmp.43 ra.493 rbp)
         (tmp.216 tmp.44 tmp.43 ra.493 rbp)
         ((tmp.44 tmp.43 ra.493 rbp)
          ((tmp.494 tmp.44 tmp.43 ra.493 rbp)
           (tmp.219 tmp.44 tmp.43 ra.493 rbp)
           ((tmp.44 tmp.43 ra.493 rbp)
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.44 tmp.43 tmp.216 ra.493 tmp.219 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.44 tmp.43 tmp.216 rbp tmp.219 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.216 r15 rdi rsi tmp.43 ra.493 rbp))
         (tmp.43 (tmp.44 tmp.216 ra.493 rbp tmp.219 tmp.494 rdx))
         (rsi (tmp.216 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.43 tmp.44))
         (tmp.44 (tmp.216 tmp.43 ra.493 rbp tmp.219 tmp.494))
         (tmp.219 (tmp.44 tmp.43 ra.493 rbp))
         (tmp.216 (tmp.44 tmp.43 rsi rdx ra.493 rbp))))
       (assignment ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((locals (ra.495 tmp.218 tmp.496 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.218 ra.495 rbp)
         (rdx tmp.218 tmp.43 ra.495 rbp)
         (tmp.218 tmp.44 tmp.43 ra.495 rbp)
         ((tmp.44 tmp.43 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.44 tmp.43 tmp.218 ra.495 tmp.496 rax))
         (ra.495 (tmp.44 tmp.43 tmp.218 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.43 tmp.218 ra.495))
         (rsi (tmp.218 ra.495))
         (rdi (ra.495))
         (tmp.218 (tmp.44 tmp.43 rsi rdx ra.495 rbp))
         (tmp.43 (tmp.44 rdx tmp.218 ra.495 rbp))
         (tmp.44 (tmp.218 tmp.43 ra.495 rbp))))
       (assignment ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((locals (tmp.210 tmp.498 tmp.213 ra.497 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.210 ra.497 rbp)
         (rdx tmp.210 tmp.41 ra.497 rbp)
         (tmp.210 tmp.42 tmp.41 ra.497 rbp)
         ((tmp.42 tmp.41 ra.497 rbp)
          ((tmp.498 tmp.42 tmp.41 ra.497 rbp)
           (tmp.213 tmp.42 tmp.41 ra.497 rbp)
           ((tmp.42 tmp.41 ra.497 rbp)
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.42 tmp.41 tmp.210 ra.497 tmp.213 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.42 tmp.41 tmp.210 rbp tmp.213 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.210 r15 rdi rsi tmp.41 ra.497 rbp))
         (tmp.41 (tmp.42 tmp.210 ra.497 rbp tmp.213 tmp.498 rdx))
         (rsi (tmp.210 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.41 tmp.42))
         (tmp.42 (tmp.210 tmp.41 ra.497 rbp tmp.213 tmp.498))
         (tmp.213 (tmp.42 tmp.41 ra.497 rbp))
         (tmp.210 (tmp.42 tmp.41 rsi rdx ra.497 rbp))))
       (assignment ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((locals (ra.499 tmp.212 tmp.500 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.212 ra.499 rbp)
         (rdx tmp.212 tmp.41 ra.499 rbp)
         (tmp.212 tmp.42 tmp.41 ra.499 rbp)
         ((tmp.42 tmp.41 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.42 tmp.41 tmp.212 ra.499 tmp.500 rax))
         (ra.499 (tmp.42 tmp.41 tmp.212 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.41 tmp.212 ra.499))
         (rsi (tmp.212 ra.499))
         (rdi (ra.499))
         (tmp.212 (tmp.42 tmp.41 rsi rdx ra.499 rbp))
         (tmp.41 (tmp.42 rdx tmp.212 ra.499 rbp))
         (tmp.42 (tmp.212 tmp.41 ra.499 rbp))))
       (assignment ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((locals (tmp.203 tmp.502 tmp.207 ra.501 tmp.40 tmp.39))
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.203 ra.501 rbp)
         (rdx tmp.203 tmp.39 ra.501 rbp)
         (tmp.203 tmp.39 tmp.40 ra.501 rbp)
         ((tmp.39 tmp.40 ra.501 rbp)
          ((tmp.502 tmp.39 tmp.40 ra.501 rbp)
           (tmp.207 tmp.39 tmp.40 ra.501 rbp)
           ((tmp.39 tmp.40 ra.501 rbp)
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.40 tmp.39 tmp.203 ra.501 tmp.207 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.40 tmp.39 tmp.203 rbp tmp.207 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.39 tmp.203 r15 rdi rsi tmp.40 ra.501 rbp))
         (tmp.40 (tmp.203 tmp.39 ra.501 rbp tmp.207 tmp.502 rdx))
         (rsi (tmp.203 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.40 tmp.39))
         (tmp.39 (tmp.40 rdx tmp.203 ra.501 rbp tmp.207 tmp.502))
         (tmp.207 (tmp.39 tmp.40 ra.501 rbp))
         (tmp.203 (tmp.40 tmp.39 rsi rdx ra.501 rbp))))
       (assignment ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((locals (ra.503 tmp.205 tmp.505 tmp.39 tmp.206 tmp.504 tmp.40))
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.205 ra.503 rbp)
         (rdx tmp.205 tmp.40 ra.503 rbp)
         (tmp.205 tmp.40 tmp.39 ra.503 rbp)
         ((tmp.40 tmp.39 ra.503 rbp)
          ((tmp.504 tmp.39 ra.503 rbp)
           (tmp.206 tmp.39 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.39 tmp.40 tmp.205 ra.503 tmp.505 tmp.206 tmp.504 rax))
         (ra.503
          (tmp.39 tmp.40 tmp.205 rdi rsi rdx rbp tmp.505 tmp.206 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.39))
         (tmp.39 (tmp.205 tmp.40 ra.503 rbp tmp.206 tmp.504))
         (tmp.206 (tmp.39 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.40 tmp.205 ra.503))
         (rsi (tmp.205 ra.503))
         (rdi (ra.503))
         (tmp.205 (tmp.39 tmp.40 rsi rdx ra.503 rbp))
         (tmp.40 (tmp.39 rdx tmp.205 ra.503 rbp))))
       (assignment ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
      ) 55)

  )

  (parameterize ([current-pass-list
                  (list
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((new-frames ())
       (locals
        (ra.356
         tmp.323
         tmp.357
         tmp.169
         unsafe-vector-ref.3
         tmp.324
         tmp.358
         tmp.170
         unsafe-vector-set!.2
         tmp.325
         tmp.359
         tmp.171
         vector-init-loop.105
         tmp.326
         tmp.360
         tmp.172
         make-init-vector.1
         tmp.327
         tmp.361
         tmp.173
         eq?.102
         tmp.328
         tmp.362
         tmp.174
         cons.101
         tmp.329
         tmp.363
         tmp.175
         not.100
         tmp.330
         tmp.364
         tmp.176
         vector?.99
         tmp.331
         tmp.365
         tmp.177
         procedure?.98
         tmp.332
         tmp.366
         tmp.178
         pair?.97
         tmp.333
         tmp.367
         tmp.179
         error?.96
         tmp.334
         tmp.368
         tmp.180
         ascii-char?.95
         tmp.335
         tmp.369
         tmp.181
         void?.94
         tmp.336
         tmp.370
         tmp.182
         empty?.93
         tmp.337
         tmp.371
         tmp.183
         boolean?.92
         tmp.338
         tmp.372
         tmp.184
         fixnum?.91
         tmp.339
         tmp.373
         tmp.185
         procedure-arity.90
         tmp.340
         tmp.374
         tmp.186
         cdr.89
         tmp.341
         tmp.375
         tmp.187
         car.88
         tmp.342
         tmp.376
         tmp.188
         vector-ref.87
         tmp.343
         tmp.377
         tmp.189
         vector-set!.86
         tmp.344
         tmp.378
         tmp.190
         vector-length.85
         tmp.345
         tmp.379
         tmp.191
         make-vector.84
         tmp.346
         tmp.380
         tmp.192
         >=.83
         tmp.347
         tmp.381
         tmp.193
         >.82
         tmp.348
         tmp.382
         tmp.194
         <=.81
         tmp.349
         tmp.383
         tmp.195
         <.80
         tmp.350
         tmp.384
         tmp.196
         |-.79|
         tmp.351
         tmp.385
         tmp.197
         |+.78|
         tmp.352
         tmp.386
         tmp.198
         *.77
         tmp.353
         tmp.387
         tmp.199
         F.4
         tmp.354
         tmp.388
         tmp.200
         G.5
         tmp.355
         tmp.389
         tmp.201
         H.6
         tmp.166))
       (undead-out
        ((r12 rbp ra.356)
         (r12 tmp.323 rbp ra.356)
         (tmp.323 r12 rbp ra.356)
         (tmp.357 r12 rbp ra.356)
         (r12 rbp ra.356 tmp.169)
         (ra.356 rbp r12 tmp.169)
         (tmp.169 r12 rbp ra.356)
         (r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.324 rbp ra.356 unsafe-vector-ref.3)
         (tmp.324 r12 rbp ra.356 unsafe-vector-ref.3)
         (tmp.358 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 rbp ra.356 unsafe-vector-ref.3 tmp.170)
         (unsafe-vector-ref.3 ra.356 rbp r12 tmp.170)
         (tmp.170 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.325 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.325 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.359 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3 tmp.171)
         (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12 tmp.171)
         (tmp.171 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.326
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.326
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.360
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.172)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          r12
          tmp.172)
         (tmp.172
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.173)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.174)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.175)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.176)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.177)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.178)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.179)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.180)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.181)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.181)
         (tmp.181
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.182)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.182)
         (tmp.182
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.183)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.183)
         (tmp.183
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.184)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.184)
         (tmp.184
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.185)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.185)
         (tmp.185
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.340
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.186)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.186)
         (tmp.186
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.341
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.187)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.187)
         (tmp.187
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.342
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.188)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.188)
         (tmp.188
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.343
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.189)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.189)
         (tmp.189
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.190)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.190)
         (tmp.190
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.379
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.191)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.191)
         (tmp.191
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.380
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.192)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.192)
         (tmp.192
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.193)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.193)
         (tmp.193
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.194)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.194)
         (tmp.194
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.349
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.195)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.195)
         (tmp.195
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.350
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.196)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.196)
         (tmp.196
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.351
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.197)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.197)
         (tmp.197
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.386
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.198)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          tmp.198)
         (tmp.198
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          vector-init-loop.105
          make-init-vector.1)
         (vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-init-vector.1
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87)
         (make-vector.84
          make-init-vector.1
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86)
         (rbp ra.356 |+.78| r12 make-init-vector.1 make-vector.84)
         (r12 |+.78| ra.356 rbp)
         (r12 tmp.353 |+.78| ra.356 rbp)
         (tmp.353 r12 |+.78| ra.356 rbp)
         (tmp.387 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp tmp.199)
         (rbp ra.356 |+.78| r12 tmp.199)
         (tmp.199 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp F.4)
         (r12 tmp.354 |+.78| ra.356 rbp F.4)
         (tmp.354 r12 |+.78| ra.356 rbp F.4)
         (tmp.388 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp F.4 tmp.200)
         (F.4 rbp ra.356 |+.78| r12 tmp.200)
         (tmp.200 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp G.5 F.4)
         (r12 tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.389 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp G.5 F.4 tmp.201)
         (F.4 G.5 rbp ra.356 |+.78| tmp.201)
         (tmp.201 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp H.6 G.5 F.4)
         (G.5 H.6 rbp ra.356 |+.78| F.4)
         (|+.78| F.4 ra.356 rbp H.6 G.5)
         (rbp ra.356 F.4 |+.78| H.6)
         (F.4 ra.356 rbp)
         (F.4 ra.356 rbp)
         (F.4 ra.356 fv1 rbp)
         (F.4 ra.356 fv1 fv0 rbp)
         (F.4 ra.356 r9 fv1 fv0 rbp)
         (F.4 ra.356 r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (ra.356 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.356
          (rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           tmp.323
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           r12
           tmp.323
           ra.356))
         (r12
          (tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           rbp
           tmp.323
           ra.356))
         (tmp.323 (r12 rbp ra.356))
         (tmp.357 (ra.356 rbp r12))
         (tmp.169 (r12 rbp ra.356))
         (unsafe-vector-ref.3
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           r12
           rbp
           ra.356))
         (tmp.324 (r12 rbp ra.356 unsafe-vector-ref.3))
         (tmp.358 (unsafe-vector-ref.3 ra.356 rbp r12))
         (tmp.170 (r12 rbp ra.356 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           r12
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.325 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (tmp.359 (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12))
         (tmp.171 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (vector-init-loop.105
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.326
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.360
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.172
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (make-init-vector.1
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.361
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (eq?.102
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.362
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cons.101
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.363
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (not.100
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.364
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector?.99
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.365
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure?.98
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.366
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (pair?.97
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.367
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (error?.96
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.368
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (ascii-char?.95
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.369
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.181
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (void?.94
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.370
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.182
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (empty?.93
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.371
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.183
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (boolean?.92
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.372
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.184
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (fixnum?.91
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.373
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.185
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure-arity.90
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.340
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.374
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.186
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cdr.89
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.341
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.375
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.187
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (car.88
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.342
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.376
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.188
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector-ref.87
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.343
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.377
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.189
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-set!.86
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.378
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.190
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-length.85
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.379
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.191
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (make-vector.84
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.380
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.192
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>=.83
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.381
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.193
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>.82
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.382
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.194
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<=.81
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.349
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.383
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.195
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<.80
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.350
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.384
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.196
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|-.79|
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.351
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.385
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.197
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|+.78|
          (H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.352
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.386
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           r12
           |+.78|
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1))
         (tmp.198
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (*.77
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.353 (r12 |+.78| ra.356 rbp))
         (tmp.387 (rbp ra.356 |+.78| r12))
         (tmp.199 (r12 |+.78| ra.356 rbp))
         (F.4
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           r12
           |+.78|
           ra.356
           rbp))
         (tmp.354 (r12 |+.78| ra.356 rbp F.4))
         (tmp.388 (F.4 rbp ra.356 |+.78| r12))
         (tmp.200 (r12 |+.78| ra.356 rbp F.4))
         (G.5 (H.6 tmp.201 tmp.389 tmp.355 r12 |+.78| ra.356 rbp F.4))
         (tmp.355 (r12 |+.78| ra.356 rbp G.5 F.4))
         (tmp.389 (F.4 G.5 rbp ra.356 |+.78|))
         (tmp.201 (|+.78| ra.356 rbp G.5 F.4))
         (H.6 (|+.78| ra.356 rbp G.5 F.4))
         (tmp.166 (ra.356 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 F.4 ra.356 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 F.4 ra.356 fv1 rbp))
         (r9 (r15 rdi rsi rdx rcx r8 F.4 ra.356 fv1 fv0 rbp))
         (r8 (r15 rdi rsi rdx rcx F.4 ra.356 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx F.4 ra.356 r8 r9 fv1 fv0 rbp))
         (rdx (r15 rdi rsi F.4 ra.356 rcx r8 r9 fv1 fv0 rbp))
         (rsi (r15 rdi F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp))))
       (assignment ()))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((new-frames ())
       (locals
        (c.149
         a.23
         b.24
         tmp.158
         r1.32
         tmp.159
         r2.33
         tmp.160
         r3.34
         tmp.161
         r4.35
         tmp.162
         r5.36
         tmp.163
         r6.37
         tmp.164
         r7.38
         tmp.165))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 ra.390 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 ra.390 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 ra.390 rbp)
         (rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 ra.390 rbp)
         (r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 ra.390 rbp)
         (r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 ra.390 rbp)
         (fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 ra.390 rbp)
         (fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 ra.390 rbp)
         (fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 ra.390 rbp)
         (fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 ra.390 rbp)
         (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((a.23 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r1.32 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r2.33 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r3.34 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r4.35 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax h.30 j.31 |+.78| ra.390 rbp)
          ((r5.36 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         ((rax j.31 |+.78| ra.390 rbp)
          ((r6.37 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.31 r7.38 |+.78| ra.390 rbp)
         (j.31 r7.38 |+.78| ra.390 rbp)
         (r7.38 |+.78| ra.390 rdx rbp)
         (|+.78| ra.390 rsi rdx rbp)
         (ra.390 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390))
       (conflicts
        ((ra.390
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp))
         (rbp
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           r15
           rdi
           rsi
           rdx
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           ra.390))
         (fv3 (h.30 g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv2 (g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv1 (f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv0 (e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (r9 (d.26 c.25 b.24 a.23 c.149 ra.390))
         (r8 (c.25 b.24 a.23 c.149 ra.390))
         (rcx (b.24 a.23 c.149 ra.390))
         (rdx
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           r15
           rdi
           rsi
           |+.78|
           rbp
           a.23
           c.149
           ra.390))
         (rsi (r15 rdi |+.78| rdx rbp c.149 ra.390))
         (rdi (r15 rsi rdx rbp ra.390))
         (c.149
          (j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           ra.390
           rbp))
         (a.23
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           ra.390
           rbp))
         (b.24
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           ra.390
           rbp))
         (c.25
          (tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           ra.390
           rbp))
         (d.26
          (tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           ra.390
           rbp))
         (e.27
          (tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           ra.390
           rbp))
         (f.28
          (tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           ra.390
           rbp))
         (g.29
          (tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           ra.390
           rbp))
         (h.30
          (tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           ra.390
           rbp))
         (j.31
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           h.30
           ra.390
           rbp))
         (|+.78|
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           rsi
           rdx
           rax
           rbp
           ra.390
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23))
         (tmp.158 (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (rax (rbp ra.390 |+.78| j.31 h.30 g.29 f.28 e.27 d.26 c.25))
         (r15 (rdi rsi rdx rbp))
         (r1.32
          (rdx tmp.159 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.159 (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r2.33 (rdx tmp.160 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.160 (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r3.34 (rdx tmp.161 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.161 (r3.34 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r4.35 (rdx tmp.162 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.162 (r4.35 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r5.36 (rdx tmp.163 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.163 (r5.36 g.29 h.30 j.31 ra.390 rbp))
         (r6.37 (rdx tmp.164 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.164 (r6.37 h.30 j.31 ra.390 rbp))
         (r7.38 (rdx tmp.165 j.31 |+.78| ra.390 rbp))
         (tmp.165 (j.31 r7.38 ra.390 rbp))))
       (assignment
        ((ra.390 fv4)
         (|+.78| fv0)
         (j.31 fv1)
         (h.30 fv2)
         (g.29 fv5)
         (f.28 fv6)
         (e.27 fv7)
         (d.26 fv8)
         (c.25 fv9))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((new-frames ())
       (locals
        (ra.391 c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 H.6 tmp.157))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.391 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.148 ra.391 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.148 a.15 ra.391 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.148 b.16 a.15 ra.391 rbp)
         (r8 r9 fv0 fv1 fv2 c.148 c.17 b.16 a.15 ra.391 rbp)
         (r9 fv0 fv1 fv2 c.148 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv0 fv1 fv2 c.148 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv1 fv2 c.148 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv2 c.148 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (c.148 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 rbp)
         (g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 rbp)
         (f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 rbp)
         (e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 fv0 rbp)
         (d.18 c.17 b.16 a.15 H.6 ra.391 r9 fv3 fv2 fv1 fv0 rbp)
         (c.17 b.16 a.15 H.6 ra.391 r8 r9 fv3 fv2 fv1 fv0 rbp)
         (b.16 a.15 H.6 ra.391 rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (a.15 H.6 ra.391 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (H.6 ra.391 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (ra.391 rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.391
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv2
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           fv3
           rbp
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           H.6
           fv3
           fv2
           rbp
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           H.6
           fv3
           fv2
           fv1
           rbp
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           H.6
           fv3
           fv2
           fv1
           fv0
           rbp
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           H.6
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (rcx
          (r15
           rdi
           rsi
           rdx
           H.6
           r8
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           b.16
           a.15
           c.148
           ra.391))
         (rdx
          (r15 rdi rsi H.6 rcx r8 r9 fv3 fv2 fv1 fv0 rbp a.15 c.148 ra.391))
         (rsi (r15 rdi H.6 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp c.148 ra.391))
         (rdi (r15 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp ra.391))
         (c.148
          (h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.391
           rbp))
         (a.15
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           ra.391
           rbp))
         (b.16
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           a.15
           ra.391
           rbp))
         (c.17
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           b.16
           a.15
           ra.391
           rbp))
         (d.18
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           r9
           fv0
           fv1
           fv2
           c.148
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (e.19
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           fv0
           fv1
           fv2
           c.148
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (f.20
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           fv1
           fv2
           c.148
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (g.21
          (fv3
           tmp.157
           H.6
           h.22
           fv2
           c.148
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (h.22
          (fv3
           tmp.157
           H.6
           c.148
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (H.6
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp
           ra.391
           a.15
           b.16
           c.17
           d.18
           e.19
           f.20
           g.21
           h.22))
         (tmp.157 (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp))
         (fv3
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           H.6
           ra.391
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp))))
       (assignment ()))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((new-frames ((nfv.393 nfv.394 nfv.395)))
       (locals
        (c.147
         a.7
         b.8
         c.9
         d.10
         e.11
         f.12
         g.13
         G.5
         tmp.155
         nfv.395
         nfv.394
         nfv.393
         r.14
         tmp.156))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.392 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 c.147 ra.392 rbp)
         (rdx rcx r8 r9 fv0 fv1 c.147 a.7 ra.392 rbp)
         (rcx r8 r9 fv0 fv1 c.147 a.7 b.8 ra.392 rbp)
         (r8 r9 fv0 fv1 c.147 a.7 b.8 c.9 ra.392 rbp)
         (r9 fv0 fv1 c.147 a.7 b.8 c.9 d.10 ra.392 rbp)
         (fv0 fv1 c.147 a.7 b.8 c.9 d.10 e.11 ra.392 rbp)
         (fv1 c.147 a.7 b.8 c.9 d.10 e.11 f.12 ra.392 rbp)
         (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (c.147 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         ((rax |+.78| ra.392 rbp)
          ((g.13 f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 rbp)
           (f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 rbp)
           (e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 nfv.393 rbp)
           (d.10 c.9 b.8 a.7 G.5 r9 nfv.395 nfv.394 nfv.393 rbp)
           (c.9 b.8 a.7 G.5 r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (b.8 a.7 G.5 rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (a.7 G.5 rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (G.5 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)))
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rdx rbp)
         (|+.78| ra.392 rsi rdx rbp)
         (ra.392 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (|+.78| ra.392))
       (conflicts
        ((ra.392
          (tmp.156
           r.14
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           rbp))
         (rbp
          (tmp.156
           r.14
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (fv1 (f.12 e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (fv0 (e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           G.5
           nfv.395
           nfv.394
           nfv.393
           rbp
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           G.5
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (rcx
          (r15
           rdi
           rsi
           rdx
           G.5
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           b.8
           a.7
           c.147
           ra.392))
         (rdx
          (r.14
           |+.78|
           r15
           rdi
           rsi
           G.5
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           a.7
           c.147
           ra.392))
         (rsi
          (|+.78|
           r15
           rdi
           G.5
           rdx
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.147
           ra.392))
         (rdi (r15 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp ra.392))
         (c.147
          (G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.392
           rbp))
         (a.7
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           ra.392
           rbp))
         (b.8
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           ra.392
           rbp))
         (c.9
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           ra.392
           rbp))
         (d.10
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           ra.392
           rbp))
         (e.11
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           ra.392
           rbp))
         (f.12
          (nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           ra.392
           rbp))
         (g.13
          (nfv.395
           tmp.155
           |+.78|
           G.5
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           f.12
           ra.392
           rbp))
         (G.5
          (rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           |+.78|
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147))
         (|+.78|
          (rsi
           rdx
           r.14
           rax
           tmp.155
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5))
         (tmp.155 (a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp))
         (rax (rbp ra.392 |+.78|))
         (nfv.395
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           rbp))
         (nfv.394
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           rbp))
         (nfv.393
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           nfv.394
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp))
         (r.14 (rdx tmp.156 |+.78| ra.392 rbp))
         (tmp.156 (r.14 ra.392 rbp))))
       (assignment ((ra.392 fv2) (|+.78| fv0))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((new-frames ())
       (locals (tmp.40 tmp.39 ra.396 tmp.208 c.146 tmp.397))
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.39 ra.396 rbp)
         (tmp.40 tmp.39 ra.396 rbp)
         (tmp.397 tmp.40 tmp.39 ra.396 rbp)
         (tmp.208 tmp.40 tmp.39 ra.396 rbp)
         ((tmp.40 tmp.39 ra.396 rbp)
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.146 r15 rdi rsi tmp.39 ra.396 rbp))
         (rbp (tmp.208 tmp.397 tmp.40 tmp.39 c.146 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.208 tmp.397 tmp.40 tmp.39 c.146 rbp rdi rsi rdx))
         (tmp.39 (tmp.208 tmp.397 tmp.40 ra.396 rbp rdx))
         (rsi (c.146 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.146 (rsi rdx ra.396 rbp))
         (tmp.40 (tmp.208 tmp.397 tmp.39 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.39 tmp.40))
         (tmp.208 (tmp.40 tmp.39 ra.396 rbp))))
       (assignment ()))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((new-frames ())
       (locals (tmp.42 tmp.41 ra.398 tmp.214 c.145 tmp.399))
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.41 ra.398 rbp)
         (tmp.42 tmp.41 ra.398 rbp)
         (tmp.399 tmp.42 tmp.41 ra.398 rbp)
         (tmp.214 tmp.42 tmp.41 ra.398 rbp)
         ((tmp.42 tmp.41 ra.398 rbp)
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.145 r15 rdi rsi tmp.41 ra.398 rbp))
         (rbp (tmp.214 tmp.399 tmp.42 tmp.41 c.145 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.214 tmp.399 tmp.42 tmp.41 c.145 rbp rdi rsi rdx))
         (tmp.41 (tmp.214 tmp.399 tmp.42 ra.398 rbp rdx))
         (rsi (c.145 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.145 (rsi rdx ra.398 rbp))
         (tmp.42 (tmp.214 tmp.399 tmp.41 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.41 tmp.42))
         (tmp.214 (tmp.42 tmp.41 ra.398 rbp))))
       (assignment ()))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((new-frames ())
       (locals (tmp.44 tmp.43 ra.400 tmp.220 c.144 tmp.401))
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.43 ra.400 rbp)
         (tmp.44 tmp.43 ra.400 rbp)
         (tmp.401 tmp.44 tmp.43 ra.400 rbp)
         (tmp.220 tmp.44 tmp.43 ra.400 rbp)
         ((tmp.44 tmp.43 ra.400 rbp)
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.144 r15 rdi rsi tmp.43 ra.400 rbp))
         (rbp (tmp.220 tmp.401 tmp.44 tmp.43 c.144 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.220 tmp.401 tmp.44 tmp.43 c.144 rbp rdi rsi rdx))
         (tmp.43 (tmp.220 tmp.401 tmp.44 ra.400 rbp rdx))
         (rsi (c.144 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.144 (rsi rdx ra.400 rbp))
         (tmp.44 (tmp.220 tmp.401 tmp.43 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.43 tmp.44))
         (tmp.220 (tmp.44 tmp.43 ra.400 rbp))))
       (assignment ()))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((new-frames ())
       (locals (tmp.46 tmp.45 ra.402 tmp.227 c.143 tmp.403))
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.45 ra.402 rbp)
         (tmp.46 tmp.45 ra.402 rbp)
         (tmp.403 tmp.46 tmp.45 ra.402 rbp)
         (tmp.227 tmp.46 tmp.45 ra.402 rbp)
         ((tmp.46 tmp.45 ra.402 rbp)
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.143 r15 rdi rsi tmp.45 ra.402 rbp))
         (rbp (tmp.227 tmp.403 tmp.46 tmp.45 c.143 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.227 tmp.403 tmp.46 tmp.45 c.143 rbp rdi rsi rdx))
         (tmp.45 (tmp.227 tmp.403 tmp.46 ra.402 rbp rdx))
         (rsi (c.143 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.143 (rsi rdx ra.402 rbp))
         (tmp.46 (tmp.227 tmp.403 tmp.45 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.45 tmp.46))
         (tmp.227 (tmp.46 tmp.45 ra.402 rbp))))
       (assignment ()))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((new-frames ())
       (locals (tmp.48 tmp.47 ra.404 tmp.234 c.142 tmp.405))
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.47 ra.404 rbp)
         (tmp.48 tmp.47 ra.404 rbp)
         (tmp.405 tmp.48 tmp.47 ra.404 rbp)
         (tmp.234 tmp.48 tmp.47 ra.404 rbp)
         ((tmp.48 tmp.47 ra.404 rbp)
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.142 r15 rdi rsi tmp.47 ra.404 rbp))
         (rbp (tmp.234 tmp.405 tmp.48 tmp.47 c.142 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.234 tmp.405 tmp.48 tmp.47 c.142 rbp rdi rsi rdx))
         (tmp.47 (tmp.234 tmp.405 tmp.48 ra.404 rbp rdx))
         (rsi (c.142 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.142 (rsi rdx ra.404 rbp))
         (tmp.48 (tmp.234 tmp.405 tmp.47 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.47 tmp.48))
         (tmp.234 (tmp.48 tmp.47 ra.404 rbp))))
       (assignment ()))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((new-frames ())
       (locals (tmp.50 tmp.49 ra.406 tmp.241 c.141 tmp.407))
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.49 ra.406 rbp)
         (tmp.50 tmp.49 ra.406 rbp)
         (tmp.407 tmp.50 tmp.49 ra.406 rbp)
         (tmp.241 tmp.50 tmp.49 ra.406 rbp)
         ((tmp.50 tmp.49 ra.406 rbp)
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.141 r15 rdi rsi tmp.49 ra.406 rbp))
         (rbp (tmp.241 tmp.407 tmp.50 tmp.49 c.141 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.241 tmp.407 tmp.50 tmp.49 c.141 rbp rdi rsi rdx))
         (tmp.49 (tmp.241 tmp.407 tmp.50 ra.406 rbp rdx))
         (rsi (c.141 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.141 (rsi rdx ra.406 rbp))
         (tmp.50 (tmp.241 tmp.407 tmp.49 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.49 tmp.50))
         (tmp.241 (tmp.50 tmp.49 ra.406 rbp))))
       (assignment ()))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((new-frames ())
       (locals (tmp.52 tmp.51 ra.408 tmp.248 c.140 tmp.409))
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.51 ra.408 rbp)
         (tmp.52 tmp.51 ra.408 rbp)
         (tmp.409 tmp.52 tmp.51 ra.408 rbp)
         (tmp.248 tmp.52 tmp.51 ra.408 rbp)
         ((tmp.52 tmp.51 ra.408 rbp)
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.140 r15 rdi rsi tmp.51 ra.408 rbp))
         (rbp (tmp.248 tmp.409 tmp.52 tmp.51 c.140 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.248 tmp.409 tmp.52 tmp.51 c.140 rbp rdi rsi rdx))
         (tmp.51 (tmp.248 tmp.409 tmp.52 ra.408 rbp rdx))
         (rsi (c.140 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.140 (rsi rdx ra.408 rbp))
         (tmp.52 (tmp.248 tmp.409 tmp.51 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.51 tmp.52))
         (tmp.248 (tmp.52 tmp.51 ra.408 rbp))))
       (assignment ()))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((new-frames ())
       (locals (tmp.53 make-init-vector.1 ra.410 tmp.251 c.139 tmp.411))
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.139 ra.410 rbp)
         (c.139 tmp.53 ra.410 rbp)
         (tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.251 tmp.53 make-init-vector.1 ra.410 rbp)
         ((tmp.53 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.251
           tmp.411
           make-init-vector.1
           tmp.53
           c.139
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.251 tmp.411 make-init-vector.1 tmp.53 c.139 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.251 tmp.411 rbp ra.410 tmp.53 rdx))
         (rsi (c.139 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.139 (tmp.53 rsi ra.410 rbp))
         (tmp.53 (tmp.251 tmp.411 make-init-vector.1 c.139 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.53))
         (tmp.251 (tmp.53 make-init-vector.1 ra.410 rbp))))
       (assignment ()))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((new-frames ())
       (locals (tmp.54 ra.412 tmp.254 c.138 tmp.413))
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.54 ra.412 rbp)
         (tmp.413 tmp.54 ra.412 rbp)
         (tmp.254 tmp.54 ra.412 rbp)
         ((tmp.54 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.138 r15 rdi ra.412 rbp))
         (rbp (tmp.254 tmp.413 tmp.54 c.138 ra.412 r15 rdi rsi))
         (ra.412 (tmp.254 tmp.413 tmp.54 c.138 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.138 (rsi ra.412 rbp))
         (tmp.54 (tmp.254 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.54))
         (tmp.254 (tmp.54 ra.412 rbp))))
       (assignment ()))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((new-frames ())
       (locals
        (tmp.56
         tmp.57
         unsafe-vector-set!.2
         tmp.55
         ra.414
         tmp.260
         c.137
         tmp.415))
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.137 ra.414 rbp)
         (rdx rcx c.137 tmp.55 ra.414 rbp)
         (rcx c.137 tmp.56 tmp.55 ra.414 rbp)
         (c.137 tmp.56 tmp.57 tmp.55 ra.414 rbp)
         (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.415 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.260 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         ((tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))
         (rbp
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.55
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           c.137
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.260 tmp.415 rbp ra.414 tmp.55 tmp.57 tmp.56 rcx r8))
         (tmp.57
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           c.137
           tmp.56
           tmp.55
           ra.414
           rbp
           r8))
         (rcx
          (tmp.56
           c.137
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.55
           ra.414
           r8
           rbp))
         (rdx (c.137 r15 rdi rsi tmp.55 ra.414 rcx r8 rbp))
         (rsi (c.137 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.137 (tmp.57 tmp.56 tmp.55 rsi rdx rcx ra.414 rbp))
         (tmp.56
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           rcx
           c.137
           tmp.55
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56))
         (tmp.260 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))))
       (assignment ()))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((new-frames ())
       (locals
        (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 tmp.266 c.136 tmp.417))
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.136 ra.416 rbp)
         (rdx c.136 tmp.58 ra.416 rbp)
         (c.136 tmp.59 tmp.58 ra.416 rbp)
         (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.417 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.266 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         ((tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.58 ra.416 rbp))
         (rbp
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.58
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           c.136
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.266 tmp.417 rbp ra.416 tmp.58 tmp.59 rcx))
         (rdx (c.136 r15 rdi rsi tmp.58 ra.416 rcx rbp))
         (rsi (c.136 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.136 (tmp.59 tmp.58 rsi rdx ra.416 rbp))
         (tmp.59 (tmp.266 tmp.417 unsafe-vector-ref.3 c.136 tmp.58 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
         (tmp.266 (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp))))
       (assignment ()))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((new-frames ())
       (locals (tmp.60 ra.418 tmp.269 c.135 tmp.419))
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.60 ra.418 rbp)
         (tmp.419 tmp.60 ra.418 rbp)
         (tmp.269 tmp.60 ra.418 rbp)
         ((tmp.60 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.135 r15 rdi ra.418 rbp))
         (rbp (tmp.269 tmp.419 tmp.60 c.135 ra.418 r15 rdi rsi))
         (ra.418 (tmp.269 tmp.419 tmp.60 c.135 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.135 (rsi ra.418 rbp))
         (tmp.60 (tmp.269 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.60))
         (tmp.269 (tmp.60 ra.418 rbp))))
       (assignment ()))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((new-frames ())
       (locals (tmp.61 ra.420 tmp.272 c.134 tmp.421))
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.61 ra.420 rbp)
         (tmp.421 tmp.61 ra.420 rbp)
         (tmp.272 tmp.61 ra.420 rbp)
         ((tmp.61 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.134 r15 rdi ra.420 rbp))
         (rbp (tmp.272 tmp.421 tmp.61 c.134 ra.420 r15 rdi rsi))
         (ra.420 (tmp.272 tmp.421 tmp.61 c.134 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.134 (rsi ra.420 rbp))
         (tmp.61 (tmp.272 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.61))
         (tmp.272 (tmp.61 ra.420 rbp))))
       (assignment ()))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((new-frames ())
       (locals (tmp.62 ra.422 tmp.275 c.133 tmp.423))
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.62 ra.422 rbp)
         (tmp.423 tmp.62 ra.422 rbp)
         (tmp.275 tmp.62 ra.422 rbp)
         ((tmp.62 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.133 r15 rdi ra.422 rbp))
         (rbp (tmp.275 tmp.423 tmp.62 c.133 ra.422 r15 rdi rsi))
         (ra.422 (tmp.275 tmp.423 tmp.62 c.133 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.133 (rsi ra.422 rbp))
         (tmp.62 (tmp.275 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.62))
         (tmp.275 (tmp.62 ra.422 rbp))))
       (assignment ()))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((new-frames ())
       (locals (tmp.277 ra.424 c.132 tmp.63 tmp.425))
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.63 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.277 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.277 tmp.425 tmp.63 c.132 ra.424 rax))
         (ra.424 (tmp.277 tmp.425 tmp.63 c.132 rdi rsi rbp rax))
         (rsi (c.132 ra.424))
         (rdi (ra.424))
         (c.132 (rsi ra.424 rbp))
         (tmp.63 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.277 (ra.424 rbp))))
       (assignment ()))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((new-frames ())
       (locals (tmp.279 ra.426 c.131 tmp.64 tmp.427))
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.64 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.279 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.279 tmp.427 tmp.64 c.131 ra.426 rax))
         (ra.426 (tmp.279 tmp.427 tmp.64 c.131 rdi rsi rbp rax))
         (rsi (c.131 ra.426))
         (rdi (ra.426))
         (c.131 (rsi ra.426 rbp))
         (tmp.64 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.279 (ra.426 rbp))))
       (assignment ()))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((new-frames ())
       (locals (tmp.281 ra.428 c.130 tmp.65 tmp.429))
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.65 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.281 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.281 tmp.429 tmp.65 c.130 ra.428 rax))
         (ra.428 (tmp.281 tmp.429 tmp.65 c.130 rdi rsi rbp rax))
         (rsi (c.130 ra.428))
         (rdi (ra.428))
         (c.130 (rsi ra.428 rbp))
         (tmp.65 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.281 (ra.428 rbp))))
       (assignment ()))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((new-frames ())
       (locals (tmp.283 ra.430 c.129 tmp.66 tmp.431))
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.66 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.283 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.283 tmp.431 tmp.66 c.129 ra.430 rax))
         (ra.430 (tmp.283 tmp.431 tmp.66 c.129 rdi rsi rbp rax))
         (rsi (c.129 ra.430))
         (rdi (ra.430))
         (c.129 (rsi ra.430 rbp))
         (tmp.66 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.283 (ra.430 rbp))))
       (assignment ()))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((new-frames ())
       (locals (tmp.285 ra.432 c.128 tmp.67 tmp.433))
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.67 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.285 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.285 tmp.433 tmp.67 c.128 ra.432 rax))
         (ra.432 (tmp.285 tmp.433 tmp.67 c.128 rdi rsi rbp rax))
         (rsi (c.128 ra.432))
         (rdi (ra.432))
         (c.128 (rsi ra.432 rbp))
         (tmp.67 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.285 (ra.432 rbp))))
       (assignment ()))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((new-frames ())
       (locals (tmp.287 ra.434 c.127 tmp.68 tmp.435))
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.68 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.287 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.287 tmp.435 tmp.68 c.127 ra.434 rax))
         (ra.434 (tmp.287 tmp.435 tmp.68 c.127 rdi rsi rbp rax))
         (rsi (c.127 ra.434))
         (rdi (ra.434))
         (c.127 (rsi ra.434 rbp))
         (tmp.68 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.287 (ra.434 rbp))))
       (assignment ()))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((new-frames ())
       (locals (tmp.289 ra.436 c.126 tmp.69 tmp.437))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.69 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.289 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.289 tmp.437 tmp.69 c.126 ra.436 rax))
         (ra.436 (tmp.289 tmp.437 tmp.69 c.126 rdi rsi rbp rax))
         (rsi (c.126 ra.436))
         (rdi (ra.436))
         (c.126 (rsi ra.436 rbp))
         (tmp.69 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.289 (ra.436 rbp))))
       (assignment ()))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((new-frames ())
       (locals (tmp.291 ra.438 c.125 tmp.70 tmp.439))
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.70 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.291 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.291 tmp.439 tmp.70 c.125 ra.438 rax))
         (ra.438 (tmp.291 tmp.439 tmp.70 c.125 rdi rsi rbp rax))
         (rsi (c.125 ra.438))
         (rdi (ra.438))
         (c.125 (rsi ra.438 rbp))
         (tmp.70 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.291 (ra.438 rbp))))
       (assignment ()))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((new-frames ())
       (locals (tmp.293 ra.440 c.124 tmp.71 tmp.441))
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.71 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.293 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.293 tmp.441 tmp.71 c.124 ra.440 rax))
         (ra.440 (tmp.293 tmp.441 tmp.71 c.124 rdi rsi rbp rax))
         (rsi (c.124 ra.440))
         (rdi (ra.440))
         (c.124 (rsi ra.440 rbp))
         (tmp.71 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.293 (ra.440 rbp))))
       (assignment ()))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((new-frames ())
       (locals (tmp.72 ra.442 c.123))
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.72 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.72 c.123 ra.442 rax))
         (ra.442 (tmp.72 c.123 rdi rsi rbp rax))
         (rsi (c.123 ra.442))
         (rdi (ra.442))
         (c.123 (rsi ra.442 rbp))
         (tmp.72 (ra.442 rbp))))
       (assignment ()))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((new-frames ())
       (locals (ra.443 c.122 tmp.73 tmp.74 tmp.295 tmp.444 tmp.167))
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.73)
         (r12 tmp.74 ra.443 rbp tmp.73)
         (r12 tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.444 tmp.74 ra.443 rbp tmp.73)
         (tmp.74 ra.443 rbp tmp.73 tmp.167)
         (rbp ra.443 tmp.74 tmp.167)
         (tmp.167 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.443
          (rax
           tmp.167
           tmp.444
           tmp.295
           tmp.74
           tmp.73
           c.122
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.167 tmp.444 r12 tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (r12 (rbp tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (rdx (tmp.73 c.122 ra.443))
         (rsi (c.122 ra.443))
         (rdi (ra.443))
         (c.122 (rsi rdx r12 ra.443 rbp))
         (tmp.73 (tmp.167 tmp.444 tmp.295 tmp.74 rdx r12 ra.443 rbp))
         (tmp.74 (tmp.167 tmp.444 tmp.295 r12 ra.443 rbp tmp.73))
         (tmp.295 (r12 tmp.74 ra.443 rbp tmp.73))
         (tmp.444 (tmp.73 rbp ra.443 tmp.74))
         (tmp.167 (tmp.74 ra.443 rbp tmp.73))
         (rax (ra.443 rbp))))
       (assignment ()))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((new-frames ())
       (locals (tmp.75 tmp.76 ra.445 c.121))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.75 ra.445 rbp)
         (tmp.75 tmp.76 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.76 tmp.75 c.121 ra.445 rax))
         (ra.445 (tmp.76 tmp.75 c.121 rdi rsi rdx rbp rax))
         (rdx (tmp.75 c.121 ra.445))
         (rsi (c.121 ra.445))
         (rdi (ra.445))
         (c.121 (rsi rdx ra.445 rbp))
         (tmp.75 (tmp.76 rdx ra.445 rbp))
         (tmp.76 (tmp.75 ra.445 rbp))))
       (assignment ()))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (ra.446
         c.120
         tmp.103
         vector-init-loop.105
         tmp.447
         tmp.297
         tmp.448
         tmp.449
         tmp.298
         tmp.450
         tmp.299
         tmp.540
         tmp.300
         tmp.451
         tmp.168
         tmp.104
         tmp.151))
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.120 r12 rbp ra.446)
         (c.120 r12 rbp ra.446 tmp.103)
         (r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.447 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.449 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.298 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.450 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.299 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.451 rbp ra.446 vector-init-loop.105 tmp.103)
         (rbp ra.446 vector-init-loop.105 tmp.103 tmp.168)
         (tmp.168 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.103 vector-init-loop.105 ra.446 rcx rbp)
         (tmp.103 vector-init-loop.105 ra.446 rdx rcx rbp)
         (vector-init-loop.105 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           r12
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (r12
          (rbp
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (rsi (r15 rdi vector-init-loop.105 rdx rcx rbp c.120 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.120 (tmp.103 rsi r12 rbp ra.446))
         (tmp.103
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           c.120
           r12
           rbp
           ra.446))
         (vector-init-loop.105
          (rsi
           rdx
           rcx
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           tmp.103
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.297 (tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.448 (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.449 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.298 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.450 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.299 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.540 (tmp.300 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.300 (r12 tmp.540 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.451 (tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.168 (rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.104 (tmp.151 tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.151 (tmp.104 tmp.103 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.103 vector-init-loop.105 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.103 vector-init-loop.105 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))))
       (assignment ()))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((new-frames ())
       (locals (vec.107 vector-init-loop.105 len.106 i.108 ra.452 c.119))
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.119 ra.452 rbp)
         (rdx rcx c.119 len.106 ra.452 rbp)
         (rcx c.119 len.106 i.108 ra.452 rbp)
         (c.119 vec.107 len.106 i.108 ra.452 rbp)
         (vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
         ((vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx vector-init-loop.105 len.106 i.108 ra.452 rbp))
         (rbp
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (i.108
          (vector-init-loop.105 vec.107 c.119 len.106 ra.452 rbp rdx rcx r8))
         (len.106
          (vector-init-loop.105 vec.107 i.108 rdx c.119 ra.452 rbp rcx r8))
         (vector-init-loop.105 (rbp ra.452 i.108 len.106 vec.107 r8))
         (rcx (c.119 r15 rdi rsi rdx len.106 i.108 ra.452 r8 rbp))
         (rdx (len.106 c.119 r15 rdi rsi i.108 ra.452 rcx r8 rbp))
         (rsi (c.119 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.119 (vec.107 i.108 len.106 rsi rdx rcx ra.452 rbp))
         (vec.107 (vector-init-loop.105 c.119 len.106 i.108 ra.452 rbp))))
       (assignment ()))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (tmp.114 tmp.116 tmp.115 ra.453 tmp.314 c.118))
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.114 ra.453 rbp)
         (rcx tmp.114 tmp.115 ra.453 rbp)
         (tmp.114 tmp.116 tmp.115 ra.453 rbp)
         (tmp.314 tmp.114 tmp.116 tmp.115 ra.453 rbp)
         ((tmp.114 tmp.116 tmp.115 ra.453 rbp)
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.114 c.118 r15 rdi rsi rdx tmp.116 tmp.115 ra.453 rbp))
         (rbp
          (tmp.314 tmp.116 tmp.115 tmp.114 c.118 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.314 tmp.116 tmp.115 tmp.114 c.118 rbp rdi rsi rdx rcx))
         (tmp.115 (tmp.314 tmp.116 tmp.114 ra.453 rbp rdx rcx))
         (tmp.116 (tmp.314 tmp.114 tmp.115 ra.453 rbp rcx))
         (rdx (tmp.114 c.118 r15 rdi rsi tmp.115 ra.453 rcx rbp))
         (rsi (c.118 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.118 (rsi rdx rcx ra.453 rbp))
         (tmp.114 (tmp.314 tmp.116 tmp.115 rdx rcx ra.453 rbp))
         (tmp.314 (rbp ra.453 tmp.115 tmp.116 tmp.114))))
       (assignment ()))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (tmp.111 tmp.112 ra.454 tmp.322 c.117))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.111 ra.454 rbp)
         (tmp.111 tmp.112 ra.454 rbp)
         (tmp.322 tmp.111 tmp.112 ra.454 rbp)
         ((tmp.111 tmp.112 ra.454 rbp)
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.111 c.117 r15 rdi rsi tmp.112 ra.454 rbp))
         (rbp (tmp.322 tmp.112 tmp.111 c.117 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.322 tmp.112 tmp.111 c.117 rbp rdi rsi rdx))
         (tmp.112 (tmp.322 tmp.111 ra.454 rbp rdx))
         (rsi (c.117 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.454 rbp))
         (tmp.111 (tmp.322 tmp.112 rdx ra.454 rbp))
         (tmp.322 (rbp ra.454 tmp.112 tmp.111))))
       (assignment ()))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((new-frames ())
       (locals (tmp.111 tmp.112 ra.455 tmp.316))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.316 ra.455 rbp)
         (rdx tmp.316 tmp.112 ra.455 rbp)
         (tmp.316 tmp.111 tmp.112 ra.455 rbp)
         ((tmp.111 tmp.112 ra.455 rbp)
          ((tmp.111 tmp.112 ra.455 rbp)
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.111 tmp.112 tmp.316 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.111 tmp.112 tmp.316 rbp rdi rsi rdx rax))
         (rdx (tmp.316 r15 rdi rsi tmp.112 ra.455 rbp))
         (tmp.112 (tmp.111 tmp.316 ra.455 rbp rdx))
         (rsi (tmp.316 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.316 (tmp.111 tmp.112 rsi rdx ra.455 rbp))
         (tmp.111 (tmp.316 tmp.112 ra.455 rbp))))
       (assignment ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((new-frames ())
       (locals
        (tmp.112
         tmp.457
         tmp.319
         tmp.458
         tmp.320
         tmp.459
         tmp.321
         tmp.111
         tmp.318
         ra.456))
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.318 ra.456 rbp)
         (rdx tmp.318 tmp.112 ra.456 rbp)
         (tmp.318 tmp.112 tmp.111 ra.456 rbp)
         ((tmp.112 tmp.111 ra.456 rbp)
          ((tmp.457 tmp.111 ra.456 rbp)
           (tmp.319 tmp.111 ra.456 rbp)
           (tmp.458 tmp.111 ra.456 rbp)
           (tmp.320 tmp.111 ra.456 rbp)
           (tmp.459 tmp.111 ra.456 rbp)
           (tmp.321 tmp.111 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.111
           tmp.112
           tmp.318
           ra.456
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (ra.456
          (tmp.111
           tmp.112
           tmp.318
           rdi
           rsi
           rdx
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.111))
         (tmp.111
          (tmp.318
           tmp.112
           ra.456
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457))
         (tmp.319 (tmp.111 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.111))
         (tmp.320 (tmp.111 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.111))
         (tmp.321 (tmp.111 ra.456 rbp))
         (rdx (tmp.112 tmp.318 ra.456))
         (rsi (tmp.318 ra.456))
         (rdi (ra.456))
         (tmp.318 (tmp.111 tmp.112 rsi rdx ra.456 rbp))
         (tmp.112 (tmp.111 rdx tmp.318 ra.456 rbp))))
       (assignment ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((new-frames ())
       (locals (tmp.116 tmp.114 tmp.115 ra.460 tmp.308))
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.308 ra.460 rbp)
         (rdx rcx tmp.308 tmp.115 ra.460 rbp)
         (rcx tmp.308 tmp.116 tmp.115 ra.460 rbp)
         (tmp.308 tmp.116 tmp.114 tmp.115 ra.460 rbp)
         ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
          ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.114 tmp.116 tmp.115 tmp.308 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.114 tmp.116 tmp.115 tmp.308 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.116 tmp.308 r15 rdi rsi rdx tmp.114 tmp.115 ra.460 rbp))
         (tmp.115 (tmp.114 tmp.116 tmp.308 ra.460 rbp rdx rcx))
         (tmp.114 (tmp.308 tmp.116 tmp.115 ra.460 rbp rcx))
         (rdx (tmp.308 r15 rdi rsi tmp.115 ra.460 rcx rbp))
         (rsi (tmp.308 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.308 (tmp.114 tmp.116 tmp.115 rsi rdx rcx ra.460 rbp))
         (tmp.116 (tmp.114 rcx tmp.308 tmp.115 ra.460 rbp))))
       (assignment ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((new-frames ())
       (locals
        (tmp.115
         tmp.462
         tmp.311
         tmp.463
         tmp.312
         tmp.464
         tmp.313
         tmp.116
         tmp.114
         tmp.310
         ra.461))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.310 rbp ra.461)
         (rdx rcx tmp.310 tmp.115 rbp ra.461)
         (rcx tmp.310 tmp.115 rbp ra.461 tmp.114)
         (tmp.310 tmp.115 rbp ra.461 tmp.116 tmp.114)
         ((tmp.115 rbp ra.461 tmp.116 tmp.114)
          ((tmp.462 rbp ra.461 tmp.116 tmp.114)
           (tmp.311 rbp ra.461 tmp.116 tmp.114)
           (tmp.463 rbp ra.461 tmp.116 tmp.114)
           (tmp.312 rbp ra.461 tmp.116 tmp.114)
           (tmp.464 rbp ra.461 tmp.116 tmp.114)
           (rbp ra.461 tmp.116 tmp.313 tmp.114)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (ra.461
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (tmp.462 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.116
          (tmp.310
           tmp.115
           rbp
           ra.461
           tmp.114
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.114
          (tmp.116
           rcx
           tmp.310
           tmp.115
           rbp
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.311 (rbp ra.461 tmp.116 tmp.114))
         (tmp.463 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.312 (rbp ra.461 tmp.116 tmp.114))
         (tmp.464 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.313 (rbp ra.461 tmp.116 tmp.114))
         (rcx (tmp.114 tmp.115 tmp.310 ra.461))
         (rdx (tmp.115 tmp.310 ra.461))
         (rsi (tmp.310 ra.461))
         (rdi (ra.461))
         (tmp.310 (tmp.116 tmp.114 tmp.115 rsi rdx rcx rbp ra.461))
         (tmp.115 (tmp.116 tmp.114 rdx rcx tmp.310 rbp ra.461))))
       (assignment ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((new-frames ())
       (locals
        (vec.107
         ra.465
         len.106
         tmp.306
         tmp.469
         tmp.150
         vector-init-loop.105
         tmp.305
         tmp.468
         tmp.304
         tmp.467
         tmp.303
         tmp.466
         i.108
         tmp.302))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.302 ra.465 rbp)
         (rdx rcx r8 tmp.302 i.108 ra.465 rbp)
         (rcx r8 tmp.302 i.108 len.106 ra.465 rbp)
         (r8 tmp.302 i.108 len.106 vector-init-loop.105 ra.465 rbp)
         (tmp.302 i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
         ((i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.303 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.467 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.304 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.468 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (rbp ra.465 vector-init-loop.105 len.106 i.108 tmp.305 vec.107)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.469 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (vec.107 tmp.306 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.306 len.106 vector-init-loop.105 ra.465 rcx rbp)
           (len.106 vector-init-loop.105 ra.465 rdx rcx rbp)
           (vector-init-loop.105 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.466 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (rbp
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (ra.465
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vector-init-loop.105
          (vec.107
           r8
           tmp.302
           i.108
           len.106
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (len.106
          (vec.107
           vector-init-loop.105
           r8
           tmp.302
           i.108
           ra.465
           rbp
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (i.108
          (vec.107
           vector-init-loop.105
           len.106
           rdx
           rcx
           r8
           tmp.302
           ra.465
           rbp
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vec.107
          (tmp.302
           i.108
           len.106
           vector-init-loop.105
           ra.465
           rbp
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (tmp.303 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.467 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.304 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.468 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.305 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.150 (i.108 vec.107 len.106 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.105 len.106 vec.107))
         (tmp.306 (rcx vec.107 len.106 vector-init-loop.105 ra.465 rbp))
         (rcx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           rdx
           tmp.306
           len.106
           vector-init-loop.105
           ra.465
           rbp))
         (rdx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           len.106
           vector-init-loop.105
           ra.465
           rcx
           rbp))
         (rsi (tmp.302 r15 rdi vector-init-loop.105 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.105 len.106 i.108 tmp.302 ra.465))
         (tmp.302
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           rsi
           rdx
           rcx
           r8
           ra.465
           rbp))))
       (assignment ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((new-frames ())
       (locals (tmp.62 tmp.274 ra.470))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.274 ra.470 rbp)
         (tmp.274 tmp.62 ra.470 rbp)
         ((tmp.62 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.62 tmp.274 ra.470 rax))
         (ra.470 (tmp.62 tmp.274 rdi rsi rbp rax))
         (rsi (tmp.274 ra.470))
         (rdi (ra.470))
         (tmp.274 (tmp.62 rsi ra.470 rbp))
         (tmp.62 (tmp.274 ra.470 rbp))))
       (assignment ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((new-frames ())
       (locals (tmp.61 tmp.271 ra.471))
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.271 ra.471 rbp)
         (tmp.271 tmp.61 ra.471 rbp)
         ((tmp.61 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.61 tmp.271 ra.471 rax))
         (ra.471 (tmp.61 tmp.271 rdi rsi rbp rax))
         (rsi (tmp.271 ra.471))
         (rdi (ra.471))
         (tmp.271 (tmp.61 rsi ra.471 rbp))
         (tmp.61 (tmp.271 ra.471 rbp))))
       (assignment ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (tmp.60 tmp.268 ra.472))
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.268 ra.472 rbp)
         (tmp.268 tmp.60 ra.472 rbp)
         ((tmp.60 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.60 tmp.268 ra.472 rax))
         (ra.472 (tmp.60 tmp.268 rdi rsi rbp rax))
         (rsi (tmp.268 ra.472))
         (rdi (ra.472))
         (tmp.268 (tmp.60 rsi ra.472 rbp))
         (tmp.60 (tmp.268 ra.472 rbp))))
       (assignment ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((new-frames ())
       (locals
        (tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 tmp.265 tmp.474 tmp.262))
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.262 ra.473 rbp)
         (rdx rcx tmp.262 tmp.58 ra.473 rbp)
         (rcx tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.262 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.265 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           ra.473
           tmp.265
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           rbp
           tmp.265
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.58
           tmp.262
           r15
           rdi
           rsi
           rdx
           tmp.59
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.59 tmp.262 tmp.58 ra.473 rbp tmp.265 tmp.474 rdx rcx))
         (tmp.59
          (tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp tmp.265 tmp.474 rcx))
         (rdx (tmp.58 tmp.262 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.262 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
         (tmp.58
          (tmp.59
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.262
           ra.473
           rbp
           tmp.265
           tmp.474))
         (tmp.265 (tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.262 (tmp.59 unsafe-vector-ref.3 tmp.58 rsi rdx rcx ra.473 rbp))))
       (assignment ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((new-frames ())
       (locals (unsafe-vector-ref.3 tmp.152 tmp.59 tmp.58 ra.475 tmp.264))
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.264 ra.475 rbp)
         (rdx rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.264 tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.58 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (ra.475
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (tmp.152 (tmp.59 tmp.58 ra.475 rbp))
         (tmp.58 (tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp rdx tmp.152))
         (tmp.59 (tmp.58 rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp tmp.152))
         (rdx (tmp.264 r15 rdi rsi tmp.58 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.58 tmp.59 rcx tmp.264 ra.475 rbp rsi rdx))
         (rsi (tmp.264 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.59 unsafe-vector-ref.3 tmp.264 ra.475))
         (tmp.264 (tmp.58 tmp.59 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp))))
       (assignment ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((new-frames ())
       (locals
        (tmp.55
         tmp.56
         tmp.57
         unsafe-vector-set!.2
         ra.476
         tmp.259
         tmp.477
         tmp.256))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.256 ra.476 rbp)
         (rdx rcx r8 tmp.256 tmp.55 ra.476 rbp)
         (rcx r8 tmp.256 tmp.55 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.256 tmp.55 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.256 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.259 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           ra.476
           tmp.259
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           rbp
           tmp.259
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.56 tmp.57 tmp.256 tmp.55 ra.476 rbp tmp.259 tmp.477 rdx rcx r8))
         (tmp.57
          (tmp.56
           tmp.256
           tmp.55
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           rcx
           r8))
         (tmp.56
          (tmp.256
           tmp.55
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           r8))
         (rcx
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           tmp.57
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.55 tmp.256 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.256 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55))
         (tmp.55
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.256
           ra.476
           rbp
           tmp.259
           tmp.477))
         (tmp.259 (tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.256
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp))))
       (assignment ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((new-frames ())
       (locals
        (unsafe-vector-set!.2 tmp.153 tmp.57 tmp.56 tmp.55 ra.478 tmp.258))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.258 ra.478 rbp)
         (rdx rcx r8 tmp.258 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.258 tmp.57 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.258 tmp.57 tmp.56 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.258 tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.55 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (ra.478
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (tmp.153 (tmp.57 tmp.56 tmp.55 ra.478 rbp))
         (tmp.55
          (tmp.258
           tmp.57
           tmp.56
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.153))
         (tmp.56
          (tmp.55
           r8
           tmp.258
           tmp.57
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.153))
         (tmp.57
          (tmp.55
           tmp.56
           rcx
           r8
           tmp.258
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.153))
         (rcx
          (tmp.57
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.56
           tmp.55
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.55 tmp.56 tmp.57 r8 tmp.258 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.258 r15 rdi rsi tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.258 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.258 ra.478))
         (tmp.258
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp))))
       (assignment ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((new-frames ())
       (locals (tmp.54 tmp.253 ra.479))
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.253 ra.479 rbp)
         (tmp.253 tmp.54 ra.479 rbp)
         ((tmp.54 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.54 tmp.253 ra.479 rax))
         (ra.479 (tmp.54 tmp.253 rdi rsi rbp rax))
         (rsi (tmp.253 ra.479))
         (rdi (ra.479))
         (tmp.253 (tmp.54 rsi ra.479 rbp))
         (tmp.54 (tmp.253 ra.479 rbp))))
       (assignment ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (make-init-vector.1 tmp.154 tmp.53 ra.480 tmp.250))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.250 ra.480 rbp)
         (rdx tmp.250 make-init-vector.1 ra.480 rbp)
         (tmp.250 tmp.53 make-init-vector.1 ra.480 rbp)
         ((tmp.53 make-init-vector.1 ra.480 rbp)
          ((tmp.53 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.53 make-init-vector.1 tmp.250 ra.480 r15 rdi rsi tmp.154 rax))
         (ra.480
          (tmp.53 make-init-vector.1 tmp.250 rdx rbp rdi rsi tmp.154 rax))
         (tmp.154 (tmp.53 ra.480 rbp))
         (tmp.53 (tmp.250 make-init-vector.1 ra.480 rbp tmp.154))
         (rsi (tmp.250 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.53 rdx tmp.250 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.250 ra.480))
         (tmp.250 (tmp.53 make-init-vector.1 rsi rdx ra.480 rbp))))
       (assignment ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (tmp.52 tmp.51 ra.481 tmp.247 tmp.482 tmp.243))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.243 ra.481 rbp)
         (rdx tmp.243 tmp.51 ra.481 rbp)
         (tmp.243 tmp.52 tmp.51 ra.481 rbp)
         ((tmp.52 tmp.51 ra.481 rbp)
          ((tmp.482 tmp.52 tmp.51 ra.481 rbp)
           (tmp.247 tmp.52 tmp.51 ra.481 rbp)
           ((tmp.52 tmp.51 ra.481 rbp)
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.52 tmp.51 tmp.243 ra.481 tmp.247 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.52 tmp.51 tmp.243 rbp tmp.247 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.243 r15 rdi rsi tmp.51 ra.481 rbp))
         (tmp.51 (tmp.52 tmp.243 ra.481 rbp tmp.247 tmp.482 rdx))
         (rsi (tmp.243 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.51 tmp.52))
         (tmp.52 (tmp.243 tmp.51 ra.481 rbp tmp.247 tmp.482))
         (tmp.247 (tmp.52 tmp.51 ra.481 rbp))
         (tmp.243 (tmp.52 tmp.51 rsi rdx ra.481 rbp))))
       (assignment ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((new-frames ())
       (locals (tmp.51 tmp.52 tmp.245 ra.483))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.245 ra.483 rbp)
         (rdx tmp.245 tmp.51 ra.483 rbp)
         (tmp.245 tmp.51 tmp.52 ra.483 rbp)
         ((tmp.51 tmp.52 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.52 tmp.51 tmp.245 ra.483 rax))
         (ra.483 (tmp.52 tmp.51 tmp.245 rdi rsi rdx rbp rax))
         (rdx (tmp.51 tmp.245 ra.483))
         (rsi (tmp.245 ra.483))
         (rdi (ra.483))
         (tmp.245 (tmp.52 tmp.51 rsi rdx ra.483 rbp))
         (tmp.51 (tmp.52 rdx tmp.245 ra.483 rbp))
         (tmp.52 (tmp.245 tmp.51 ra.483 rbp))))
       (assignment ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((new-frames ())
       (locals (tmp.50 tmp.49 ra.484 tmp.240 tmp.485 tmp.236))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.236 ra.484 rbp)
         (rdx tmp.236 tmp.49 ra.484 rbp)
         (tmp.236 tmp.50 tmp.49 ra.484 rbp)
         ((tmp.50 tmp.49 ra.484 rbp)
          ((tmp.485 tmp.50 tmp.49 ra.484 rbp)
           (tmp.240 tmp.50 tmp.49 ra.484 rbp)
           ((tmp.50 tmp.49 ra.484 rbp)
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.50 tmp.49 tmp.236 ra.484 tmp.240 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.50 tmp.49 tmp.236 rbp tmp.240 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.49 ra.484 rbp))
         (tmp.49 (tmp.50 tmp.236 ra.484 rbp tmp.240 tmp.485 rdx))
         (rsi (tmp.236 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.49 tmp.50))
         (tmp.50 (tmp.236 tmp.49 ra.484 rbp tmp.240 tmp.485))
         (tmp.240 (tmp.50 tmp.49 ra.484 rbp))
         (tmp.236 (tmp.50 tmp.49 rsi rdx ra.484 rbp))))
       (assignment ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((new-frames ())
       (locals (tmp.49 tmp.50 tmp.238 ra.486))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.238 ra.486 rbp)
         (rdx tmp.238 tmp.49 ra.486 rbp)
         (tmp.238 tmp.49 tmp.50 ra.486 rbp)
         ((tmp.49 tmp.50 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.50 tmp.49 tmp.238 ra.486 rax))
         (ra.486 (tmp.50 tmp.49 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.49 tmp.238 ra.486))
         (rsi (tmp.238 ra.486))
         (rdi (ra.486))
         (tmp.238 (tmp.50 tmp.49 rsi rdx ra.486 rbp))
         (tmp.49 (tmp.50 rdx tmp.238 ra.486 rbp))
         (tmp.50 (tmp.238 tmp.49 ra.486 rbp))))
       (assignment ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((new-frames ())
       (locals (tmp.48 tmp.47 ra.487 tmp.233 tmp.488 tmp.229))
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.229 ra.487 rbp)
         (rdx tmp.229 tmp.47 ra.487 rbp)
         (tmp.229 tmp.48 tmp.47 ra.487 rbp)
         ((tmp.48 tmp.47 ra.487 rbp)
          ((tmp.488 tmp.48 tmp.47 ra.487 rbp)
           (tmp.233 tmp.48 tmp.47 ra.487 rbp)
           ((tmp.48 tmp.47 ra.487 rbp)
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.48 tmp.47 tmp.229 ra.487 tmp.233 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.48 tmp.47 tmp.229 rbp tmp.233 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.47 ra.487 rbp))
         (tmp.47 (tmp.48 tmp.229 ra.487 rbp tmp.233 tmp.488 rdx))
         (rsi (tmp.229 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.47 tmp.48))
         (tmp.48 (tmp.229 tmp.47 ra.487 rbp tmp.233 tmp.488))
         (tmp.233 (tmp.48 tmp.47 ra.487 rbp))
         (tmp.229 (tmp.48 tmp.47 rsi rdx ra.487 rbp))))
       (assignment ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((new-frames ())
       (locals (tmp.47 tmp.48 tmp.231 ra.489))
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.231 ra.489 rbp)
         (rdx tmp.231 tmp.47 ra.489 rbp)
         (tmp.231 tmp.47 tmp.48 ra.489 rbp)
         ((tmp.47 tmp.48 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.48 tmp.47 tmp.231 ra.489 rax))
         (ra.489 (tmp.48 tmp.47 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.47 tmp.231 ra.489))
         (rsi (tmp.231 ra.489))
         (rdi (ra.489))
         (tmp.231 (tmp.48 tmp.47 rsi rdx ra.489 rbp))
         (tmp.47 (tmp.48 rdx tmp.231 ra.489 rbp))
         (tmp.48 (tmp.231 tmp.47 ra.489 rbp))))
       (assignment ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((new-frames ())
       (locals (tmp.46 tmp.45 ra.490 tmp.226 tmp.491 tmp.222))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.222 ra.490 rbp)
         (rdx tmp.222 tmp.45 ra.490 rbp)
         (tmp.222 tmp.46 tmp.45 ra.490 rbp)
         ((tmp.46 tmp.45 ra.490 rbp)
          ((tmp.491 tmp.46 tmp.45 ra.490 rbp)
           (tmp.226 tmp.46 tmp.45 ra.490 rbp)
           ((tmp.46 tmp.45 ra.490 rbp)
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.46 tmp.45 tmp.222 ra.490 tmp.226 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.46 tmp.45 tmp.222 rbp tmp.226 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.45 ra.490 rbp))
         (tmp.45 (tmp.46 tmp.222 ra.490 rbp tmp.226 tmp.491 rdx))
         (rsi (tmp.222 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.45 tmp.46))
         (tmp.46 (tmp.222 tmp.45 ra.490 rbp tmp.226 tmp.491))
         (tmp.226 (tmp.46 tmp.45 ra.490 rbp))
         (tmp.222 (tmp.46 tmp.45 rsi rdx ra.490 rbp))))
       (assignment ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((new-frames ())
       (locals (tmp.45 tmp.46 tmp.224 ra.492))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.224 ra.492 rbp)
         (rdx tmp.224 tmp.45 ra.492 rbp)
         (tmp.224 tmp.45 tmp.46 ra.492 rbp)
         ((tmp.45 tmp.46 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.46 tmp.45 tmp.224 ra.492 rax))
         (ra.492 (tmp.46 tmp.45 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.45 tmp.224 ra.492))
         (rsi (tmp.224 ra.492))
         (rdi (ra.492))
         (tmp.224 (tmp.46 tmp.45 rsi rdx ra.492 rbp))
         (tmp.45 (tmp.46 rdx tmp.224 ra.492 rbp))
         (tmp.46 (tmp.224 tmp.45 ra.492 rbp))))
       (assignment ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((new-frames ())
       (locals (tmp.44 tmp.43 ra.493 tmp.219 tmp.494 tmp.216))
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.216 ra.493 rbp)
         (rdx tmp.216 tmp.43 ra.493 rbp)
         (tmp.216 tmp.44 tmp.43 ra.493 rbp)
         ((tmp.44 tmp.43 ra.493 rbp)
          ((tmp.494 tmp.44 tmp.43 ra.493 rbp)
           (tmp.219 tmp.44 tmp.43 ra.493 rbp)
           ((tmp.44 tmp.43 ra.493 rbp)
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.44 tmp.43 tmp.216 ra.493 tmp.219 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.44 tmp.43 tmp.216 rbp tmp.219 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.216 r15 rdi rsi tmp.43 ra.493 rbp))
         (tmp.43 (tmp.44 tmp.216 ra.493 rbp tmp.219 tmp.494 rdx))
         (rsi (tmp.216 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.43 tmp.44))
         (tmp.44 (tmp.216 tmp.43 ra.493 rbp tmp.219 tmp.494))
         (tmp.219 (tmp.44 tmp.43 ra.493 rbp))
         (tmp.216 (tmp.44 tmp.43 rsi rdx ra.493 rbp))))
       (assignment ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((new-frames ())
       (locals (tmp.44 tmp.43 tmp.496 tmp.218 ra.495))
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.218 ra.495 rbp)
         (rdx tmp.218 tmp.43 ra.495 rbp)
         (tmp.218 tmp.44 tmp.43 ra.495 rbp)
         ((tmp.44 tmp.43 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.44 tmp.43 tmp.218 ra.495 tmp.496 rax))
         (ra.495 (tmp.44 tmp.43 tmp.218 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.43 tmp.218 ra.495))
         (rsi (tmp.218 ra.495))
         (rdi (ra.495))
         (tmp.218 (tmp.44 tmp.43 rsi rdx ra.495 rbp))
         (tmp.43 (tmp.44 rdx tmp.218 ra.495 rbp))
         (tmp.44 (tmp.218 tmp.43 ra.495 rbp))))
       (assignment ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((new-frames ())
       (locals (tmp.42 tmp.41 ra.497 tmp.213 tmp.498 tmp.210))
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.210 ra.497 rbp)
         (rdx tmp.210 tmp.41 ra.497 rbp)
         (tmp.210 tmp.42 tmp.41 ra.497 rbp)
         ((tmp.42 tmp.41 ra.497 rbp)
          ((tmp.498 tmp.42 tmp.41 ra.497 rbp)
           (tmp.213 tmp.42 tmp.41 ra.497 rbp)
           ((tmp.42 tmp.41 ra.497 rbp)
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.42 tmp.41 tmp.210 ra.497 tmp.213 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.42 tmp.41 tmp.210 rbp tmp.213 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.210 r15 rdi rsi tmp.41 ra.497 rbp))
         (tmp.41 (tmp.42 tmp.210 ra.497 rbp tmp.213 tmp.498 rdx))
         (rsi (tmp.210 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.41 tmp.42))
         (tmp.42 (tmp.210 tmp.41 ra.497 rbp tmp.213 tmp.498))
         (tmp.213 (tmp.42 tmp.41 ra.497 rbp))
         (tmp.210 (tmp.42 tmp.41 rsi rdx ra.497 rbp))))
       (assignment ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((new-frames ())
       (locals (tmp.42 tmp.41 tmp.500 tmp.212 ra.499))
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.212 ra.499 rbp)
         (rdx tmp.212 tmp.41 ra.499 rbp)
         (tmp.212 tmp.42 tmp.41 ra.499 rbp)
         ((tmp.42 tmp.41 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.42 tmp.41 tmp.212 ra.499 tmp.500 rax))
         (ra.499 (tmp.42 tmp.41 tmp.212 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.41 tmp.212 ra.499))
         (rsi (tmp.212 ra.499))
         (rdi (ra.499))
         (tmp.212 (tmp.42 tmp.41 rsi rdx ra.499 rbp))
         (tmp.41 (tmp.42 rdx tmp.212 ra.499 rbp))
         (tmp.42 (tmp.212 tmp.41 ra.499 rbp))))
       (assignment ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((new-frames ())
       (locals (tmp.39 tmp.40 ra.501 tmp.207 tmp.502 tmp.203))
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.203 ra.501 rbp)
         (rdx tmp.203 tmp.39 ra.501 rbp)
         (tmp.203 tmp.39 tmp.40 ra.501 rbp)
         ((tmp.39 tmp.40 ra.501 rbp)
          ((tmp.502 tmp.39 tmp.40 ra.501 rbp)
           (tmp.207 tmp.39 tmp.40 ra.501 rbp)
           ((tmp.39 tmp.40 ra.501 rbp)
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.40 tmp.39 tmp.203 ra.501 tmp.207 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.40 tmp.39 tmp.203 rbp tmp.207 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.39 tmp.203 r15 rdi rsi tmp.40 ra.501 rbp))
         (tmp.40 (tmp.203 tmp.39 ra.501 rbp tmp.207 tmp.502 rdx))
         (rsi (tmp.203 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.40 tmp.39))
         (tmp.39 (tmp.40 rdx tmp.203 ra.501 rbp tmp.207 tmp.502))
         (tmp.207 (tmp.39 tmp.40 ra.501 rbp))
         (tmp.203 (tmp.40 tmp.39 rsi rdx ra.501 rbp))))
       (assignment ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((new-frames ())
       (locals (tmp.40 tmp.504 tmp.206 tmp.39 tmp.505 tmp.205 ra.503))
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.205 ra.503 rbp)
         (rdx tmp.205 tmp.40 ra.503 rbp)
         (tmp.205 tmp.40 tmp.39 ra.503 rbp)
         ((tmp.40 tmp.39 ra.503 rbp)
          ((tmp.504 tmp.39 ra.503 rbp)
           (tmp.206 tmp.39 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.39 tmp.40 tmp.205 ra.503 tmp.505 tmp.206 tmp.504 rax))
         (ra.503
          (tmp.39 tmp.40 tmp.205 rdi rsi rdx rbp tmp.505 tmp.206 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.39))
         (tmp.39 (tmp.205 tmp.40 ra.503 rbp tmp.206 tmp.504))
         (tmp.206 (tmp.39 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.40 tmp.205 ra.503))
         (rsi (tmp.205 ra.503))
         (rdi (ra.503))
         (tmp.205 (tmp.39 tmp.40 rsi rdx ra.503 rbp))
         (tmp.40 (tmp.39 rdx tmp.205 ra.503 rbp))))
       (assignment ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55)

  )
  (parameterize ([current-pass-list
                  (list
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((new-frames ())
       (locals
        (tmp.166
         H.6
         tmp.201
         tmp.389
         tmp.355
         G.5
         tmp.200
         tmp.388
         tmp.354
         F.4
         tmp.199
         tmp.387
         tmp.353
         *.77
         tmp.198
         tmp.386
         tmp.352
         |+.78|
         tmp.197
         tmp.385
         tmp.351
         |-.79|
         tmp.196
         tmp.384
         tmp.350
         <.80
         tmp.195
         tmp.383
         tmp.349
         <=.81
         tmp.194
         tmp.382
         tmp.348
         >.82
         tmp.193
         tmp.381
         tmp.347
         >=.83
         tmp.192
         tmp.380
         tmp.346
         make-vector.84
         tmp.191
         tmp.379
         tmp.345
         vector-length.85
         tmp.190
         tmp.378
         tmp.344
         vector-set!.86
         tmp.189
         tmp.377
         tmp.343
         vector-ref.87
         tmp.188
         tmp.376
         tmp.342
         car.88
         tmp.187
         tmp.375
         tmp.341
         cdr.89
         tmp.186
         tmp.374
         tmp.340
         procedure-arity.90
         tmp.185
         tmp.373
         tmp.339
         fixnum?.91
         tmp.184
         tmp.372
         tmp.338
         boolean?.92
         tmp.183
         tmp.371
         tmp.337
         empty?.93
         tmp.182
         tmp.370
         tmp.336
         void?.94
         tmp.181
         tmp.369
         tmp.335
         ascii-char?.95
         tmp.180
         tmp.368
         tmp.334
         error?.96
         tmp.179
         tmp.367
         tmp.333
         pair?.97
         tmp.178
         tmp.366
         tmp.332
         procedure?.98
         tmp.177
         tmp.365
         tmp.331
         vector?.99
         tmp.176
         tmp.364
         tmp.330
         not.100
         tmp.175
         tmp.363
         tmp.329
         cons.101
         tmp.174
         tmp.362
         tmp.328
         eq?.102
         tmp.173
         tmp.361
         tmp.327
         make-init-vector.1
         tmp.172
         tmp.360
         tmp.326
         vector-init-loop.105
         tmp.171
         tmp.359
         tmp.325
         unsafe-vector-set!.2
         tmp.170
         tmp.358
         tmp.324
         unsafe-vector-ref.3
         tmp.169
         tmp.357
         tmp.323
         ra.356))
       (undead-out
        ((r12 rbp ra.356)
         (r12 tmp.323 rbp ra.356)
         (tmp.323 r12 rbp ra.356)
         (tmp.357 r12 rbp ra.356)
         (r12 rbp ra.356 tmp.169)
         (ra.356 rbp r12 tmp.169)
         (tmp.169 r12 rbp ra.356)
         (r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.324 rbp ra.356 unsafe-vector-ref.3)
         (tmp.324 r12 rbp ra.356 unsafe-vector-ref.3)
         (tmp.358 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 rbp ra.356 unsafe-vector-ref.3 tmp.170)
         (unsafe-vector-ref.3 ra.356 rbp r12 tmp.170)
         (tmp.170 r12 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 tmp.325 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.325 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (tmp.359 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3 tmp.171)
         (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12 tmp.171)
         (tmp.171 r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.326
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.326
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.360
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.172)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          r12
          tmp.172)
         (tmp.172
          r12
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.327
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.327
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.361
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.173)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.173)
         (tmp.173
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.328
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.328
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.362
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.174)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.174)
         (tmp.174
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.329
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.329
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.363
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.175)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.175)
         (tmp.175
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.330
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.330
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.364
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.176)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.176)
         (tmp.176
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.331
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.331
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.365
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.177)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.177)
         (tmp.177
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.332
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.332
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.366
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.178)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.178)
         (tmp.178
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.333
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.333
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.367
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.179)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.179)
         (tmp.179
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.334
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.334
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.368
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.180)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.180)
         (tmp.180
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.335
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.335
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.369
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.181)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.181)
         (tmp.181
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.336
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.336
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.370
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.182)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.182)
         (tmp.182
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.337
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.337
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.371
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.183)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.183)
         (tmp.183
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.338
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.338
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.372
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.184)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.184)
         (tmp.184
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.339
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.339
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.373
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.185)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.185)
         (tmp.185
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.340
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.340
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.374
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.186)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.186)
         (tmp.186
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.341
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.341
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.375
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.187)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.187)
         (tmp.187
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          tmp.342
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.342
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (tmp.376
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105
          tmp.188)
         (vector-init-loop.105
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.188)
         (tmp.188
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.343
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.343
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.377
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.189)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          make-init-vector.1
          r12
          tmp.189)
         (tmp.189
          r12
          make-init-vector.1
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.344
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.344
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.378
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.190)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.190)
         (tmp.190
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.345
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.345
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.379
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.191)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.191)
         (tmp.191
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.346
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.346
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.380
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.192)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.192)
         (tmp.192
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.347
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.347
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.381
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.193)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.193)
         (tmp.193
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.348
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.348
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.382
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.194)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.194)
         (tmp.194
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.349
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.349
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.383
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.195)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.195)
         (tmp.195
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.350
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.350
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.384
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.196)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.196)
         (tmp.196
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.351
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.351
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.385
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.197)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          r12
          tmp.197)
         (tmp.197
          r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (r12
          tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.352
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (tmp.386
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105
          tmp.198)
         (vector-init-loop.105
          vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          make-init-vector.1
          tmp.198)
         (tmp.198
          make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (make-init-vector.1
          vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87
          vector-init-loop.105)
         (vector-ref.87
          unsafe-vector-ref.3
          make-vector.84
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86
          vector-init-loop.105
          make-init-vector.1)
         (vector-set!.86
          unsafe-vector-set!.2
          rbp
          ra.356
          |+.78|
          r12
          make-init-vector.1
          make-vector.84
          unsafe-vector-ref.3
          vector-ref.87)
         (make-vector.84
          make-init-vector.1
          r12
          |+.78|
          ra.356
          rbp
          unsafe-vector-set!.2
          vector-set!.86)
         (rbp ra.356 |+.78| r12 make-init-vector.1 make-vector.84)
         (r12 |+.78| ra.356 rbp)
         (r12 tmp.353 |+.78| ra.356 rbp)
         (tmp.353 r12 |+.78| ra.356 rbp)
         (tmp.387 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp tmp.199)
         (rbp ra.356 |+.78| r12 tmp.199)
         (tmp.199 r12 |+.78| ra.356 rbp)
         (r12 |+.78| ra.356 rbp F.4)
         (r12 tmp.354 |+.78| ra.356 rbp F.4)
         (tmp.354 r12 |+.78| ra.356 rbp F.4)
         (tmp.388 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp F.4 tmp.200)
         (F.4 rbp ra.356 |+.78| r12 tmp.200)
         (tmp.200 r12 |+.78| ra.356 rbp F.4)
         (r12 |+.78| ra.356 rbp G.5 F.4)
         (r12 tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.355 |+.78| ra.356 rbp G.5 F.4)
         (tmp.389 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp G.5 F.4 tmp.201)
         (F.4 G.5 rbp ra.356 |+.78| tmp.201)
         (tmp.201 |+.78| ra.356 rbp G.5 F.4)
         (|+.78| ra.356 rbp H.6 G.5 F.4)
         (G.5 H.6 rbp ra.356 |+.78| F.4)
         (|+.78| F.4 ra.356 rbp H.6 G.5)
         (rbp ra.356 F.4 |+.78| H.6)
         (F.4 ra.356 rbp)
         (F.4 ra.356 rbp)
         (F.4 ra.356 fv1 rbp)
         (F.4 ra.356 fv1 fv0 rbp)
         (F.4 ra.356 r9 fv1 fv0 rbp)
         (F.4 ra.356 r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp)
         (F.4 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (ra.356 rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv1 fv0 r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.356
          (rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           tmp.323
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           tmp.166
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           r12
           tmp.323
           ra.356))
         (r12
          (tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           unsafe-vector-ref.3
           tmp.169
           tmp.357
           rbp
           tmp.323
           ra.356))
         (tmp.323 (r12 rbp ra.356))
         (tmp.357 (ra.356 rbp r12))
         (tmp.169 (r12 rbp ra.356))
         (unsafe-vector-ref.3
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           unsafe-vector-set!.2
           tmp.170
           tmp.358
           tmp.324
           r12
           rbp
           ra.356))
         (tmp.324 (r12 rbp ra.356 unsafe-vector-ref.3))
         (tmp.358 (unsafe-vector-ref.3 ra.356 rbp r12))
         (tmp.170 (r12 rbp ra.356 unsafe-vector-ref.3))
         (unsafe-vector-set!.2
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           vector-init-loop.105
           tmp.171
           tmp.359
           tmp.325
           r12
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.325 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (tmp.359 (unsafe-vector-ref.3 ra.356 rbp unsafe-vector-set!.2 r12))
         (tmp.171 (r12 unsafe-vector-set!.2 rbp ra.356 unsafe-vector-ref.3))
         (vector-init-loop.105
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           make-init-vector.1
           tmp.172
           tmp.360
           tmp.326
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3))
         (tmp.326
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.360
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           r12))
         (tmp.172
          (r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (make-init-vector.1
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           vector-ref.87
           tmp.188
           tmp.376
           tmp.342
           car.88
           tmp.187
           tmp.375
           tmp.341
           cdr.89
           tmp.186
           tmp.374
           tmp.340
           procedure-arity.90
           tmp.185
           tmp.373
           tmp.339
           fixnum?.91
           tmp.184
           tmp.372
           tmp.338
           boolean?.92
           tmp.183
           tmp.371
           tmp.337
           empty?.93
           tmp.182
           tmp.370
           tmp.336
           void?.94
           tmp.181
           tmp.369
           tmp.335
           ascii-char?.95
           tmp.180
           tmp.368
           tmp.334
           error?.96
           tmp.179
           tmp.367
           tmp.333
           pair?.97
           tmp.178
           tmp.366
           tmp.332
           procedure?.98
           tmp.177
           tmp.365
           tmp.331
           vector?.99
           tmp.176
           tmp.364
           tmp.330
           not.100
           tmp.175
           tmp.363
           tmp.329
           cons.101
           tmp.174
           tmp.362
           tmp.328
           eq?.102
           tmp.173
           tmp.361
           tmp.327
           r12
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.327
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.361
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.173
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (eq?.102
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.328
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.362
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.174
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cons.101
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.329
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.363
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.175
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (not.100
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.330
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.364
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.176
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector?.99
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.331
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.365
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.177
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure?.98
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.332
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.366
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.178
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (pair?.97
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.333
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.367
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.179
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (error?.96
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.334
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.368
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.180
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (ascii-char?.95
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.335
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.369
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.181
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (void?.94
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.336
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.370
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.182
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (empty?.93
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.337
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.371
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.183
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (boolean?.92
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.338
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.372
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.184
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (fixnum?.91
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.339
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.373
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.185
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (procedure-arity.90
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.340
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.374
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.186
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (cdr.89
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.341
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.375
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.187
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (car.88
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.342
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.376
          (vector-init-loop.105
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.188
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (vector-ref.87
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           vector-set!.86
           tmp.189
           tmp.377
           tmp.343
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-init-loop.105))
         (tmp.343
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.377
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           make-init-vector.1
           r12))
         (tmp.189
          (r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-set!.86
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           make-vector.84
           tmp.191
           tmp.379
           tmp.345
           vector-length.85
           tmp.190
           tmp.378
           tmp.344
           r12
           make-init-vector.1
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.344
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.378
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.190
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (vector-length.85
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.345
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.379
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.191
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (make-vector.84
          (*.77
           tmp.198
           tmp.386
           tmp.352
           |+.78|
           tmp.197
           tmp.385
           tmp.351
           |-.79|
           tmp.196
           tmp.384
           tmp.350
           <.80
           tmp.195
           tmp.383
           tmp.349
           <=.81
           tmp.194
           tmp.382
           tmp.348
           >.82
           tmp.193
           tmp.381
           tmp.347
           >=.83
           tmp.192
           tmp.380
           tmp.346
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.346
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.380
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.192
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>=.83
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.347
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.381
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.193
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (>.82
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.348
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.382
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.194
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<=.81
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.349
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.383
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.195
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (<.80
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.350
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.384
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.196
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|-.79|
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.351
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.385
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1
           r12))
         (tmp.197
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (|+.78|
          (H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           F.4
           tmp.199
           tmp.387
           tmp.353
           *.77
           tmp.198
           tmp.386
           tmp.352
           r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.352
          (r12
           make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.386
          (vector-init-loop.105
           vector-ref.87
           unsafe-vector-ref.3
           make-vector.84
           r12
           |+.78|
           ra.356
           rbp
           unsafe-vector-set!.2
           vector-set!.86
           make-init-vector.1))
         (tmp.198
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (*.77
          (make-init-vector.1
           vector-set!.86
           unsafe-vector-set!.2
           rbp
           ra.356
           |+.78|
           r12
           make-vector.84
           unsafe-vector-ref.3
           vector-ref.87
           vector-init-loop.105))
         (tmp.353 (r12 |+.78| ra.356 rbp))
         (tmp.387 (rbp ra.356 |+.78| r12))
         (tmp.199 (r12 |+.78| ra.356 rbp))
         (F.4
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           tmp.201
           tmp.389
           tmp.355
           G.5
           tmp.200
           tmp.388
           tmp.354
           r12
           |+.78|
           ra.356
           rbp))
         (tmp.354 (r12 |+.78| ra.356 rbp F.4))
         (tmp.388 (F.4 rbp ra.356 |+.78| r12))
         (tmp.200 (r12 |+.78| ra.356 rbp F.4))
         (G.5 (H.6 tmp.201 tmp.389 tmp.355 r12 |+.78| ra.356 rbp F.4))
         (tmp.355 (r12 |+.78| ra.356 rbp G.5 F.4))
         (tmp.389 (F.4 G.5 rbp ra.356 |+.78|))
         (tmp.201 (|+.78| ra.356 rbp G.5 F.4))
         (H.6 (|+.78| ra.356 rbp G.5 F.4))
         (tmp.166 (ra.356 rbp))
         (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 F.4 ra.356 rbp))
         (fv0 (r15 rdi rsi rdx rcx r8 r9 F.4 ra.356 fv1 rbp))
         (r9 (r15 rdi rsi rdx rcx r8 F.4 ra.356 fv1 fv0 rbp))
         (r8 (r15 rdi rsi rdx rcx F.4 ra.356 r9 fv1 fv0 rbp))
         (rcx (r15 rdi rsi rdx F.4 ra.356 r8 r9 fv1 fv0 rbp))
         (rdx (r15 rdi rsi F.4 ra.356 rcx r8 r9 fv1 fv0 rbp))
         (rsi (r15 rdi F.4 ra.356 rdx rcx r8 r9 fv1 fv0 rbp))
         (rdi (r15 ra.356 rsi rdx rcx r8 r9 fv1 fv0 rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv1 fv0 rbp)))))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((new-frames ())
       (locals
        (tmp.165
         r7.38
         tmp.164
         r6.37
         tmp.163
         r5.36
         tmp.162
         r4.35
         tmp.161
         r3.34
         tmp.160
         r2.33
         tmp.159
         r1.32
         tmp.158
         |+.78|
         j.31
         h.30
         g.29
         f.28
         e.27
         d.26
         c.25
         b.24
         a.23
         c.149
         ra.390))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 ra.390 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 ra.390 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 ra.390 rbp)
         (rcx r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 ra.390 rbp)
         (r8 r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 ra.390 rbp)
         (r9 fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 ra.390 rbp)
         (fv0 fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 ra.390 rbp)
         (fv1 fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 ra.390 rbp)
         (fv2 fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 ra.390 rbp)
         (fv3 c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 ra.390 rbp)
         (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((a.23 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r1.32 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r2.33 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r3.34 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r3.34 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r4.35 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax g.29 h.30 j.31 |+.78| ra.390 rbp)
          ((r4.35 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         (r5.36 g.29 h.30 j.31 |+.78| ra.390 rbp)
         ((rax h.30 j.31 |+.78| ra.390 rbp)
          ((r5.36 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         (r6.37 h.30 j.31 |+.78| ra.390 rbp)
         ((rax j.31 |+.78| ra.390 rbp)
          ((r6.37 |+.78| rdx rbp)
           (|+.78| rsi rdx rbp)
           (rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))
         (j.31 r7.38 |+.78| ra.390 rbp)
         (j.31 r7.38 |+.78| ra.390 rbp)
         (r7.38 |+.78| ra.390 rdx rbp)
         (|+.78| ra.390 rsi rdx rbp)
         (ra.390 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390))
       (conflicts
        ((ra.390
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp))
         (rbp
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           r15
           rdi
           rsi
           rdx
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           c.149
           ra.390))
         (fv3 (h.30 g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv2 (g.29 f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv1 (f.28 e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (fv0 (e.27 d.26 c.25 b.24 a.23 c.149 ra.390))
         (r9 (d.26 c.25 b.24 a.23 c.149 ra.390))
         (r8 (c.25 b.24 a.23 c.149 ra.390))
         (rcx (b.24 a.23 c.149 ra.390))
         (rdx
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           r15
           rdi
           rsi
           |+.78|
           rbp
           a.23
           c.149
           ra.390))
         (rsi (r15 rdi |+.78| rdx rbp c.149 ra.390))
         (rdi (r15 rsi rdx rbp ra.390))
         (c.149
          (j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           ra.390
           rbp))
         (a.23
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           ra.390
           rbp))
         (b.24
          (tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           ra.390
           rbp))
         (c.25
          (tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           ra.390
           rbp))
         (d.26
          (tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           e.27
           r9
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           ra.390
           rbp))
         (e.27
          (tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           f.28
           fv0
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           ra.390
           rbp))
         (f.28
          (tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           g.29
           fv1
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           ra.390
           rbp))
         (g.29
          (tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           h.30
           fv2
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           ra.390
           rbp))
         (h.30
          (tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           j.31
           fv3
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           ra.390
           rbp))
         (j.31
          (tmp.165
           r7.38
           tmp.164
           r6.37
           tmp.163
           r5.36
           tmp.162
           r4.35
           tmp.161
           r3.34
           tmp.160
           r2.33
           tmp.159
           r1.32
           rax
           tmp.158
           |+.78|
           c.149
           a.23
           b.24
           c.25
           d.26
           e.27
           f.28
           g.29
           h.30
           ra.390
           rbp))
         (|+.78|
          (r7.38
           r6.37
           r5.36
           r4.35
           r3.34
           r2.33
           r1.32
           rsi
           rdx
           rax
           rbp
           ra.390
           j.31
           h.30
           g.29
           f.28
           e.27
           d.26
           c.25
           b.24
           a.23))
         (tmp.158 (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (rax (rbp ra.390 |+.78| j.31 h.30 g.29 f.28 e.27 d.26 c.25))
         (r15 (rdi rsi rdx rbp))
         (r1.32
          (rdx tmp.159 c.25 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.159 (r1.32 c.25 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r2.33 (rdx tmp.160 d.26 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.160 (r2.33 d.26 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r3.34 (rdx tmp.161 e.27 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.161 (r3.34 e.27 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r4.35 (rdx tmp.162 f.28 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.162 (r4.35 f.28 g.29 h.30 j.31 ra.390 rbp))
         (r5.36 (rdx tmp.163 g.29 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.163 (r5.36 g.29 h.30 j.31 ra.390 rbp))
         (r6.37 (rdx tmp.164 h.30 j.31 |+.78| ra.390 rbp))
         (tmp.164 (r6.37 h.30 j.31 ra.390 rbp))
         (r7.38 (rdx tmp.165 j.31 |+.78| ra.390 rbp))
         (tmp.165 (j.31 r7.38 ra.390 rbp)))))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((new-frames ())
       (locals
        (tmp.157 H.6 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 c.148 ra.391))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 ra.391 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 fv2 c.148 ra.391 rbp)
         (rdx rcx r8 r9 fv0 fv1 fv2 c.148 a.15 ra.391 rbp)
         (rcx r8 r9 fv0 fv1 fv2 c.148 b.16 a.15 ra.391 rbp)
         (r8 r9 fv0 fv1 fv2 c.148 c.17 b.16 a.15 ra.391 rbp)
         (r9 fv0 fv1 fv2 c.148 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv0 fv1 fv2 c.148 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv1 fv2 c.148 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (fv2 c.148 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (c.148 h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 rbp)
         (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 rbp)
         (g.21 f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 rbp)
         (f.20 e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 rbp)
         (e.19 d.18 c.17 b.16 a.15 H.6 ra.391 fv3 fv2 fv1 fv0 rbp)
         (d.18 c.17 b.16 a.15 H.6 ra.391 r9 fv3 fv2 fv1 fv0 rbp)
         (c.17 b.16 a.15 H.6 ra.391 r8 r9 fv3 fv2 fv1 fv0 rbp)
         (b.16 a.15 H.6 ra.391 rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (a.15 H.6 ra.391 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (H.6 ra.391 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (ra.391 rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)
         (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.391
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv2
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           H.6
           fv3
           rbp
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv1
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           H.6
           fv3
           fv2
           rbp
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (fv0
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           H.6
           fv3
           fv2
           fv1
           rbp
           e.19
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           H.6
           fv3
           fv2
           fv1
           fv0
           rbp
           d.18
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           H.6
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           c.17
           b.16
           a.15
           c.148
           ra.391))
         (rcx
          (r15
           rdi
           rsi
           rdx
           H.6
           r8
           r9
           fv3
           fv2
           fv1
           fv0
           rbp
           b.16
           a.15
           c.148
           ra.391))
         (rdx
          (r15 rdi rsi H.6 rcx r8 r9 fv3 fv2 fv1 fv0 rbp a.15 c.148 ra.391))
         (rsi (r15 rdi H.6 rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp c.148 ra.391))
         (rdi (r15 rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp ra.391))
         (c.148
          (h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           ra.391
           rbp))
         (a.15
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           ra.391
           rbp))
         (b.16
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           a.15
           ra.391
           rbp))
         (c.17
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           d.18
           r8
           r9
           fv0
           fv1
           fv2
           c.148
           b.16
           a.15
           ra.391
           rbp))
         (d.18
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           e.19
           r9
           fv0
           fv1
           fv2
           c.148
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (e.19
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           f.20
           fv0
           fv1
           fv2
           c.148
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (f.20
          (fv3
           tmp.157
           H.6
           h.22
           g.21
           fv1
           fv2
           c.148
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (g.21
          (fv3
           tmp.157
           H.6
           h.22
           fv2
           c.148
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (h.22
          (fv3
           tmp.157
           H.6
           c.148
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           ra.391
           rbp))
         (H.6
          (rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           fv3
           rbp
           ra.391
           a.15
           b.16
           c.17
           d.18
           e.19
           f.20
           g.21
           h.22))
         (tmp.157 (h.22 g.21 f.20 e.19 d.18 c.17 b.16 a.15 ra.391 rbp))
         (fv3
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           fv2
           h.22
           g.21
           f.20
           e.19
           d.18
           c.17
           b.16
           a.15
           H.6
           ra.391
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 fv3 fv2 fv1 fv0 rbp)))))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((new-frames ((nfv.393 nfv.394 nfv.395)))
       (locals
        (tmp.156
         r.14
         nfv.393
         nfv.394
         nfv.395
         tmp.155
         |+.78|
         G.5
         g.13
         f.12
         e.11
         d.10
         c.9
         b.8
         a.7
         c.147
         ra.392))
       (undead-out
        ((rdi rsi rdx rcx r8 r9 fv0 fv1 ra.392 rbp)
         (rsi rdx rcx r8 r9 fv0 fv1 c.147 ra.392 rbp)
         (rdx rcx r8 r9 fv0 fv1 c.147 a.7 ra.392 rbp)
         (rcx r8 r9 fv0 fv1 c.147 a.7 b.8 ra.392 rbp)
         (r8 r9 fv0 fv1 c.147 a.7 b.8 c.9 ra.392 rbp)
         (r9 fv0 fv1 c.147 a.7 b.8 c.9 d.10 ra.392 rbp)
         (fv0 fv1 c.147 a.7 b.8 c.9 d.10 e.11 ra.392 rbp)
         (fv1 c.147 a.7 b.8 c.9 d.10 e.11 f.12 ra.392 rbp)
         (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (c.147 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp)
         ((rax |+.78| ra.392 rbp)
          ((g.13 f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 rbp)
           (f.12 e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 rbp)
           (e.11 d.10 c.9 b.8 a.7 G.5 nfv.395 nfv.394 nfv.393 rbp)
           (d.10 c.9 b.8 a.7 G.5 r9 nfv.395 nfv.394 nfv.393 rbp)
           (c.9 b.8 a.7 G.5 r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (b.8 a.7 G.5 rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (a.7 G.5 rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (G.5 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)
           (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 r15 rbp)))
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rbp)
         (r.14 |+.78| ra.392 rdx rbp)
         (|+.78| ra.392 rsi rdx rbp)
         (ra.392 rdi rsi rdx rbp)
         (rdi rsi rdx r15 rbp)
         (rdi rsi rdx r15 rbp)))
       (call-undead (|+.78| ra.392))
       (conflicts
        ((ra.392
          (tmp.156
           r.14
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           rbp))
         (rbp
          (tmp.156
           r.14
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           rax
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (fv1 (f.12 e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (fv0 (e.11 d.10 c.9 b.8 a.7 c.147 ra.392))
         (r9
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           G.5
           nfv.395
           nfv.394
           nfv.393
           rbp
           d.10
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (r8
          (r15
           rdi
           rsi
           rdx
           rcx
           G.5
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.9
           b.8
           a.7
           c.147
           ra.392))
         (rcx
          (r15
           rdi
           rsi
           rdx
           G.5
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           b.8
           a.7
           c.147
           ra.392))
         (rdx
          (r.14
           |+.78|
           r15
           rdi
           rsi
           G.5
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           a.7
           c.147
           ra.392))
         (rsi
          (|+.78|
           r15
           rdi
           G.5
           rdx
           rcx
           r8
           r9
           nfv.395
           nfv.394
           nfv.393
           rbp
           c.147
           ra.392))
         (rdi (r15 rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp ra.392))
         (c.147
          (G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           rsi
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           ra.392
           rbp))
         (a.7
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           rdx
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           ra.392
           rbp))
         (b.8
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           c.9
           rcx
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           ra.392
           rbp))
         (c.9
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           d.10
           r8
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           ra.392
           rbp))
         (d.10
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           e.11
           r9
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           ra.392
           rbp))
         (e.11
          (nfv.393
           nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           f.12
           fv0
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           ra.392
           rbp))
         (f.12
          (nfv.394
           nfv.395
           tmp.155
           |+.78|
           G.5
           g.13
           fv1
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           ra.392
           rbp))
         (g.13
          (nfv.395
           tmp.155
           |+.78|
           G.5
           c.147
           a.7
           b.8
           c.9
           d.10
           e.11
           f.12
           ra.392
           rbp))
         (G.5
          (rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           nfv.395
           |+.78|
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           c.147))
         (|+.78|
          (rsi
           rdx
           r.14
           rax
           tmp.155
           rbp
           ra.392
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5))
         (tmp.155 (a.7 b.8 c.9 d.10 e.11 f.12 g.13 |+.78| ra.392 rbp))
         (rax (rbp ra.392 |+.78|))
         (nfv.395
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           nfv.394
           g.13
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           rbp))
         (nfv.394
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           nfv.393
           f.12
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           rbp))
         (nfv.393
          (r15
           rdi
           rsi
           rdx
           rcx
           r8
           r9
           e.11
           d.10
           c.9
           b.8
           a.7
           G.5
           nfv.395
           nfv.394
           rbp))
         (r15 (rdi rsi rdx rcx r8 r9 nfv.395 nfv.394 nfv.393 rbp))
         (r.14 (rdx tmp.156 |+.78| ra.392 rbp))
         (tmp.156 (r.14 ra.392 rbp)))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((new-frames ())
       (locals (tmp.397 c.146 tmp.208 ra.396 tmp.39 tmp.40))
       (undead-out
        ((rdi rsi rdx ra.396 rbp)
         (rsi rdx ra.396 rbp)
         (rdx tmp.39 ra.396 rbp)
         (tmp.40 tmp.39 ra.396 rbp)
         (tmp.397 tmp.40 tmp.39 ra.396 rbp)
         (tmp.208 tmp.40 tmp.39 ra.396 rbp)
         ((tmp.40 tmp.39 ra.396 rbp)
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.39 ra.396 rdx rbp)
           (ra.396 rsi rdx rbp)
           (ra.396 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.146 r15 rdi rsi tmp.39 ra.396 rbp))
         (rbp (tmp.208 tmp.397 tmp.40 tmp.39 c.146 ra.396 r15 rdi rsi rdx))
         (ra.396 (tmp.208 tmp.397 tmp.40 tmp.39 c.146 rbp rdi rsi rdx))
         (tmp.39 (tmp.208 tmp.397 tmp.40 ra.396 rbp rdx))
         (rsi (c.146 r15 rdi ra.396 rdx rbp))
         (rdi (r15 ra.396 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.146 (rsi rdx ra.396 rbp))
         (tmp.40 (tmp.208 tmp.397 tmp.39 ra.396 rbp))
         (tmp.397 (rbp ra.396 tmp.39 tmp.40))
         (tmp.208 (tmp.40 tmp.39 ra.396 rbp)))))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((new-frames ())
       (locals (tmp.399 c.145 tmp.214 ra.398 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.398 rbp)
         (rsi rdx ra.398 rbp)
         (rdx tmp.41 ra.398 rbp)
         (tmp.42 tmp.41 ra.398 rbp)
         (tmp.399 tmp.42 tmp.41 ra.398 rbp)
         (tmp.214 tmp.42 tmp.41 ra.398 rbp)
         ((tmp.42 tmp.41 ra.398 rbp)
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.41 ra.398 rdx rbp)
           (ra.398 rsi rdx rbp)
           (ra.398 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.145 r15 rdi rsi tmp.41 ra.398 rbp))
         (rbp (tmp.214 tmp.399 tmp.42 tmp.41 c.145 ra.398 r15 rdi rsi rdx))
         (ra.398 (tmp.214 tmp.399 tmp.42 tmp.41 c.145 rbp rdi rsi rdx))
         (tmp.41 (tmp.214 tmp.399 tmp.42 ra.398 rbp rdx))
         (rsi (c.145 r15 rdi ra.398 rdx rbp))
         (rdi (r15 ra.398 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.145 (rsi rdx ra.398 rbp))
         (tmp.42 (tmp.214 tmp.399 tmp.41 ra.398 rbp))
         (tmp.399 (rbp ra.398 tmp.41 tmp.42))
         (tmp.214 (tmp.42 tmp.41 ra.398 rbp)))))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((new-frames ())
       (locals (tmp.401 c.144 tmp.220 ra.400 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.400 rbp)
         (rsi rdx ra.400 rbp)
         (rdx tmp.43 ra.400 rbp)
         (tmp.44 tmp.43 ra.400 rbp)
         (tmp.401 tmp.44 tmp.43 ra.400 rbp)
         (tmp.220 tmp.44 tmp.43 ra.400 rbp)
         ((tmp.44 tmp.43 ra.400 rbp)
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.43 ra.400 rdx rbp)
           (ra.400 rsi rdx rbp)
           (ra.400 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.144 r15 rdi rsi tmp.43 ra.400 rbp))
         (rbp (tmp.220 tmp.401 tmp.44 tmp.43 c.144 ra.400 r15 rdi rsi rdx))
         (ra.400 (tmp.220 tmp.401 tmp.44 tmp.43 c.144 rbp rdi rsi rdx))
         (tmp.43 (tmp.220 tmp.401 tmp.44 ra.400 rbp rdx))
         (rsi (c.144 r15 rdi ra.400 rdx rbp))
         (rdi (r15 ra.400 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.144 (rsi rdx ra.400 rbp))
         (tmp.44 (tmp.220 tmp.401 tmp.43 ra.400 rbp))
         (tmp.401 (rbp ra.400 tmp.43 tmp.44))
         (tmp.220 (tmp.44 tmp.43 ra.400 rbp)))))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((new-frames ())
       (locals (tmp.403 c.143 tmp.227 ra.402 tmp.45 tmp.46))
       (undead-out
        ((rdi rsi rdx ra.402 rbp)
         (rsi rdx ra.402 rbp)
         (rdx tmp.45 ra.402 rbp)
         (tmp.46 tmp.45 ra.402 rbp)
         (tmp.403 tmp.46 tmp.45 ra.402 rbp)
         (tmp.227 tmp.46 tmp.45 ra.402 rbp)
         ((tmp.46 tmp.45 ra.402 rbp)
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.45 ra.402 rdx rbp)
           (ra.402 rsi rdx rbp)
           (ra.402 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.143 r15 rdi rsi tmp.45 ra.402 rbp))
         (rbp (tmp.227 tmp.403 tmp.46 tmp.45 c.143 ra.402 r15 rdi rsi rdx))
         (ra.402 (tmp.227 tmp.403 tmp.46 tmp.45 c.143 rbp rdi rsi rdx))
         (tmp.45 (tmp.227 tmp.403 tmp.46 ra.402 rbp rdx))
         (rsi (c.143 r15 rdi ra.402 rdx rbp))
         (rdi (r15 ra.402 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.143 (rsi rdx ra.402 rbp))
         (tmp.46 (tmp.227 tmp.403 tmp.45 ra.402 rbp))
         (tmp.403 (rbp ra.402 tmp.45 tmp.46))
         (tmp.227 (tmp.46 tmp.45 ra.402 rbp)))))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((new-frames ())
       (locals (tmp.405 c.142 tmp.234 ra.404 tmp.47 tmp.48))
       (undead-out
        ((rdi rsi rdx ra.404 rbp)
         (rsi rdx ra.404 rbp)
         (rdx tmp.47 ra.404 rbp)
         (tmp.48 tmp.47 ra.404 rbp)
         (tmp.405 tmp.48 tmp.47 ra.404 rbp)
         (tmp.234 tmp.48 tmp.47 ra.404 rbp)
         ((tmp.48 tmp.47 ra.404 rbp)
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.47 ra.404 rdx rbp)
           (ra.404 rsi rdx rbp)
           (ra.404 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.142 r15 rdi rsi tmp.47 ra.404 rbp))
         (rbp (tmp.234 tmp.405 tmp.48 tmp.47 c.142 ra.404 r15 rdi rsi rdx))
         (ra.404 (tmp.234 tmp.405 tmp.48 tmp.47 c.142 rbp rdi rsi rdx))
         (tmp.47 (tmp.234 tmp.405 tmp.48 ra.404 rbp rdx))
         (rsi (c.142 r15 rdi ra.404 rdx rbp))
         (rdi (r15 ra.404 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.142 (rsi rdx ra.404 rbp))
         (tmp.48 (tmp.234 tmp.405 tmp.47 ra.404 rbp))
         (tmp.405 (rbp ra.404 tmp.47 tmp.48))
         (tmp.234 (tmp.48 tmp.47 ra.404 rbp)))))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((new-frames ())
       (locals (tmp.407 c.141 tmp.241 ra.406 tmp.49 tmp.50))
       (undead-out
        ((rdi rsi rdx ra.406 rbp)
         (rsi rdx ra.406 rbp)
         (rdx tmp.49 ra.406 rbp)
         (tmp.50 tmp.49 ra.406 rbp)
         (tmp.407 tmp.50 tmp.49 ra.406 rbp)
         (tmp.241 tmp.50 tmp.49 ra.406 rbp)
         ((tmp.50 tmp.49 ra.406 rbp)
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.49 ra.406 rdx rbp)
           (ra.406 rsi rdx rbp)
           (ra.406 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.141 r15 rdi rsi tmp.49 ra.406 rbp))
         (rbp (tmp.241 tmp.407 tmp.50 tmp.49 c.141 ra.406 r15 rdi rsi rdx))
         (ra.406 (tmp.241 tmp.407 tmp.50 tmp.49 c.141 rbp rdi rsi rdx))
         (tmp.49 (tmp.241 tmp.407 tmp.50 ra.406 rbp rdx))
         (rsi (c.141 r15 rdi ra.406 rdx rbp))
         (rdi (r15 ra.406 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.141 (rsi rdx ra.406 rbp))
         (tmp.50 (tmp.241 tmp.407 tmp.49 ra.406 rbp))
         (tmp.407 (rbp ra.406 tmp.49 tmp.50))
         (tmp.241 (tmp.50 tmp.49 ra.406 rbp)))))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((new-frames ())
       (locals (tmp.409 c.140 tmp.248 ra.408 tmp.51 tmp.52))
       (undead-out
        ((rdi rsi rdx ra.408 rbp)
         (rsi rdx ra.408 rbp)
         (rdx tmp.51 ra.408 rbp)
         (tmp.52 tmp.51 ra.408 rbp)
         (tmp.409 tmp.52 tmp.51 ra.408 rbp)
         (tmp.248 tmp.52 tmp.51 ra.408 rbp)
         ((tmp.52 tmp.51 ra.408 rbp)
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.51 ra.408 rdx rbp)
           (ra.408 rsi rdx rbp)
           (ra.408 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (c.140 r15 rdi rsi tmp.51 ra.408 rbp))
         (rbp (tmp.248 tmp.409 tmp.52 tmp.51 c.140 ra.408 r15 rdi rsi rdx))
         (ra.408 (tmp.248 tmp.409 tmp.52 tmp.51 c.140 rbp rdi rsi rdx))
         (tmp.51 (tmp.248 tmp.409 tmp.52 ra.408 rbp rdx))
         (rsi (c.140 r15 rdi ra.408 rdx rbp))
         (rdi (r15 ra.408 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.140 (rsi rdx ra.408 rbp))
         (tmp.52 (tmp.248 tmp.409 tmp.51 ra.408 rbp))
         (tmp.409 (rbp ra.408 tmp.51 tmp.52))
         (tmp.248 (tmp.52 tmp.51 ra.408 rbp)))))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((new-frames ())
       (locals (tmp.411 c.139 tmp.251 ra.410 make-init-vector.1 tmp.53))
       (undead-out
        ((rdi rsi ra.410 rbp)
         (rsi c.139 ra.410 rbp)
         (c.139 tmp.53 ra.410 rbp)
         (tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.411 tmp.53 make-init-vector.1 ra.410 rbp)
         (tmp.251 tmp.53 make-init-vector.1 ra.410 rbp)
         ((tmp.53 make-init-vector.1 ra.410 rbp)
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((make-init-vector.1 ra.410 rdx rbp)
           (ra.410 rsi rdx rbp)
           (ra.410 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (r15 rdi rsi make-init-vector.1 ra.410 rbp))
         (rbp
          (tmp.251
           tmp.411
           make-init-vector.1
           tmp.53
           c.139
           ra.410
           r15
           rdi
           rsi
           rdx))
         (ra.410
          (tmp.251 tmp.411 make-init-vector.1 tmp.53 c.139 rbp rdi rsi rdx))
         (make-init-vector.1 (tmp.251 tmp.411 rbp ra.410 tmp.53 rdx))
         (rsi (c.139 r15 rdi ra.410 rdx rbp))
         (rdi (r15 ra.410 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.139 (tmp.53 rsi ra.410 rbp))
         (tmp.53 (tmp.251 tmp.411 make-init-vector.1 c.139 ra.410 rbp))
         (tmp.411 (rbp ra.410 make-init-vector.1 tmp.53))
         (tmp.251 (tmp.53 make-init-vector.1 ra.410 rbp)))))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((new-frames ())
       (locals (tmp.413 c.138 tmp.254 ra.412 tmp.54))
       (undead-out
        ((rdi rsi ra.412 rbp)
         (rsi ra.412 rbp)
         (tmp.54 ra.412 rbp)
         (tmp.413 tmp.54 ra.412 rbp)
         (tmp.254 tmp.54 ra.412 rbp)
         ((tmp.54 ra.412 rbp)
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.412 rsi rbp)
           (ra.412 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.138 r15 rdi ra.412 rbp))
         (rbp (tmp.254 tmp.413 tmp.54 c.138 ra.412 r15 rdi rsi))
         (ra.412 (tmp.254 tmp.413 tmp.54 c.138 rbp rdi rsi))
         (rdi (r15 ra.412 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.138 (rsi ra.412 rbp))
         (tmp.54 (tmp.254 tmp.413 ra.412 rbp))
         (tmp.413 (rbp ra.412 tmp.54))
         (tmp.254 (tmp.54 ra.412 rbp)))))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((new-frames ())
       (locals
        (tmp.415
         c.137
         tmp.260
         ra.414
         tmp.55
         unsafe-vector-set!.2
         tmp.57
         tmp.56))
       (undead-out
        ((rdi rsi rdx rcx ra.414 rbp)
         (rsi rdx rcx c.137 ra.414 rbp)
         (rdx rcx c.137 tmp.55 ra.414 rbp)
         (rcx c.137 tmp.56 tmp.55 ra.414 rbp)
         (c.137 tmp.56 tmp.57 tmp.55 ra.414 rbp)
         (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.415 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         (tmp.260 tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
         ((tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 r8 rbp)
           (unsafe-vector-set!.2 tmp.55 ra.414 rcx r8 rbp)
           (tmp.55 ra.414 rdx rcx r8 rbp)
           (ra.414 rsi rdx rcx r8 rbp)
           (ra.414 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp))
         (rbp
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           ra.414
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.414
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           tmp.55
           c.137
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (tmp.55
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           tmp.56
           c.137
           ra.414
           rbp
           rdx
           rcx
           r8))
         (unsafe-vector-set!.2
          (tmp.260 tmp.415 rbp ra.414 tmp.55 tmp.57 tmp.56 rcx r8))
         (tmp.57
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           c.137
           tmp.56
           tmp.55
           ra.414
           rbp
           r8))
         (rcx
          (tmp.56
           c.137
           r15
           rdi
           rsi
           rdx
           unsafe-vector-set!.2
           tmp.55
           ra.414
           r8
           rbp))
         (rdx (c.137 r15 rdi rsi tmp.55 ra.414 rcx r8 rbp))
         (rsi (c.137 r15 rdi ra.414 rdx rcx r8 rbp))
         (rdi (r15 ra.414 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.137 (tmp.57 tmp.56 tmp.55 rsi rdx rcx ra.414 rbp))
         (tmp.56
          (tmp.260
           tmp.415
           unsafe-vector-set!.2
           tmp.57
           rcx
           c.137
           tmp.55
           ra.414
           rbp))
         (tmp.415 (rbp ra.414 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56))
         (tmp.260 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.55 ra.414 rbp)))))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((new-frames ())
       (locals
        (tmp.417 c.136 tmp.266 ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
       (undead-out
        ((rdi rsi rdx ra.416 rbp)
         (rsi rdx c.136 ra.416 rbp)
         (rdx c.136 tmp.58 ra.416 rbp)
         (c.136 tmp.59 tmp.58 ra.416 rbp)
         (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.417 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         (tmp.266 tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
         ((tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((unsafe-vector-ref.3 tmp.58 ra.416 rcx rbp)
           (tmp.58 ra.416 rdx rcx rbp)
           (ra.416 rsi rdx rcx rbp)
           (ra.416 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (r15 rdi rsi rdx unsafe-vector-ref.3 tmp.58 ra.416 rbp))
         (rbp
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           ra.416
           r15
           rdi
           rsi
           rdx
           rcx))
         (ra.416
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           tmp.58
           c.136
           rbp
           rdi
           rsi
           rdx
           rcx))
         (tmp.58
          (tmp.266
           tmp.417
           unsafe-vector-ref.3
           tmp.59
           c.136
           ra.416
           rbp
           rdx
           rcx))
         (unsafe-vector-ref.3 (tmp.266 tmp.417 rbp ra.416 tmp.58 tmp.59 rcx))
         (rdx (c.136 r15 rdi rsi tmp.58 ra.416 rcx rbp))
         (rsi (c.136 r15 rdi ra.416 rdx rcx rbp))
         (rdi (r15 ra.416 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.136 (tmp.59 tmp.58 rsi rdx ra.416 rbp))
         (tmp.59 (tmp.266 tmp.417 unsafe-vector-ref.3 c.136 tmp.58 ra.416 rbp))
         (tmp.417 (rbp ra.416 tmp.58 unsafe-vector-ref.3 tmp.59))
         (tmp.266 (tmp.59 unsafe-vector-ref.3 tmp.58 ra.416 rbp)))))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((new-frames ())
       (locals (tmp.419 c.135 tmp.269 ra.418 tmp.60))
       (undead-out
        ((rdi rsi ra.418 rbp)
         (rsi ra.418 rbp)
         (tmp.60 ra.418 rbp)
         (tmp.419 tmp.60 ra.418 rbp)
         (tmp.269 tmp.60 ra.418 rbp)
         ((tmp.60 ra.418 rbp)
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.418 rsi rbp)
           (ra.418 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.135 r15 rdi ra.418 rbp))
         (rbp (tmp.269 tmp.419 tmp.60 c.135 ra.418 r15 rdi rsi))
         (ra.418 (tmp.269 tmp.419 tmp.60 c.135 rbp rdi rsi))
         (rdi (r15 ra.418 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.135 (rsi ra.418 rbp))
         (tmp.60 (tmp.269 tmp.419 ra.418 rbp))
         (tmp.419 (rbp ra.418 tmp.60))
         (tmp.269 (tmp.60 ra.418 rbp)))))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((new-frames ())
       (locals (tmp.421 c.134 tmp.272 ra.420 tmp.61))
       (undead-out
        ((rdi rsi ra.420 rbp)
         (rsi ra.420 rbp)
         (tmp.61 ra.420 rbp)
         (tmp.421 tmp.61 ra.420 rbp)
         (tmp.272 tmp.61 ra.420 rbp)
         ((tmp.61 ra.420 rbp)
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.420 rsi rbp)
           (ra.420 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.134 r15 rdi ra.420 rbp))
         (rbp (tmp.272 tmp.421 tmp.61 c.134 ra.420 r15 rdi rsi))
         (ra.420 (tmp.272 tmp.421 tmp.61 c.134 rbp rdi rsi))
         (rdi (r15 ra.420 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.134 (rsi ra.420 rbp))
         (tmp.61 (tmp.272 tmp.421 ra.420 rbp))
         (tmp.421 (rbp ra.420 tmp.61))
         (tmp.272 (tmp.61 ra.420 rbp)))))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((new-frames ())
       (locals (tmp.423 c.133 tmp.275 ra.422 tmp.62))
       (undead-out
        ((rdi rsi ra.422 rbp)
         (rsi ra.422 rbp)
         (tmp.62 ra.422 rbp)
         (tmp.423 tmp.62 ra.422 rbp)
         (tmp.275 tmp.62 ra.422 rbp)
         ((tmp.62 ra.422 rbp)
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.422 rsi rbp)
           (ra.422 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rsi (c.133 r15 rdi ra.422 rbp))
         (rbp (tmp.275 tmp.423 tmp.62 c.133 ra.422 r15 rdi rsi))
         (ra.422 (tmp.275 tmp.423 tmp.62 c.133 rbp rdi rsi))
         (rdi (r15 ra.422 rsi rbp))
         (r15 (rdi rsi rbp))
         (c.133 (rsi ra.422 rbp))
         (tmp.62 (tmp.275 tmp.423 ra.422 rbp))
         (tmp.423 (rbp ra.422 tmp.62))
         (tmp.275 (tmp.62 ra.422 rbp)))))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((new-frames ())
       (locals (tmp.425 tmp.63 c.132 ra.424 tmp.277))
       (undead-out
        ((rdi rsi ra.424 rbp)
         (rsi ra.424 rbp)
         (tmp.63 ra.424 rbp)
         (tmp.425 ra.424 rbp)
         (tmp.277 ra.424 rbp)
         ((ra.424 rbp)
          ((ra.424 rax rbp) (rax rbp))
          ((ra.424 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.424 rbp))
         (rbp (tmp.277 tmp.425 tmp.63 c.132 ra.424 rax))
         (ra.424 (tmp.277 tmp.425 tmp.63 c.132 rdi rsi rbp rax))
         (rsi (c.132 ra.424))
         (rdi (ra.424))
         (c.132 (rsi ra.424 rbp))
         (tmp.63 (ra.424 rbp))
         (tmp.425 (rbp ra.424))
         (tmp.277 (ra.424 rbp)))))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((new-frames ())
       (locals (tmp.427 tmp.64 c.131 ra.426 tmp.279))
       (undead-out
        ((rdi rsi ra.426 rbp)
         (rsi ra.426 rbp)
         (tmp.64 ra.426 rbp)
         (tmp.427 ra.426 rbp)
         (tmp.279 ra.426 rbp)
         ((ra.426 rbp)
          ((ra.426 rax rbp) (rax rbp))
          ((ra.426 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.426 rbp))
         (rbp (tmp.279 tmp.427 tmp.64 c.131 ra.426 rax))
         (ra.426 (tmp.279 tmp.427 tmp.64 c.131 rdi rsi rbp rax))
         (rsi (c.131 ra.426))
         (rdi (ra.426))
         (c.131 (rsi ra.426 rbp))
         (tmp.64 (ra.426 rbp))
         (tmp.427 (rbp ra.426))
         (tmp.279 (ra.426 rbp)))))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((new-frames ())
       (locals (tmp.429 tmp.65 c.130 ra.428 tmp.281))
       (undead-out
        ((rdi rsi ra.428 rbp)
         (rsi ra.428 rbp)
         (tmp.65 ra.428 rbp)
         (tmp.429 ra.428 rbp)
         (tmp.281 ra.428 rbp)
         ((ra.428 rbp)
          ((ra.428 rax rbp) (rax rbp))
          ((ra.428 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.428 rbp))
         (rbp (tmp.281 tmp.429 tmp.65 c.130 ra.428 rax))
         (ra.428 (tmp.281 tmp.429 tmp.65 c.130 rdi rsi rbp rax))
         (rsi (c.130 ra.428))
         (rdi (ra.428))
         (c.130 (rsi ra.428 rbp))
         (tmp.65 (ra.428 rbp))
         (tmp.429 (rbp ra.428))
         (tmp.281 (ra.428 rbp)))))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((new-frames ())
       (locals (tmp.431 tmp.66 c.129 ra.430 tmp.283))
       (undead-out
        ((rdi rsi ra.430 rbp)
         (rsi ra.430 rbp)
         (tmp.66 ra.430 rbp)
         (tmp.431 ra.430 rbp)
         (tmp.283 ra.430 rbp)
         ((ra.430 rbp)
          ((ra.430 rax rbp) (rax rbp))
          ((ra.430 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.430 rbp))
         (rbp (tmp.283 tmp.431 tmp.66 c.129 ra.430 rax))
         (ra.430 (tmp.283 tmp.431 tmp.66 c.129 rdi rsi rbp rax))
         (rsi (c.129 ra.430))
         (rdi (ra.430))
         (c.129 (rsi ra.430 rbp))
         (tmp.66 (ra.430 rbp))
         (tmp.431 (rbp ra.430))
         (tmp.283 (ra.430 rbp)))))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((new-frames ())
       (locals (tmp.433 tmp.67 c.128 ra.432 tmp.285))
       (undead-out
        ((rdi rsi ra.432 rbp)
         (rsi ra.432 rbp)
         (tmp.67 ra.432 rbp)
         (tmp.433 ra.432 rbp)
         (tmp.285 ra.432 rbp)
         ((ra.432 rbp)
          ((ra.432 rax rbp) (rax rbp))
          ((ra.432 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.432 rbp))
         (rbp (tmp.285 tmp.433 tmp.67 c.128 ra.432 rax))
         (ra.432 (tmp.285 tmp.433 tmp.67 c.128 rdi rsi rbp rax))
         (rsi (c.128 ra.432))
         (rdi (ra.432))
         (c.128 (rsi ra.432 rbp))
         (tmp.67 (ra.432 rbp))
         (tmp.433 (rbp ra.432))
         (tmp.285 (ra.432 rbp)))))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((new-frames ())
       (locals (tmp.435 tmp.68 c.127 ra.434 tmp.287))
       (undead-out
        ((rdi rsi ra.434 rbp)
         (rsi ra.434 rbp)
         (tmp.68 ra.434 rbp)
         (tmp.435 ra.434 rbp)
         (tmp.287 ra.434 rbp)
         ((ra.434 rbp)
          ((ra.434 rax rbp) (rax rbp))
          ((ra.434 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.434 rbp))
         (rbp (tmp.287 tmp.435 tmp.68 c.127 ra.434 rax))
         (ra.434 (tmp.287 tmp.435 tmp.68 c.127 rdi rsi rbp rax))
         (rsi (c.127 ra.434))
         (rdi (ra.434))
         (c.127 (rsi ra.434 rbp))
         (tmp.68 (ra.434 rbp))
         (tmp.435 (rbp ra.434))
         (tmp.287 (ra.434 rbp)))))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((new-frames ())
       (locals (tmp.437 tmp.69 c.126 ra.436 tmp.289))
       (undead-out
        ((rdi rsi ra.436 rbp)
         (rsi ra.436 rbp)
         (tmp.69 ra.436 rbp)
         (tmp.437 ra.436 rbp)
         (tmp.289 ra.436 rbp)
         ((ra.436 rbp)
          ((ra.436 rax rbp) (rax rbp))
          ((ra.436 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.436 rbp))
         (rbp (tmp.289 tmp.437 tmp.69 c.126 ra.436 rax))
         (ra.436 (tmp.289 tmp.437 tmp.69 c.126 rdi rsi rbp rax))
         (rsi (c.126 ra.436))
         (rdi (ra.436))
         (c.126 (rsi ra.436 rbp))
         (tmp.69 (ra.436 rbp))
         (tmp.437 (rbp ra.436))
         (tmp.289 (ra.436 rbp)))))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((new-frames ())
       (locals (tmp.439 tmp.70 c.125 ra.438 tmp.291))
       (undead-out
        ((rdi rsi ra.438 rbp)
         (rsi ra.438 rbp)
         (tmp.70 ra.438 rbp)
         (tmp.439 ra.438 rbp)
         (tmp.291 ra.438 rbp)
         ((ra.438 rbp)
          ((ra.438 rax rbp) (rax rbp))
          ((ra.438 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.438 rbp))
         (rbp (tmp.291 tmp.439 tmp.70 c.125 ra.438 rax))
         (ra.438 (tmp.291 tmp.439 tmp.70 c.125 rdi rsi rbp rax))
         (rsi (c.125 ra.438))
         (rdi (ra.438))
         (c.125 (rsi ra.438 rbp))
         (tmp.70 (ra.438 rbp))
         (tmp.439 (rbp ra.438))
         (tmp.291 (ra.438 rbp)))))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((new-frames ())
       (locals (tmp.441 tmp.71 c.124 ra.440 tmp.293))
       (undead-out
        ((rdi rsi ra.440 rbp)
         (rsi ra.440 rbp)
         (tmp.71 ra.440 rbp)
         (tmp.441 ra.440 rbp)
         (tmp.293 ra.440 rbp)
         ((ra.440 rbp)
          ((ra.440 rax rbp) (rax rbp))
          ((ra.440 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.440 rbp))
         (rbp (tmp.293 tmp.441 tmp.71 c.124 ra.440 rax))
         (ra.440 (tmp.293 tmp.441 tmp.71 c.124 rdi rsi rbp rax))
         (rsi (c.124 ra.440))
         (rdi (ra.440))
         (c.124 (rsi ra.440 rbp))
         (tmp.71 (ra.440 rbp))
         (tmp.441 (rbp ra.440))
         (tmp.293 (ra.440 rbp)))))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((new-frames ())
       (locals (c.123 ra.442 tmp.72))
       (undead-out
        ((rdi rsi ra.442 rbp)
         (rsi ra.442 rbp)
         (tmp.72 ra.442 rbp)
         ((ra.442 rbp)
          ((ra.442 rax rbp) (rax rbp))
          ((ra.442 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.442 rbp))
         (rbp (tmp.72 c.123 ra.442 rax))
         (ra.442 (tmp.72 c.123 rdi rsi rbp rax))
         (rsi (c.123 ra.442))
         (rdi (ra.442))
         (c.123 (rsi ra.442 rbp))
         (tmp.72 (ra.442 rbp)))))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((new-frames ())
       (locals (tmp.167 tmp.444 tmp.295 tmp.74 tmp.73 c.122 ra.443))
       (undead-out
        ((rdi rsi rdx r12 ra.443 rbp)
         (rsi rdx r12 ra.443 rbp)
         (rdx r12 ra.443 rbp tmp.73)
         (r12 tmp.74 ra.443 rbp tmp.73)
         (r12 tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.295 tmp.74 ra.443 rbp tmp.73)
         (tmp.444 tmp.74 ra.443 rbp tmp.73)
         (tmp.74 ra.443 rbp tmp.73 tmp.167)
         (rbp ra.443 tmp.74 tmp.167)
         (tmp.167 ra.443 rbp)
         (ra.443 rax rbp)
         (rax rbp)))
       (call-undead ())
       (conflicts
        ((ra.443
          (rax
           tmp.167
           tmp.444
           tmp.295
           tmp.74
           tmp.73
           c.122
           rdi
           rsi
           rdx
           r12
           rbp))
         (rbp (rax tmp.167 tmp.444 r12 tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (r12 (rbp tmp.295 tmp.74 tmp.73 c.122 ra.443))
         (rdx (tmp.73 c.122 ra.443))
         (rsi (c.122 ra.443))
         (rdi (ra.443))
         (c.122 (rsi rdx r12 ra.443 rbp))
         (tmp.73 (tmp.167 tmp.444 tmp.295 tmp.74 rdx r12 ra.443 rbp))
         (tmp.74 (tmp.167 tmp.444 tmp.295 r12 ra.443 rbp tmp.73))
         (tmp.295 (r12 tmp.74 ra.443 rbp tmp.73))
         (tmp.444 (tmp.73 rbp ra.443 tmp.74))
         (tmp.167 (tmp.74 ra.443 rbp tmp.73))
         (rax (ra.443 rbp)))))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((new-frames ())
       (locals (c.121 ra.445 tmp.76 tmp.75))
       (undead-out
        ((rdi rsi rdx ra.445 rbp)
         (rsi rdx ra.445 rbp)
         (rdx tmp.75 ra.445 rbp)
         (tmp.75 tmp.76 ra.445 rbp)
         ((ra.445 rbp)
          ((ra.445 rax rbp) (rax rbp))
          ((ra.445 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.445 rbp))
         (rbp (tmp.76 tmp.75 c.121 ra.445 rax))
         (ra.445 (tmp.76 tmp.75 c.121 rdi rsi rdx rbp rax))
         (rdx (tmp.75 c.121 ra.445))
         (rsi (c.121 ra.445))
         (rdi (ra.445))
         (c.121 (rsi rdx ra.445 rbp))
         (tmp.75 (tmp.76 rdx ra.445 rbp))
         (tmp.76 (tmp.75 ra.445 rbp)))))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ())
       (locals
        (tmp.151
         tmp.104
         tmp.168
         tmp.451
         tmp.300
         tmp.540
         tmp.299
         tmp.450
         tmp.298
         tmp.449
         tmp.448
         tmp.297
         tmp.447
         vector-init-loop.105
         tmp.103
         c.120
         ra.446))
       (undead-out
        ((rdi rsi r12 rbp ra.446)
         (rsi c.120 r12 rbp ra.446)
         (c.120 r12 rbp ra.446 tmp.103)
         (r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.447 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.297 tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.449 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.298 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.450 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.299 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.540 r12 tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.300 rbp ra.446 vector-init-loop.105 tmp.103)
         (tmp.451 rbp ra.446 vector-init-loop.105 tmp.103)
         (rbp ra.446 vector-init-loop.105 tmp.103 tmp.168)
         (tmp.168 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.104 tmp.103 vector-init-loop.105 ra.446 rbp)
         (tmp.103 vector-init-loop.105 ra.446 rcx rbp)
         (tmp.103 vector-init-loop.105 ra.446 rdx rcx rbp)
         (vector-init-loop.105 ra.446 rsi rdx rcx rbp)
         (ra.446 rdi rsi rdx rcx rbp)
         (rdi rsi rdx rcx r15 rbp)
         (rdi rsi rdx rcx r15 rbp)))
       (call-undead ())
       (conflicts
        ((ra.446
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           rdi
           rsi
           r12
           rbp))
         (rbp
          (r15
           rdi
           rsi
           rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           r12
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (r12
          (rbp
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           tmp.103
           c.120
           ra.446))
         (rsi (r15 rdi vector-init-loop.105 rdx rcx rbp c.120 ra.446))
         (rdi (r15 rsi rdx rcx rbp ra.446))
         (c.120 (tmp.103 rsi r12 rbp ra.446))
         (tmp.103
          (rdx
           rcx
           tmp.151
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           vector-init-loop.105
           c.120
           r12
           rbp
           ra.446))
         (vector-init-loop.105
          (rsi
           rdx
           rcx
           tmp.104
           tmp.168
           tmp.451
           tmp.300
           tmp.540
           tmp.299
           tmp.450
           tmp.298
           tmp.449
           tmp.448
           tmp.297
           tmp.447
           tmp.103
           ra.446
           rbp
           r12))
         (tmp.447 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.297 (tmp.448 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.448 (tmp.297 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.449 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.298 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.450 (tmp.103 vector-init-loop.105 ra.446 rbp r12))
         (tmp.299 (r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.540 (tmp.300 r12 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.300 (r12 tmp.540 rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.451 (tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.168 (rbp ra.446 vector-init-loop.105 tmp.103))
         (tmp.104 (tmp.151 tmp.103 vector-init-loop.105 ra.446 rbp))
         (tmp.151 (tmp.104 tmp.103 ra.446 rbp))
         (rcx (r15 rdi rsi rdx tmp.103 vector-init-loop.105 ra.446 rbp))
         (rdx (r15 rdi rsi tmp.103 vector-init-loop.105 ra.446 rcx rbp))
         (r15 (rdi rsi rdx rcx rbp)))))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((new-frames ())
       (locals (c.119 ra.452 i.108 len.106 vector-init-loop.105 vec.107))
       (undead-out
        ((rdi rsi rdx rcx ra.452 rbp)
         (rsi rdx rcx c.119 ra.452 rbp)
         (rdx rcx c.119 len.106 ra.452 rbp)
         (rcx c.119 len.106 i.108 ra.452 rbp)
         (c.119 vec.107 len.106 i.108 ra.452 rbp)
         (vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
         ((vec.107 vector-init-loop.105 len.106 i.108 ra.452 rbp)
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp))
          ((vector-init-loop.105 len.106 i.108 ra.452 r8 rbp)
           (len.106 i.108 ra.452 rcx r8 rbp)
           (i.108 ra.452 rdx rcx r8 rbp)
           (ra.452 rsi rdx rcx r8 rbp)
           (ra.452 rdi rsi rdx rcx r8 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)
           (rdi rsi rdx rcx r8 r15 rbp)))))
       (call-undead ())
       (conflicts
        ((r8
          (r15 rdi rsi rdx rcx vector-init-loop.105 len.106 i.108 ra.452 rbp))
         (rbp
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           ra.452
           r15
           rdi
           rsi
           rdx
           rcx
           r8))
         (ra.452
          (vector-init-loop.105
           vec.107
           i.108
           len.106
           c.119
           rbp
           rdi
           rsi
           rdx
           rcx
           r8))
         (i.108
          (vector-init-loop.105 vec.107 c.119 len.106 ra.452 rbp rdx rcx r8))
         (len.106
          (vector-init-loop.105 vec.107 i.108 rdx c.119 ra.452 rbp rcx r8))
         (vector-init-loop.105 (rbp ra.452 i.108 len.106 vec.107 r8))
         (rcx (c.119 r15 rdi rsi rdx len.106 i.108 ra.452 r8 rbp))
         (rdx (len.106 c.119 r15 rdi rsi i.108 ra.452 rcx r8 rbp))
         (rsi (c.119 r15 rdi ra.452 rdx rcx r8 rbp))
         (rdi (r15 ra.452 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (c.119 (vec.107 i.108 len.106 rsi rdx rcx ra.452 rbp))
         (vec.107 (vector-init-loop.105 c.119 len.106 i.108 ra.452 rbp)))))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ())
       (locals (c.118 tmp.314 ra.453 tmp.115 tmp.116 tmp.114))
       (undead-out
        ((rdi rsi rdx rcx ra.453 rbp)
         (rsi rdx rcx ra.453 rbp)
         (rdx rcx tmp.114 ra.453 rbp)
         (rcx tmp.114 tmp.115 ra.453 rbp)
         (tmp.114 tmp.116 tmp.115 ra.453 rbp)
         (tmp.314 tmp.114 tmp.116 tmp.115 ra.453 rbp)
         ((tmp.114 tmp.116 tmp.115 ra.453 rbp)
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((tmp.116 tmp.115 ra.453 rcx rbp)
           (tmp.115 ra.453 rdx rcx rbp)
           (ra.453 rsi rdx rcx rbp)
           (ra.453 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rcx (tmp.114 c.118 r15 rdi rsi rdx tmp.116 tmp.115 ra.453 rbp))
         (rbp
          (tmp.314 tmp.116 tmp.115 tmp.114 c.118 ra.453 r15 rdi rsi rdx rcx))
         (ra.453 (tmp.314 tmp.116 tmp.115 tmp.114 c.118 rbp rdi rsi rdx rcx))
         (tmp.115 (tmp.314 tmp.116 tmp.114 ra.453 rbp rdx rcx))
         (tmp.116 (tmp.314 tmp.114 tmp.115 ra.453 rbp rcx))
         (rdx (tmp.114 c.118 r15 rdi rsi tmp.115 ra.453 rcx rbp))
         (rsi (c.118 r15 rdi ra.453 rdx rcx rbp))
         (rdi (r15 ra.453 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (c.118 (rsi rdx rcx ra.453 rbp))
         (tmp.114 (tmp.314 tmp.116 tmp.115 rdx rcx ra.453 rbp))
         (tmp.314 (rbp ra.453 tmp.115 tmp.116 tmp.114)))))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ())
       (locals (c.117 tmp.322 ra.454 tmp.112 tmp.111))
       (undead-out
        ((rdi rsi rdx ra.454 rbp)
         (rsi rdx ra.454 rbp)
         (rdx tmp.111 ra.454 rbp)
         (tmp.111 tmp.112 ra.454 rbp)
         (tmp.322 tmp.111 tmp.112 ra.454 rbp)
         ((tmp.111 tmp.112 ra.454 rbp)
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((tmp.112 ra.454 rdx rbp)
           (ra.454 rsi rdx rbp)
           (ra.454 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((rdx (tmp.111 c.117 r15 rdi rsi tmp.112 ra.454 rbp))
         (rbp (tmp.322 tmp.112 tmp.111 c.117 ra.454 r15 rdi rsi rdx))
         (ra.454 (tmp.322 tmp.112 tmp.111 c.117 rbp rdi rsi rdx))
         (tmp.112 (tmp.322 tmp.111 ra.454 rbp rdx))
         (rsi (c.117 r15 rdi ra.454 rdx rbp))
         (rdi (r15 ra.454 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (c.117 (rsi rdx ra.454 rbp))
         (tmp.111 (tmp.322 tmp.112 rdx ra.454 rbp))
         (tmp.322 (rbp ra.454 tmp.112 tmp.111)))))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((new-frames ())
       (locals (tmp.316 ra.455 tmp.112 tmp.111))
       (undead-out
        ((rdi rsi rdx ra.455 rbp)
         (rsi rdx tmp.316 ra.455 rbp)
         (rdx tmp.316 tmp.112 ra.455 rbp)
         (tmp.316 tmp.111 tmp.112 ra.455 rbp)
         ((tmp.111 tmp.112 ra.455 rbp)
          ((tmp.111 tmp.112 ra.455 rbp)
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp))
           ((tmp.112 ra.455 rdx rbp)
            (ra.455 rsi rdx rbp)
            (ra.455 rdi rsi rdx rbp)
            (rdi rsi rdx r15 rbp)
            (rdi rsi rdx r15 rbp)))
          ((ra.455 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.455 rbp))
         (rbp (tmp.111 tmp.112 tmp.316 ra.455 r15 rdi rsi rdx rax))
         (ra.455 (tmp.111 tmp.112 tmp.316 rbp rdi rsi rdx rax))
         (rdx (tmp.316 r15 rdi rsi tmp.112 ra.455 rbp))
         (tmp.112 (tmp.111 tmp.316 ra.455 rbp rdx))
         (rsi (tmp.316 r15 rdi ra.455 rdx rbp))
         (rdi (r15 ra.455 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.316 (tmp.111 tmp.112 rsi rdx ra.455 rbp))
         (tmp.111 (tmp.316 tmp.112 ra.455 rbp)))))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((new-frames ())
       (locals
        (ra.456
         tmp.318
         tmp.111
         tmp.321
         tmp.459
         tmp.320
         tmp.458
         tmp.319
         tmp.457
         tmp.112))
       (undead-out
        ((rdi rsi rdx ra.456 rbp)
         (rsi rdx tmp.318 ra.456 rbp)
         (rdx tmp.318 tmp.112 ra.456 rbp)
         (tmp.318 tmp.112 tmp.111 ra.456 rbp)
         ((tmp.112 tmp.111 ra.456 rbp)
          ((tmp.457 tmp.111 ra.456 rbp)
           (tmp.319 tmp.111 ra.456 rbp)
           (tmp.458 tmp.111 ra.456 rbp)
           (tmp.320 tmp.111 ra.456 rbp)
           (tmp.459 tmp.111 ra.456 rbp)
           (tmp.321 tmp.111 ra.456 rbp)
           (ra.456 rax rbp)
           (rax rbp))
          ((ra.456 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.456 rbp))
         (rbp
          (tmp.111
           tmp.112
           tmp.318
           ra.456
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (ra.456
          (tmp.111
           tmp.112
           tmp.318
           rdi
           rsi
           rdx
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457
           rax))
         (tmp.457 (rbp ra.456 tmp.111))
         (tmp.111
          (tmp.318
           tmp.112
           ra.456
           rbp
           tmp.321
           tmp.459
           tmp.320
           tmp.458
           tmp.319
           tmp.457))
         (tmp.319 (tmp.111 ra.456 rbp))
         (tmp.458 (rbp ra.456 tmp.111))
         (tmp.320 (tmp.111 ra.456 rbp))
         (tmp.459 (rbp ra.456 tmp.111))
         (tmp.321 (tmp.111 ra.456 rbp))
         (rdx (tmp.112 tmp.318 ra.456))
         (rsi (tmp.318 ra.456))
         (rdi (ra.456))
         (tmp.318 (tmp.111 tmp.112 rsi rdx ra.456 rbp))
         (tmp.112 (tmp.111 rdx tmp.318 ra.456 rbp)))))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((new-frames ())
       (locals (tmp.308 ra.460 tmp.115 tmp.114 tmp.116))
       (undead-out
        ((rdi rsi rdx rcx ra.460 rbp)
         (rsi rdx rcx tmp.308 ra.460 rbp)
         (rdx rcx tmp.308 tmp.115 ra.460 rbp)
         (rcx tmp.308 tmp.116 tmp.115 ra.460 rbp)
         (tmp.308 tmp.116 tmp.114 tmp.115 ra.460 rbp)
         ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
          ((tmp.116 tmp.114 tmp.115 ra.460 rbp)
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp))
           ((tmp.114 tmp.115 ra.460 rcx rbp)
            (tmp.115 ra.460 rdx rcx rbp)
            (ra.460 rsi rdx rcx rbp)
            (ra.460 rdi rsi rdx rcx rbp)
            (rdi rsi rdx rcx r15 rbp)
            (rdi rsi rdx rcx r15 rbp)))
          ((ra.460 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.460 rbp))
         (rbp (tmp.114 tmp.116 tmp.115 tmp.308 ra.460 r15 rdi rsi rdx rcx rax))
         (ra.460 (tmp.114 tmp.116 tmp.115 tmp.308 rbp rdi rsi rdx rcx rax))
         (rcx (tmp.116 tmp.308 r15 rdi rsi rdx tmp.114 tmp.115 ra.460 rbp))
         (tmp.115 (tmp.114 tmp.116 tmp.308 ra.460 rbp rdx rcx))
         (tmp.114 (tmp.308 tmp.116 tmp.115 ra.460 rbp rcx))
         (rdx (tmp.308 r15 rdi rsi tmp.115 ra.460 rcx rbp))
         (rsi (tmp.308 r15 rdi ra.460 rdx rcx rbp))
         (rdi (r15 ra.460 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.308 (tmp.114 tmp.116 tmp.115 rsi rdx rcx ra.460 rbp))
         (tmp.116 (tmp.114 rcx tmp.308 tmp.115 ra.460 rbp)))))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((new-frames ())
       (locals
        (ra.461
         tmp.310
         tmp.114
         tmp.116
         tmp.313
         tmp.464
         tmp.312
         tmp.463
         tmp.311
         tmp.462
         tmp.115))
       (undead-out
        ((rdi rsi rdx rcx rbp ra.461)
         (rsi rdx rcx tmp.310 rbp ra.461)
         (rdx rcx tmp.310 tmp.115 rbp ra.461)
         (rcx tmp.310 tmp.115 rbp ra.461 tmp.114)
         (tmp.310 tmp.115 rbp ra.461 tmp.116 tmp.114)
         ((tmp.115 rbp ra.461 tmp.116 tmp.114)
          ((tmp.462 rbp ra.461 tmp.116 tmp.114)
           (tmp.311 rbp ra.461 tmp.116 tmp.114)
           (tmp.463 rbp ra.461 tmp.116 tmp.114)
           (tmp.312 rbp ra.461 tmp.116 tmp.114)
           (tmp.464 rbp ra.461 tmp.116 tmp.114)
           (rbp ra.461 tmp.116 tmp.313 tmp.114)
           (ra.461 rbp)
           (ra.461 rax rbp)
           (rax rbp))
          ((ra.461 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.461 rbp))
         (rbp
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (ra.461
          (tmp.116
           tmp.114
           tmp.115
           tmp.310
           rdi
           rsi
           rdx
           rcx
           rbp
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462
           rax))
         (tmp.462 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.116
          (tmp.310
           tmp.115
           rbp
           ra.461
           tmp.114
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.114
          (tmp.116
           rcx
           tmp.310
           tmp.115
           rbp
           ra.461
           tmp.313
           tmp.464
           tmp.312
           tmp.463
           tmp.311
           tmp.462))
         (tmp.311 (rbp ra.461 tmp.116 tmp.114))
         (tmp.463 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.312 (rbp ra.461 tmp.116 tmp.114))
         (tmp.464 (tmp.114 tmp.116 ra.461 rbp))
         (tmp.313 (rbp ra.461 tmp.116 tmp.114))
         (rcx (tmp.114 tmp.115 tmp.310 ra.461))
         (rdx (tmp.115 tmp.310 ra.461))
         (rsi (tmp.310 ra.461))
         (rdi (ra.461))
         (tmp.310 (tmp.116 tmp.114 tmp.115 rsi rdx rcx rbp ra.461))
         (tmp.115 (tmp.116 tmp.114 rdx rcx tmp.310 rbp ra.461)))))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((new-frames ())
       (locals
        (tmp.302
         i.108
         tmp.466
         tmp.303
         tmp.467
         tmp.304
         tmp.468
         tmp.305
         vector-init-loop.105
         tmp.150
         tmp.469
         tmp.306
         len.106
         ra.465
         vec.107))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.465 rbp)
         (rsi rdx rcx r8 tmp.302 ra.465 rbp)
         (rdx rcx r8 tmp.302 i.108 ra.465 rbp)
         (rcx r8 tmp.302 i.108 len.106 ra.465 rbp)
         (r8 tmp.302 i.108 len.106 vector-init-loop.105 ra.465 rbp)
         (tmp.302 i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
         ((i.108 len.106 vector-init-loop.105 vec.107 ra.465 rbp)
          ((ra.465 rax rbp) (rax rbp))
          ((tmp.466 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.303 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.467 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.304 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (tmp.468 rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107)
           (rbp ra.465 vector-init-loop.105 len.106 i.108 tmp.305 vec.107)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (i.108 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.469 vec.107 len.106 vector-init-loop.105 ra.465 rbp)
           (vec.107 tmp.306 len.106 vector-init-loop.105 ra.465 rbp)
           (tmp.306 len.106 vector-init-loop.105 ra.465 rcx rbp)
           (len.106 vector-init-loop.105 ra.465 rdx rcx rbp)
           (vector-init-loop.105 ra.465 rsi rdx rcx rbp)
           (ra.465 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp)))))
       (call-undead ())
       (conflicts
        ((tmp.466 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (rbp
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           ra.465
           rax
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (ra.465
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           tmp.302
           r8
           rbp
           rax
           rdi
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vector-init-loop.105
          (vec.107
           r8
           tmp.302
           i.108
           len.106
           ra.465
           rbp
           rsi
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (len.106
          (vec.107
           vector-init-loop.105
           r8
           tmp.302
           i.108
           ra.465
           rbp
           rdx
           rcx
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (i.108
          (vec.107
           vector-init-loop.105
           len.106
           rdx
           rcx
           r8
           tmp.302
           ra.465
           rbp
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (vec.107
          (tmp.302
           i.108
           len.106
           vector-init-loop.105
           ra.465
           rbp
           tmp.306
           tmp.469
           tmp.150
           tmp.305
           tmp.468
           tmp.304
           tmp.467
           tmp.303
           tmp.466))
         (tmp.303 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.467 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.304 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.468 (vec.107 i.108 len.106 vector-init-loop.105 ra.465 rbp))
         (tmp.305 (rbp ra.465 vector-init-loop.105 len.106 i.108 vec.107))
         (tmp.150 (i.108 vec.107 len.106 ra.465 rbp))
         (tmp.469 (rbp ra.465 vector-init-loop.105 len.106 vec.107))
         (tmp.306 (rcx vec.107 len.106 vector-init-loop.105 ra.465 rbp))
         (rcx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           rdx
           tmp.306
           len.106
           vector-init-loop.105
           ra.465
           rbp))
         (rdx
          (i.108
           tmp.302
           r15
           rdi
           rsi
           len.106
           vector-init-loop.105
           ra.465
           rcx
           rbp))
         (rsi (tmp.302 r15 rdi vector-init-loop.105 ra.465 rdx rcx rbp))
         (rdi (r15 ra.465 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (rax (ra.465 rbp))
         (r8 (vector-init-loop.105 len.106 i.108 tmp.302 ra.465))
         (tmp.302
          (vec.107
           vector-init-loop.105
           len.106
           i.108
           rsi
           rdx
           rcx
           r8
           ra.465
           rbp)))))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((new-frames ())
       (locals (ra.470 tmp.274 tmp.62))
       (undead-out
        ((rdi rsi ra.470 rbp)
         (rsi tmp.274 ra.470 rbp)
         (tmp.274 tmp.62 ra.470 rbp)
         ((tmp.62 ra.470 rbp)
          ((ra.470 rax rbp) (rax rbp))
          ((ra.470 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.470 rbp))
         (rbp (tmp.62 tmp.274 ra.470 rax))
         (ra.470 (tmp.62 tmp.274 rdi rsi rbp rax))
         (rsi (tmp.274 ra.470))
         (rdi (ra.470))
         (tmp.274 (tmp.62 rsi ra.470 rbp))
         (tmp.62 (tmp.274 ra.470 rbp)))))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((new-frames ())
       (locals (ra.471 tmp.271 tmp.61))
       (undead-out
        ((rdi rsi ra.471 rbp)
         (rsi tmp.271 ra.471 rbp)
         (tmp.271 tmp.61 ra.471 rbp)
         ((tmp.61 ra.471 rbp)
          ((ra.471 rax rbp) (rax rbp))
          ((ra.471 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.471 rbp))
         (rbp (tmp.61 tmp.271 ra.471 rax))
         (ra.471 (tmp.61 tmp.271 rdi rsi rbp rax))
         (rsi (tmp.271 ra.471))
         (rdi (ra.471))
         (tmp.271 (tmp.61 rsi ra.471 rbp))
         (tmp.61 (tmp.271 ra.471 rbp)))))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((new-frames ())
       (locals (ra.472 tmp.268 tmp.60))
       (undead-out
        ((rdi rsi ra.472 rbp)
         (rsi tmp.268 ra.472 rbp)
         (tmp.268 tmp.60 ra.472 rbp)
         ((tmp.60 ra.472 rbp)
          ((ra.472 rax rbp) (rax rbp))
          ((ra.472 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.472 rbp))
         (rbp (tmp.60 tmp.268 ra.472 rax))
         (ra.472 (tmp.60 tmp.268 rdi rsi rbp rax))
         (rsi (tmp.268 ra.472))
         (rdi (ra.472))
         (tmp.268 (tmp.60 rsi ra.472 rbp))
         (tmp.60 (tmp.268 ra.472 rbp)))))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((new-frames ())
       (locals
        (tmp.262 tmp.474 tmp.265 ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
       (undead-out
        ((rdi rsi rdx rcx ra.473 rbp)
         (rsi rdx rcx tmp.262 ra.473 rbp)
         (rdx rcx tmp.262 tmp.58 ra.473 rbp)
         (rcx tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp)
         (tmp.262 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
         ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
          ((tmp.474 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           (tmp.265 tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
           ((tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp)
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))
            ((tmp.59 unsafe-vector-ref.3 ra.473 rcx rbp)
             (unsafe-vector-ref.3 ra.473 rdx rcx rbp)
             (ra.473 rsi rdx rcx rbp)
             (ra.473 rdi rsi rdx rcx rbp)
             (rdi rsi rdx rcx r15 rbp)
             (rdi rsi rdx rcx r15 rbp))))
          ((ra.473 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.473 rbp))
         (rbp
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           ra.473
           tmp.265
           tmp.474
           r15
           rdi
           rsi
           rdx
           rcx
           rax))
         (ra.473
          (tmp.59
           unsafe-vector-ref.3
           tmp.58
           tmp.262
           rbp
           tmp.265
           tmp.474
           rdi
           rsi
           rdx
           rcx
           rax))
         (rcx
          (tmp.58
           tmp.262
           r15
           rdi
           rsi
           rdx
           tmp.59
           unsafe-vector-ref.3
           ra.473
           rbp))
         (unsafe-vector-ref.3
          (tmp.59 tmp.262 tmp.58 ra.473 rbp tmp.265 tmp.474 rdx rcx))
         (tmp.59
          (tmp.262 tmp.58 unsafe-vector-ref.3 ra.473 rbp tmp.265 tmp.474 rcx))
         (rdx (tmp.58 tmp.262 r15 rdi rsi unsafe-vector-ref.3 ra.473 rcx rbp))
         (rsi (tmp.262 r15 rdi ra.473 rdx rcx rbp))
         (rdi (r15 ra.473 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (tmp.474 (rbp ra.473 unsafe-vector-ref.3 tmp.59 tmp.58))
         (tmp.58
          (tmp.59
           unsafe-vector-ref.3
           rdx
           rcx
           tmp.262
           ra.473
           rbp
           tmp.265
           tmp.474))
         (tmp.265 (tmp.58 tmp.59 unsafe-vector-ref.3 ra.473 rbp))
         (tmp.262
          (tmp.59 unsafe-vector-ref.3 tmp.58 rsi rdx rcx ra.473 rbp)))))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((new-frames ())
       (locals (tmp.264 ra.475 tmp.58 tmp.59 tmp.152 unsafe-vector-ref.3))
       (undead-out
        ((rdi rsi rdx rcx ra.475 rbp)
         (rsi rdx rcx tmp.264 ra.475 rbp)
         (rdx rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp)
         (rcx tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp)
         (tmp.264 tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
         ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
          ((tmp.59 tmp.58 unsafe-vector-ref.3 ra.475 rbp)
           (tmp.58 unsafe-vector-ref.3 ra.475 rdx rbp)
           (unsafe-vector-ref.3 ra.475 rsi rdx rbp)
           (ra.475 rdi rsi rdx rbp)
           (rdi rsi rdx r15 rbp)
           (rdi rsi rdx r15 rbp))
          ((ra.475 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.475 rbp))
         (rbp
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           ra.475
           r15
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (ra.475
          (tmp.58
           tmp.59
           unsafe-vector-ref.3
           tmp.264
           rcx
           rbp
           rdi
           rsi
           rdx
           tmp.152
           rax))
         (tmp.152 (tmp.59 tmp.58 ra.475 rbp))
         (tmp.58 (tmp.264 tmp.59 unsafe-vector-ref.3 ra.475 rbp rdx tmp.152))
         (tmp.59 (tmp.58 rcx tmp.264 unsafe-vector-ref.3 ra.475 rbp tmp.152))
         (rdx (tmp.264 r15 rdi rsi tmp.58 unsafe-vector-ref.3 ra.475 rbp))
         (unsafe-vector-ref.3 (tmp.58 tmp.59 rcx tmp.264 ra.475 rbp rsi rdx))
         (rsi (tmp.264 r15 rdi unsafe-vector-ref.3 ra.475 rdx rbp))
         (rdi (r15 ra.475 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (rcx (tmp.59 unsafe-vector-ref.3 tmp.264 ra.475))
         (tmp.264
          (tmp.58 tmp.59 unsafe-vector-ref.3 rsi rdx rcx ra.475 rbp)))))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((new-frames ())
       (locals
        (tmp.256
         tmp.477
         tmp.259
         ra.476
         unsafe-vector-set!.2
         tmp.57
         tmp.56
         tmp.55))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.476 rbp)
         (rsi rdx rcx r8 tmp.256 ra.476 rbp)
         (rdx rcx r8 tmp.256 tmp.55 ra.476 rbp)
         (rcx r8 tmp.256 tmp.55 unsafe-vector-set!.2 ra.476 rbp)
         (r8 tmp.256 tmp.55 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         (tmp.256 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
         ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
          ((tmp.477 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           (tmp.259 tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
           ((tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp)
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))
            ((tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 r8 rbp)
             (tmp.57 unsafe-vector-set!.2 ra.476 rcx r8 rbp)
             (unsafe-vector-set!.2 ra.476 rdx rcx r8 rbp)
             (ra.476 rsi rdx rcx r8 rbp)
             (ra.476 rdi rsi rdx rcx r8 rbp)
             (rdi rsi rdx rcx r8 r15 rbp)
             (rdi rsi rdx rcx r8 r15 rbp))))
          ((ra.476 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.476 rbp))
         (rbp
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           ra.476
           tmp.259
           tmp.477
           r15
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (ra.476
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           tmp.256
           rbp
           tmp.259
           tmp.477
           rdi
           rsi
           rdx
           rcx
           r8
           rax))
         (r8
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp))
         (unsafe-vector-set!.2
          (tmp.56 tmp.57 tmp.256 tmp.55 ra.476 rbp tmp.259 tmp.477 rdx rcx r8))
         (tmp.57
          (tmp.56
           tmp.256
           tmp.55
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           rcx
           r8))
         (tmp.56
          (tmp.256
           tmp.55
           tmp.57
           unsafe-vector-set!.2
           ra.476
           rbp
           tmp.259
           tmp.477
           r8))
         (rcx
          (tmp.55
           tmp.256
           r15
           rdi
           rsi
           rdx
           tmp.57
           unsafe-vector-set!.2
           ra.476
           r8
           rbp))
         (rdx
          (tmp.55 tmp.256 r15 rdi rsi unsafe-vector-set!.2 ra.476 rcx r8 rbp))
         (rsi (tmp.256 r15 rdi ra.476 rdx rcx r8 rbp))
         (rdi (r15 ra.476 rsi rdx rcx r8 rbp))
         (r15 (rdi rsi rdx rcx r8 rbp))
         (tmp.477 (rbp ra.476 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55))
         (tmp.55
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           rdx
           rcx
           r8
           tmp.256
           ra.476
           rbp
           tmp.259
           tmp.477))
         (tmp.259 (tmp.55 tmp.56 tmp.57 unsafe-vector-set!.2 ra.476 rbp))
         (tmp.256
          (tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.55
           rsi
           rdx
           rcx
           r8
           ra.476
           rbp)))))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((new-frames ())
       (locals
        (tmp.258 ra.478 tmp.55 tmp.56 tmp.57 tmp.153 unsafe-vector-set!.2))
       (undead-out
        ((rdi rsi rdx rcx r8 ra.478 rbp)
         (rsi rdx rcx r8 tmp.258 ra.478 rbp)
         (rdx rcx r8 tmp.258 unsafe-vector-set!.2 ra.478 rbp)
         (rcx r8 tmp.258 tmp.57 unsafe-vector-set!.2 ra.478 rbp)
         (r8 tmp.258 tmp.57 tmp.56 unsafe-vector-set!.2 ra.478 rbp)
         (tmp.258 tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
         ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
          ((tmp.57 tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rbp)
           (tmp.56 tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp)
           (tmp.55 unsafe-vector-set!.2 ra.478 rdx rcx rbp)
           (unsafe-vector-set!.2 ra.478 rsi rdx rcx rbp)
           (ra.478 rdi rsi rdx rcx rbp)
           (rdi rsi rdx rcx r15 rbp)
           (rdi rsi rdx rcx r15 rbp))
          ((ra.478 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.478 rbp))
         (rbp
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           ra.478
           r15
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (ra.478
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           tmp.258
           r8
           rbp
           rdi
           rsi
           rdx
           rcx
           tmp.153
           rax))
         (tmp.153 (tmp.57 tmp.56 tmp.55 ra.478 rbp))
         (tmp.55
          (tmp.258
           tmp.57
           tmp.56
           unsafe-vector-set!.2
           ra.478
           rbp
           rdx
           rcx
           tmp.153))
         (tmp.56
          (tmp.55
           r8
           tmp.258
           tmp.57
           unsafe-vector-set!.2
           ra.478
           rbp
           rcx
           tmp.153))
         (tmp.57
          (tmp.55
           tmp.56
           rcx
           r8
           tmp.258
           unsafe-vector-set!.2
           ra.478
           rbp
           tmp.153))
         (rcx
          (tmp.57
           tmp.258
           r15
           rdi
           rsi
           rdx
           tmp.56
           tmp.55
           unsafe-vector-set!.2
           ra.478
           rbp))
         (unsafe-vector-set!.2
          (tmp.55 tmp.56 tmp.57 r8 tmp.258 ra.478 rbp rsi rdx rcx))
         (rdx (tmp.258 r15 rdi rsi tmp.55 unsafe-vector-set!.2 ra.478 rcx rbp))
         (rsi (tmp.258 r15 rdi unsafe-vector-set!.2 ra.478 rdx rcx rbp))
         (rdi (r15 ra.478 rsi rdx rcx rbp))
         (r15 (rdi rsi rdx rcx rbp))
         (r8 (tmp.56 tmp.57 unsafe-vector-set!.2 tmp.258 ra.478))
         (tmp.258
          (tmp.55
           tmp.56
           tmp.57
           unsafe-vector-set!.2
           rsi
           rdx
           rcx
           r8
           ra.478
           rbp)))))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((new-frames ())
       (locals (ra.479 tmp.253 tmp.54))
       (undead-out
        ((rdi rsi ra.479 rbp)
         (rsi tmp.253 ra.479 rbp)
         (tmp.253 tmp.54 ra.479 rbp)
         ((tmp.54 ra.479 rbp)
          ((ra.479 rax rbp) (rax rbp))
          ((ra.479 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.479 rbp))
         (rbp (tmp.54 tmp.253 ra.479 rax))
         (ra.479 (tmp.54 tmp.253 rdi rsi rbp rax))
         (rsi (tmp.253 ra.479))
         (rdi (ra.479))
         (tmp.253 (tmp.54 rsi ra.479 rbp))
         (tmp.54 (tmp.253 ra.479 rbp)))))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((new-frames ())
       (locals (tmp.250 ra.480 tmp.53 tmp.154 make-init-vector.1))
       (undead-out
        ((rdi rsi rdx ra.480 rbp)
         (rsi rdx tmp.250 ra.480 rbp)
         (rdx tmp.250 make-init-vector.1 ra.480 rbp)
         (tmp.250 tmp.53 make-init-vector.1 ra.480 rbp)
         ((tmp.53 make-init-vector.1 ra.480 rbp)
          ((tmp.53 make-init-vector.1 ra.480 rbp)
           (make-init-vector.1 ra.480 rsi rbp)
           (ra.480 rdi rsi rbp)
           (rdi rsi r15 rbp)
           (rdi rsi r15 rbp))
          ((ra.480 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.480 rbp))
         (rbp
          (tmp.53 make-init-vector.1 tmp.250 ra.480 r15 rdi rsi tmp.154 rax))
         (ra.480
          (tmp.53 make-init-vector.1 tmp.250 rdx rbp rdi rsi tmp.154 rax))
         (tmp.154 (tmp.53 ra.480 rbp))
         (tmp.53 (tmp.250 make-init-vector.1 ra.480 rbp tmp.154))
         (rsi (tmp.250 r15 rdi make-init-vector.1 ra.480 rbp))
         (make-init-vector.1 (tmp.53 rdx tmp.250 ra.480 rbp rsi))
         (rdi (r15 ra.480 rsi rbp))
         (r15 (rdi rsi rbp))
         (rdx (make-init-vector.1 tmp.250 ra.480))
         (tmp.250 (tmp.53 make-init-vector.1 rsi rdx ra.480 rbp)))))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((new-frames ())
       (locals (tmp.243 tmp.482 tmp.247 ra.481 tmp.51 tmp.52))
       (undead-out
        ((rdi rsi rdx ra.481 rbp)
         (rsi rdx tmp.243 ra.481 rbp)
         (rdx tmp.243 tmp.51 ra.481 rbp)
         (tmp.243 tmp.52 tmp.51 ra.481 rbp)
         ((tmp.52 tmp.51 ra.481 rbp)
          ((tmp.482 tmp.52 tmp.51 ra.481 rbp)
           (tmp.247 tmp.52 tmp.51 ra.481 rbp)
           ((tmp.52 tmp.51 ra.481 rbp)
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.51 ra.481 rdx rbp)
             (ra.481 rsi rdx rbp)
             (ra.481 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.481 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.481 rbp))
         (rbp
          (tmp.52 tmp.51 tmp.243 ra.481 tmp.247 tmp.482 r15 rdi rsi rdx rax))
         (ra.481 (tmp.52 tmp.51 tmp.243 rbp tmp.247 tmp.482 rdi rsi rdx rax))
         (rdx (tmp.243 r15 rdi rsi tmp.51 ra.481 rbp))
         (tmp.51 (tmp.52 tmp.243 ra.481 rbp tmp.247 tmp.482 rdx))
         (rsi (tmp.243 r15 rdi ra.481 rdx rbp))
         (rdi (r15 ra.481 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.482 (rbp ra.481 tmp.51 tmp.52))
         (tmp.52 (tmp.243 tmp.51 ra.481 rbp tmp.247 tmp.482))
         (tmp.247 (tmp.52 tmp.51 ra.481 rbp))
         (tmp.243 (tmp.52 tmp.51 rsi rdx ra.481 rbp)))))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((new-frames ())
       (locals (ra.483 tmp.245 tmp.52 tmp.51))
       (undead-out
        ((rdi rsi rdx ra.483 rbp)
         (rsi rdx tmp.245 ra.483 rbp)
         (rdx tmp.245 tmp.51 ra.483 rbp)
         (tmp.245 tmp.51 tmp.52 ra.483 rbp)
         ((tmp.51 tmp.52 ra.483 rbp)
          ((ra.483 rbp)
           ((ra.483 rax rbp) (rax rbp))
           ((ra.483 rax rbp) (rax rbp)))
          ((ra.483 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.483 rbp))
         (rbp (tmp.52 tmp.51 tmp.245 ra.483 rax))
         (ra.483 (tmp.52 tmp.51 tmp.245 rdi rsi rdx rbp rax))
         (rdx (tmp.51 tmp.245 ra.483))
         (rsi (tmp.245 ra.483))
         (rdi (ra.483))
         (tmp.245 (tmp.52 tmp.51 rsi rdx ra.483 rbp))
         (tmp.51 (tmp.52 rdx tmp.245 ra.483 rbp))
         (tmp.52 (tmp.245 tmp.51 ra.483 rbp)))))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((new-frames ())
       (locals (tmp.236 tmp.485 tmp.240 ra.484 tmp.49 tmp.50))
       (undead-out
        ((rdi rsi rdx ra.484 rbp)
         (rsi rdx tmp.236 ra.484 rbp)
         (rdx tmp.236 tmp.49 ra.484 rbp)
         (tmp.236 tmp.50 tmp.49 ra.484 rbp)
         ((tmp.50 tmp.49 ra.484 rbp)
          ((tmp.485 tmp.50 tmp.49 ra.484 rbp)
           (tmp.240 tmp.50 tmp.49 ra.484 rbp)
           ((tmp.50 tmp.49 ra.484 rbp)
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.49 ra.484 rdx rbp)
             (ra.484 rsi rdx rbp)
             (ra.484 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.484 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.484 rbp))
         (rbp
          (tmp.50 tmp.49 tmp.236 ra.484 tmp.240 tmp.485 r15 rdi rsi rdx rax))
         (ra.484 (tmp.50 tmp.49 tmp.236 rbp tmp.240 tmp.485 rdi rsi rdx rax))
         (rdx (tmp.236 r15 rdi rsi tmp.49 ra.484 rbp))
         (tmp.49 (tmp.50 tmp.236 ra.484 rbp tmp.240 tmp.485 rdx))
         (rsi (tmp.236 r15 rdi ra.484 rdx rbp))
         (rdi (r15 ra.484 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.485 (rbp ra.484 tmp.49 tmp.50))
         (tmp.50 (tmp.236 tmp.49 ra.484 rbp tmp.240 tmp.485))
         (tmp.240 (tmp.50 tmp.49 ra.484 rbp))
         (tmp.236 (tmp.50 tmp.49 rsi rdx ra.484 rbp)))))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((new-frames ())
       (locals (ra.486 tmp.238 tmp.50 tmp.49))
       (undead-out
        ((rdi rsi rdx ra.486 rbp)
         (rsi rdx tmp.238 ra.486 rbp)
         (rdx tmp.238 tmp.49 ra.486 rbp)
         (tmp.238 tmp.49 tmp.50 ra.486 rbp)
         ((tmp.49 tmp.50 ra.486 rbp)
          ((ra.486 rbp)
           ((ra.486 rax rbp) (rax rbp))
           ((ra.486 rax rbp) (rax rbp)))
          ((ra.486 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.486 rbp))
         (rbp (tmp.50 tmp.49 tmp.238 ra.486 rax))
         (ra.486 (tmp.50 tmp.49 tmp.238 rdi rsi rdx rbp rax))
         (rdx (tmp.49 tmp.238 ra.486))
         (rsi (tmp.238 ra.486))
         (rdi (ra.486))
         (tmp.238 (tmp.50 tmp.49 rsi rdx ra.486 rbp))
         (tmp.49 (tmp.50 rdx tmp.238 ra.486 rbp))
         (tmp.50 (tmp.238 tmp.49 ra.486 rbp)))))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((new-frames ())
       (locals (tmp.229 tmp.488 tmp.233 ra.487 tmp.47 tmp.48))
       (undead-out
        ((rdi rsi rdx ra.487 rbp)
         (rsi rdx tmp.229 ra.487 rbp)
         (rdx tmp.229 tmp.47 ra.487 rbp)
         (tmp.229 tmp.48 tmp.47 ra.487 rbp)
         ((tmp.48 tmp.47 ra.487 rbp)
          ((tmp.488 tmp.48 tmp.47 ra.487 rbp)
           (tmp.233 tmp.48 tmp.47 ra.487 rbp)
           ((tmp.48 tmp.47 ra.487 rbp)
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.47 ra.487 rdx rbp)
             (ra.487 rsi rdx rbp)
             (ra.487 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.487 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.487 rbp))
         (rbp
          (tmp.48 tmp.47 tmp.229 ra.487 tmp.233 tmp.488 r15 rdi rsi rdx rax))
         (ra.487 (tmp.48 tmp.47 tmp.229 rbp tmp.233 tmp.488 rdi rsi rdx rax))
         (rdx (tmp.229 r15 rdi rsi tmp.47 ra.487 rbp))
         (tmp.47 (tmp.48 tmp.229 ra.487 rbp tmp.233 tmp.488 rdx))
         (rsi (tmp.229 r15 rdi ra.487 rdx rbp))
         (rdi (r15 ra.487 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.488 (rbp ra.487 tmp.47 tmp.48))
         (tmp.48 (tmp.229 tmp.47 ra.487 rbp tmp.233 tmp.488))
         (tmp.233 (tmp.48 tmp.47 ra.487 rbp))
         (tmp.229 (tmp.48 tmp.47 rsi rdx ra.487 rbp)))))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((new-frames ())
       (locals (ra.489 tmp.231 tmp.48 tmp.47))
       (undead-out
        ((rdi rsi rdx ra.489 rbp)
         (rsi rdx tmp.231 ra.489 rbp)
         (rdx tmp.231 tmp.47 ra.489 rbp)
         (tmp.231 tmp.47 tmp.48 ra.489 rbp)
         ((tmp.47 tmp.48 ra.489 rbp)
          ((ra.489 rbp)
           ((ra.489 rax rbp) (rax rbp))
           ((ra.489 rax rbp) (rax rbp)))
          ((ra.489 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.489 rbp))
         (rbp (tmp.48 tmp.47 tmp.231 ra.489 rax))
         (ra.489 (tmp.48 tmp.47 tmp.231 rdi rsi rdx rbp rax))
         (rdx (tmp.47 tmp.231 ra.489))
         (rsi (tmp.231 ra.489))
         (rdi (ra.489))
         (tmp.231 (tmp.48 tmp.47 rsi rdx ra.489 rbp))
         (tmp.47 (tmp.48 rdx tmp.231 ra.489 rbp))
         (tmp.48 (tmp.231 tmp.47 ra.489 rbp)))))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((new-frames ())
       (locals (tmp.222 tmp.491 tmp.226 ra.490 tmp.45 tmp.46))
       (undead-out
        ((rdi rsi rdx ra.490 rbp)
         (rsi rdx tmp.222 ra.490 rbp)
         (rdx tmp.222 tmp.45 ra.490 rbp)
         (tmp.222 tmp.46 tmp.45 ra.490 rbp)
         ((tmp.46 tmp.45 ra.490 rbp)
          ((tmp.491 tmp.46 tmp.45 ra.490 rbp)
           (tmp.226 tmp.46 tmp.45 ra.490 rbp)
           ((tmp.46 tmp.45 ra.490 rbp)
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.45 ra.490 rdx rbp)
             (ra.490 rsi rdx rbp)
             (ra.490 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.490 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.490 rbp))
         (rbp
          (tmp.46 tmp.45 tmp.222 ra.490 tmp.226 tmp.491 r15 rdi rsi rdx rax))
         (ra.490 (tmp.46 tmp.45 tmp.222 rbp tmp.226 tmp.491 rdi rsi rdx rax))
         (rdx (tmp.222 r15 rdi rsi tmp.45 ra.490 rbp))
         (tmp.45 (tmp.46 tmp.222 ra.490 rbp tmp.226 tmp.491 rdx))
         (rsi (tmp.222 r15 rdi ra.490 rdx rbp))
         (rdi (r15 ra.490 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.491 (rbp ra.490 tmp.45 tmp.46))
         (tmp.46 (tmp.222 tmp.45 ra.490 rbp tmp.226 tmp.491))
         (tmp.226 (tmp.46 tmp.45 ra.490 rbp))
         (tmp.222 (tmp.46 tmp.45 rsi rdx ra.490 rbp)))))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((new-frames ())
       (locals (ra.492 tmp.224 tmp.46 tmp.45))
       (undead-out
        ((rdi rsi rdx ra.492 rbp)
         (rsi rdx tmp.224 ra.492 rbp)
         (rdx tmp.224 tmp.45 ra.492 rbp)
         (tmp.224 tmp.45 tmp.46 ra.492 rbp)
         ((tmp.45 tmp.46 ra.492 rbp)
          ((ra.492 rbp)
           ((ra.492 rax rbp) (rax rbp))
           ((ra.492 rax rbp) (rax rbp)))
          ((ra.492 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.492 rbp))
         (rbp (tmp.46 tmp.45 tmp.224 ra.492 rax))
         (ra.492 (tmp.46 tmp.45 tmp.224 rdi rsi rdx rbp rax))
         (rdx (tmp.45 tmp.224 ra.492))
         (rsi (tmp.224 ra.492))
         (rdi (ra.492))
         (tmp.224 (tmp.46 tmp.45 rsi rdx ra.492 rbp))
         (tmp.45 (tmp.46 rdx tmp.224 ra.492 rbp))
         (tmp.46 (tmp.224 tmp.45 ra.492 rbp)))))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((new-frames ())
       (locals (tmp.216 tmp.494 tmp.219 ra.493 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.493 rbp)
         (rsi rdx tmp.216 ra.493 rbp)
         (rdx tmp.216 tmp.43 ra.493 rbp)
         (tmp.216 tmp.44 tmp.43 ra.493 rbp)
         ((tmp.44 tmp.43 ra.493 rbp)
          ((tmp.494 tmp.44 tmp.43 ra.493 rbp)
           (tmp.219 tmp.44 tmp.43 ra.493 rbp)
           ((tmp.44 tmp.43 ra.493 rbp)
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.43 ra.493 rdx rbp)
             (ra.493 rsi rdx rbp)
             (ra.493 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.493 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.493 rbp))
         (rbp
          (tmp.44 tmp.43 tmp.216 ra.493 tmp.219 tmp.494 r15 rdi rsi rdx rax))
         (ra.493 (tmp.44 tmp.43 tmp.216 rbp tmp.219 tmp.494 rdi rsi rdx rax))
         (rdx (tmp.216 r15 rdi rsi tmp.43 ra.493 rbp))
         (tmp.43 (tmp.44 tmp.216 ra.493 rbp tmp.219 tmp.494 rdx))
         (rsi (tmp.216 r15 rdi ra.493 rdx rbp))
         (rdi (r15 ra.493 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.494 (rbp ra.493 tmp.43 tmp.44))
         (tmp.44 (tmp.216 tmp.43 ra.493 rbp tmp.219 tmp.494))
         (tmp.219 (tmp.44 tmp.43 ra.493 rbp))
         (tmp.216 (tmp.44 tmp.43 rsi rdx ra.493 rbp)))))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((new-frames ())
       (locals (ra.495 tmp.218 tmp.496 tmp.43 tmp.44))
       (undead-out
        ((rdi rsi rdx ra.495 rbp)
         (rsi rdx tmp.218 ra.495 rbp)
         (rdx tmp.218 tmp.43 ra.495 rbp)
         (tmp.218 tmp.44 tmp.43 ra.495 rbp)
         ((tmp.44 tmp.43 ra.495 rbp)
          ((tmp.496 ra.495 rbp) (ra.495 rax rbp) (rax rbp))
          ((ra.495 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.495 rbp))
         (rbp (tmp.44 tmp.43 tmp.218 ra.495 tmp.496 rax))
         (ra.495 (tmp.44 tmp.43 tmp.218 rdi rsi rdx rbp tmp.496 rax))
         (tmp.496 (rbp ra.495))
         (rdx (tmp.43 tmp.218 ra.495))
         (rsi (tmp.218 ra.495))
         (rdi (ra.495))
         (tmp.218 (tmp.44 tmp.43 rsi rdx ra.495 rbp))
         (tmp.43 (tmp.44 rdx tmp.218 ra.495 rbp))
         (tmp.44 (tmp.218 tmp.43 ra.495 rbp)))))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((new-frames ())
       (locals (tmp.210 tmp.498 tmp.213 ra.497 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.497 rbp)
         (rsi rdx tmp.210 ra.497 rbp)
         (rdx tmp.210 tmp.41 ra.497 rbp)
         (tmp.210 tmp.42 tmp.41 ra.497 rbp)
         ((tmp.42 tmp.41 ra.497 rbp)
          ((tmp.498 tmp.42 tmp.41 ra.497 rbp)
           (tmp.213 tmp.42 tmp.41 ra.497 rbp)
           ((tmp.42 tmp.41 ra.497 rbp)
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.41 ra.497 rdx rbp)
             (ra.497 rsi rdx rbp)
             (ra.497 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.497 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.497 rbp))
         (rbp
          (tmp.42 tmp.41 tmp.210 ra.497 tmp.213 tmp.498 r15 rdi rsi rdx rax))
         (ra.497 (tmp.42 tmp.41 tmp.210 rbp tmp.213 tmp.498 rdi rsi rdx rax))
         (rdx (tmp.210 r15 rdi rsi tmp.41 ra.497 rbp))
         (tmp.41 (tmp.42 tmp.210 ra.497 rbp tmp.213 tmp.498 rdx))
         (rsi (tmp.210 r15 rdi ra.497 rdx rbp))
         (rdi (r15 ra.497 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.498 (rbp ra.497 tmp.41 tmp.42))
         (tmp.42 (tmp.210 tmp.41 ra.497 rbp tmp.213 tmp.498))
         (tmp.213 (tmp.42 tmp.41 ra.497 rbp))
         (tmp.210 (tmp.42 tmp.41 rsi rdx ra.497 rbp)))))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((new-frames ())
       (locals (ra.499 tmp.212 tmp.500 tmp.41 tmp.42))
       (undead-out
        ((rdi rsi rdx ra.499 rbp)
         (rsi rdx tmp.212 ra.499 rbp)
         (rdx tmp.212 tmp.41 ra.499 rbp)
         (tmp.212 tmp.42 tmp.41 ra.499 rbp)
         ((tmp.42 tmp.41 ra.499 rbp)
          ((tmp.500 ra.499 rbp) (ra.499 rax rbp) (rax rbp))
          ((ra.499 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.499 rbp))
         (rbp (tmp.42 tmp.41 tmp.212 ra.499 tmp.500 rax))
         (ra.499 (tmp.42 tmp.41 tmp.212 rdi rsi rdx rbp tmp.500 rax))
         (tmp.500 (rbp ra.499))
         (rdx (tmp.41 tmp.212 ra.499))
         (rsi (tmp.212 ra.499))
         (rdi (ra.499))
         (tmp.212 (tmp.42 tmp.41 rsi rdx ra.499 rbp))
         (tmp.41 (tmp.42 rdx tmp.212 ra.499 rbp))
         (tmp.42 (tmp.212 tmp.41 ra.499 rbp)))))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((new-frames ())
       (locals (tmp.203 tmp.502 tmp.207 ra.501 tmp.40 tmp.39))
       (undead-out
        ((rdi rsi rdx ra.501 rbp)
         (rsi rdx tmp.203 ra.501 rbp)
         (rdx tmp.203 tmp.39 ra.501 rbp)
         (tmp.203 tmp.39 tmp.40 ra.501 rbp)
         ((tmp.39 tmp.40 ra.501 rbp)
          ((tmp.502 tmp.39 tmp.40 ra.501 rbp)
           (tmp.207 tmp.39 tmp.40 ra.501 rbp)
           ((tmp.39 tmp.40 ra.501 rbp)
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))
            ((tmp.40 ra.501 rdx rbp)
             (ra.501 rsi rdx rbp)
             (ra.501 rdi rsi rdx rbp)
             (rdi rsi rdx r15 rbp)
             (rdi rsi rdx r15 rbp))))
          ((ra.501 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.501 rbp))
         (rbp
          (tmp.40 tmp.39 tmp.203 ra.501 tmp.207 tmp.502 r15 rdi rsi rdx rax))
         (ra.501 (tmp.40 tmp.39 tmp.203 rbp tmp.207 tmp.502 rdi rsi rdx rax))
         (rdx (tmp.39 tmp.203 r15 rdi rsi tmp.40 ra.501 rbp))
         (tmp.40 (tmp.203 tmp.39 ra.501 rbp tmp.207 tmp.502 rdx))
         (rsi (tmp.203 r15 rdi ra.501 rdx rbp))
         (rdi (r15 ra.501 rsi rdx rbp))
         (r15 (rdi rsi rdx rbp))
         (tmp.502 (rbp ra.501 tmp.40 tmp.39))
         (tmp.39 (tmp.40 rdx tmp.203 ra.501 rbp tmp.207 tmp.502))
         (tmp.207 (tmp.39 tmp.40 ra.501 rbp))
         (tmp.203 (tmp.40 tmp.39 rsi rdx ra.501 rbp)))))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((new-frames ())
       (locals (ra.503 tmp.205 tmp.505 tmp.39 tmp.206 tmp.504 tmp.40))
       (undead-out
        ((rdi rsi rdx ra.503 rbp)
         (rsi rdx tmp.205 ra.503 rbp)
         (rdx tmp.205 tmp.40 ra.503 rbp)
         (tmp.205 tmp.40 tmp.39 ra.503 rbp)
         ((tmp.40 tmp.39 ra.503 rbp)
          ((tmp.504 tmp.39 ra.503 rbp)
           (tmp.206 tmp.39 ra.503 rbp)
           (tmp.505 ra.503 rbp)
           (ra.503 rax rbp)
           (rax rbp))
          ((ra.503 rax rbp) (rax rbp)))))
       (call-undead ())
       (conflicts
        ((rax (ra.503 rbp))
         (rbp (tmp.39 tmp.40 tmp.205 ra.503 tmp.505 tmp.206 tmp.504 rax))
         (ra.503
          (tmp.39 tmp.40 tmp.205 rdi rsi rdx rbp tmp.505 tmp.206 tmp.504 rax))
         (tmp.504 (rbp ra.503 tmp.39))
         (tmp.39 (tmp.205 tmp.40 ra.503 rbp tmp.206 tmp.504))
         (tmp.206 (tmp.39 ra.503 rbp))
         (tmp.505 (rbp ra.503))
         (rdx (tmp.40 tmp.205 ra.503))
         (rsi (tmp.205 ra.503))
         (rdi (ra.503))
         (tmp.205 (tmp.39 tmp.40 rsi rdx ra.503 rbp))
         (tmp.40 (tmp.39 rdx tmp.205 ra.503 rbp)))))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55)

  )

(parameterize ([current-pass-list
                  (list
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((new-frames ()))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 r12)
        (set! r12 (+ r12 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 r12)
        (set! r12 (+ r12 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 r12)
        (set! r12 (+ r12 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 r12)
        (set! r12 (+ r12 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 r12)
        (set! r12 (+ r12 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 r12)
        (set! r12 (+ r12 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 r12)
        (set! r12 (+ r12 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 r12)
        (set! r12 (+ r12 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 r12)
        (set! r12 (+ r12 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 r12)
        (set! r12 (+ r12 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 r12)
        (set! r12 (+ r12 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 r12)
        (set! r12 (+ r12 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 r12)
        (set! r12 (+ r12 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 r12)
        (set! r12 (+ r12 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 r12)
        (set! r12 (+ r12 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 r12)
        (set! r12 (+ r12 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 r12)
        (set! r12 (+ r12 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 r12)
        (set! r12 (+ r12 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 r12)
        (set! r12 (+ r12 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 r12)
        (set! r12 (+ r12 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 r12)
        (set! r12 (+ r12 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 r12)
        (set! r12 (+ r12 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 r12)
        (set! r12 (+ r12 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 r12)
        (set! r12 (+ r12 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 r12)
        (set! r12 (+ r12 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 r12)
        (set! r12 (+ r12 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 r12)
        (set! r12 (+ r12 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 r12)
        (set! r12 (+ r12 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 r12)
        (set! r12 (+ r12 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 r12)
        (set! r12 (+ r12 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 r12)
        (set! r12 (+ r12 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 r12)
        (set! r12 (+ r12 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 r12)
        (set! r12 (+ r12 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((new-frames ()))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((new-frames ()))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((new-frames ((nfv.393 nfv.394 nfv.395))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((new-frames ()))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((new-frames ()))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((new-frames ()))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((new-frames ()))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((new-frames ()))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((new-frames ()))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((new-frames ()))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((new-frames ()))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((new-frames ()))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((new-frames ()))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((new-frames ()))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((new-frames ()))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((new-frames ()))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((new-frames ()))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((new-frames ()))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((new-frames ()))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((new-frames ()))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((new-frames ()))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((new-frames ()))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((new-frames ()))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((new-frames ()))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((new-frames ()))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((new-frames ()))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((new-frames ()))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((new-frames ()))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 r12)
        (set! r12 (+ r12 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((new-frames ()))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ()))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.540 tmp.299)
        (set! tmp.300 r12)
        (set! r12 (+ r12 tmp.540))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((new-frames ()))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((new-frames ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((new-frames ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((new-frames ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((new-frames ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((new-frames ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((new-frames ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((new-frames ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((new-frames ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((new-frames ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((new-frames ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((new-frames ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((new-frames ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((new-frames ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((new-frames ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((new-frames ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((new-frames ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((new-frames ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((new-frames ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((new-frames ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((new-frames ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((new-frames ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((new-frames ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((new-frames ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((new-frames ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((new-frames ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((new-frames ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((new-frames ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((new-frames ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55))


(parameterize ([current-pass-list
                  (list
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.main.105
      ((new-frames ()))
      (begin
        (set! ra.356 r15)
        (set! tmp.323 (alloc 16))
        (set! tmp.357 (+ tmp.323 2))
        (set! tmp.169 tmp.357)
        (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
        (mset! tmp.169 6 16)
        (set! unsafe-vector-ref.3 tmp.169)
        (set! tmp.324 (alloc 16))
        (set! tmp.358 (+ tmp.324 2))
        (set! tmp.170 tmp.358)
        (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
        (mset! tmp.170 6 24)
        (set! unsafe-vector-set!.2 tmp.170)
        (set! tmp.325 (alloc 24))
        (set! tmp.359 (+ tmp.325 2))
        (set! tmp.171 tmp.359)
        (mset! tmp.171 -2 L.vector-init-loop.105.3)
        (mset! tmp.171 6 24)
        (set! vector-init-loop.105 tmp.171)
        (set! tmp.326 (alloc 24))
        (set! tmp.360 (+ tmp.326 2))
        (set! tmp.172 tmp.360)
        (mset! tmp.172 -2 L.make-init-vector.1.4)
        (mset! tmp.172 6 8)
        (set! make-init-vector.1 tmp.172)
        (set! tmp.327 (alloc 16))
        (set! tmp.361 (+ tmp.327 2))
        (set! tmp.173 tmp.361)
        (mset! tmp.173 -2 L.eq?.102.5)
        (mset! tmp.173 6 16)
        (set! eq?.102 tmp.173)
        (set! tmp.328 (alloc 16))
        (set! tmp.362 (+ tmp.328 2))
        (set! tmp.174 tmp.362)
        (mset! tmp.174 -2 L.cons.101.6)
        (mset! tmp.174 6 16)
        (set! cons.101 tmp.174)
        (set! tmp.329 (alloc 16))
        (set! tmp.363 (+ tmp.329 2))
        (set! tmp.175 tmp.363)
        (mset! tmp.175 -2 L.not.100.7)
        (mset! tmp.175 6 8)
        (set! not.100 tmp.175)
        (set! tmp.330 (alloc 16))
        (set! tmp.364 (+ tmp.330 2))
        (set! tmp.176 tmp.364)
        (mset! tmp.176 -2 L.vector?.99.8)
        (mset! tmp.176 6 8)
        (set! vector?.99 tmp.176)
        (set! tmp.331 (alloc 16))
        (set! tmp.365 (+ tmp.331 2))
        (set! tmp.177 tmp.365)
        (mset! tmp.177 -2 L.procedure?.98.9)
        (mset! tmp.177 6 8)
        (set! procedure?.98 tmp.177)
        (set! tmp.332 (alloc 16))
        (set! tmp.366 (+ tmp.332 2))
        (set! tmp.178 tmp.366)
        (mset! tmp.178 -2 L.pair?.97.10)
        (mset! tmp.178 6 8)
        (set! pair?.97 tmp.178)
        (set! tmp.333 (alloc 16))
        (set! tmp.367 (+ tmp.333 2))
        (set! tmp.179 tmp.367)
        (mset! tmp.179 -2 L.error?.96.11)
        (mset! tmp.179 6 8)
        (set! error?.96 tmp.179)
        (set! tmp.334 (alloc 16))
        (set! tmp.368 (+ tmp.334 2))
        (set! tmp.180 tmp.368)
        (mset! tmp.180 -2 L.ascii-char?.95.12)
        (mset! tmp.180 6 8)
        (set! ascii-char?.95 tmp.180)
        (set! tmp.335 (alloc 16))
        (set! tmp.369 (+ tmp.335 2))
        (set! tmp.181 tmp.369)
        (mset! tmp.181 -2 L.void?.94.13)
        (mset! tmp.181 6 8)
        (set! void?.94 tmp.181)
        (set! tmp.336 (alloc 16))
        (set! tmp.370 (+ tmp.336 2))
        (set! tmp.182 tmp.370)
        (mset! tmp.182 -2 L.empty?.93.14)
        (mset! tmp.182 6 8)
        (set! empty?.93 tmp.182)
        (set! tmp.337 (alloc 16))
        (set! tmp.371 (+ tmp.337 2))
        (set! tmp.183 tmp.371)
        (mset! tmp.183 -2 L.boolean?.92.15)
        (mset! tmp.183 6 8)
        (set! boolean?.92 tmp.183)
        (set! tmp.338 (alloc 16))
        (set! tmp.372 (+ tmp.338 2))
        (set! tmp.184 tmp.372)
        (mset! tmp.184 -2 L.fixnum?.91.16)
        (mset! tmp.184 6 8)
        (set! fixnum?.91 tmp.184)
        (set! tmp.339 (alloc 16))
        (set! tmp.373 (+ tmp.339 2))
        (set! tmp.185 tmp.373)
        (mset! tmp.185 -2 L.procedure-arity.90.17)
        (mset! tmp.185 6 8)
        (set! procedure-arity.90 tmp.185)
        (set! tmp.340 (alloc 16))
        (set! tmp.374 (+ tmp.340 2))
        (set! tmp.186 tmp.374)
        (mset! tmp.186 -2 L.cdr.89.18)
        (mset! tmp.186 6 8)
        (set! cdr.89 tmp.186)
        (set! tmp.341 (alloc 16))
        (set! tmp.375 (+ tmp.341 2))
        (set! tmp.187 tmp.375)
        (mset! tmp.187 -2 L.car.88.19)
        (mset! tmp.187 6 8)
        (set! car.88 tmp.187)
        (set! tmp.342 (alloc 24))
        (set! tmp.376 (+ tmp.342 2))
        (set! tmp.188 tmp.376)
        (mset! tmp.188 -2 L.vector-ref.87.20)
        (mset! tmp.188 6 16)
        (set! vector-ref.87 tmp.188)
        (set! tmp.343 (alloc 24))
        (set! tmp.377 (+ tmp.343 2))
        (set! tmp.189 tmp.377)
        (mset! tmp.189 -2 L.vector-set!.86.21)
        (mset! tmp.189 6 24)
        (set! vector-set!.86 tmp.189)
        (set! tmp.344 (alloc 16))
        (set! tmp.378 (+ tmp.344 2))
        (set! tmp.190 tmp.378)
        (mset! tmp.190 -2 L.vector-length.85.22)
        (mset! tmp.190 6 8)
        (set! vector-length.85 tmp.190)
        (set! tmp.345 (alloc 24))
        (set! tmp.379 (+ tmp.345 2))
        (set! tmp.191 tmp.379)
        (mset! tmp.191 -2 L.make-vector.84.23)
        (mset! tmp.191 6 8)
        (set! make-vector.84 tmp.191)
        (set! tmp.346 (alloc 16))
        (set! tmp.380 (+ tmp.346 2))
        (set! tmp.192 tmp.380)
        (mset! tmp.192 -2 L.>=.83.24)
        (mset! tmp.192 6 16)
        (set! >=.83 tmp.192)
        (set! tmp.347 (alloc 16))
        (set! tmp.381 (+ tmp.347 2))
        (set! tmp.193 tmp.381)
        (mset! tmp.193 -2 L.>.82.25)
        (mset! tmp.193 6 16)
        (set! >.82 tmp.193)
        (set! tmp.348 (alloc 16))
        (set! tmp.382 (+ tmp.348 2))
        (set! tmp.194 tmp.382)
        (mset! tmp.194 -2 L.<=.81.26)
        (mset! tmp.194 6 16)
        (set! <=.81 tmp.194)
        (set! tmp.349 (alloc 16))
        (set! tmp.383 (+ tmp.349 2))
        (set! tmp.195 tmp.383)
        (mset! tmp.195 -2 L.<.80.27)
        (mset! tmp.195 6 16)
        (set! <.80 tmp.195)
        (set! tmp.350 (alloc 16))
        (set! tmp.384 (+ tmp.350 2))
        (set! tmp.196 tmp.384)
        (mset! tmp.196 -2 L.-.79.28)
        (mset! tmp.196 6 16)
        (set! |-.79| tmp.196)
        (set! tmp.351 (alloc 16))
        (set! tmp.385 (+ tmp.351 2))
        (set! tmp.197 tmp.385)
        (mset! tmp.197 -2 L.+.78.29)
        (mset! tmp.197 6 16)
        (set! |+.78| tmp.197)
        (set! tmp.352 (alloc 16))
        (set! tmp.386 (+ tmp.352 2))
        (set! tmp.198 tmp.386)
        (mset! tmp.198 -2 L.*.77.30)
        (mset! tmp.198 6 16)
        (set! *.77 tmp.198)
        (mset! vector-init-loop.105 14 vector-init-loop.105)
        (mset! make-init-vector.1 14 vector-init-loop.105)
        (mset! vector-ref.87 14 unsafe-vector-ref.3)
        (mset! vector-set!.86 14 unsafe-vector-set!.2)
        (mset! make-vector.84 14 make-init-vector.1)
        (set! tmp.353 (alloc 32))
        (set! tmp.387 (+ tmp.353 2))
        (set! tmp.199 tmp.387)
        (mset! tmp.199 -2 L.F.4.31)
        (mset! tmp.199 6 56)
        (set! F.4 tmp.199)
        (set! tmp.354 (alloc 24))
        (set! tmp.388 (+ tmp.354 2))
        (set! tmp.200 tmp.388)
        (mset! tmp.200 -2 L.G.5.32)
        (mset! tmp.200 6 64)
        (set! G.5 tmp.200)
        (set! tmp.355 (alloc 24))
        (set! tmp.389 (+ tmp.355 2))
        (set! tmp.201 tmp.389)
        (mset! tmp.201 -2 L.H.6.33)
        (mset! tmp.201 6 72)
        (set! H.6 tmp.201)
        (mset! F.4 14 G.5)
        (mset! F.4 22 |+.78|)
        (mset! G.5 14 H.6)
        (mset! H.6 14 |+.78|)
        (set! tmp.166 F.4)
        (set! fv1 56)
        (set! fv0 48)
        (set! r9 40)
        (set! r8 32)
        (set! rcx 24)
        (set! rdx 16)
        (set! rsi 8)
        (set! rdi F.4)
        (set! r15 ra.356)
        (jump L.F.4.31 rbp r15 fv0 fv1 r9 r8 rcx rdx rsi rdi)))
    (define L.H.6.33
      ((new-frames ()))
      (begin
        (set! ra.390 r15)
        (set! c.149 rdi)
        (set! a.23 rsi)
        (set! b.24 rdx)
        (set! c.25 rcx)
        (set! d.26 r8)
        (set! e.27 r9)
        (set! f.28 fv0)
        (set! g.29 fv1)
        (set! h.30 fv2)
        (set! j.31 fv3)
        (set! |+.78| (mref c.149 14))
        (set! tmp.158 |+.78|)
        (return-point L.rp.106
          (begin
            (set! rdx b.24)
            (set! rsi a.23)
            (set! rdi |+.78|)
            (set! r15 L.rp.106)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r1.32 rax)
        (set! tmp.159 |+.78|)
        (return-point L.rp.107
          (begin
            (set! rdx c.25)
            (set! rsi r1.32)
            (set! rdi |+.78|)
            (set! r15 L.rp.107)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r2.33 rax)
        (set! tmp.160 |+.78|)
        (return-point L.rp.108
          (begin
            (set! rdx d.26)
            (set! rsi r2.33)
            (set! rdi |+.78|)
            (set! r15 L.rp.108)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r3.34 rax)
        (set! tmp.161 |+.78|)
        (return-point L.rp.109
          (begin
            (set! rdx e.27)
            (set! rsi r3.34)
            (set! rdi |+.78|)
            (set! r15 L.rp.109)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r4.35 rax)
        (set! tmp.162 |+.78|)
        (return-point L.rp.110
          (begin
            (set! rdx f.28)
            (set! rsi r4.35)
            (set! rdi |+.78|)
            (set! r15 L.rp.110)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r5.36 rax)
        (set! tmp.163 |+.78|)
        (return-point L.rp.111
          (begin
            (set! rdx g.29)
            (set! rsi r5.36)
            (set! rdi |+.78|)
            (set! r15 L.rp.111)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r6.37 rax)
        (set! tmp.164 |+.78|)
        (return-point L.rp.112
          (begin
            (set! rdx h.30)
            (set! rsi r6.37)
            (set! rdi |+.78|)
            (set! r15 L.rp.112)
            (jump L.+.78.29 rbp r15 rdx rsi rdi)))
        (set! r7.38 rax)
        (set! tmp.165 |+.78|)
        (set! rdx j.31)
        (set! rsi r7.38)
        (set! rdi |+.78|)
        (set! r15 ra.390)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.G.5.32
      ((new-frames ()))
      (begin
        (set! ra.391 r15)
        (set! c.148 rdi)
        (set! a.15 rsi)
        (set! b.16 rdx)
        (set! c.17 rcx)
        (set! d.18 r8)
        (set! e.19 r9)
        (set! f.20 fv0)
        (set! g.21 fv1)
        (set! h.22 fv2)
        (set! H.6 (mref c.148 14))
        (set! tmp.157 H.6)
        (set! fv3 72)
        (set! fv2 h.22)
        (set! fv1 g.21)
        (set! fv0 f.20)
        (set! r9 e.19)
        (set! r8 d.18)
        (set! rcx c.17)
        (set! rdx b.16)
        (set! rsi a.15)
        (set! rdi H.6)
        (set! r15 ra.391)
        (jump L.H.6.33 rbp r15 fv0 fv1 fv2 fv3 r9 r8 rcx rdx rsi rdi)))
    (define L.F.4.31
      ((new-frames ((nfv.393 nfv.394 nfv.395))))
      (begin
        (set! ra.392 r15)
        (set! c.147 rdi)
        (set! a.7 rsi)
        (set! b.8 rdx)
        (set! c.9 rcx)
        (set! d.10 r8)
        (set! e.11 r9)
        (set! f.12 fv0)
        (set! g.13 fv1)
        (set! G.5 (mref c.147 14))
        (set! |+.78| (mref c.147 22))
        (set! tmp.155 G.5)
        (return-point L.rp.113
          (begin
            (set! nfv.395 64)
            (set! nfv.394 g.13)
            (set! nfv.393 f.12)
            (set! r9 e.11)
            (set! r8 d.10)
            (set! rcx c.9)
            (set! rdx b.8)
            (set! rsi a.7)
            (set! rdi G.5)
            (set! r15 L.rp.113)
            (jump
             L.G.5.32
             rbp
             r15
             nfv.393
             nfv.394
             nfv.395
             r9
             r8
             rcx
             rdx
             rsi
             rdi)))
        (set! r.14 rax)
        (set! tmp.156 |+.78|)
        (set! rdx 80)
        (set! rsi r.14)
        (set! rdi |+.78|)
        (set! r15 ra.392)
        (jump L.+.78.29 rbp r15 rdx rsi rdi)))
    (define L.*.77.30
      ((new-frames ()))
      (begin
        (set! ra.396 r15)
        (set! c.146 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (set! tmp.397 (bitwise-and tmp.40 7))
        (set! tmp.208 tmp.397)
        (if (eq? tmp.208 0)
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 14)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.40)
            (set! rsi tmp.39)
            (set! rdi 6)
            (set! r15 ra.396)
            (jump L.jp.37 rbp r15 rdx rsi rdi)))))
    (define L.+.78.29
      ((new-frames ()))
      (begin
        (set! ra.398 r15)
        (set! c.145 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (set! tmp.399 (bitwise-and tmp.42 7))
        (set! tmp.214 tmp.399)
        (if (eq? tmp.214 0)
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 14)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.42)
            (set! rsi tmp.41)
            (set! rdi 6)
            (set! r15 ra.398)
            (jump L.jp.41 rbp r15 rdx rsi rdi)))))
    (define L.-.79.28
      ((new-frames ()))
      (begin
        (set! ra.400 r15)
        (set! c.144 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (set! tmp.401 (bitwise-and tmp.44 7))
        (set! tmp.220 tmp.401)
        (if (eq? tmp.220 0)
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 14)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.44)
            (set! rsi tmp.43)
            (set! rdi 6)
            (set! r15 ra.400)
            (jump L.jp.45 rbp r15 rdx rsi rdi)))))
    (define L.<.80.27
      ((new-frames ()))
      (begin
        (set! ra.402 r15)
        (set! c.143 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (set! tmp.403 (bitwise-and tmp.46 7))
        (set! tmp.227 tmp.403)
        (if (eq? tmp.227 0)
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 14)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.46)
            (set! rsi tmp.45)
            (set! rdi 6)
            (set! r15 ra.402)
            (jump L.jp.50 rbp r15 rdx rsi rdi)))))
    (define L.<=.81.26
      ((new-frames ()))
      (begin
        (set! ra.404 r15)
        (set! c.142 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (set! tmp.405 (bitwise-and tmp.48 7))
        (set! tmp.234 tmp.405)
        (if (eq? tmp.234 0)
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 14)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.48)
            (set! rsi tmp.47)
            (set! rdi 6)
            (set! r15 ra.404)
            (jump L.jp.55 rbp r15 rdx rsi rdi)))))
    (define L.>.82.25
      ((new-frames ()))
      (begin
        (set! ra.406 r15)
        (set! c.141 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (set! tmp.407 (bitwise-and tmp.50 7))
        (set! tmp.241 tmp.407)
        (if (eq? tmp.241 0)
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 14)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.50)
            (set! rsi tmp.49)
            (set! rdi 6)
            (set! r15 ra.406)
            (jump L.jp.60 rbp r15 rdx rsi rdi)))))
    (define L.>=.83.24
      ((new-frames ()))
      (begin
        (set! ra.408 r15)
        (set! c.140 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (set! tmp.409 (bitwise-and tmp.52 7))
        (set! tmp.248 tmp.409)
        (if (eq? tmp.248 0)
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 14)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.52)
            (set! rsi tmp.51)
            (set! rdi 6)
            (set! r15 ra.408)
            (jump L.jp.65 rbp r15 rdx rsi rdi)))))
    (define L.make-vector.84.23
      ((new-frames ()))
      (begin
        (set! ra.410 r15)
        (set! c.139 rdi)
        (set! tmp.53 rsi)
        (set! make-init-vector.1 (mref c.139 14))
        (set! tmp.411 (bitwise-and tmp.53 7))
        (set! tmp.251 tmp.411)
        (if (eq? tmp.251 0)
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 14)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.53)
            (set! rsi make-init-vector.1)
            (set! rdi 6)
            (set! r15 ra.410)
            (jump L.jp.67 rbp r15 rdx rsi rdi)))))
    (define L.vector-length.85.22
      ((new-frames ()))
      (begin
        (set! ra.412 r15)
        (set! c.138 rdi)
        (set! tmp.54 rsi)
        (set! tmp.413 (bitwise-and tmp.54 7))
        (set! tmp.254 tmp.413)
        (if (eq? tmp.254 3)
          (begin
            (set! rsi tmp.54)
            (set! rdi 14)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.54)
            (set! rdi 6)
            (set! r15 ra.412)
            (jump L.jp.69 rbp r15 rsi rdi)))))
    (define L.vector-set!.86.21
      ((new-frames ()))
      (begin
        (set! ra.414 r15)
        (set! c.137 rdi)
        (set! tmp.55 rsi)
        (set! tmp.56 rdx)
        (set! tmp.57 rcx)
        (set! unsafe-vector-set!.2 (mref c.137 14))
        (set! tmp.415 (bitwise-and tmp.56 7))
        (set! tmp.260 tmp.415)
        (if (eq? tmp.260 0)
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 14)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 tmp.56)
            (set! rcx tmp.57)
            (set! rdx unsafe-vector-set!.2)
            (set! rsi tmp.55)
            (set! rdi 6)
            (set! r15 ra.414)
            (jump L.jp.73 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.vector-ref.87.20
      ((new-frames ()))
      (begin
        (set! ra.416 r15)
        (set! c.136 rdi)
        (set! tmp.58 rsi)
        (set! tmp.59 rdx)
        (set! unsafe-vector-ref.3 (mref c.136 14))
        (set! tmp.417 (bitwise-and tmp.59 7))
        (set! tmp.266 tmp.417)
        (if (eq? tmp.266 0)
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 14)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.59)
            (set! rdx unsafe-vector-ref.3)
            (set! rsi tmp.58)
            (set! rdi 6)
            (set! r15 ra.416)
            (jump L.jp.77 rbp r15 rcx rdx rsi rdi)))))
    (define L.car.88.19
      ((new-frames ()))
      (begin
        (set! ra.418 r15)
        (set! c.135 rdi)
        (set! tmp.60 rsi)
        (set! tmp.419 (bitwise-and tmp.60 7))
        (set! tmp.269 tmp.419)
        (if (eq? tmp.269 1)
          (begin
            (set! rsi tmp.60)
            (set! rdi 14)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.60)
            (set! rdi 6)
            (set! r15 ra.418)
            (jump L.jp.79 rbp r15 rsi rdi)))))
    (define L.cdr.89.18
      ((new-frames ()))
      (begin
        (set! ra.420 r15)
        (set! c.134 rdi)
        (set! tmp.61 rsi)
        (set! tmp.421 (bitwise-and tmp.61 7))
        (set! tmp.272 tmp.421)
        (if (eq? tmp.272 1)
          (begin
            (set! rsi tmp.61)
            (set! rdi 14)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.61)
            (set! rdi 6)
            (set! r15 ra.420)
            (jump L.jp.81 rbp r15 rsi rdi)))))
    (define L.procedure-arity.90.17
      ((new-frames ()))
      (begin
        (set! ra.422 r15)
        (set! c.133 rdi)
        (set! tmp.62 rsi)
        (set! tmp.423 (bitwise-and tmp.62 7))
        (set! tmp.275 tmp.423)
        (if (eq? tmp.275 2)
          (begin
            (set! rsi tmp.62)
            (set! rdi 14)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi))
          (begin
            (set! rsi tmp.62)
            (set! rdi 6)
            (set! r15 ra.422)
            (jump L.jp.83 rbp r15 rsi rdi)))))
    (define L.fixnum?.91.16
      ((new-frames ()))
      (begin
        (set! ra.424 r15)
        (set! c.132 rdi)
        (set! tmp.63 rsi)
        (set! tmp.425 (bitwise-and tmp.63 7))
        (set! tmp.277 tmp.425)
        (if (eq? tmp.277 0)
          (begin (set! rax 14) (jump ra.424 rbp rax))
          (begin (set! rax 6) (jump ra.424 rbp rax)))))
    (define L.boolean?.92.15
      ((new-frames ()))
      (begin
        (set! ra.426 r15)
        (set! c.131 rdi)
        (set! tmp.64 rsi)
        (set! tmp.427 (bitwise-and tmp.64 247))
        (set! tmp.279 tmp.427)
        (if (eq? tmp.279 6)
          (begin (set! rax 14) (jump ra.426 rbp rax))
          (begin (set! rax 6) (jump ra.426 rbp rax)))))
    (define L.empty?.93.14
      ((new-frames ()))
      (begin
        (set! ra.428 r15)
        (set! c.130 rdi)
        (set! tmp.65 rsi)
        (set! tmp.429 (bitwise-and tmp.65 255))
        (set! tmp.281 tmp.429)
        (if (eq? tmp.281 22)
          (begin (set! rax 14) (jump ra.428 rbp rax))
          (begin (set! rax 6) (jump ra.428 rbp rax)))))
    (define L.void?.94.13
      ((new-frames ()))
      (begin
        (set! ra.430 r15)
        (set! c.129 rdi)
        (set! tmp.66 rsi)
        (set! tmp.431 (bitwise-and tmp.66 255))
        (set! tmp.283 tmp.431)
        (if (eq? tmp.283 30)
          (begin (set! rax 14) (jump ra.430 rbp rax))
          (begin (set! rax 6) (jump ra.430 rbp rax)))))
    (define L.ascii-char?.95.12
      ((new-frames ()))
      (begin
        (set! ra.432 r15)
        (set! c.128 rdi)
        (set! tmp.67 rsi)
        (set! tmp.433 (bitwise-and tmp.67 255))
        (set! tmp.285 tmp.433)
        (if (eq? tmp.285 46)
          (begin (set! rax 14) (jump ra.432 rbp rax))
          (begin (set! rax 6) (jump ra.432 rbp rax)))))
    (define L.error?.96.11
      ((new-frames ()))
      (begin
        (set! ra.434 r15)
        (set! c.127 rdi)
        (set! tmp.68 rsi)
        (set! tmp.435 (bitwise-and tmp.68 255))
        (set! tmp.287 tmp.435)
        (if (eq? tmp.287 62)
          (begin (set! rax 14) (jump ra.434 rbp rax))
          (begin (set! rax 6) (jump ra.434 rbp rax)))))
    (define L.pair?.97.10
      ((new-frames ()))
      (begin
        (set! ra.436 r15)
        (set! c.126 rdi)
        (set! tmp.69 rsi)
        (set! tmp.437 (bitwise-and tmp.69 7))
        (set! tmp.289 tmp.437)
        (if (eq? tmp.289 1)
          (begin (set! rax 14) (jump ra.436 rbp rax))
          (begin (set! rax 6) (jump ra.436 rbp rax)))))
    (define L.procedure?.98.9
      ((new-frames ()))
      (begin
        (set! ra.438 r15)
        (set! c.125 rdi)
        (set! tmp.70 rsi)
        (set! tmp.439 (bitwise-and tmp.70 7))
        (set! tmp.291 tmp.439)
        (if (eq? tmp.291 2)
          (begin (set! rax 14) (jump ra.438 rbp rax))
          (begin (set! rax 6) (jump ra.438 rbp rax)))))
    (define L.vector?.99.8
      ((new-frames ()))
      (begin
        (set! ra.440 r15)
        (set! c.124 rdi)
        (set! tmp.71 rsi)
        (set! tmp.441 (bitwise-and tmp.71 7))
        (set! tmp.293 tmp.441)
        (if (eq? tmp.293 3)
          (begin (set! rax 14) (jump ra.440 rbp rax))
          (begin (set! rax 6) (jump ra.440 rbp rax)))))
    (define L.not.100.7
      ((new-frames ()))
      (begin
        (set! ra.442 r15)
        (set! c.123 rdi)
        (set! tmp.72 rsi)
        (if (neq? tmp.72 6)
          (begin (set! rax 6) (jump ra.442 rbp rax))
          (begin (set! rax 14) (jump ra.442 rbp rax)))))
    (define L.cons.101.6
      ((new-frames ()))
      (begin
        (set! ra.443 r15)
        (set! c.122 rdi)
        (set! tmp.73 rsi)
        (set! tmp.74 rdx)
        (set! tmp.295 (alloc 16))
        (set! tmp.444 (+ tmp.295 1))
        (set! tmp.167 tmp.444)
        (mset! tmp.167 -1 tmp.73)
        (mset! tmp.167 7 tmp.74)
        (set! rax tmp.167)
        (jump ra.443 rbp rax)))
    (define L.eq?.102.5
      ((new-frames ()))
      (begin
        (set! ra.445 r15)
        (set! c.121 rdi)
        (set! tmp.75 rsi)
        (set! tmp.76 rdx)
        (if (eq? tmp.75 tmp.76)
          (begin (set! rax 14) (jump ra.445 rbp rax))
          (begin (set! rax 6) (jump ra.445 rbp rax)))))
    (define L.make-init-vector.1.4
      ((new-frames ()))
      (begin
        (set! ra.446 r15)
        (set! c.120 rdi)
        (set! tmp.103 rsi)
        (set! vector-init-loop.105 (mref c.120 14))
        (set! tmp.447 (arithmetic-shift-right tmp.103 3))
        (set! tmp.297 tmp.447)
        (set! tmp.448 1)
        (set! tmp.449 (+ tmp.448 tmp.297))
        (set! tmp.298 tmp.449)
        (set! tmp.450 (* tmp.298 8))
        (set! tmp.299 tmp.450)
        (set! tmp.300 (alloc tmp.299))
        (set! tmp.451 (+ tmp.300 3))
        (set! tmp.168 tmp.451)
        (mset! tmp.168 -3 tmp.103)
        (set! tmp.104 tmp.168)
        (set! tmp.151 vector-init-loop.105)
        (set! rcx tmp.104)
        (set! rdx 0)
        (set! rsi tmp.103)
        (set! rdi vector-init-loop.105)
        (set! r15 ra.446)
        (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))
    (define L.vector-init-loop.105.3
      ((new-frames ()))
      (begin
        (set! ra.452 r15)
        (set! c.119 rdi)
        (set! len.106 rsi)
        (set! i.108 rdx)
        (set! vec.107 rcx)
        (set! vector-init-loop.105 (mref c.119 14))
        (if (eq? len.106 i.108)
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 14)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi))
          (begin
            (set! r8 vec.107)
            (set! rcx vector-init-loop.105)
            (set! rdx len.106)
            (set! rsi i.108)
            (set! rdi 6)
            (set! r15 ra.452)
            (jump L.jp.96 rbp r15 r8 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-set!.2.2
      ((new-frames ()))
      (begin
        (set! ra.453 r15)
        (set! c.118 rdi)
        (set! tmp.114 rsi)
        (set! tmp.115 rdx)
        (set! tmp.116 rcx)
        (set! tmp.314 (mref tmp.114 -3))
        (if (< tmp.115 tmp.314)
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 14)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi))
          (begin
            (set! rcx tmp.114)
            (set! rdx tmp.116)
            (set! rsi tmp.115)
            (set! rdi 6)
            (set! r15 ra.453)
            (jump L.jp.100 rbp r15 rcx rdx rsi rdi)))))
    (define L.unsafe-vector-ref.3.1
      ((new-frames ()))
      (begin
        (set! ra.454 r15)
        (set! c.117 rdi)
        (set! tmp.111 rsi)
        (set! tmp.112 rdx)
        (set! tmp.322 (mref tmp.111 -3))
        (if (< tmp.112 tmp.322)
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 14)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi))
          (begin
            (set! rdx tmp.111)
            (set! rsi tmp.112)
            (set! rdi 6)
            (set! r15 ra.454)
            (jump L.jp.104 rbp r15 rdx rsi rdi)))))
    (define L.jp.104
      ((new-frames ()))
      (begin
        (set! ra.455 r15)
        (set! tmp.316 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 14)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi))
            (begin
              (set! rdx tmp.111)
              (set! rsi tmp.112)
              (set! rdi 6)
              (set! r15 ra.455)
              (jump L.jp.103 rbp r15 rdx rsi rdi)))
          (begin (set! rax 2622) (jump ra.455 rbp rax)))))
    (define L.jp.103
      ((new-frames ()))
      (begin
        (set! ra.456 r15)
        (set! tmp.318 rdi)
        (set! tmp.112 rsi)
        (set! tmp.111 rdx)
        (if (neq? tmp.318 6)
          (begin
            (set! tmp.457 (arithmetic-shift-right tmp.112 3))
            (set! tmp.319 tmp.457)
            (set! tmp.458 (* tmp.319 8))
            (set! tmp.320 tmp.458)
            (set! tmp.459 (+ tmp.320 5))
            (set! tmp.321 tmp.459)
            (set! rax (mref tmp.111 tmp.321))
            (jump ra.456 rbp rax))
          (begin (set! rax 2622) (jump ra.456 rbp rax)))))
    (define L.jp.100
      ((new-frames ()))
      (begin
        (set! ra.460 r15)
        (set! tmp.308 rdi)
        (set! tmp.115 rsi)
        (set! tmp.116 rdx)
        (set! tmp.114 rcx)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 14)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi))
            (begin
              (set! rcx tmp.116)
              (set! rdx tmp.114)
              (set! rsi tmp.115)
              (set! rdi 6)
              (set! r15 ra.460)
              (jump L.jp.99 rbp r15 rcx rdx rsi rdi)))
          (begin (set! rax 2366) (jump ra.460 rbp rax)))))
    (define L.jp.99
      ((new-frames ()))
      (begin
        (set! ra.461 r15)
        (set! tmp.310 rdi)
        (set! tmp.115 rsi)
        (set! tmp.114 rdx)
        (set! tmp.116 rcx)
        (if (neq? tmp.310 6)
          (begin
            (set! tmp.462 (arithmetic-shift-right tmp.115 3))
            (set! tmp.311 tmp.462)
            (set! tmp.463 (* tmp.311 8))
            (set! tmp.312 tmp.463)
            (set! tmp.464 (+ tmp.312 5))
            (set! tmp.313 tmp.464)
            (mset! tmp.114 tmp.313 tmp.116)
            (set! rax 30)
            (jump ra.461 rbp rax))
          (begin (set! rax 2366) (jump ra.461 rbp rax)))))
    (define L.jp.96
      ((new-frames ()))
      (begin
        (set! ra.465 r15)
        (set! tmp.302 rdi)
        (set! i.108 rsi)
        (set! len.106 rdx)
        (set! vector-init-loop.105 rcx)
        (set! vec.107 r8)
        (if (neq? tmp.302 6)
          (begin (set! rax vec.107) (jump ra.465 rbp rax))
          (begin
            (set! tmp.466 (arithmetic-shift-right i.108 3))
            (set! tmp.303 tmp.466)
            (set! tmp.467 (* tmp.303 8))
            (set! tmp.304 tmp.467)
            (set! tmp.468 (+ tmp.304 5))
            (set! tmp.305 tmp.468)
            (mset! vec.107 tmp.305 0)
            (set! tmp.150 vector-init-loop.105)
            (set! tmp.469 (+ i.108 8))
            (set! tmp.306 tmp.469)
            (set! rcx vec.107)
            (set! rdx tmp.306)
            (set! rsi len.106)
            (set! rdi vector-init-loop.105)
            (set! r15 ra.465)
            (jump L.vector-init-loop.105.3 rbp r15 rcx rdx rsi rdi)))))
    (define L.jp.83
      ((new-frames ()))
      (begin
        (set! ra.470 r15)
        (set! tmp.274 rdi)
        (set! tmp.62 rsi)
        (if (neq? tmp.274 6)
          (begin (set! rax (mref tmp.62 6)) (jump ra.470 rbp rax))
          (begin (set! rax 3390) (jump ra.470 rbp rax)))))
    (define L.jp.81
      ((new-frames ()))
      (begin
        (set! ra.471 r15)
        (set! tmp.271 rdi)
        (set! tmp.61 rsi)
        (if (neq? tmp.271 6)
          (begin (set! rax (mref tmp.61 7)) (jump ra.471 rbp rax))
          (begin (set! rax 3134) (jump ra.471 rbp rax)))))
    (define L.jp.79
      ((new-frames ()))
      (begin
        (set! ra.472 r15)
        (set! tmp.268 rdi)
        (set! tmp.60 rsi)
        (if (neq? tmp.268 6)
          (begin (set! rax (mref tmp.60 -1)) (jump ra.472 rbp rax))
          (begin (set! rax 2878) (jump ra.472 rbp rax)))))
    (define L.jp.77
      ((new-frames ()))
      (begin
        (set! ra.473 r15)
        (set! tmp.262 rdi)
        (set! tmp.58 rsi)
        (set! unsafe-vector-ref.3 rdx)
        (set! tmp.59 rcx)
        (if (neq? tmp.262 6)
          (begin
            (set! tmp.474 (bitwise-and tmp.58 7))
            (set! tmp.265 tmp.474)
            (if (eq? tmp.265 3)
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 14)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))
              (begin
                (set! rcx tmp.58)
                (set! rdx tmp.59)
                (set! rsi unsafe-vector-ref.3)
                (set! rdi 6)
                (set! r15 ra.473)
                (jump L.jp.76 rbp r15 rcx rdx rsi rdi))))
          (begin (set! rax 2622) (jump ra.473 rbp rax)))))
    (define L.jp.76
      ((new-frames ()))
      (begin
        (set! ra.475 r15)
        (set! tmp.264 rdi)
        (set! unsafe-vector-ref.3 rsi)
        (set! tmp.59 rdx)
        (set! tmp.58 rcx)
        (if (neq? tmp.264 6)
          (begin
            (set! tmp.152 unsafe-vector-ref.3)
            (set! rdx tmp.59)
            (set! rsi tmp.58)
            (set! rdi unsafe-vector-ref.3)
            (set! r15 ra.475)
            (jump L.unsafe-vector-ref.3.1 rbp r15 rdx rsi rdi))
          (begin (set! rax 2622) (jump ra.475 rbp rax)))))
    (define L.jp.73
      ((new-frames ()))
      (begin
        (set! ra.476 r15)
        (set! tmp.256 rdi)
        (set! tmp.55 rsi)
        (set! unsafe-vector-set!.2 rdx)
        (set! tmp.57 rcx)
        (set! tmp.56 r8)
        (if (neq? tmp.256 6)
          (begin
            (set! tmp.477 (bitwise-and tmp.55 7))
            (set! tmp.259 tmp.477)
            (if (eq? tmp.259 3)
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 14)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))
              (begin
                (set! r8 tmp.55)
                (set! rcx tmp.56)
                (set! rdx tmp.57)
                (set! rsi unsafe-vector-set!.2)
                (set! rdi 6)
                (set! r15 ra.476)
                (jump L.jp.72 rbp r15 r8 rcx rdx rsi rdi))))
          (begin (set! rax 2366) (jump ra.476 rbp rax)))))
    (define L.jp.72
      ((new-frames ()))
      (begin
        (set! ra.478 r15)
        (set! tmp.258 rdi)
        (set! unsafe-vector-set!.2 rsi)
        (set! tmp.57 rdx)
        (set! tmp.56 rcx)
        (set! tmp.55 r8)
        (if (neq? tmp.258 6)
          (begin
            (set! tmp.153 unsafe-vector-set!.2)
            (set! rcx tmp.57)
            (set! rdx tmp.56)
            (set! rsi tmp.55)
            (set! rdi unsafe-vector-set!.2)
            (set! r15 ra.478)
            (jump L.unsafe-vector-set!.2.2 rbp r15 rcx rdx rsi rdi))
          (begin (set! rax 2366) (jump ra.478 rbp rax)))))
    (define L.jp.69
      ((new-frames ()))
      (begin
        (set! ra.479 r15)
        (set! tmp.253 rdi)
        (set! tmp.54 rsi)
        (if (neq? tmp.253 6)
          (begin (set! rax (mref tmp.54 -3)) (jump ra.479 rbp rax))
          (begin (set! rax 2110) (jump ra.479 rbp rax)))))
    (define L.jp.67
      ((new-frames ()))
      (begin
        (set! ra.480 r15)
        (set! tmp.250 rdi)
        (set! make-init-vector.1 rsi)
        (set! tmp.53 rdx)
        (if (neq? tmp.250 6)
          (begin
            (set! tmp.154 make-init-vector.1)
            (set! rsi tmp.53)
            (set! rdi make-init-vector.1)
            (set! r15 ra.480)
            (jump L.make-init-vector.1.4 rbp r15 rsi rdi))
          (begin (set! rax 1854) (jump ra.480 rbp rax)))))
    (define L.jp.65
      ((new-frames ()))
      (begin
        (set! ra.481 r15)
        (set! tmp.243 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.243 6)
          (begin
            (set! tmp.482 (bitwise-and tmp.51 7))
            (set! tmp.247 tmp.482)
            (if (eq? tmp.247 0)
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 14)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.52)
                (set! rsi tmp.51)
                (set! rdi 6)
                (set! r15 ra.481)
                (jump L.jp.64 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1598) (jump ra.481 rbp rax)))))
    (define L.jp.64
      ((new-frames ()))
      (begin
        (set! ra.483 r15)
        (set! tmp.245 rdi)
        (set! tmp.51 rsi)
        (set! tmp.52 rdx)
        (if (neq? tmp.245 6)
          (if (>= tmp.51 tmp.52)
            (begin (set! rax 14) (jump ra.483 rbp rax))
            (begin (set! rax 6) (jump ra.483 rbp rax)))
          (begin (set! rax 1598) (jump ra.483 rbp rax)))))
    (define L.jp.60
      ((new-frames ()))
      (begin
        (set! ra.484 r15)
        (set! tmp.236 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.236 6)
          (begin
            (set! tmp.485 (bitwise-and tmp.49 7))
            (set! tmp.240 tmp.485)
            (if (eq? tmp.240 0)
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 14)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.50)
                (set! rsi tmp.49)
                (set! rdi 6)
                (set! r15 ra.484)
                (jump L.jp.59 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1342) (jump ra.484 rbp rax)))))
    (define L.jp.59
      ((new-frames ()))
      (begin
        (set! ra.486 r15)
        (set! tmp.238 rdi)
        (set! tmp.49 rsi)
        (set! tmp.50 rdx)
        (if (neq? tmp.238 6)
          (if (> tmp.49 tmp.50)
            (begin (set! rax 14) (jump ra.486 rbp rax))
            (begin (set! rax 6) (jump ra.486 rbp rax)))
          (begin (set! rax 1342) (jump ra.486 rbp rax)))))
    (define L.jp.55
      ((new-frames ()))
      (begin
        (set! ra.487 r15)
        (set! tmp.229 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.229 6)
          (begin
            (set! tmp.488 (bitwise-and tmp.47 7))
            (set! tmp.233 tmp.488)
            (if (eq? tmp.233 0)
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 14)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.48)
                (set! rsi tmp.47)
                (set! rdi 6)
                (set! r15 ra.487)
                (jump L.jp.54 rbp r15 rdx rsi rdi))))
          (begin (set! rax 1086) (jump ra.487 rbp rax)))))
    (define L.jp.54
      ((new-frames ()))
      (begin
        (set! ra.489 r15)
        (set! tmp.231 rdi)
        (set! tmp.47 rsi)
        (set! tmp.48 rdx)
        (if (neq? tmp.231 6)
          (if (<= tmp.47 tmp.48)
            (begin (set! rax 14) (jump ra.489 rbp rax))
            (begin (set! rax 6) (jump ra.489 rbp rax)))
          (begin (set! rax 1086) (jump ra.489 rbp rax)))))
    (define L.jp.50
      ((new-frames ()))
      (begin
        (set! ra.490 r15)
        (set! tmp.222 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.222 6)
          (begin
            (set! tmp.491 (bitwise-and tmp.45 7))
            (set! tmp.226 tmp.491)
            (if (eq? tmp.226 0)
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 14)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.46)
                (set! rsi tmp.45)
                (set! rdi 6)
                (set! r15 ra.490)
                (jump L.jp.49 rbp r15 rdx rsi rdi))))
          (begin (set! rax 830) (jump ra.490 rbp rax)))))
    (define L.jp.49
      ((new-frames ()))
      (begin
        (set! ra.492 r15)
        (set! tmp.224 rdi)
        (set! tmp.45 rsi)
        (set! tmp.46 rdx)
        (if (neq? tmp.224 6)
          (if (< tmp.45 tmp.46)
            (begin (set! rax 14) (jump ra.492 rbp rax))
            (begin (set! rax 6) (jump ra.492 rbp rax)))
          (begin (set! rax 830) (jump ra.492 rbp rax)))))
    (define L.jp.45
      ((new-frames ()))
      (begin
        (set! ra.493 r15)
        (set! tmp.216 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.216 6)
          (begin
            (set! tmp.494 (bitwise-and tmp.43 7))
            (set! tmp.219 tmp.494)
            (if (eq? tmp.219 0)
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 14)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.44)
                (set! rsi tmp.43)
                (set! rdi 6)
                (set! r15 ra.493)
                (jump L.jp.44 rbp r15 rdx rsi rdi))))
          (begin (set! rax 574) (jump ra.493 rbp rax)))))
    (define L.jp.44
      ((new-frames ()))
      (begin
        (set! ra.495 r15)
        (set! tmp.218 rdi)
        (set! tmp.43 rsi)
        (set! tmp.44 rdx)
        (if (neq? tmp.218 6)
          (begin
            (set! tmp.496 (- tmp.43 tmp.44))
            (set! rax tmp.496)
            (jump ra.495 rbp rax))
          (begin (set! rax 574) (jump ra.495 rbp rax)))))
    (define L.jp.41
      ((new-frames ()))
      (begin
        (set! ra.497 r15)
        (set! tmp.210 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.210 6)
          (begin
            (set! tmp.498 (bitwise-and tmp.41 7))
            (set! tmp.213 tmp.498)
            (if (eq? tmp.213 0)
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 14)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.42)
                (set! rsi tmp.41)
                (set! rdi 6)
                (set! r15 ra.497)
                (jump L.jp.40 rbp r15 rdx rsi rdi))))
          (begin (set! rax 318) (jump ra.497 rbp rax)))))
    (define L.jp.40
      ((new-frames ()))
      (begin
        (set! ra.499 r15)
        (set! tmp.212 rdi)
        (set! tmp.41 rsi)
        (set! tmp.42 rdx)
        (if (neq? tmp.212 6)
          (begin
            (set! tmp.500 (+ tmp.41 tmp.42))
            (set! rax tmp.500)
            (jump ra.499 rbp rax))
          (begin (set! rax 318) (jump ra.499 rbp rax)))))
    (define L.jp.37
      ((new-frames ()))
      (begin
        (set! ra.501 r15)
        (set! tmp.203 rdi)
        (set! tmp.39 rsi)
        (set! tmp.40 rdx)
        (if (neq? tmp.203 6)
          (begin
            (set! tmp.502 (bitwise-and tmp.39 7))
            (set! tmp.207 tmp.502)
            (if (eq? tmp.207 0)
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 14)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))
              (begin
                (set! rdx tmp.39)
                (set! rsi tmp.40)
                (set! rdi 6)
                (set! r15 ra.501)
                (jump L.jp.36 rbp r15 rdx rsi rdi))))
          (begin (set! rax 62) (jump ra.501 rbp rax)))))
    (define L.jp.36
      ((new-frames ()))
      (begin
        (set! ra.503 r15)
        (set! tmp.205 rdi)
        (set! tmp.40 rsi)
        (set! tmp.39 rdx)
        (if (neq? tmp.205 6)
          (begin
            (set! tmp.504 (arithmetic-shift-right tmp.40 3))
            (set! tmp.206 tmp.504)
            (set! tmp.505 (* tmp.39 tmp.206))
            (set! rax tmp.505)
            (jump ra.503 rbp rax))
          (begin (set! rax 62) (jump ra.503 rbp rax))))))
     ) 55))


(parameterize ([current-pass-list
                  (list
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.H.6.33
      (lambda (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((|+.78| (mref c.149 14)))
          (let ((tmp.158 |+.78|))
            (let ((r1.32 (apply L.+.78.29 |+.78| a.23 b.24)))
              (let ((tmp.159 |+.78|))
                (let ((r2.33 (apply L.+.78.29 |+.78| r1.32 c.25)))
                  (let ((tmp.160 |+.78|))
                    (let ((r3.34 (apply L.+.78.29 |+.78| r2.33 d.26)))
                      (let ((tmp.161 |+.78|))
                        (let ((r4.35 (apply L.+.78.29 |+.78| r3.34 e.27)))
                          (let ((tmp.162 |+.78|))
                            (let ((r5.36 (apply L.+.78.29 |+.78| r4.35 f.28)))
                              (let ((tmp.163 |+.78|))
                                (let ((r6.37
                                       (apply L.+.78.29 |+.78| r5.36 g.29)))
                                  (let ((tmp.164 |+.78|))
                                    (let ((r7.38
                                           (apply
                                            L.+.78.29
                                            |+.78|
                                            r6.37
                                            h.30)))
                                      (let ((tmp.165 |+.78|))
                                        (apply
                                         L.+.78.29
                                         |+.78|
                                         r7.38
                                         j.31)))))))))))))))))))
    (define L.G.5.32
      (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (let ((H.6 (mref c.148 14)))
          (let ((tmp.157 H.6))
            (apply L.H.6.33 H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 72)))))
    (define L.F.4.31
      (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((G.5 (mref c.147 14)))
          (let ((|+.78| (mref c.147 22)))
            (let ((tmp.155 G.5))
              (let ((r.14
                     (apply L.G.5.32 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 64)))
                (let ((tmp.156 |+.78|)) (apply L.+.78.29 |+.78| r.14 80))))))))
    (define L.*.77.30
      (lambda (c.146 tmp.39 tmp.40)
        (let ((tmp.208 (bitwise-and tmp.40 7)))
          (if (eq? tmp.208 0)
            (apply L.jp.37 14 tmp.39 tmp.40)
            (apply L.jp.37 6 tmp.39 tmp.40)))))
    (define L.+.78.29
      (lambda (c.145 tmp.41 tmp.42)
        (let ((tmp.214 (bitwise-and tmp.42 7)))
          (if (eq? tmp.214 0)
            (apply L.jp.41 14 tmp.41 tmp.42)
            (apply L.jp.41 6 tmp.41 tmp.42)))))
    (define L.-.79.28
      (lambda (c.144 tmp.43 tmp.44)
        (let ((tmp.220 (bitwise-and tmp.44 7)))
          (if (eq? tmp.220 0)
            (apply L.jp.45 14 tmp.43 tmp.44)
            (apply L.jp.45 6 tmp.43 tmp.44)))))
    (define L.<.80.27
      (lambda (c.143 tmp.45 tmp.46)
        (let ((tmp.227 (bitwise-and tmp.46 7)))
          (if (eq? tmp.227 0)
            (apply L.jp.50 14 tmp.45 tmp.46)
            (apply L.jp.50 6 tmp.45 tmp.46)))))
    (define L.<=.81.26
      (lambda (c.142 tmp.47 tmp.48)
        (let ((tmp.234 (bitwise-and tmp.48 7)))
          (if (eq? tmp.234 0)
            (apply L.jp.55 14 tmp.47 tmp.48)
            (apply L.jp.55 6 tmp.47 tmp.48)))))
    (define L.>.82.25
      (lambda (c.141 tmp.49 tmp.50)
        (let ((tmp.241 (bitwise-and tmp.50 7)))
          (if (eq? tmp.241 0)
            (apply L.jp.60 14 tmp.49 tmp.50)
            (apply L.jp.60 6 tmp.49 tmp.50)))))
    (define L.>=.83.24
      (lambda (c.140 tmp.51 tmp.52)
        (let ((tmp.248 (bitwise-and tmp.52 7)))
          (if (eq? tmp.248 0)
            (apply L.jp.65 14 tmp.51 tmp.52)
            (apply L.jp.65 6 tmp.51 tmp.52)))))
    (define L.make-vector.84.23
      (lambda (c.139 tmp.53)
        (let ((make-init-vector.1 (mref c.139 14)))
          (let ((tmp.251 (bitwise-and tmp.53 7)))
            (if (eq? tmp.251 0)
              (apply L.jp.67 14 make-init-vector.1 tmp.53)
              (apply L.jp.67 6 make-init-vector.1 tmp.53))))))
    (define L.vector-length.85.22
      (lambda (c.138 tmp.54)
        (let ((tmp.254 (bitwise-and tmp.54 7)))
          (if (eq? tmp.254 3)
            (apply L.jp.69 14 tmp.54)
            (apply L.jp.69 6 tmp.54)))))
    (define L.vector-set!.86.21
      (lambda (c.137 tmp.55 tmp.56 tmp.57)
        (let ((unsafe-vector-set!.2 (mref c.137 14)))
          (let ((tmp.260 (bitwise-and tmp.56 7)))
            (if (eq? tmp.260 0)
              (apply L.jp.73 14 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56)
              (apply L.jp.73 6 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56))))))
    (define L.vector-ref.87.20
      (lambda (c.136 tmp.58 tmp.59)
        (let ((unsafe-vector-ref.3 (mref c.136 14)))
          (let ((tmp.266 (bitwise-and tmp.59 7)))
            (if (eq? tmp.266 0)
              (apply L.jp.77 14 tmp.58 unsafe-vector-ref.3 tmp.59)
              (apply L.jp.77 6 tmp.58 unsafe-vector-ref.3 tmp.59))))))
    (define L.car.88.19
      (lambda (c.135 tmp.60)
        (let ((tmp.269 (bitwise-and tmp.60 7)))
          (if (eq? tmp.269 1)
            (apply L.jp.79 14 tmp.60)
            (apply L.jp.79 6 tmp.60)))))
    (define L.cdr.89.18
      (lambda (c.134 tmp.61)
        (let ((tmp.272 (bitwise-and tmp.61 7)))
          (if (eq? tmp.272 1)
            (apply L.jp.81 14 tmp.61)
            (apply L.jp.81 6 tmp.61)))))
    (define L.procedure-arity.90.17
      (lambda (c.133 tmp.62)
        (let ((tmp.275 (bitwise-and tmp.62 7)))
          (if (eq? tmp.275 2)
            (apply L.jp.83 14 tmp.62)
            (apply L.jp.83 6 tmp.62)))))
    (define L.fixnum?.91.16
      (lambda (c.132 tmp.63)
        (let ((tmp.277 (bitwise-and tmp.63 7))) (if (eq? tmp.277 0) 14 6))))
    (define L.boolean?.92.15
      (lambda (c.131 tmp.64)
        (let ((tmp.279 (bitwise-and tmp.64 247))) (if (eq? tmp.279 6) 14 6))))
    (define L.empty?.93.14
      (lambda (c.130 tmp.65)
        (let ((tmp.281 (bitwise-and tmp.65 255))) (if (eq? tmp.281 22) 14 6))))
    (define L.void?.94.13
      (lambda (c.129 tmp.66)
        (let ((tmp.283 (bitwise-and tmp.66 255))) (if (eq? tmp.283 30) 14 6))))
    (define L.ascii-char?.95.12
      (lambda (c.128 tmp.67)
        (let ((tmp.285 (bitwise-and tmp.67 255))) (if (eq? tmp.285 46) 14 6))))
    (define L.error?.96.11
      (lambda (c.127 tmp.68)
        (let ((tmp.287 (bitwise-and tmp.68 255))) (if (eq? tmp.287 62) 14 6))))
    (define L.pair?.97.10
      (lambda (c.126 tmp.69)
        (let ((tmp.289 (bitwise-and tmp.69 7))) (if (eq? tmp.289 1) 14 6))))
    (define L.procedure?.98.9
      (lambda (c.125 tmp.70)
        (let ((tmp.291 (bitwise-and tmp.70 7))) (if (eq? tmp.291 2) 14 6))))
    (define L.vector?.99.8
      (lambda (c.124 tmp.71)
        (let ((tmp.293 (bitwise-and tmp.71 7))) (if (eq? tmp.293 3) 14 6))))
    (define L.not.100.7 (lambda (c.123 tmp.72) (if (neq? tmp.72 6) 6 14)))
    (define L.cons.101.6
      (lambda (c.122 tmp.73 tmp.74)
        (let ((tmp.295 (alloc 16)))
          (let ((tmp.167 (+ tmp.295 1)))
            (begin
              (mset! tmp.167 -1 tmp.73)
              (mset! tmp.167 7 tmp.74)
              tmp.167)))))
    (define L.eq?.102.5
      (lambda (c.121 tmp.75 tmp.76) (if (eq? tmp.75 tmp.76) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.120 tmp.103)
        (let ((vector-init-loop.105 (mref c.120 14)))
          (let ((tmp.297 (arithmetic-shift-right tmp.103 3)))
            (let ((tmp.298 (+ 1 tmp.297)))
              (let ((tmp.299 (* tmp.298 8)))
                (let ((tmp.300 (alloc tmp.299)))
                  (let ((tmp.168 (+ tmp.300 3)))
                    (begin
                      (mset! tmp.168 -3 tmp.103)
                      (let ((tmp.104 tmp.168))
                        (let ((tmp.151 vector-init-loop.105))
                          (apply
                           L.vector-init-loop.105.3
                           vector-init-loop.105
                           tmp.103
                           0
                           tmp.104))))))))))))
    (define L.vector-init-loop.105.3
      (lambda (c.119 len.106 i.108 vec.107)
        (let ((vector-init-loop.105 (mref c.119 14)))
          (if (eq? len.106 i.108)
            (apply L.jp.96 14 i.108 len.106 vector-init-loop.105 vec.107)
            (apply L.jp.96 6 i.108 len.106 vector-init-loop.105 vec.107)))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.118 tmp.114 tmp.115 tmp.116)
        (let ((tmp.314 (mref tmp.114 -3)))
          (if (< tmp.115 tmp.314)
            (apply L.jp.100 14 tmp.115 tmp.116 tmp.114)
            (apply L.jp.100 6 tmp.115 tmp.116 tmp.114)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.117 tmp.111 tmp.112)
        (let ((tmp.322 (mref tmp.111 -3)))
          (if (< tmp.112 tmp.322)
            (apply L.jp.104 14 tmp.112 tmp.111)
            (apply L.jp.104 6 tmp.112 tmp.111)))))
    (define L.jp.104
      (lambda (tmp.316 tmp.112 tmp.111)
        (if (neq? tmp.316 6)
          (if (>= tmp.112 0)
            (apply L.jp.103 14 tmp.112 tmp.111)
            (apply L.jp.103 6 tmp.112 tmp.111))
          2622)))
    (define L.jp.103
      (lambda (tmp.318 tmp.112 tmp.111)
        (if (neq? tmp.318 6)
          (let ((tmp.319 (arithmetic-shift-right tmp.112 3)))
            (let ((tmp.320 (* tmp.319 8)))
              (let ((tmp.321 (+ tmp.320 5))) (mref tmp.111 tmp.321))))
          2622)))
    (define L.jp.100
      (lambda (tmp.308 tmp.115 tmp.116 tmp.114)
        (if (neq? tmp.308 6)
          (if (>= tmp.115 0)
            (apply L.jp.99 14 tmp.115 tmp.114 tmp.116)
            (apply L.jp.99 6 tmp.115 tmp.114 tmp.116))
          2366)))
    (define L.jp.99
      (lambda (tmp.310 tmp.115 tmp.114 tmp.116)
        (if (neq? tmp.310 6)
          (let ((tmp.311 (arithmetic-shift-right tmp.115 3)))
            (let ((tmp.312 (* tmp.311 8)))
              (let ((tmp.313 (+ tmp.312 5)))
                (begin (mset! tmp.114 tmp.313 tmp.116) 30))))
          2366)))
    (define L.jp.96
      (lambda (tmp.302 i.108 len.106 vector-init-loop.105 vec.107)
        (if (neq? tmp.302 6)
          vec.107
          (let ((tmp.303 (arithmetic-shift-right i.108 3)))
            (let ((tmp.304 (* tmp.303 8)))
              (let ((tmp.305 (+ tmp.304 5)))
                (begin
                  (mset! vec.107 tmp.305 0)
                  (let ((tmp.150 vector-init-loop.105))
                    (let ((tmp.306 (+ i.108 8)))
                      (apply
                       L.vector-init-loop.105.3
                       vector-init-loop.105
                       len.106
                       tmp.306
                       vec.107))))))))))
    (define L.jp.83
      (lambda (tmp.274 tmp.62) (if (neq? tmp.274 6) (mref tmp.62 6) 3390)))
    (define L.jp.81
      (lambda (tmp.271 tmp.61) (if (neq? tmp.271 6) (mref tmp.61 7) 3134)))
    (define L.jp.79
      (lambda (tmp.268 tmp.60) (if (neq? tmp.268 6) (mref tmp.60 -1) 2878)))
    (define L.jp.77
      (lambda (tmp.262 tmp.58 unsafe-vector-ref.3 tmp.59)
        (if (neq? tmp.262 6)
          (let ((tmp.265 (bitwise-and tmp.58 7)))
            (if (eq? tmp.265 3)
              (apply L.jp.76 14 unsafe-vector-ref.3 tmp.59 tmp.58)
              (apply L.jp.76 6 unsafe-vector-ref.3 tmp.59 tmp.58)))
          2622)))
    (define L.jp.76
      (lambda (tmp.264 unsafe-vector-ref.3 tmp.59 tmp.58)
        (if (neq? tmp.264 6)
          (let ((tmp.152 unsafe-vector-ref.3))
            (apply L.unsafe-vector-ref.3.1 unsafe-vector-ref.3 tmp.58 tmp.59))
          2622)))
    (define L.jp.73
      (lambda (tmp.256 tmp.55 unsafe-vector-set!.2 tmp.57 tmp.56)
        (if (neq? tmp.256 6)
          (let ((tmp.259 (bitwise-and tmp.55 7)))
            (if (eq? tmp.259 3)
              (apply L.jp.72 14 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55)
              (apply L.jp.72 6 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55)))
          2366)))
    (define L.jp.72
      (lambda (tmp.258 unsafe-vector-set!.2 tmp.57 tmp.56 tmp.55)
        (if (neq? tmp.258 6)
          (let ((tmp.153 unsafe-vector-set!.2))
            (apply
             L.unsafe-vector-set!.2.2
             unsafe-vector-set!.2
             tmp.55
             tmp.56
             tmp.57))
          2366)))
    (define L.jp.69
      (lambda (tmp.253 tmp.54) (if (neq? tmp.253 6) (mref tmp.54 -3) 2110)))
    (define L.jp.67
      (lambda (tmp.250 make-init-vector.1 tmp.53)
        (if (neq? tmp.250 6)
          (let ((tmp.154 make-init-vector.1))
            (apply L.make-init-vector.1.4 make-init-vector.1 tmp.53))
          1854)))
    (define L.jp.65
      (lambda (tmp.243 tmp.51 tmp.52)
        (if (neq? tmp.243 6)
          (let ((tmp.247 (bitwise-and tmp.51 7)))
            (if (eq? tmp.247 0)
              (apply L.jp.64 14 tmp.51 tmp.52)
              (apply L.jp.64 6 tmp.51 tmp.52)))
          1598)))
    (define L.jp.64
      (lambda (tmp.245 tmp.51 tmp.52)
        (if (neq? tmp.245 6) (if (>= tmp.51 tmp.52) 14 6) 1598)))
    (define L.jp.60
      (lambda (tmp.236 tmp.49 tmp.50)
        (if (neq? tmp.236 6)
          (let ((tmp.240 (bitwise-and tmp.49 7)))
            (if (eq? tmp.240 0)
              (apply L.jp.59 14 tmp.49 tmp.50)
              (apply L.jp.59 6 tmp.49 tmp.50)))
          1342)))
    (define L.jp.59
      (lambda (tmp.238 tmp.49 tmp.50)
        (if (neq? tmp.238 6) (if (> tmp.49 tmp.50) 14 6) 1342)))
    (define L.jp.55
      (lambda (tmp.229 tmp.47 tmp.48)
        (if (neq? tmp.229 6)
          (let ((tmp.233 (bitwise-and tmp.47 7)))
            (if (eq? tmp.233 0)
              (apply L.jp.54 14 tmp.47 tmp.48)
              (apply L.jp.54 6 tmp.47 tmp.48)))
          1086)))
    (define L.jp.54
      (lambda (tmp.231 tmp.47 tmp.48)
        (if (neq? tmp.231 6) (if (<= tmp.47 tmp.48) 14 6) 1086)))
    (define L.jp.50
      (lambda (tmp.222 tmp.45 tmp.46)
        (if (neq? tmp.222 6)
          (let ((tmp.226 (bitwise-and tmp.45 7)))
            (if (eq? tmp.226 0)
              (apply L.jp.49 14 tmp.45 tmp.46)
              (apply L.jp.49 6 tmp.45 tmp.46)))
          830)))
    (define L.jp.49
      (lambda (tmp.224 tmp.45 tmp.46)
        (if (neq? tmp.224 6) (if (< tmp.45 tmp.46) 14 6) 830)))
    (define L.jp.45
      (lambda (tmp.216 tmp.43 tmp.44)
        (if (neq? tmp.216 6)
          (let ((tmp.219 (bitwise-and tmp.43 7)))
            (if (eq? tmp.219 0)
              (apply L.jp.44 14 tmp.43 tmp.44)
              (apply L.jp.44 6 tmp.43 tmp.44)))
          574)))
    (define L.jp.44
      (lambda (tmp.218 tmp.43 tmp.44)
        (if (neq? tmp.218 6) (- tmp.43 tmp.44) 574)))
    (define L.jp.41
      (lambda (tmp.210 tmp.41 tmp.42)
        (if (neq? tmp.210 6)
          (let ((tmp.213 (bitwise-and tmp.41 7)))
            (if (eq? tmp.213 0)
              (apply L.jp.40 14 tmp.41 tmp.42)
              (apply L.jp.40 6 tmp.41 tmp.42)))
          318)))
    (define L.jp.40
      (lambda (tmp.212 tmp.41 tmp.42)
        (if (neq? tmp.212 6) (+ tmp.41 tmp.42) 318)))
    (define L.jp.37
      (lambda (tmp.203 tmp.39 tmp.40)
        (if (neq? tmp.203 6)
          (let ((tmp.207 (bitwise-and tmp.39 7)))
            (if (eq? tmp.207 0)
              (apply L.jp.36 14 tmp.40 tmp.39)
              (apply L.jp.36 6 tmp.40 tmp.39)))
          62)))
    (define L.jp.36
      (lambda (tmp.205 tmp.40 tmp.39)
        (if (neq? tmp.205 6)
          (let ((tmp.206 (arithmetic-shift-right tmp.40 3)))
            (* tmp.39 tmp.206))
          62)))
    (let ((tmp.323 (alloc 16)))
      (let ((tmp.169 (+ tmp.323 2)))
        (begin
          (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
          (mset! tmp.169 6 16)
          (let ((unsafe-vector-ref.3 tmp.169))
            (let ((tmp.324 (alloc 16)))
              (let ((tmp.170 (+ tmp.324 2)))
                (begin
                  (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
                  (mset! tmp.170 6 24)
                  (let ((unsafe-vector-set!.2 tmp.170))
                    (let ((tmp.325 (alloc 24)))
                      (let ((tmp.171 (+ tmp.325 2)))
                        (begin
                          (mset! tmp.171 -2 L.vector-init-loop.105.3)
                          (mset! tmp.171 6 24)
                          (let ((vector-init-loop.105 tmp.171))
                            (let ((tmp.326 (alloc 24)))
                              (let ((tmp.172 (+ tmp.326 2)))
                                (begin
                                  (mset! tmp.172 -2 L.make-init-vector.1.4)
                                  (mset! tmp.172 6 8)
                                  (let ((make-init-vector.1 tmp.172))
                                    (let ((tmp.327 (alloc 16)))
                                      (let ((tmp.173 (+ tmp.327 2)))
                                        (begin
                                          (mset! tmp.173 -2 L.eq?.102.5)
                                          (mset! tmp.173 6 16)
                                          (let ((eq?.102 tmp.173))
                                            (let ((tmp.328 (alloc 16)))
                                              (let ((tmp.174 (+ tmp.328 2)))
                                                (begin
                                                  (mset!
                                                   tmp.174
                                                   -2
                                                   L.cons.101.6)
                                                  (mset! tmp.174 6 16)
                                                  (let ((cons.101 tmp.174))
                                                    (let ((tmp.329 (alloc 16)))
                                                      (let ((tmp.175
                                                             (+ tmp.329 2)))
                                                        (begin
                                                          (mset!
                                                           tmp.175
                                                           -2
                                                           L.not.100.7)
                                                          (mset! tmp.175 6 8)
                                                          (let ((not.100
                                                                 tmp.175))
                                                            (let ((tmp.330
                                                                   (alloc 16)))
                                                              (let ((tmp.176
                                                                     (+
                                                                      tmp.330
                                                                      2)))
                                                                (begin
                                                                  (mset!
                                                                   tmp.176
                                                                   -2
                                                                   L.vector?.99.8)
                                                                  (mset!
                                                                   tmp.176
                                                                   6
                                                                   8)
                                                                  (let ((vector?.99
                                                                         tmp.176))
                                                                    (let ((tmp.331
                                                                           (alloc
                                                                            16)))
                                                                      (let ((tmp.177
                                                                             (+
                                                                              tmp.331
                                                                              2)))
                                                                        (begin
                                                                          (mset!
                                                                           tmp.177
                                                                           -2
                                                                           L.procedure?.98.9)
                                                                          (mset!
                                                                           tmp.177
                                                                           6
                                                                           8)
                                                                          (let ((procedure?.98
                                                                                 tmp.177))
                                                                            (let ((tmp.332
                                                                                   (alloc
                                                                                    16)))
                                                                              (let ((tmp.178
                                                                                     (+
                                                                                      tmp.332
                                                                                      2)))
                                                                                (begin
                                                                                  (mset!
                                                                                   tmp.178
                                                                                   -2
                                                                                   L.pair?.97.10)
                                                                                  (mset!
                                                                                   tmp.178
                                                                                   6
                                                                                   8)
                                                                                  (let ((pair?.97
                                                                                         tmp.178))
                                                                                    (let ((tmp.333
                                                                                           (alloc
                                                                                            16)))
                                                                                      (let ((tmp.179
                                                                                             (+
                                                                                              tmp.333
                                                                                              2)))
                                                                                        (begin
                                                                                          (mset!
                                                                                           tmp.179
                                                                                           -2
                                                                                           L.error?.96.11)
                                                                                          (mset!
                                                                                           tmp.179
                                                                                           6
                                                                                           8)
                                                                                          (let ((error?.96
                                                                                                 tmp.179))
                                                                                            (let ((tmp.334
                                                                                                   (alloc
                                                                                                    16)))
                                                                                              (let ((tmp.180
                                                                                                     (+
                                                                                                      tmp.334
                                                                                                      2)))
                                                                                                (begin
                                                                                                  (mset!
                                                                                                   tmp.180
                                                                                                   -2
                                                                                                   L.ascii-char?.95.12)
                                                                                                  (mset!
                                                                                                   tmp.180
                                                                                                   6
                                                                                                   8)
                                                                                                  (let ((ascii-char?.95
                                                                                                         tmp.180))
                                                                                                    (let ((tmp.335
                                                                                                           (alloc
                                                                                                            16)))
                                                                                                      (let ((tmp.181
                                                                                                             (+
                                                                                                              tmp.335
                                                                                                              2)))
                                                                                                        (begin
                                                                                                          (mset!
                                                                                                           tmp.181
                                                                                                           -2
                                                                                                           L.void?.94.13)
                                                                                                          (mset!
                                                                                                           tmp.181
                                                                                                           6
                                                                                                           8)
                                                                                                          (let ((void?.94
                                                                                                                 tmp.181))
                                                                                                            (let ((tmp.336
                                                                                                                   (alloc
                                                                                                                    16)))
                                                                                                              (let ((tmp.182
                                                                                                                     (+
                                                                                                                      tmp.336
                                                                                                                      2)))
                                                                                                                (begin
                                                                                                                  (mset!
                                                                                                                   tmp.182
                                                                                                                   -2
                                                                                                                   L.empty?.93.14)
                                                                                                                  (mset!
                                                                                                                   tmp.182
                                                                                                                   6
                                                                                                                   8)
                                                                                                                  (let ((empty?.93
                                                                                                                         tmp.182))
                                                                                                                    (let ((tmp.337
                                                                                                                           (alloc
                                                                                                                            16)))
                                                                                                                      (let ((tmp.183
                                                                                                                             (+
                                                                                                                              tmp.337
                                                                                                                              2)))
                                                                                                                        (begin
                                                                                                                          (mset!
                                                                                                                           tmp.183
                                                                                                                           -2
                                                                                                                           L.boolean?.92.15)
                                                                                                                          (mset!
                                                                                                                           tmp.183
                                                                                                                           6
                                                                                                                           8)
                                                                                                                          (let ((boolean?.92
                                                                                                                                 tmp.183))
                                                                                                                            (let ((tmp.338
                                                                                                                                   (alloc
                                                                                                                                    16)))
                                                                                                                              (let ((tmp.184
                                                                                                                                     (+
                                                                                                                                      tmp.338
                                                                                                                                      2)))
                                                                                                                                (begin
                                                                                                                                  (mset!
                                                                                                                                   tmp.184
                                                                                                                                   -2
                                                                                                                                   L.fixnum?.91.16)
                                                                                                                                  (mset!
                                                                                                                                   tmp.184
                                                                                                                                   6
                                                                                                                                   8)
                                                                                                                                  (let ((fixnum?.91
                                                                                                                                         tmp.184))
                                                                                                                                    (let ((tmp.339
                                                                                                                                           (alloc
                                                                                                                                            16)))
                                                                                                                                      (let ((tmp.185
                                                                                                                                             (+
                                                                                                                                              tmp.339
                                                                                                                                              2)))
                                                                                                                                        (begin
                                                                                                                                          (mset!
                                                                                                                                           tmp.185
                                                                                                                                           -2
                                                                                                                                           L.procedure-arity.90.17)
                                                                                                                                          (mset!
                                                                                                                                           tmp.185
                                                                                                                                           6
                                                                                                                                           8)
                                                                                                                                          (let ((procedure-arity.90
                                                                                                                                                 tmp.185))
                                                                                                                                            (let ((tmp.340
                                                                                                                                                   (alloc
                                                                                                                                                    16)))
                                                                                                                                              (let ((tmp.186
                                                                                                                                                     (+
                                                                                                                                                      tmp.340
                                                                                                                                                      2)))
                                                                                                                                                (begin
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.186
                                                                                                                                                   -2
                                                                                                                                                   L.cdr.89.18)
                                                                                                                                                  (mset!
                                                                                                                                                   tmp.186
                                                                                                                                                   6
                                                                                                                                                   8)
                                                                                                                                                  (let ((cdr.89
                                                                                                                                                         tmp.186))
                                                                                                                                                    (let ((tmp.341
                                                                                                                                                           (alloc
                                                                                                                                                            16)))
                                                                                                                                                      (let ((tmp.187
                                                                                                                                                             (+
                                                                                                                                                              tmp.341
                                                                                                                                                              2)))
                                                                                                                                                        (begin
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.187
                                                                                                                                                           -2
                                                                                                                                                           L.car.88.19)
                                                                                                                                                          (mset!
                                                                                                                                                           tmp.187
                                                                                                                                                           6
                                                                                                                                                           8)
                                                                                                                                                          (let ((car.88
                                                                                                                                                                 tmp.187))
                                                                                                                                                            (let ((tmp.342
                                                                                                                                                                   (alloc
                                                                                                                                                                    24)))
                                                                                                                                                              (let ((tmp.188
                                                                                                                                                                     (+
                                                                                                                                                                      tmp.342
                                                                                                                                                                      2)))
                                                                                                                                                                (begin
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.188
                                                                                                                                                                   -2
                                                                                                                                                                   L.vector-ref.87.20)
                                                                                                                                                                  (mset!
                                                                                                                                                                   tmp.188
                                                                                                                                                                   6
                                                                                                                                                                   16)
                                                                                                                                                                  (let ((vector-ref.87
                                                                                                                                                                         tmp.188))
                                                                                                                                                                    (let ((tmp.343
                                                                                                                                                                           (alloc
                                                                                                                                                                            24)))
                                                                                                                                                                      (let ((tmp.189
                                                                                                                                                                             (+
                                                                                                                                                                              tmp.343
                                                                                                                                                                              2)))
                                                                                                                                                                        (begin
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.189
                                                                                                                                                                           -2
                                                                                                                                                                           L.vector-set!.86.21)
                                                                                                                                                                          (mset!
                                                                                                                                                                           tmp.189
                                                                                                                                                                           6
                                                                                                                                                                           24)
                                                                                                                                                                          (let ((vector-set!.86
                                                                                                                                                                                 tmp.189))
                                                                                                                                                                            (let ((tmp.344
                                                                                                                                                                                   (alloc
                                                                                                                                                                                    16)))
                                                                                                                                                                              (let ((tmp.190
                                                                                                                                                                                     (+
                                                                                                                                                                                      tmp.344
                                                                                                                                                                                      2)))
                                                                                                                                                                                (begin
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.190
                                                                                                                                                                                   -2
                                                                                                                                                                                   L.vector-length.85.22)
                                                                                                                                                                                  (mset!
                                                                                                                                                                                   tmp.190
                                                                                                                                                                                   6
                                                                                                                                                                                   8)
                                                                                                                                                                                  (let ((vector-length.85
                                                                                                                                                                                         tmp.190))
                                                                                                                                                                                    (let ((tmp.345
                                                                                                                                                                                           (alloc
                                                                                                                                                                                            24)))
                                                                                                                                                                                      (let ((tmp.191
                                                                                                                                                                                             (+
                                                                                                                                                                                              tmp.345
                                                                                                                                                                                              2)))
                                                                                                                                                                                        (begin
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.191
                                                                                                                                                                                           -2
                                                                                                                                                                                           L.make-vector.84.23)
                                                                                                                                                                                          (mset!
                                                                                                                                                                                           tmp.191
                                                                                                                                                                                           6
                                                                                                                                                                                           8)
                                                                                                                                                                                          (let ((make-vector.84
                                                                                                                                                                                                 tmp.191))
                                                                                                                                                                                            (let ((tmp.346
                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                    16)))
                                                                                                                                                                                              (let ((tmp.192
                                                                                                                                                                                                     (+
                                                                                                                                                                                                      tmp.346
                                                                                                                                                                                                      2)))
                                                                                                                                                                                                (begin
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.192
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   L.>=.83.24)
                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                   tmp.192
                                                                                                                                                                                                   6
                                                                                                                                                                                                   16)
                                                                                                                                                                                                  (let ((>=.83
                                                                                                                                                                                                         tmp.192))
                                                                                                                                                                                                    (let ((tmp.347
                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                            16)))
                                                                                                                                                                                                      (let ((tmp.193
                                                                                                                                                                                                             (+
                                                                                                                                                                                                              tmp.347
                                                                                                                                                                                                              2)))
                                                                                                                                                                                                        (begin
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.193
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           L.>.82.25)
                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                           tmp.193
                                                                                                                                                                                                           6
                                                                                                                                                                                                           16)
                                                                                                                                                                                                          (let ((>.82
                                                                                                                                                                                                                 tmp.193))
                                                                                                                                                                                                            (let ((tmp.348
                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                              (let ((tmp.194
                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                      tmp.348
                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.194
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   L.<=.81.26)
                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                   tmp.194
                                                                                                                                                                                                                   6
                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                  (let ((<=.81
                                                                                                                                                                                                                         tmp.194))
                                                                                                                                                                                                                    (let ((tmp.349
                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                      (let ((tmp.195
                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                              tmp.349
                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.195
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           L.<.80.27)
                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                           tmp.195
                                                                                                                                                                                                                           6
                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                          (let ((<.80
                                                                                                                                                                                                                                 tmp.195))
                                                                                                                                                                                                                            (let ((tmp.350
                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                              (let ((tmp.196
                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                      tmp.350
                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.196
                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                   L.-.79.28)
                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                   tmp.196
                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                  (let ((|-.79|
                                                                                                                                                                                                                                         tmp.196))
                                                                                                                                                                                                                                    (let ((tmp.351
                                                                                                                                                                                                                                           (alloc
                                                                                                                                                                                                                                            16)))
                                                                                                                                                                                                                                      (let ((tmp.197
                                                                                                                                                                                                                                             (+
                                                                                                                                                                                                                                              tmp.351
                                                                                                                                                                                                                                              2)))
                                                                                                                                                                                                                                        (begin
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.197
                                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                                           L.+.78.29)
                                                                                                                                                                                                                                          (mset!
                                                                                                                                                                                                                                           tmp.197
                                                                                                                                                                                                                                           6
                                                                                                                                                                                                                                           16)
                                                                                                                                                                                                                                          (let ((|+.78|
                                                                                                                                                                                                                                                 tmp.197))
                                                                                                                                                                                                                                            (let ((tmp.352
                                                                                                                                                                                                                                                   (alloc
                                                                                                                                                                                                                                                    16)))
                                                                                                                                                                                                                                              (let ((tmp.198
                                                                                                                                                                                                                                                     (+
                                                                                                                                                                                                                                                      tmp.352
                                                                                                                                                                                                                                                      2)))
                                                                                                                                                                                                                                                (begin
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.198
                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                   L.*.77.30)
                                                                                                                                                                                                                                                  (mset!
                                                                                                                                                                                                                                                   tmp.198
                                                                                                                                                                                                                                                   6
                                                                                                                                                                                                                                                   16)
                                                                                                                                                                                                                                                  (let ((*.77
                                                                                                                                                                                                                                                         tmp.198))
                                                                                                                                                                                                                                                    (begin
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-init-loop.105
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.105)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-init-vector.1
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       vector-init-loop.105)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-ref.87
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-ref.3)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       vector-set!.86
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       unsafe-vector-set!.2)
                                                                                                                                                                                                                                                      (mset!
                                                                                                                                                                                                                                                       make-vector.84
                                                                                                                                                                                                                                                       14
                                                                                                                                                                                                                                                       make-init-vector.1)
                                                                                                                                                                                                                                                      (let ((tmp.353
                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                              32)))
                                                                                                                                                                                                                                                        (let ((tmp.199
                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                tmp.353
                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.199
                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                             L.F.4.31)
                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                             tmp.199
                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                             56)
                                                                                                                                                                                                                                                            (let ((F.4
                                                                                                                                                                                                                                                                   tmp.199))
                                                                                                                                                                                                                                                              (let ((tmp.354
                                                                                                                                                                                                                                                                     (alloc
                                                                                                                                                                                                                                                                      24)))
                                                                                                                                                                                                                                                                (let ((tmp.200
                                                                                                                                                                                                                                                                       (+
                                                                                                                                                                                                                                                                        tmp.354
                                                                                                                                                                                                                                                                        2)))
                                                                                                                                                                                                                                                                  (begin
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.200
                                                                                                                                                                                                                                                                     -2
                                                                                                                                                                                                                                                                     L.G.5.32)
                                                                                                                                                                                                                                                                    (mset!
                                                                                                                                                                                                                                                                     tmp.200
                                                                                                                                                                                                                                                                     6
                                                                                                                                                                                                                                                                     64)
                                                                                                                                                                                                                                                                    (let ((G.5
                                                                                                                                                                                                                                                                           tmp.200))
                                                                                                                                                                                                                                                                      (let ((tmp.355
                                                                                                                                                                                                                                                                             (alloc
                                                                                                                                                                                                                                                                              24)))
                                                                                                                                                                                                                                                                        (let ((tmp.201
                                                                                                                                                                                                                                                                               (+
                                                                                                                                                                                                                                                                                tmp.355
                                                                                                                                                                                                                                                                                2)))
                                                                                                                                                                                                                                                                          (begin
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.201
                                                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                                                             L.H.6.33)
                                                                                                                                                                                                                                                                            (mset!
                                                                                                                                                                                                                                                                             tmp.201
                                                                                                                                                                                                                                                                             6
                                                                                                                                                                                                                                                                             72)
                                                                                                                                                                                                                                                                            (let ((H.6
                                                                                                                                                                                                                                                                                   tmp.201))
                                                                                                                                                                                                                                                                              (begin
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 F.4
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 G.5)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 F.4
                                                                                                                                                                                                                                                                                 22
                                                                                                                                                                                                                                                                                 |+.78|)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 G.5
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 H.6)
                                                                                                                                                                                                                                                                                (mset!
                                                                                                                                                                                                                                                                                 H.6
                                                                                                                                                                                                                                                                                 14
                                                                                                                                                                                                                                                                                 |+.78|)
                                                                                                                                                                                                                                                                                (let ((tmp.166
                                                                                                                                                                                                                                                                                       F.4))
                                                                                                                                                                                                                                                                                  (apply
                                                                                                                                                                                                                                                                                   L.F.4.31
                                                                                                                                                                                                                                                                                   F.4
                                                                                                                                                                                                                                                                                   8
                                                                                                                                                                                                                                                                                   16
                                                                                                                                                                                                                                                                                   24
                                                                                                                                                                                                                                                                                   32
                                                                                                                                                                                                                                                                                   40
                                                                                                                                                                                                                                                                                   48
                                                                                                                                                                                                                                                                                   56)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

     ) 55))


  (parameterize ([current-pass-list
                  (list
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute  '(module
    (define L.H.6.33
      (lambda (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((|+.78| (mref c.149 14)))
          (let ((r1.32
                 (let ((tmp.158 |+.78|)) (apply L.+.78.29 |+.78| a.23 b.24))))
            (let ((r2.33
                   (let ((tmp.159 |+.78|))
                     (apply L.+.78.29 |+.78| r1.32 c.25))))
              (let ((r3.34
                     (let ((tmp.160 |+.78|))
                       (apply L.+.78.29 |+.78| r2.33 d.26))))
                (let ((r4.35
                       (let ((tmp.161 |+.78|))
                         (apply L.+.78.29 |+.78| r3.34 e.27))))
                  (let ((r5.36
                         (let ((tmp.162 |+.78|))
                           (apply L.+.78.29 |+.78| r4.35 f.28))))
                    (let ((r6.37
                           (let ((tmp.163 |+.78|))
                             (apply L.+.78.29 |+.78| r5.36 g.29))))
                      (let ((r7.38
                             (let ((tmp.164 |+.78|))
                               (apply L.+.78.29 |+.78| r6.37 h.30))))
                        (let ((tmp.165 |+.78|))
                          (apply L.+.78.29 |+.78| r7.38 j.31))))))))))))
    (define L.G.5.32
      (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (let ((H.6 (mref c.148 14)))
          (let ((tmp.157 H.6))
            (apply L.H.6.33 H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 72)))))
    (define L.F.4.31
      (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((G.5 (mref c.147 14)))
          (let ((|+.78| (mref c.147 22)))
            (let ((r.14
                   (let ((tmp.155 G.5))
                     (apply L.G.5.32 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 64))))
              (let ((tmp.156 |+.78|)) (apply L.+.78.29 |+.78| r.14 80)))))))
    (define L.*.77.30
      (lambda (c.146 tmp.39 tmp.40)
        (if (neq? (if (eq? (bitwise-and tmp.40 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.39 7) 0) 14 6) 6)
            (* tmp.39 (arithmetic-shift-right tmp.40 3))
            62)
          62)))
    (define L.+.78.29
      (lambda (c.145 tmp.41 tmp.42)
        (if (neq? (if (eq? (bitwise-and tmp.42 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.41 7) 0) 14 6) 6)
            (+ tmp.41 tmp.42)
            318)
          318)))
    (define L.-.79.28
      (lambda (c.144 tmp.43 tmp.44)
        (if (neq? (if (eq? (bitwise-and tmp.44 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.43 7) 0) 14 6) 6)
            (- tmp.43 tmp.44)
            574)
          574)))
    (define L.<.80.27
      (lambda (c.143 tmp.45 tmp.46)
        (if (neq? (if (eq? (bitwise-and tmp.46 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.45 7) 0) 14 6) 6)
            (if (< tmp.45 tmp.46) 14 6)
            830)
          830)))
    (define L.<=.81.26
      (lambda (c.142 tmp.47 tmp.48)
        (if (neq? (if (eq? (bitwise-and tmp.48 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.47 7) 0) 14 6) 6)
            (if (<= tmp.47 tmp.48) 14 6)
            1086)
          1086)))
    (define L.>.82.25
      (lambda (c.141 tmp.49 tmp.50)
        (if (neq? (if (eq? (bitwise-and tmp.50 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.49 7) 0) 14 6) 6)
            (if (> tmp.49 tmp.50) 14 6)
            1342)
          1342)))
    (define L.>=.83.24
      (lambda (c.140 tmp.51 tmp.52)
        (if (neq? (if (eq? (bitwise-and tmp.52 7) 0) 14 6) 6)
          (if (neq? (if (eq? (bitwise-and tmp.51 7) 0) 14 6) 6)
            (if (>= tmp.51 tmp.52) 14 6)
            1598)
          1598)))
    (define L.make-vector.84.23
      (lambda (c.139 tmp.53)
        (let ((make-init-vector.1 (mref c.139 14)))
          (if (neq? (if (eq? (bitwise-and tmp.53 7) 0) 14 6) 6)
            (let ((tmp.154 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.53))
            1854))))
    (define L.vector-length.85.22
      (lambda (c.138 tmp.54)
        (if (neq? (if (eq? (bitwise-and tmp.54 7) 3) 14 6) 6)
          (mref tmp.54 -3)
          2110)))
    (define L.vector-set!.86.21
      (lambda (c.137 tmp.55 tmp.56 tmp.57)
        (let ((unsafe-vector-set!.2 (mref c.137 14)))
          (if (neq? (if (eq? (bitwise-and tmp.56 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.55 7) 3) 14 6) 6)
              (let ((tmp.153 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.55
                 tmp.56
                 tmp.57))
              2366)
            2366))))
    (define L.vector-ref.87.20
      (lambda (c.136 tmp.58 tmp.59)
        (let ((unsafe-vector-ref.3 (mref c.136 14)))
          (if (neq? (if (eq? (bitwise-and tmp.59 7) 0) 14 6) 6)
            (if (neq? (if (eq? (bitwise-and tmp.58 7) 3) 14 6) 6)
              (let ((tmp.152 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.58
                 tmp.59))
              2622)
            2622))))
    (define L.car.88.19
      (lambda (c.135 tmp.60)
        (if (neq? (if (eq? (bitwise-and tmp.60 7) 1) 14 6) 6)
          (mref tmp.60 -1)
          2878)))
    (define L.cdr.89.18
      (lambda (c.134 tmp.61)
        (if (neq? (if (eq? (bitwise-and tmp.61 7) 1) 14 6) 6)
          (mref tmp.61 7)
          3134)))
    (define L.procedure-arity.90.17
      (lambda (c.133 tmp.62)
        (if (neq? (if (eq? (bitwise-and tmp.62 7) 2) 14 6) 6)
          (mref tmp.62 6)
          3390)))
    (define L.fixnum?.91.16
      (lambda (c.132 tmp.63) (if (eq? (bitwise-and tmp.63 7) 0) 14 6)))
    (define L.boolean?.92.15
      (lambda (c.131 tmp.64) (if (eq? (bitwise-and tmp.64 247) 6) 14 6)))
    (define L.empty?.93.14
      (lambda (c.130 tmp.65) (if (eq? (bitwise-and tmp.65 255) 22) 14 6)))
    (define L.void?.94.13
      (lambda (c.129 tmp.66) (if (eq? (bitwise-and tmp.66 255) 30) 14 6)))
    (define L.ascii-char?.95.12
      (lambda (c.128 tmp.67) (if (eq? (bitwise-and tmp.67 255) 46) 14 6)))
    (define L.error?.96.11
      (lambda (c.127 tmp.68) (if (eq? (bitwise-and tmp.68 255) 62) 14 6)))
    (define L.pair?.97.10
      (lambda (c.126 tmp.69) (if (eq? (bitwise-and tmp.69 7) 1) 14 6)))
    (define L.procedure?.98.9
      (lambda (c.125 tmp.70) (if (eq? (bitwise-and tmp.70 7) 2) 14 6)))
    (define L.vector?.99.8
      (lambda (c.124 tmp.71) (if (eq? (bitwise-and tmp.71 7) 3) 14 6)))
    (define L.not.100.7 (lambda (c.123 tmp.72) (if (neq? tmp.72 6) 6 14)))
    (define L.cons.101.6
      (lambda (c.122 tmp.73 tmp.74)
        (let ((tmp.167 (+ (alloc 16) 1)))
          (begin (mset! tmp.167 -1 tmp.73) (mset! tmp.167 7 tmp.74) tmp.167))))
    (define L.eq?.102.5
      (lambda (c.121 tmp.75 tmp.76) (if (eq? tmp.75 tmp.76) 14 6)))
    (define L.make-init-vector.1.4
      (lambda (c.120 tmp.103)
        (let ((vector-init-loop.105 (mref c.120 14)))
          (let ((tmp.104
                 (let ((tmp.168
                        (+
                         (alloc (* (+ 1 (arithmetic-shift-right tmp.103 3)) 8))
                         3)))
                   (begin (mset! tmp.168 -3 tmp.103) tmp.168))))
            (let ((tmp.151 vector-init-loop.105))
              (apply
               L.vector-init-loop.105.3
               vector-init-loop.105
               tmp.103
               0
               tmp.104))))))
    (define L.vector-init-loop.105.3
      (lambda (c.119 len.106 i.108 vec.107)
        (let ((vector-init-loop.105 (mref c.119 14)))
          (if (neq? (if (eq? len.106 i.108) 14 6) 6)
            vec.107
            (begin
              (mset! vec.107 (+ (* (arithmetic-shift-right i.108 3) 8) 5) 0)
              (let ((tmp.150 vector-init-loop.105))
                (apply
                 L.vector-init-loop.105.3
                 vector-init-loop.105
                 len.106
                 (+ i.108 8)
                 vec.107)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.118 tmp.114 tmp.115 tmp.116)
        (if (neq? (if (< tmp.115 (mref tmp.114 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.115 0) 14 6) 6)
            (begin
              (mset!
               tmp.114
               (+ (* (arithmetic-shift-right tmp.115 3) 8) 5)
               tmp.116)
              30)
            2366)
          2366)))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.117 tmp.111 tmp.112)
        (if (neq? (if (< tmp.112 (mref tmp.111 -3)) 14 6) 6)
          (if (neq? (if (>= tmp.112 0) 14 6) 6)
            (mref tmp.111 (+ (* (arithmetic-shift-right tmp.112 3) 8) 5))
            2622)
          2622)))
    (let ((unsafe-vector-ref.3
           (let ((tmp.169 (+ (alloc 16) 2)))
             (begin
               (mset! tmp.169 -2 L.unsafe-vector-ref.3.1)
               (mset! tmp.169 6 16)
               tmp.169))))
      (let ((unsafe-vector-set!.2
             (let ((tmp.170 (+ (alloc 16) 2)))
               (begin
                 (mset! tmp.170 -2 L.unsafe-vector-set!.2.2)
                 (mset! tmp.170 6 24)
                 tmp.170))))
        (let ((vector-init-loop.105
               (let ((tmp.171 (+ (alloc 24) 2)))
                 (begin
                   (mset! tmp.171 -2 L.vector-init-loop.105.3)
                   (mset! tmp.171 6 24)
                   tmp.171))))
          (let ((make-init-vector.1
                 (let ((tmp.172 (+ (alloc 24) 2)))
                   (begin
                     (mset! tmp.172 -2 L.make-init-vector.1.4)
                     (mset! tmp.172 6 8)
                     tmp.172))))
            (let ((eq?.102
                   (let ((tmp.173 (+ (alloc 16) 2)))
                     (begin
                       (mset! tmp.173 -2 L.eq?.102.5)
                       (mset! tmp.173 6 16)
                       tmp.173))))
              (let ((cons.101
                     (let ((tmp.174 (+ (alloc 16) 2)))
                       (begin
                         (mset! tmp.174 -2 L.cons.101.6)
                         (mset! tmp.174 6 16)
                         tmp.174))))
                (let ((not.100
                       (let ((tmp.175 (+ (alloc 16) 2)))
                         (begin
                           (mset! tmp.175 -2 L.not.100.7)
                           (mset! tmp.175 6 8)
                           tmp.175))))
                  (let ((vector?.99
                         (let ((tmp.176 (+ (alloc 16) 2)))
                           (begin
                             (mset! tmp.176 -2 L.vector?.99.8)
                             (mset! tmp.176 6 8)
                             tmp.176))))
                    (let ((procedure?.98
                           (let ((tmp.177 (+ (alloc 16) 2)))
                             (begin
                               (mset! tmp.177 -2 L.procedure?.98.9)
                               (mset! tmp.177 6 8)
                               tmp.177))))
                      (let ((pair?.97
                             (let ((tmp.178 (+ (alloc 16) 2)))
                               (begin
                                 (mset! tmp.178 -2 L.pair?.97.10)
                                 (mset! tmp.178 6 8)
                                 tmp.178))))
                        (let ((error?.96
                               (let ((tmp.179 (+ (alloc 16) 2)))
                                 (begin
                                   (mset! tmp.179 -2 L.error?.96.11)
                                   (mset! tmp.179 6 8)
                                   tmp.179))))
                          (let ((ascii-char?.95
                                 (let ((tmp.180 (+ (alloc 16) 2)))
                                   (begin
                                     (mset! tmp.180 -2 L.ascii-char?.95.12)
                                     (mset! tmp.180 6 8)
                                     tmp.180))))
                            (let ((void?.94
                                   (let ((tmp.181 (+ (alloc 16) 2)))
                                     (begin
                                       (mset! tmp.181 -2 L.void?.94.13)
                                       (mset! tmp.181 6 8)
                                       tmp.181))))
                              (let ((empty?.93
                                     (let ((tmp.182 (+ (alloc 16) 2)))
                                       (begin
                                         (mset! tmp.182 -2 L.empty?.93.14)
                                         (mset! tmp.182 6 8)
                                         tmp.182))))
                                (let ((boolean?.92
                                       (let ((tmp.183 (+ (alloc 16) 2)))
                                         (begin
                                           (mset! tmp.183 -2 L.boolean?.92.15)
                                           (mset! tmp.183 6 8)
                                           tmp.183))))
                                  (let ((fixnum?.91
                                         (let ((tmp.184 (+ (alloc 16) 2)))
                                           (begin
                                             (mset! tmp.184 -2 L.fixnum?.91.16)
                                             (mset! tmp.184 6 8)
                                             tmp.184))))
                                    (let ((procedure-arity.90
                                           (let ((tmp.185 (+ (alloc 16) 2)))
                                             (begin
                                               (mset!
                                                tmp.185
                                                -2
                                                L.procedure-arity.90.17)
                                               (mset! tmp.185 6 8)
                                               tmp.185))))
                                      (let ((cdr.89
                                             (let ((tmp.186 (+ (alloc 16) 2)))
                                               (begin
                                                 (mset! tmp.186 -2 L.cdr.89.18)
                                                 (mset! tmp.186 6 8)
                                                 tmp.186))))
                                        (let ((car.88
                                               (let ((tmp.187
                                                      (+ (alloc 16) 2)))
                                                 (begin
                                                   (mset!
                                                    tmp.187
                                                    -2
                                                    L.car.88.19)
                                                   (mset! tmp.187 6 8)
                                                   tmp.187))))
                                          (let ((vector-ref.87
                                                 (let ((tmp.188
                                                        (+ (alloc 24) 2)))
                                                   (begin
                                                     (mset!
                                                      tmp.188
                                                      -2
                                                      L.vector-ref.87.20)
                                                     (mset! tmp.188 6 16)
                                                     tmp.188))))
                                            (let ((vector-set!.86
                                                   (let ((tmp.189
                                                          (+ (alloc 24) 2)))
                                                     (begin
                                                       (mset!
                                                        tmp.189
                                                        -2
                                                        L.vector-set!.86.21)
                                                       (mset! tmp.189 6 24)
                                                       tmp.189))))
                                              (let ((vector-length.85
                                                     (let ((tmp.190
                                                            (+ (alloc 16) 2)))
                                                       (begin
                                                         (mset!
                                                          tmp.190
                                                          -2
                                                          L.vector-length.85.22)
                                                         (mset! tmp.190 6 8)
                                                         tmp.190))))
                                                (let ((make-vector.84
                                                       (let ((tmp.191
                                                              (+
                                                               (alloc 24)
                                                               2)))
                                                         (begin
                                                           (mset!
                                                            tmp.191
                                                            -2
                                                            L.make-vector.84.23)
                                                           (mset! tmp.191 6 8)
                                                           tmp.191))))
                                                  (let ((>=.83
                                                         (let ((tmp.192
                                                                (+
                                                                 (alloc 16)
                                                                 2)))
                                                           (begin
                                                             (mset!
                                                              tmp.192
                                                              -2
                                                              L.>=.83.24)
                                                             (mset!
                                                              tmp.192
                                                              6
                                                              16)
                                                             tmp.192))))
                                                    (let ((>.82
                                                           (let ((tmp.193
                                                                  (+
                                                                   (alloc 16)
                                                                   2)))
                                                             (begin
                                                               (mset!
                                                                tmp.193
                                                                -2
                                                                L.>.82.25)
                                                               (mset!
                                                                tmp.193
                                                                6
                                                                16)
                                                               tmp.193))))
                                                      (let ((<=.81
                                                             (let ((tmp.194
                                                                    (+
                                                                     (alloc 16)
                                                                     2)))
                                                               (begin
                                                                 (mset!
                                                                  tmp.194
                                                                  -2
                                                                  L.<=.81.26)
                                                                 (mset!
                                                                  tmp.194
                                                                  6
                                                                  16)
                                                                 tmp.194))))
                                                        (let ((<.80
                                                               (let ((tmp.195
                                                                      (+
                                                                       (alloc
                                                                        16)
                                                                       2)))
                                                                 (begin
                                                                   (mset!
                                                                    tmp.195
                                                                    -2
                                                                    L.<.80.27)
                                                                   (mset!
                                                                    tmp.195
                                                                    6
                                                                    16)
                                                                   tmp.195))))
                                                          (let ((|-.79|
                                                                 (let ((tmp.196
                                                                        (+
                                                                         (alloc
                                                                          16)
                                                                         2)))
                                                                   (begin
                                                                     (mset!
                                                                      tmp.196
                                                                      -2
                                                                      L.-.79.28)
                                                                     (mset!
                                                                      tmp.196
                                                                      6
                                                                      16)
                                                                     tmp.196))))
                                                            (let ((|+.78|
                                                                   (let ((tmp.197
                                                                          (+
                                                                           (alloc
                                                                            16)
                                                                           2)))
                                                                     (begin
                                                                       (mset!
                                                                        tmp.197
                                                                        -2
                                                                        L.+.78.29)
                                                                       (mset!
                                                                        tmp.197
                                                                        6
                                                                        16)
                                                                       tmp.197))))
                                                              (let ((*.77
                                                                     (let ((tmp.198
                                                                            (+
                                                                             (alloc
                                                                              16)
                                                                             2)))
                                                                       (begin
                                                                         (mset!
                                                                          tmp.198
                                                                          -2
                                                                          L.*.77.30)
                                                                         (mset!
                                                                          tmp.198
                                                                          6
                                                                          16)
                                                                         tmp.198))))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-init-loop.105
                                                                     14
                                                                     vector-init-loop.105))
                                                                  (begin
                                                                    (mset!
                                                                     make-init-vector.1
                                                                     14
                                                                     vector-init-loop.105))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     vector-ref.87
                                                                     14
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (mset!
                                                                     vector-set!.86
                                                                     14
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (mset!
                                                                     make-vector.84
                                                                     14
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((F.4
                                                                         (let ((tmp.199
                                                                                (+
                                                                                 (alloc
                                                                                  32)
                                                                                 2)))
                                                                           (begin
                                                                             (mset!
                                                                              tmp.199
                                                                              -2
                                                                              L.F.4.31)
                                                                             (mset!
                                                                              tmp.199
                                                                              6
                                                                              56)
                                                                             tmp.199))))
                                                                    (let ((G.5
                                                                           (let ((tmp.200
                                                                                  (+
                                                                                   (alloc
                                                                                    24)
                                                                                   2)))
                                                                             (begin
                                                                               (mset!
                                                                                tmp.200
                                                                                -2
                                                                                L.G.5.32)
                                                                               (mset!
                                                                                tmp.200
                                                                                6
                                                                                64)
                                                                               tmp.200))))
                                                                      (let ((H.6
                                                                             (let ((tmp.201
                                                                                    (+
                                                                                     (alloc
                                                                                      24)
                                                                                     2)))
                                                                               (begin
                                                                                 (mset!
                                                                                  tmp.201
                                                                                  -2
                                                                                  L.H.6.33)
                                                                                 (mset!
                                                                                  tmp.201
                                                                                  6
                                                                                  72)
                                                                                 tmp.201))))
                                                                        (begin
                                                                          (begin
                                                                            (mset!
                                                                             F.4
                                                                             14
                                                                             G.5)
                                                                            (mset!
                                                                             F.4
                                                                             22
                                                                             |+.78|))
                                                                          (begin
                                                                            (mset!
                                                                             G.5
                                                                             14
                                                                             H.6))
                                                                          (begin
                                                                            (mset!
                                                                             H.6
                                                                             14
                                                                             |+.78|))
                                                                          (let ((tmp.166
                                                                                 F.4))
                                                                            (apply
                                                                             L.F.4.31
                                                                             F.4
                                                                             8
                                                                             16
                                                                             24
                                                                             32
                                                                             40
                                                                             48
                                                                             56))))))))))))))))))))))))))))))))))))))
    ) 55)

  )
  (parameterize ([current-pass-list
                  (list
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.H.6.33
      (lambda (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((|+.78| (unsafe-procedure-ref c.149 0)))
          (let ((r1.32
                 (let ((tmp.158 |+.78|)) (apply L.+.78.29 |+.78| a.23 b.24))))
            (let ((r2.33
                   (let ((tmp.159 |+.78|))
                     (apply L.+.78.29 |+.78| r1.32 c.25))))
              (let ((r3.34
                     (let ((tmp.160 |+.78|))
                       (apply L.+.78.29 |+.78| r2.33 d.26))))
                (let ((r4.35
                       (let ((tmp.161 |+.78|))
                         (apply L.+.78.29 |+.78| r3.34 e.27))))
                  (let ((r5.36
                         (let ((tmp.162 |+.78|))
                           (apply L.+.78.29 |+.78| r4.35 f.28))))
                    (let ((r6.37
                           (let ((tmp.163 |+.78|))
                             (apply L.+.78.29 |+.78| r5.36 g.29))))
                      (let ((r7.38
                             (let ((tmp.164 |+.78|))
                               (apply L.+.78.29 |+.78| r6.37 h.30))))
                        (let ((tmp.165 |+.78|))
                          (apply L.+.78.29 |+.78| r7.38 j.31))))))))))))
    (define L.G.5.32
      (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (let ((H.6 (unsafe-procedure-ref c.148 0)))
          (let ((tmp.157 H.6))
            (apply L.H.6.33 H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))))
    (define L.F.4.31
      (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((G.5 (unsafe-procedure-ref c.147 0)))
          (let ((|+.78| (unsafe-procedure-ref c.147 1)))
            (let ((r.14
                   (let ((tmp.155 G.5))
                     (apply L.G.5.32 G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8))))
              (let ((tmp.156 |+.78|)) (apply L.+.78.29 |+.78| r.14 10)))))))
    (define L.*.77.30
      (lambda (c.146 tmp.39 tmp.40)
        (if (fixnum? tmp.40)
          (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
          (error 0))))
    (define L.+.78.29
      (lambda (c.145 tmp.41 tmp.42)
        (if (fixnum? tmp.42)
          (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
          (error 1))))
    (define L.-.79.28
      (lambda (c.144 tmp.43 tmp.44)
        (if (fixnum? tmp.44)
          (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
          (error 2))))
    (define L.<.80.27
      (lambda (c.143 tmp.45 tmp.46)
        (if (fixnum? tmp.46)
          (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
          (error 3))))
    (define L.<=.81.26
      (lambda (c.142 tmp.47 tmp.48)
        (if (fixnum? tmp.48)
          (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
          (error 4))))
    (define L.>.82.25
      (lambda (c.141 tmp.49 tmp.50)
        (if (fixnum? tmp.50)
          (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
          (error 5))))
    (define L.>=.83.24
      (lambda (c.140 tmp.51 tmp.52)
        (if (fixnum? tmp.52)
          (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
          (error 6))))
    (define L.make-vector.84.23
      (lambda (c.139 tmp.53)
        (let ((make-init-vector.1 (unsafe-procedure-ref c.139 0)))
          (if (fixnum? tmp.53)
            (let ((tmp.154 make-init-vector.1))
              (apply L.make-init-vector.1.4 make-init-vector.1 tmp.53))
            (error 7)))))
    (define L.vector-length.85.22
      (lambda (c.138 tmp.54)
        (if (vector? tmp.54) (unsafe-vector-length tmp.54) (error 8))))
    (define L.vector-set!.86.21
      (lambda (c.137 tmp.55 tmp.56 tmp.57)
        (let ((unsafe-vector-set!.2 (unsafe-procedure-ref c.137 0)))
          (if (fixnum? tmp.56)
            (if (vector? tmp.55)
              (let ((tmp.153 unsafe-vector-set!.2))
                (apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.55
                 tmp.56
                 tmp.57))
              (error 9))
            (error 9)))))
    (define L.vector-ref.87.20
      (lambda (c.136 tmp.58 tmp.59)
        (let ((unsafe-vector-ref.3 (unsafe-procedure-ref c.136 0)))
          (if (fixnum? tmp.59)
            (if (vector? tmp.58)
              (let ((tmp.152 unsafe-vector-ref.3))
                (apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.58
                 tmp.59))
              (error 10))
            (error 10)))))
    (define L.car.88.19
      (lambda (c.135 tmp.60)
        (if (pair? tmp.60) (unsafe-car tmp.60) (error 11))))
    (define L.cdr.89.18
      (lambda (c.134 tmp.61)
        (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12))))
    (define L.procedure-arity.90.17
      (lambda (c.133 tmp.62)
        (if (procedure? tmp.62) (unsafe-procedure-arity tmp.62) (error 13))))
    (define L.fixnum?.91.16 (lambda (c.132 tmp.63) (fixnum? tmp.63)))
    (define L.boolean?.92.15 (lambda (c.131 tmp.64) (boolean? tmp.64)))
    (define L.empty?.93.14 (lambda (c.130 tmp.65) (empty? tmp.65)))
    (define L.void?.94.13 (lambda (c.129 tmp.66) (void? tmp.66)))
    (define L.ascii-char?.95.12 (lambda (c.128 tmp.67) (ascii-char? tmp.67)))
    (define L.error?.96.11 (lambda (c.127 tmp.68) (error? tmp.68)))
    (define L.pair?.97.10 (lambda (c.126 tmp.69) (pair? tmp.69)))
    (define L.procedure?.98.9 (lambda (c.125 tmp.70) (procedure? tmp.70)))
    (define L.vector?.99.8 (lambda (c.124 tmp.71) (vector? tmp.71)))
    (define L.not.100.7 (lambda (c.123 tmp.72) (not tmp.72)))
    (define L.cons.101.6 (lambda (c.122 tmp.73 tmp.74) (cons tmp.73 tmp.74)))
    (define L.eq?.102.5 (lambda (c.121 tmp.75 tmp.76) (eq? tmp.75 tmp.76)))
    (define L.make-init-vector.1.4
      (lambda (c.120 tmp.103)
        (let ((vector-init-loop.105 (unsafe-procedure-ref c.120 0)))
          (let ((tmp.104 (unsafe-make-vector tmp.103)))
            (let ((tmp.151 vector-init-loop.105))
              (apply
               L.vector-init-loop.105.3
               vector-init-loop.105
               tmp.103
               0
               tmp.104))))))
    (define L.vector-init-loop.105.3
      (lambda (c.119 len.106 i.108 vec.107)
        (let ((vector-init-loop.105 (unsafe-procedure-ref c.119 0)))
          (if (eq? len.106 i.108)
            vec.107
            (begin
              (unsafe-vector-set! vec.107 i.108 0)
              (let ((tmp.150 vector-init-loop.105))
                (apply
                 L.vector-init-loop.105.3
                 vector-init-loop.105
                 len.106
                 (unsafe-fx+ i.108 1)
                 vec.107)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.118 tmp.114 tmp.115 tmp.116)
        (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
          (if (unsafe-fx>= tmp.115 0)
            (begin (unsafe-vector-set! tmp.114 tmp.115 tmp.116) (void))
            (error 9))
          (error 9))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.117 tmp.111 tmp.112)
        (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
          (if (unsafe-fx>= tmp.112 0)
            (unsafe-vector-ref tmp.111 tmp.112)
            (error 10))
          (error 10))))
    (let ((unsafe-vector-ref.3 (make-procedure L.unsafe-vector-ref.3.1 2 0)))
      (let ((unsafe-vector-set!.2
             (make-procedure L.unsafe-vector-set!.2.2 3 0)))
        (let ((vector-init-loop.105
               (make-procedure L.vector-init-loop.105.3 3 1)))
          (let ((make-init-vector.1
                 (make-procedure L.make-init-vector.1.4 1 1)))
            (let ((eq?.102 (make-procedure L.eq?.102.5 2 0)))
              (let ((cons.101 (make-procedure L.cons.101.6 2 0)))
                (let ((not.100 (make-procedure L.not.100.7 1 0)))
                  (let ((vector?.99 (make-procedure L.vector?.99.8 1 0)))
                    (let ((procedure?.98
                           (make-procedure L.procedure?.98.9 1 0)))
                      (let ((pair?.97 (make-procedure L.pair?.97.10 1 0)))
                        (let ((error?.96 (make-procedure L.error?.96.11 1 0)))
                          (let ((ascii-char?.95
                                 (make-procedure L.ascii-char?.95.12 1 0)))
                            (let ((void?.94
                                   (make-procedure L.void?.94.13 1 0)))
                              (let ((empty?.93
                                     (make-procedure L.empty?.93.14 1 0)))
                                (let ((boolean?.92
                                       (make-procedure L.boolean?.92.15 1 0)))
                                  (let ((fixnum?.91
                                         (make-procedure L.fixnum?.91.16 1 0)))
                                    (let ((procedure-arity.90
                                           (make-procedure
                                            L.procedure-arity.90.17
                                            1
                                            0)))
                                      (let ((cdr.89
                                             (make-procedure L.cdr.89.18 1 0)))
                                        (let ((car.88
                                               (make-procedure
                                                L.car.88.19
                                                1
                                                0)))
                                          (let ((vector-ref.87
                                                 (make-procedure
                                                  L.vector-ref.87.20
                                                  2
                                                  1)))
                                            (let ((vector-set!.86
                                                   (make-procedure
                                                    L.vector-set!.86.21
                                                    3
                                                    1)))
                                              (let ((vector-length.85
                                                     (make-procedure
                                                      L.vector-length.85.22
                                                      1
                                                      0)))
                                                (let ((make-vector.84
                                                       (make-procedure
                                                        L.make-vector.84.23
                                                        1
                                                        1)))
                                                  (let ((>=.83
                                                         (make-procedure
                                                          L.>=.83.24
                                                          2
                                                          0)))
                                                    (let ((>.82
                                                           (make-procedure
                                                            L.>.82.25
                                                            2
                                                            0)))
                                                      (let ((<=.81
                                                             (make-procedure
                                                              L.<=.81.26
                                                              2
                                                              0)))
                                                        (let ((<.80
                                                               (make-procedure
                                                                L.<.80.27
                                                                2
                                                                0)))
                                                          (let ((|-.79|
                                                                 (make-procedure
                                                                  L.-.79.28
                                                                  2
                                                                  0)))
                                                            (let ((|+.78|
                                                                   (make-procedure
                                                                    L.+.78.29
                                                                    2
                                                                    0)))
                                                              (let ((*.77
                                                                     (make-procedure
                                                                      L.*.77.30
                                                                      2
                                                                      0)))
                                                                (begin
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-init-loop.105
                                                                     0
                                                                     vector-init-loop.105))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-init-vector.1
                                                                     0
                                                                     vector-init-loop.105))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-ref.87
                                                                     0
                                                                     unsafe-vector-ref.3))
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     vector-set!.86
                                                                     0
                                                                     unsafe-vector-set!.2))
                                                                  (begin)
                                                                  (begin
                                                                    (unsafe-procedure-set!
                                                                     make-vector.84
                                                                     0
                                                                     make-init-vector.1))
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (begin)
                                                                  (let ((F.4
                                                                         (make-procedure
                                                                          L.F.4.31
                                                                          7
                                                                          2)))
                                                                    (let ((G.5
                                                                           (make-procedure
                                                                            L.G.5.32
                                                                            8
                                                                            1)))
                                                                      (let ((H.6
                                                                             (make-procedure
                                                                              L.H.6.33
                                                                              9
                                                                              1)))
                                                                        (begin
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             F.4
                                                                             0
                                                                             G.5)
                                                                            (unsafe-procedure-set!
                                                                             F.4
                                                                             1
                                                                             |+.78|))
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             G.5
                                                                             0
                                                                             H.6))
                                                                          (begin
                                                                            (unsafe-procedure-set!
                                                                             H.6
                                                                             0
                                                                             |+.78|))
                                                                          (let ((tmp.166
                                                                                 F.4))
                                                                            (apply
                                                                             L.F.4.31
                                                                             F.4
                                                                             1
                                                                             2
                                                                             3
                                                                             4
                                                                             5
                                                                             6
                                                                             7))))))))))))))))))))))))))))))))))))))

          ) 55)

  )
  (parameterize ([current-pass-list
                  (list
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define L.H.6.33
      (lambda (c.149 a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((|+.78| (closure-ref c.149 0)))
          (let ((r1.32
                 (let ((tmp.158 |+.78|))
                   (unsafe-apply L.+.78.29 |+.78| a.23 b.24))))
            (let ((r2.33
                   (let ((tmp.159 |+.78|))
                     (unsafe-apply L.+.78.29 |+.78| r1.32 c.25))))
              (let ((r3.34
                     (let ((tmp.160 |+.78|))
                       (unsafe-apply L.+.78.29 |+.78| r2.33 d.26))))
                (let ((r4.35
                       (let ((tmp.161 |+.78|))
                         (unsafe-apply L.+.78.29 |+.78| r3.34 e.27))))
                  (let ((r5.36
                         (let ((tmp.162 |+.78|))
                           (unsafe-apply L.+.78.29 |+.78| r4.35 f.28))))
                    (let ((r6.37
                           (let ((tmp.163 |+.78|))
                             (unsafe-apply L.+.78.29 |+.78| r5.36 g.29))))
                      (let ((r7.38
                             (let ((tmp.164 |+.78|))
                               (unsafe-apply L.+.78.29 |+.78| r6.37 h.30))))
                        (let ((tmp.165 |+.78|))
                          (unsafe-apply L.+.78.29 |+.78| r7.38 j.31))))))))))))
    (define L.G.5.32
      (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (let ((H.6 (closure-ref c.148 0)))
          (let ((tmp.157 H.6))
            (unsafe-apply
             L.H.6.33
             H.6
             a.15
             b.16
             c.17
             d.18
             e.19
             f.20
             g.21
             h.22
             9)))))
    (define L.F.4.31
      (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((G.5 (closure-ref c.147 0)) (|+.78| (closure-ref c.147 1)))
          (let ((r.14
                 (let ((tmp.155 G.5))
                   (unsafe-apply
                    L.G.5.32
                    G.5
                    a.7
                    b.8
                    c.9
                    d.10
                    e.11
                    f.12
                    g.13
                    8))))
            (let ((tmp.156 |+.78|))
              (unsafe-apply L.+.78.29 |+.78| r.14 10))))))
    (define L.*.77.30
      (lambda (c.146 tmp.39 tmp.40)
        (let ()
          (if (fixnum? tmp.40)
            (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
            (error 0)))))
    (define L.+.78.29
      (lambda (c.145 tmp.41 tmp.42)
        (let ()
          (if (fixnum? tmp.42)
            (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
            (error 1)))))
    (define L.-.79.28
      (lambda (c.144 tmp.43 tmp.44)
        (let ()
          (if (fixnum? tmp.44)
            (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
            (error 2)))))
    (define L.<.80.27
      (lambda (c.143 tmp.45 tmp.46)
        (let ()
          (if (fixnum? tmp.46)
            (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
            (error 3)))))
    (define L.<=.81.26
      (lambda (c.142 tmp.47 tmp.48)
        (let ()
          (if (fixnum? tmp.48)
            (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
            (error 4)))))
    (define L.>.82.25
      (lambda (c.141 tmp.49 tmp.50)
        (let ()
          (if (fixnum? tmp.50)
            (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
            (error 5)))))
    (define L.>=.83.24
      (lambda (c.140 tmp.51 tmp.52)
        (let ()
          (if (fixnum? tmp.52)
            (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
            (error 6)))))
    (define L.make-vector.84.23
      (lambda (c.139 tmp.53)
        (let ((make-init-vector.1 (closure-ref c.139 0)))
          (if (fixnum? tmp.53)
            (let ((tmp.154 make-init-vector.1))
              (unsafe-apply L.make-init-vector.1.4 make-init-vector.1 tmp.53))
            (error 7)))))
    (define L.vector-length.85.22
      (lambda (c.138 tmp.54)
        (let ()
          (if (vector? tmp.54) (unsafe-vector-length tmp.54) (error 8)))))
    (define L.vector-set!.86.21
      (lambda (c.137 tmp.55 tmp.56 tmp.57)
        (let ((unsafe-vector-set!.2 (closure-ref c.137 0)))
          (if (fixnum? tmp.56)
            (if (vector? tmp.55)
              (let ((tmp.153 unsafe-vector-set!.2))
                (unsafe-apply
                 L.unsafe-vector-set!.2.2
                 unsafe-vector-set!.2
                 tmp.55
                 tmp.56
                 tmp.57))
              (error 9))
            (error 9)))))
    (define L.vector-ref.87.20
      (lambda (c.136 tmp.58 tmp.59)
        (let ((unsafe-vector-ref.3 (closure-ref c.136 0)))
          (if (fixnum? tmp.59)
            (if (vector? tmp.58)
              (let ((tmp.152 unsafe-vector-ref.3))
                (unsafe-apply
                 L.unsafe-vector-ref.3.1
                 unsafe-vector-ref.3
                 tmp.58
                 tmp.59))
              (error 10))
            (error 10)))))
    (define L.car.88.19
      (lambda (c.135 tmp.60)
        (let () (if (pair? tmp.60) (unsafe-car tmp.60) (error 11)))))
    (define L.cdr.89.18
      (lambda (c.134 tmp.61)
        (let () (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12)))))
    (define L.procedure-arity.90.17
      (lambda (c.133 tmp.62)
        (let ()
          (if (procedure? tmp.62)
            (unsafe-procedure-arity tmp.62)
            (error 13)))))
    (define L.fixnum?.91.16 (lambda (c.132 tmp.63) (let () (fixnum? tmp.63))))
    (define L.boolean?.92.15
      (lambda (c.131 tmp.64) (let () (boolean? tmp.64))))
    (define L.empty?.93.14 (lambda (c.130 tmp.65) (let () (empty? tmp.65))))
    (define L.void?.94.13 (lambda (c.129 tmp.66) (let () (void? tmp.66))))
    (define L.ascii-char?.95.12
      (lambda (c.128 tmp.67) (let () (ascii-char? tmp.67))))
    (define L.error?.96.11 (lambda (c.127 tmp.68) (let () (error? tmp.68))))
    (define L.pair?.97.10 (lambda (c.126 tmp.69) (let () (pair? tmp.69))))
    (define L.procedure?.98.9
      (lambda (c.125 tmp.70) (let () (procedure? tmp.70))))
    (define L.vector?.99.8 (lambda (c.124 tmp.71) (let () (vector? tmp.71))))
    (define L.not.100.7 (lambda (c.123 tmp.72) (let () (not tmp.72))))
    (define L.cons.101.6
      (lambda (c.122 tmp.73 tmp.74) (let () (cons tmp.73 tmp.74))))
    (define L.eq?.102.5
      (lambda (c.121 tmp.75 tmp.76) (let () (eq? tmp.75 tmp.76))))
    (define L.make-init-vector.1.4
      (lambda (c.120 tmp.103)
        (let ((vector-init-loop.105 (closure-ref c.120 0)))
          (let ((tmp.104 (unsafe-make-vector tmp.103)))
            (let ((tmp.151 vector-init-loop.105))
              (unsafe-apply
               L.vector-init-loop.105.3
               vector-init-loop.105
               tmp.103
               0
               tmp.104))))))
    (define L.vector-init-loop.105.3
      (lambda (c.119 len.106 i.108 vec.107)
        (let ((vector-init-loop.105 (closure-ref c.119 0)))
          (if (eq? len.106 i.108)
            vec.107
            (begin
              (unsafe-vector-set! vec.107 i.108 0)
              (let ((tmp.150 vector-init-loop.105))
                (unsafe-apply
                 L.vector-init-loop.105.3
                 vector-init-loop.105
                 len.106
                 (unsafe-fx+ i.108 1)
                 vec.107)))))))
    (define L.unsafe-vector-set!.2.2
      (lambda (c.118 tmp.114 tmp.115 tmp.116)
        (let ()
          (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
            (if (unsafe-fx>= tmp.115 0)
              (begin (unsafe-vector-set! tmp.114 tmp.115 tmp.116) (void))
              (error 9))
            (error 9)))))
    (define L.unsafe-vector-ref.3.1
      (lambda (c.117 tmp.111 tmp.112)
        (let ()
          (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
            (if (unsafe-fx>= tmp.112 0)
              (unsafe-vector-ref tmp.111 tmp.112)
              (error 10))
            (error 10)))))
    (cletrec
     ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
      (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
      (vector-init-loop.105
       (make-closure L.vector-init-loop.105.3 3 vector-init-loop.105))
      (make-init-vector.1
       (make-closure L.make-init-vector.1.4 1 vector-init-loop.105))
      (eq?.102 (make-closure L.eq?.102.5 2))
      (cons.101 (make-closure L.cons.101.6 2))
      (not.100 (make-closure L.not.100.7 1))
      (vector?.99 (make-closure L.vector?.99.8 1))
      (procedure?.98 (make-closure L.procedure?.98.9 1))
      (pair?.97 (make-closure L.pair?.97.10 1))
      (error?.96 (make-closure L.error?.96.11 1))
      (ascii-char?.95 (make-closure L.ascii-char?.95.12 1))
      (void?.94 (make-closure L.void?.94.13 1))
      (empty?.93 (make-closure L.empty?.93.14 1))
      (boolean?.92 (make-closure L.boolean?.92.15 1))
      (fixnum?.91 (make-closure L.fixnum?.91.16 1))
      (procedure-arity.90 (make-closure L.procedure-arity.90.17 1))
      (cdr.89 (make-closure L.cdr.89.18 1))
      (car.88 (make-closure L.car.88.19 1))
      (vector-ref.87 (make-closure L.vector-ref.87.20 2 unsafe-vector-ref.3))
      (vector-set!.86
       (make-closure L.vector-set!.86.21 3 unsafe-vector-set!.2))
      (vector-length.85 (make-closure L.vector-length.85.22 1))
      (make-vector.84 (make-closure L.make-vector.84.23 1 make-init-vector.1))
      (>=.83 (make-closure L.>=.83.24 2))
      (>.82 (make-closure L.>.82.25 2))
      (<=.81 (make-closure L.<=.81.26 2))
      (<.80 (make-closure L.<.80.27 2))
      (|-.79| (make-closure L.-.79.28 2))
      (|+.78| (make-closure L.+.78.29 2))
      (*.77 (make-closure L.*.77.30 2)))
     (let ()
       (let ()
         (cletrec
          ((F.4 (make-closure L.F.4.31 7 G.5 |+.78|))
           (G.5 (make-closure L.G.5.32 8 H.6))
           (H.6 (make-closure L.H.6.33 9 |+.78|)))
          (let ()
            (let ((tmp.166 F.4))
              (unsafe-apply L.F.4.31 F.4 1 2 3 4 5 6 7))))))))
     ) 55)

  )
  (parameterize ([current-pass-list
                  (list
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.117 tmp.111 tmp.112)
                (let ()
                  (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
                    (if (unsafe-fx>= tmp.112 0)
                      (unsafe-vector-ref tmp.111 tmp.112)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.118 tmp.114 tmp.115 tmp.116)
                (let ()
                  (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
                    (if (unsafe-fx>= tmp.115 0)
                      (begin
                        (unsafe-vector-set! tmp.114 tmp.115 tmp.116)
                        (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.105.3
              (lambda (c.119 len.106 i.108 vec.107)
                (let ((vector-init-loop.105 (closure-ref c.119 0)))
                  (if (eq? len.106 i.108)
                    vec.107
                    (begin
                      (unsafe-vector-set! vec.107 i.108 0)
                      (let ((tmp.150 vector-init-loop.105))
                        (unsafe-apply
                         L.vector-init-loop.105.3
                         vector-init-loop.105
                         len.106
                         (unsafe-fx+ i.108 1)
                         vec.107)))))))
             (L.make-init-vector.1.4
              (lambda (c.120 tmp.103)
                (let ((vector-init-loop.105 (closure-ref c.120 0)))
                  (let ((tmp.104 (unsafe-make-vector tmp.103)))
                    (let ((tmp.151 vector-init-loop.105))
                      (unsafe-apply
                       L.vector-init-loop.105.3
                       vector-init-loop.105
                       tmp.103
                       0
                       tmp.104))))))
             (L.eq?.102.5
              (lambda (c.121 tmp.75 tmp.76) (let () (eq? tmp.75 tmp.76))))
             (L.cons.101.6
              (lambda (c.122 tmp.73 tmp.74) (let () (cons tmp.73 tmp.74))))
             (L.not.100.7 (lambda (c.123 tmp.72) (let () (not tmp.72))))
             (L.vector?.99.8 (lambda (c.124 tmp.71) (let () (vector? tmp.71))))
             (L.procedure?.98.9
              (lambda (c.125 tmp.70) (let () (procedure? tmp.70))))
             (L.pair?.97.10 (lambda (c.126 tmp.69) (let () (pair? tmp.69))))
             (L.error?.96.11 (lambda (c.127 tmp.68) (let () (error? tmp.68))))
             (L.ascii-char?.95.12
              (lambda (c.128 tmp.67) (let () (ascii-char? tmp.67))))
             (L.void?.94.13 (lambda (c.129 tmp.66) (let () (void? tmp.66))))
             (L.empty?.93.14 (lambda (c.130 tmp.65) (let () (empty? tmp.65))))
             (L.boolean?.92.15
              (lambda (c.131 tmp.64) (let () (boolean? tmp.64))))
             (L.fixnum?.91.16
              (lambda (c.132 tmp.63) (let () (fixnum? tmp.63))))
             (L.procedure-arity.90.17
              (lambda (c.133 tmp.62)
                (let ()
                  (if (procedure? tmp.62)
                    (unsafe-procedure-arity tmp.62)
                    (error 13)))))
             (L.cdr.89.18
              (lambda (c.134 tmp.61)
                (let () (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12)))))
             (L.car.88.19
              (lambda (c.135 tmp.60)
                (let () (if (pair? tmp.60) (unsafe-car tmp.60) (error 11)))))
             (L.vector-ref.87.20
              (lambda (c.136 tmp.58 tmp.59)
                (let ((unsafe-vector-ref.3 (closure-ref c.136 0)))
                  (if (fixnum? tmp.59)
                    (if (vector? tmp.58)
                      (let ((tmp.152 unsafe-vector-ref.3))
                        (unsafe-apply
                         L.unsafe-vector-ref.3.1
                         unsafe-vector-ref.3
                         tmp.58
                         tmp.59))
                      (error 10))
                    (error 10)))))
             (L.vector-set!.86.21
              (lambda (c.137 tmp.55 tmp.56 tmp.57)
                (let ((unsafe-vector-set!.2 (closure-ref c.137 0)))
                  (if (fixnum? tmp.56)
                    (if (vector? tmp.55)
                      (let ((tmp.153 unsafe-vector-set!.2))
                        (unsafe-apply
                         L.unsafe-vector-set!.2.2
                         unsafe-vector-set!.2
                         tmp.55
                         tmp.56
                         tmp.57))
                      (error 9))
                    (error 9)))))
             (L.vector-length.85.22
              (lambda (c.138 tmp.54)
                (let ()
                  (if (vector? tmp.54)
                    (unsafe-vector-length tmp.54)
                    (error 8)))))
             (L.make-vector.84.23
              (lambda (c.139 tmp.53)
                (let ((make-init-vector.1 (closure-ref c.139 0)))
                  (if (fixnum? tmp.53)
                    (let ((tmp.154 make-init-vector.1))
                      (unsafe-apply
                       L.make-init-vector.1.4
                       make-init-vector.1
                       tmp.53))
                    (error 7)))))
             (L.>=.83.24
              (lambda (c.140 tmp.51 tmp.52)
                (let ()
                  (if (fixnum? tmp.52)
                    (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
                    (error 6)))))
             (L.>.82.25
              (lambda (c.141 tmp.49 tmp.50)
                (let ()
                  (if (fixnum? tmp.50)
                    (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
                    (error 5)))))
             (L.<=.81.26
              (lambda (c.142 tmp.47 tmp.48)
                (let ()
                  (if (fixnum? tmp.48)
                    (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
                    (error 4)))))
             (L.<.80.27
              (lambda (c.143 tmp.45 tmp.46)
                (let ()
                  (if (fixnum? tmp.46)
                    (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
                    (error 3)))))
             (L.-.79.28
              (lambda (c.144 tmp.43 tmp.44)
                (let ()
                  (if (fixnum? tmp.44)
                    (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
                    (error 2)))))
             (L.+.78.29
              (lambda (c.145 tmp.41 tmp.42)
                (let ()
                  (if (fixnum? tmp.42)
                    (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
                    (error 1)))))
             (L.*.77.30
              (lambda (c.146 tmp.39 tmp.40)
                (let ()
                  (if (fixnum? tmp.40)
                    (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.105
         (make-closure L.vector-init-loop.105.3 3 vector-init-loop.105))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.105))
        (eq?.102 (make-closure L.eq?.102.5 2))
        (cons.101 (make-closure L.cons.101.6 2))
        (not.100 (make-closure L.not.100.7 1))
        (vector?.99 (make-closure L.vector?.99.8 1))
        (procedure?.98 (make-closure L.procedure?.98.9 1))
        (pair?.97 (make-closure L.pair?.97.10 1))
        (error?.96 (make-closure L.error?.96.11 1))
        (ascii-char?.95 (make-closure L.ascii-char?.95.12 1))
        (void?.94 (make-closure L.void?.94.13 1))
        (empty?.93 (make-closure L.empty?.93.14 1))
        (boolean?.92 (make-closure L.boolean?.92.15 1))
        (fixnum?.91 (make-closure L.fixnum?.91.16 1))
        (procedure-arity.90 (make-closure L.procedure-arity.90.17 1))
        (cdr.89 (make-closure L.cdr.89.18 1))
        (car.88 (make-closure L.car.88.19 1))
        (vector-ref.87 (make-closure L.vector-ref.87.20 2 unsafe-vector-ref.3))
        (vector-set!.86
         (make-closure L.vector-set!.86.21 3 unsafe-vector-set!.2))
        (vector-length.85 (make-closure L.vector-length.85.22 1))
        (make-vector.84
         (make-closure L.make-vector.84.23 1 make-init-vector.1))
        (>=.83 (make-closure L.>=.83.24 2))
        (>.82 (make-closure L.>.82.25 2))
        (<=.81 (make-closure L.<=.81.26 2))
        (<.80 (make-closure L.<.80.27 2))
        (|-.79| (make-closure L.-.79.28 2))
        (|+.78| (make-closure L.+.78.29 2))
        (*.77 (make-closure L.*.77.30 2)))
       (let ()
         (let ()
           (letrec ((L.F.4.31
                     (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                       (let ((G.5 (closure-ref c.147 0))
                             (|+.78| (closure-ref c.147 1)))
                         (let ((r.14
                                (let ((tmp.155 G.5))
                                  (unsafe-apply
                                   L.G.5.32
                                   G.5
                                   a.7
                                   b.8
                                   c.9
                                   d.10
                                   e.11
                                   f.12
                                   g.13
                                   8))))
                           (let ((tmp.156 |+.78|))
                             (unsafe-apply L.+.78.29 |+.78| r.14 10))))))
                    (L.G.5.32
                     (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                       (let ((H.6 (closure-ref c.148 0)))
                         (let ((tmp.157 H.6))
                           (unsafe-apply
                            L.H.6.33
                            H.6
                            a.15
                            b.16
                            c.17
                            d.18
                            e.19
                            f.20
                            g.21
                            h.22
                            9)))))
                    (L.H.6.33
                     (lambda (c.149
                              a.23
                              b.24
                              c.25
                              d.26
                              e.27
                              f.28
                              g.29
                              h.30
                              j.31)
                       (let ((|+.78| (closure-ref c.149 0)))
                         (let ((r1.32
                                (let ((tmp.158 |+.78|))
                                  (unsafe-apply L.+.78.29 |+.78| a.23 b.24))))
                           (let ((r2.33
                                  (let ((tmp.159 |+.78|))
                                    (unsafe-apply
                                     L.+.78.29
                                     |+.78|
                                     r1.32
                                     c.25))))
                             (let ((r3.34
                                    (let ((tmp.160 |+.78|))
                                      (unsafe-apply
                                       L.+.78.29
                                       |+.78|
                                       r2.33
                                       d.26))))
                               (let ((r4.35
                                      (let ((tmp.161 |+.78|))
                                        (unsafe-apply
                                         L.+.78.29
                                         |+.78|
                                         r3.34
                                         e.27))))
                                 (let ((r5.36
                                        (let ((tmp.162 |+.78|))
                                          (unsafe-apply
                                           L.+.78.29
                                           |+.78|
                                           r4.35
                                           f.28))))
                                   (let ((r6.37
                                          (let ((tmp.163 |+.78|))
                                            (unsafe-apply
                                             L.+.78.29
                                             |+.78|
                                             r5.36
                                             g.29))))
                                     (let ((r7.38
                                            (let ((tmp.164 |+.78|))
                                              (unsafe-apply
                                               L.+.78.29
                                               |+.78|
                                               r6.37
                                               h.30))))
                                       (let ((tmp.165 |+.78|))
                                         (unsafe-apply
                                          L.+.78.29
                                          |+.78|
                                          r7.38
                                          j.31)))))))))))))
             (cletrec
              ((F.4 (make-closure L.F.4.31 7 G.5 |+.78|))
               (G.5 (make-closure L.G.5.32 8 H.6))
               (H.6 (make-closure L.H.6.33 9 |+.78|)))
              (let ()
                (let ((tmp.166 F.4))
                  (unsafe-apply L.F.4.31 F.4 1 2 3 4 5 6 7))))))))))
     ) 55)

  )

  (parameterize ([current-pass-list
                  (list
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((L.unsafe-vector-ref.3.1
              (lambda (c.117 tmp.111 tmp.112)
                (let ()
                  (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
                    (if (unsafe-fx>= tmp.112 0)
                      (unsafe-vector-ref tmp.111 tmp.112)
                      (error 10))
                    (error 10)))))
             (L.unsafe-vector-set!.2.2
              (lambda (c.118 tmp.114 tmp.115 tmp.116)
                (let ()
                  (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
                    (if (unsafe-fx>= tmp.115 0)
                      (begin
                        (unsafe-vector-set! tmp.114 tmp.115 tmp.116)
                        (void))
                      (error 9))
                    (error 9)))))
             (L.vector-init-loop.105.3
              (lambda (c.119 len.106 i.108 vec.107)
                (let ((vector-init-loop.105 (closure-ref c.119 0)))
                  (if (eq? len.106 i.108)
                    vec.107
                    (begin
                      (unsafe-vector-set! vec.107 i.108 0)
                      (closure-apply
                       vector-init-loop.105
                       vector-init-loop.105
                       len.106
                       (unsafe-fx+ i.108 1)
                       vec.107))))))
             (L.make-init-vector.1.4
              (lambda (c.120 tmp.103)
                (let ((vector-init-loop.105 (closure-ref c.120 0)))
                  (let ((tmp.104 (unsafe-make-vector tmp.103)))
                    (closure-apply
                     vector-init-loop.105
                     vector-init-loop.105
                     tmp.103
                     0
                     tmp.104)))))
             (L.eq?.102.5
              (lambda (c.121 tmp.75 tmp.76) (let () (eq? tmp.75 tmp.76))))
             (L.cons.101.6
              (lambda (c.122 tmp.73 tmp.74) (let () (cons tmp.73 tmp.74))))
             (L.not.100.7 (lambda (c.123 tmp.72) (let () (not tmp.72))))
             (L.vector?.99.8 (lambda (c.124 tmp.71) (let () (vector? tmp.71))))
             (L.procedure?.98.9
              (lambda (c.125 tmp.70) (let () (procedure? tmp.70))))
             (L.pair?.97.10 (lambda (c.126 tmp.69) (let () (pair? tmp.69))))
             (L.error?.96.11 (lambda (c.127 tmp.68) (let () (error? tmp.68))))
             (L.ascii-char?.95.12
              (lambda (c.128 tmp.67) (let () (ascii-char? tmp.67))))
             (L.void?.94.13 (lambda (c.129 tmp.66) (let () (void? tmp.66))))
             (L.empty?.93.14 (lambda (c.130 tmp.65) (let () (empty? tmp.65))))
             (L.boolean?.92.15
              (lambda (c.131 tmp.64) (let () (boolean? tmp.64))))
             (L.fixnum?.91.16
              (lambda (c.132 tmp.63) (let () (fixnum? tmp.63))))
             (L.procedure-arity.90.17
              (lambda (c.133 tmp.62)
                (let ()
                  (if (procedure? tmp.62)
                    (unsafe-procedure-arity tmp.62)
                    (error 13)))))
             (L.cdr.89.18
              (lambda (c.134 tmp.61)
                (let () (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12)))))
             (L.car.88.19
              (lambda (c.135 tmp.60)
                (let () (if (pair? tmp.60) (unsafe-car tmp.60) (error 11)))))
             (L.vector-ref.87.20
              (lambda (c.136 tmp.58 tmp.59)
                (let ((unsafe-vector-ref.3 (closure-ref c.136 0)))
                  (if (fixnum? tmp.59)
                    (if (vector? tmp.58)
                      (closure-apply
                       unsafe-vector-ref.3
                       unsafe-vector-ref.3
                       tmp.58
                       tmp.59)
                      (error 10))
                    (error 10)))))
             (L.vector-set!.86.21
              (lambda (c.137 tmp.55 tmp.56 tmp.57)
                (let ((unsafe-vector-set!.2 (closure-ref c.137 0)))
                  (if (fixnum? tmp.56)
                    (if (vector? tmp.55)
                      (closure-apply
                       unsafe-vector-set!.2
                       unsafe-vector-set!.2
                       tmp.55
                       tmp.56
                       tmp.57)
                      (error 9))
                    (error 9)))))
             (L.vector-length.85.22
              (lambda (c.138 tmp.54)
                (let ()
                  (if (vector? tmp.54)
                    (unsafe-vector-length tmp.54)
                    (error 8)))))
             (L.make-vector.84.23
              (lambda (c.139 tmp.53)
                (let ((make-init-vector.1 (closure-ref c.139 0)))
                  (if (fixnum? tmp.53)
                    (closure-apply
                     make-init-vector.1
                     make-init-vector.1
                     tmp.53)
                    (error 7)))))
             (L.>=.83.24
              (lambda (c.140 tmp.51 tmp.52)
                (let ()
                  (if (fixnum? tmp.52)
                    (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
                    (error 6)))))
             (L.>.82.25
              (lambda (c.141 tmp.49 tmp.50)
                (let ()
                  (if (fixnum? tmp.50)
                    (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
                    (error 5)))))
             (L.<=.81.26
              (lambda (c.142 tmp.47 tmp.48)
                (let ()
                  (if (fixnum? tmp.48)
                    (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
                    (error 4)))))
             (L.<.80.27
              (lambda (c.143 tmp.45 tmp.46)
                (let ()
                  (if (fixnum? tmp.46)
                    (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
                    (error 3)))))
             (L.-.79.28
              (lambda (c.144 tmp.43 tmp.44)
                (let ()
                  (if (fixnum? tmp.44)
                    (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
                    (error 2)))))
             (L.+.78.29
              (lambda (c.145 tmp.41 tmp.42)
                (let ()
                  (if (fixnum? tmp.42)
                    (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
                    (error 1)))))
             (L.*.77.30
              (lambda (c.146 tmp.39 tmp.40)
                (let ()
                  (if (fixnum? tmp.40)
                    (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
                    (error 0))))))
      (cletrec
       ((unsafe-vector-ref.3 (make-closure L.unsafe-vector-ref.3.1 2))
        (unsafe-vector-set!.2 (make-closure L.unsafe-vector-set!.2.2 3))
        (vector-init-loop.105
         (make-closure L.vector-init-loop.105.3 3 vector-init-loop.105))
        (make-init-vector.1
         (make-closure L.make-init-vector.1.4 1 vector-init-loop.105))
        (eq?.102 (make-closure L.eq?.102.5 2))
        (cons.101 (make-closure L.cons.101.6 2))
        (not.100 (make-closure L.not.100.7 1))
        (vector?.99 (make-closure L.vector?.99.8 1))
        (procedure?.98 (make-closure L.procedure?.98.9 1))
        (pair?.97 (make-closure L.pair?.97.10 1))
        (error?.96 (make-closure L.error?.96.11 1))
        (ascii-char?.95 (make-closure L.ascii-char?.95.12 1))
        (void?.94 (make-closure L.void?.94.13 1))
        (empty?.93 (make-closure L.empty?.93.14 1))
        (boolean?.92 (make-closure L.boolean?.92.15 1))
        (fixnum?.91 (make-closure L.fixnum?.91.16 1))
        (procedure-arity.90 (make-closure L.procedure-arity.90.17 1))
        (cdr.89 (make-closure L.cdr.89.18 1))
        (car.88 (make-closure L.car.88.19 1))
        (vector-ref.87 (make-closure L.vector-ref.87.20 2 unsafe-vector-ref.3))
        (vector-set!.86
         (make-closure L.vector-set!.86.21 3 unsafe-vector-set!.2))
        (vector-length.85 (make-closure L.vector-length.85.22 1))
        (make-vector.84
         (make-closure L.make-vector.84.23 1 make-init-vector.1))
        (>=.83 (make-closure L.>=.83.24 2))
        (>.82 (make-closure L.>.82.25 2))
        (<=.81 (make-closure L.<=.81.26 2))
        (<.80 (make-closure L.<.80.27 2))
        (|-.79| (make-closure L.-.79.28 2))
        (|+.78| (make-closure L.+.78.29 2))
        (*.77 (make-closure L.*.77.30 2)))
       (let ()
         (let ()
           (letrec ((L.F.4.31
                     (lambda (c.147 a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                       (let ((G.5 (closure-ref c.147 0))
                             (|+.78| (closure-ref c.147 1)))
                         (let ((r.14
                                (closure-apply
                                 G.5
                                 G.5
                                 a.7
                                 b.8
                                 c.9
                                 d.10
                                 e.11
                                 f.12
                                 g.13
                                 8)))
                           (closure-apply |+.78| |+.78| r.14 10)))))
                    (L.G.5.32
                     (lambda (c.148 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                       (let ((H.6 (closure-ref c.148 0)))
                         (closure-apply
                          H.6
                          H.6
                          a.15
                          b.16
                          c.17
                          d.18
                          e.19
                          f.20
                          g.21
                          h.22
                          9))))
                    (L.H.6.33
                     (lambda (c.149
                              a.23
                              b.24
                              c.25
                              d.26
                              e.27
                              f.28
                              g.29
                              h.30
                              j.31)
                       (let ((|+.78| (closure-ref c.149 0)))
                         (let ((r1.32 (closure-apply |+.78| |+.78| a.23 b.24)))
                           (let ((r2.33
                                  (closure-apply |+.78| |+.78| r1.32 c.25)))
                             (let ((r3.34
                                    (closure-apply |+.78| |+.78| r2.33 d.26)))
                               (let ((r4.35
                                      (closure-apply
                                       |+.78|
                                       |+.78|
                                       r3.34
                                       e.27)))
                                 (let ((r5.36
                                        (closure-apply
                                         |+.78|
                                         |+.78|
                                         r4.35
                                         f.28)))
                                   (let ((r6.37
                                          (closure-apply
                                           |+.78|
                                           |+.78|
                                           r5.36
                                           g.29)))
                                     (let ((r7.38
                                            (closure-apply
                                             |+.78|
                                             |+.78|
                                             r6.37
                                             h.30)))
                                       (closure-apply
                                        |+.78|
                                        |+.78|
                                        r7.38
                                        j.31))))))))))))
             (cletrec
              ((F.4 (make-closure L.F.4.31 7 G.5 |+.78|))
               (G.5 (make-closure L.G.5.32 8 H.6))
               (H.6 (make-closure L.H.6.33 9 |+.78|)))
              (let () (closure-apply F.4 F.4 1 2 3 4 5 6 7)))))))))
     ) 55)

  )

  (parameterize ([current-pass-list
                  (list
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((unsafe-vector-ref.3
              (lambda (tmp.111 tmp.112)
                (free ())
                (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
                  (if (unsafe-fx>= tmp.112 0)
                    (unsafe-vector-ref tmp.111 tmp.112)
                    (error 10))
                  (error 10))))
             (unsafe-vector-set!.2
              (lambda (tmp.114 tmp.115 tmp.116)
                (free ())
                (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
                  (if (unsafe-fx>= tmp.115 0)
                    (begin (unsafe-vector-set! tmp.114 tmp.115 tmp.116) (void))
                    (error 9))
                  (error 9))))
             (vector-init-loop.105
              (lambda (len.106 i.108 vec.107)
                (free (vector-init-loop.105))
                (if (eq? len.106 i.108)
                  vec.107
                  (begin
                    (unsafe-vector-set! vec.107 i.108 0)
                    (apply
                     vector-init-loop.105
                     len.106
                     (unsafe-fx+ i.108 1)
                     vec.107)))))
             (make-init-vector.1
              (lambda (tmp.103)
                (free (vector-init-loop.105))
                (let ((tmp.104 (unsafe-make-vector tmp.103)))
                  (apply vector-init-loop.105 tmp.103 0 tmp.104))))
             (eq?.102 (lambda (tmp.75 tmp.76) (free ()) (eq? tmp.75 tmp.76)))
             (cons.101 (lambda (tmp.73 tmp.74) (free ()) (cons tmp.73 tmp.74)))
             (not.100 (lambda (tmp.72) (free ()) (not tmp.72)))
             (vector?.99 (lambda (tmp.71) (free ()) (vector? tmp.71)))
             (procedure?.98 (lambda (tmp.70) (free ()) (procedure? tmp.70)))
             (pair?.97 (lambda (tmp.69) (free ()) (pair? tmp.69)))
             (error?.96 (lambda (tmp.68) (free ()) (error? tmp.68)))
             (ascii-char?.95 (lambda (tmp.67) (free ()) (ascii-char? tmp.67)))
             (void?.94 (lambda (tmp.66) (free ()) (void? tmp.66)))
             (empty?.93 (lambda (tmp.65) (free ()) (empty? tmp.65)))
             (boolean?.92 (lambda (tmp.64) (free ()) (boolean? tmp.64)))
             (fixnum?.91 (lambda (tmp.63) (free ()) (fixnum? tmp.63)))
             (procedure-arity.90
              (lambda (tmp.62)
                (free ())
                (if (procedure? tmp.62)
                  (unsafe-procedure-arity tmp.62)
                  (error 13))))
             (cdr.89
              (lambda (tmp.61)
                (free ())
                (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12))))
             (car.88
              (lambda (tmp.60)
                (free ())
                (if (pair? tmp.60) (unsafe-car tmp.60) (error 11))))
             (vector-ref.87
              (lambda (tmp.58 tmp.59)
                (free (unsafe-vector-ref.3))
                (if (fixnum? tmp.59)
                  (if (vector? tmp.58)
                    (apply unsafe-vector-ref.3 tmp.58 tmp.59)
                    (error 10))
                  (error 10))))
             (vector-set!.86
              (lambda (tmp.55 tmp.56 tmp.57)
                (free (unsafe-vector-set!.2))
                (if (fixnum? tmp.56)
                  (if (vector? tmp.55)
                    (apply unsafe-vector-set!.2 tmp.55 tmp.56 tmp.57)
                    (error 9))
                  (error 9))))
             (vector-length.85
              (lambda (tmp.54)
                (free ())
                (if (vector? tmp.54) (unsafe-vector-length tmp.54) (error 8))))
             (make-vector.84
              (lambda (tmp.53)
                (free (make-init-vector.1))
                (if (fixnum? tmp.53)
                  (apply make-init-vector.1 tmp.53)
                  (error 7))))
             (>=.83
              (lambda (tmp.51 tmp.52)
                (free ())
                (if (fixnum? tmp.52)
                  (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
                  (error 6))))
             (>.82
              (lambda (tmp.49 tmp.50)
                (free ())
                (if (fixnum? tmp.50)
                  (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
                  (error 5))))
             (<=.81
              (lambda (tmp.47 tmp.48)
                (free ())
                (if (fixnum? tmp.48)
                  (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
                  (error 4))))
             (<.80
              (lambda (tmp.45 tmp.46)
                (free ())
                (if (fixnum? tmp.46)
                  (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
                  (error 3))))
             (|-.79|
              (lambda (tmp.43 tmp.44)
                (free ())
                (if (fixnum? tmp.44)
                  (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
                  (error 2))))
             (|+.78|
              (lambda (tmp.41 tmp.42)
                (free ())
                (if (fixnum? tmp.42)
                  (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
                  (error 1))))
             (*.77
              (lambda (tmp.39 tmp.40)
                (free ())
                (if (fixnum? tmp.40)
                  (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
                  (error 0)))))
      (let ()
        (let ()
          (letrec ((F.4
                    (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                      (free (G.5 |+.78|))
                      (let ((r.14
                             (apply G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8)))
                        (apply |+.78| r.14 10))))
                   (G.5
                    (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                      (free (H.6))
                      (apply H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
                   (H.6
                    (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
                      (free (|+.78|))
                      (let ((r1.32 (apply |+.78| a.23 b.24)))
                        (let ((r2.33 (apply |+.78| r1.32 c.25)))
                          (let ((r3.34 (apply |+.78| r2.33 d.26)))
                            (let ((r4.35 (apply |+.78| r3.34 e.27)))
                              (let ((r5.36 (apply |+.78| r4.35 f.28)))
                                (let ((r6.37 (apply |+.78| r5.36 g.29)))
                                  (let ((r7.38 (apply |+.78| r6.37 h.30)))
                                    (apply |+.78| r7.38 j.31)))))))))))
            (let () (apply F.4 1 2 3 4 5 6 7)))))))
     ) 55)
  )

  (parameterize ([current-pass-list
                  (list
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((unsafe-vector-ref.3
              (lambda (tmp.111 tmp.112)
                (if (unsafe-fx< tmp.112 (unsafe-vector-length tmp.111))
                  (if (unsafe-fx>= tmp.112 0)
                    (unsafe-vector-ref tmp.111 tmp.112)
                    (error 10))
                  (error 10))))
             (unsafe-vector-set!.2
              (lambda (tmp.114 tmp.115 tmp.116)
                (if (unsafe-fx< tmp.115 (unsafe-vector-length tmp.114))
                  (if (unsafe-fx>= tmp.115 0)
                    (begin (unsafe-vector-set! tmp.114 tmp.115 tmp.116) (void))
                    (error 9))
                  (error 9))))
             (vector-init-loop.105
              (lambda (len.106 i.108 vec.107)
                (if (eq? len.106 i.108)
                  vec.107
                  (begin
                    (unsafe-vector-set! vec.107 i.108 0)
                    (apply
                     vector-init-loop.105
                     len.106
                     (unsafe-fx+ i.108 1)
                     vec.107)))))
             (make-init-vector.1
              (lambda (tmp.103)
                (let ((tmp.104 (unsafe-make-vector tmp.103)))
                  (apply vector-init-loop.105 tmp.103 0 tmp.104))))
             (eq?.102 (lambda (tmp.75 tmp.76) (eq? tmp.75 tmp.76)))
             (cons.101 (lambda (tmp.73 tmp.74) (cons tmp.73 tmp.74)))
             (not.100 (lambda (tmp.72) (not tmp.72)))
             (vector?.99 (lambda (tmp.71) (vector? tmp.71)))
             (procedure?.98 (lambda (tmp.70) (procedure? tmp.70)))
             (pair?.97 (lambda (tmp.69) (pair? tmp.69)))
             (error?.96 (lambda (tmp.68) (error? tmp.68)))
             (ascii-char?.95 (lambda (tmp.67) (ascii-char? tmp.67)))
             (void?.94 (lambda (tmp.66) (void? tmp.66)))
             (empty?.93 (lambda (tmp.65) (empty? tmp.65)))
             (boolean?.92 (lambda (tmp.64) (boolean? tmp.64)))
             (fixnum?.91 (lambda (tmp.63) (fixnum? tmp.63)))
             (procedure-arity.90
              (lambda (tmp.62)
                (if (procedure? tmp.62)
                  (unsafe-procedure-arity tmp.62)
                  (error 13))))
             (cdr.89
              (lambda (tmp.61)
                (if (pair? tmp.61) (unsafe-cdr tmp.61) (error 12))))
             (car.88
              (lambda (tmp.60)
                (if (pair? tmp.60) (unsafe-car tmp.60) (error 11))))
             (vector-ref.87
              (lambda (tmp.58 tmp.59)
                (if (fixnum? tmp.59)
                  (if (vector? tmp.58)
                    (apply unsafe-vector-ref.3 tmp.58 tmp.59)
                    (error 10))
                  (error 10))))
             (vector-set!.86
              (lambda (tmp.55 tmp.56 tmp.57)
                (if (fixnum? tmp.56)
                  (if (vector? tmp.55)
                    (apply unsafe-vector-set!.2 tmp.55 tmp.56 tmp.57)
                    (error 9))
                  (error 9))))
             (vector-length.85
              (lambda (tmp.54)
                (if (vector? tmp.54) (unsafe-vector-length tmp.54) (error 8))))
             (make-vector.84
              (lambda (tmp.53)
                (if (fixnum? tmp.53)
                  (apply make-init-vector.1 tmp.53)
                  (error 7))))
             (>=.83
              (lambda (tmp.51 tmp.52)
                (if (fixnum? tmp.52)
                  (if (fixnum? tmp.51) (unsafe-fx>= tmp.51 tmp.52) (error 6))
                  (error 6))))
             (>.82
              (lambda (tmp.49 tmp.50)
                (if (fixnum? tmp.50)
                  (if (fixnum? tmp.49) (unsafe-fx> tmp.49 tmp.50) (error 5))
                  (error 5))))
             (<=.81
              (lambda (tmp.47 tmp.48)
                (if (fixnum? tmp.48)
                  (if (fixnum? tmp.47) (unsafe-fx<= tmp.47 tmp.48) (error 4))
                  (error 4))))
             (<.80
              (lambda (tmp.45 tmp.46)
                (if (fixnum? tmp.46)
                  (if (fixnum? tmp.45) (unsafe-fx< tmp.45 tmp.46) (error 3))
                  (error 3))))
             (|-.79|
              (lambda (tmp.43 tmp.44)
                (if (fixnum? tmp.44)
                  (if (fixnum? tmp.43) (unsafe-fx- tmp.43 tmp.44) (error 2))
                  (error 2))))
             (|+.78|
              (lambda (tmp.41 tmp.42)
                (if (fixnum? tmp.42)
                  (if (fixnum? tmp.41) (unsafe-fx+ tmp.41 tmp.42) (error 1))
                  (error 1))))
             (*.77
              (lambda (tmp.39 tmp.40)
                (if (fixnum? tmp.40)
                  (if (fixnum? tmp.39) (unsafe-fx* tmp.39 tmp.40) (error 0))
                  (error 0)))))
      (let ()
        (let ()
          (letrec ((F.4
                    (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                      (let ((r.14
                             (apply G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8)))
                        (apply |+.78| r.14 10))))
                   (G.5
                    (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                      (apply H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
                   (H.6
                    (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
                      (let ((r1.32 (apply |+.78| a.23 b.24)))
                        (let ((r2.33 (apply |+.78| r1.32 c.25)))
                          (let ((r3.34 (apply |+.78| r2.33 d.26)))
                            (let ((r4.35 (apply |+.78| r3.34 e.27)))
                              (let ((r5.36 (apply |+.78| r4.35 f.28)))
                                (let ((r6.37 (apply |+.78| r5.36 g.29)))
                                  (let ((r7.38 (apply |+.78| r6.37 h.30)))
                                    (apply |+.78| r7.38 j.31)))))))))))
            (let () (apply F.4 1 2 3 4 5 6 7)))))))
     ) 55)
  )

  (parameterize ([current-pass-list
                  (list
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (let ()
      (let ()
        (letrec ((F.4
                  (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                    (let ((r.14 (apply G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8)))
                      (apply + r.14 10))))
                 (G.5
                  (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                    (apply H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
                 (H.6
                  (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
                    (let ((r1.32 (apply + a.23 b.24)))
                      (let ((r2.33 (apply + r1.32 c.25)))
                        (let ((r3.34 (apply + r2.33 d.26)))
                          (let ((r4.35 (apply + r3.34 e.27)))
                            (let ((r5.36 (apply + r4.35 f.28)))
                              (let ((r6.37 (apply + r5.36 g.29)))
                                (let ((r7.38 (apply + r6.37 h.30)))
                                  (apply + r7.38 j.31)))))))))))
          (let () (apply F.4 1 2 3 4 5 6 7))))))     ) 55)
  )

  (parameterize ([current-pass-list
                  (list
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (letrec ((F.4
              (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
                (let ((r.14 (apply G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8)))
                  (apply + r.14 10))))
             (G.5
              (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
                (apply H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
             (H.6
              (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
                (let ((r1.32 (apply + a.23 b.24)))
                  (let ((r2.33 (apply + r1.32 c.25)))
                    (let ((r3.34 (apply + r2.33 d.26)))
                      (let ((r4.35 (apply + r3.34 e.27)))
                        (let ((r5.36 (apply + r4.35 f.28)))
                          (let ((r6.37 (apply + r5.36 g.29)))
                            (let ((r7.38 (apply + r6.37 h.30)))
                              (apply + r7.38 j.31)))))))))))
      (apply F.4 1 2 3 4 5 6 7)))
     ) 55 ))

  (parameterize ([current-pass-list
                  (list
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define F.4
      (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((r.14 (apply G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8)))
          (apply + r.14 10))))
    (define G.5
      (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (apply H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
    (define H.6
      (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((r1.32 (apply + a.23 b.24)))
          (let ((r2.33 (apply + r1.32 c.25)))
            (let ((r3.34 (apply + r2.33 d.26)))
              (let ((r4.35 (apply + r3.34 e.27)))
                (let ((r5.36 (apply + r4.35 f.28)))
                  (let ((r6.37 (apply + r5.36 g.29)))
                    (let ((r7.38 (apply + r6.37 h.30)))
                      (apply + r7.38 j.31))))))))))
    (apply F.4 1 2 3 4 5 6 7))
     ) 55 ))


    (parameterize ([current-pass-list
                  (list
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define F.4
      (lambda (a.7 b.8 c.9 d.10 e.11 f.12 g.13)
        (let ((r.14 (G.5 a.7 b.8 c.9 d.10 e.11 f.12 g.13 8))) (+ r.14 10))))
    (define G.5
      (lambda (a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22)
        (H.6 a.15 b.16 c.17 d.18 e.19 f.20 g.21 h.22 9)))
    (define H.6
      (lambda (a.23 b.24 c.25 d.26 e.27 f.28 g.29 h.30 j.31)
        (let ((r1.32 (+ a.23 b.24)))
          (let ((r2.33 (+ r1.32 c.25)))
            (let ((r3.34 (+ r2.33 d.26)))
              (let ((r4.35 (+ r3.34 e.27)))
                (let ((r5.36 (+ r4.35 f.28)))
                  (let ((r6.37 (+ r5.36 g.29)))
                    (let ((r7.38 (+ r6.37 h.30))) (+ r7.38 j.31))))))))))
    (F.4 1 2 3 4 5 6 7))
     ) 55 ))

  (parameterize ([current-pass-list
                  (list
                   uniquify
                   expand-macros
                   define->letrec
                   purify-letrec
                   convert-assigned
                   dox-lambdas
                   implement-safe-primops
                   uncover-free
                   convert-closures
                   optimize-known-calls
                   hoist-lambdas
                   implement-closures
                   sequentialize-let
                   implement-safe-apply
                   specify-representation
                   a-normalize
                   select-instructions
                   expose-allocation-pointer
                   uncover-locals
                   undead-analysis
                   conflict-analysis
                   pre-assign-frame-variables
                   assign-frames
                   assign-registers
                   assign-frame-variables
                   discard-call-live
                   replace-locations
                   implement-fvars
                   expose-basic-blocks
                   flatten-program
                   patch-instructions
                   implement-mops
                   generate-x64
                   wrap-x64-boilerplate
                   wrap-x64-run-time)])

    (check-equal?
     (execute '(module
    (define F
      (lambda (a b c d e f g) (let ((r (G a b c d e f g 8))) (+ r 10))))
    (define G (lambda (a b c d e f g h) (H a b c d e f g h 9)))
    (define H
      (lambda (a b c d e f g h j)
        (let ((r1 (+ a b)))
          (let ((r2 (+ r1 c)))
            (let ((r3 (+ r2 d)))
              (let ((r4 (+ r3 e)))
                (let ((r5 (+ r4 f)))
                  (let ((r6 (+ r5 g))) (let ((r7 (+ r6 h))) (+ r7 j))))))))))
    (F 1 2 3 4 5 6 7))
     ) 55 ))
  
  )