#lang racket

(require
 racket/set
 "util.rkt"
 "a7-graph-lib.rkt"
 "a7-compiler-lib.rkt"
 )

 (provide
    ; generate-x64
    ; patch-instructions
    ; select-instructions
    flatten-program)

 (module+ test
  (require rackunit))

; Exercise 1
; Paren-x64-v7 -> x64
; translate Paren-x64-v7 to x64 executable instructions
; support new bitwise operations
(define (generate-x64 p) 
  ; Any -> Boolean
  ; Return true if the given location is valid
  (define (valid-loc? loc)
    (or (register? loc) (valid-addr? loc)))

  (define (valid-register? r)
    (register? r))
  ; (Paren-x64-v3 Program) -> x64
  (define (program->x64 p)
    (match p
      [`(begin ,s ...)
       (string-join (map statement->x64 s) "")]
      [_ (error "Invalid Paren-x64-v3")]))

  ; (Paren-x64-v3 Statement) -> x64
  (define (statement->x64 s)
  ;(displayln (format "to x64 statement: ~a" s))
    (match s
      [`(set! ,loc ,v)
       #:when (and (valid-loc? loc) (not (list? v)))
       (format "mov ~a, ~a\n  " (loc->x64 loc) v)]
      [`(set! ,reg ,loc)
       #:when (and (valid-register? reg) (valid-loc? loc))
       (format "mov ~a, ~a\n  " reg (loc->x64 loc))]
      [`(set! ,reg (,binop ,reg ,v))
       #:when (and (valid-binop? binop) (int32? v))
       (format "~a ~a, ~a\n  " (binop->ins binop) reg v)]
      [`(set! ,reg (,binop ,reg ,loc))
       #:when (and (valid-binop? binop) (valid-loc? loc))
       (format "~a ~a, ~a\n  " (binop->ins binop) reg (loc->x64 loc))]
      [`(define ,label ,s)
       (format "~a:\n  ~a" label (statement->x64 s))]
      [`(jump ,trg)
       (format "jmp ~a\n" trg)]
      [`(compare ,reg ,opand)
       (format "cmp ~a, ~a\n  " reg opand)] ;; missing , in cmp
      [`(jump-if ,cmp ,trg)
       (format "~a ~a\n  " (cmp->jmp cmp) trg)]
      [`(nop) ""]
      [_ (error "Invalid Paren-x64-v3 statement")]
      ))

  ; (Paren-x64-v3 loc) -> string
  (define (loc->x64 loc)
    (match loc
      [`,reg #:when (valid-register? reg) reg]
      [`(,rbp ,binop ,o) (format "QWORD [~a ~a ~a]" rbp binop o)]
      [_ (error "Invalid loc")])) 

  ; (Paren-x64-v3 binop) -> string
  (define (binop->ins b)
    (match b
      ['+ "add"]
      ['* "imul"]
      ['- "sub"]
      ['arithmetic-shift-right "sar"]
      ['bitwise-and "and"]
      ['bitwise-ior "or"]
      ['bitwise-xor "xor"]
      [_ (error "Invalid binop")]))
  
  ; cmp -> (x64 jump)
  (define (cmp->jmp cmp)
    (match cmp
      ['neq? "jne"]
      ['eq? "je"]
      ['< "jl"]
      ['<= "jle"]
      ['> "jg"]
      ['>= "jge"]
      [_ (error "Invalid cmp")]))



  (string-trim (program->x64 p) "  "))

(module+ test

    (check-equal? (generate-x64 '(begin (set! rax (bitwise-and rax 64))
                                         (set! rbx (bitwise-ior rbx rax))
                                         (set! rcx (bitwise-xor rcx (rbp + 8)))
                                         (set! r13 (arithmetic-shift-right r13 (rbp + 16)))))
                                         "and rax, 64\n  or rbx, rax\n  xor rcx, QWORD [rbp + 8]\n  sar r13, QWORD [rbp + 16]\n"
                                         )

  (check-equal? 
    (parameterize ([current-frame-base-pointer-register 'rdi]) (generate-x64 '(begin (set! (rdi + 8) rax))))
    "mov QWORD [rdi + 8], rax\n")

  (check-equal? (generate-x64
  '(begin
     (define L.main.5 (nop))
     (set! rdi 100)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.g.2.4 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (nop)
     (set! rdi r14)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.f.1.3 (nop))
     (set! r14 rdi)
     (compare r14 10)
     (jump-if > L.nest_t.6)
     (jump L.nest_f.7)
     (define L.nest_t.6 (set! r13 1))
     (set! r14 (- r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.7 (set! rsi 1))
     (set! rdi r14)
     (nop)
     (jump L.L.g.2.4)))
 "L.main.5:\n  mov rdi, 100\n  jmp L.L.f.1.3\nL.L.g.2.4:\n  mov r14, rdi\n  mov r13, rsi\n  add r14, r13\n  mov rdi, r14\n  jmp L.L.f.1.3\nL.L.f.1.3:\n  mov r14, rdi\n  cmp r14, 10\n  jg L.nest_t.6\n  jmp L.nest_f.7\nL.nest_t.6:\n  mov r13, 1\n  sub r14, r13\n  mov rax, r14\n  jmp r15\nL.nest_f.7:\n  mov rsi, 1\n  mov rdi, r14\n  jmp L.L.g.2.4\n"
)

  (check-equal? (generate-x64
  '(begin
     (define L.main.5 (nop))
     (set! rdi 100)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.g.2.4 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (nop)
     (set! rdi r14)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.f.1.3 (nop))
     (set! r14 rdi)
     (compare r14 10)
     (jump-if > L.nest_t.6)
     (jump L.nest_f.7)
     (define L.nest_t.6 (set! r13 1))
     (set! r14 (- r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.7 (set! rsi 1))
     (set! rdi r14)
     (nop)
     (jump L.L.g.2.4)))
  "L.main.5:\n  mov rdi, 100\n  jmp L.L.f.1.3\nL.L.g.2.4:\n  mov r14, rdi\n  mov r13, rsi\n  add r14, r13\n  mov rdi, r14\n  jmp L.L.f.1.3\nL.L.f.1.3:\n  mov r14, rdi\n  cmp r14, 10\n  jg L.nest_t.6\n  jmp L.nest_f.7\nL.nest_t.6:\n  mov r13, 1\n  sub r14, r13\n  mov rax, r14\n  jmp r15\nL.nest_f.7:\n  mov rsi, 1\n  mov rdi, r14\n  jmp L.L.g.2.4\n"
  )

  (check-equal?
  (generate-x64
  '(begin
     (define L.main.1 (nop))
     (set! r14 13)
     (set! r13 3)
     (set! r14 (- r14 r13))
     (nop)
     (compare r14 10)
     (jump-if > L.nest_t.2)
     (jump L.nest_f.3)
     (define L.nest_t.2 (set! r14 (+ r14 r14)))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.3 (set! r14 (- r14 r14)))
     (set! rax r14)
     (jump r15)))
    "L.main.1:\n  mov r14, 13\n  mov r13, 3\n  sub r14, r13\n  cmp r14, 10\n  jg L.nest_t.2\n  jmp L.nest_f.3\nL.nest_t.2:\n  add r14, r14\n  mov rax, r14\n  jmp r15\nL.nest_f.3:\n  sub r14, r14\n  mov rax, r14\n  jmp r15\n"
  )

  (check-equal? 
    (generate-x64
    '(begin
      (define L.main.1 (nop))
      (set! r14 13)
      (set! r13 3)
      (set! r14 (- r14 r13))
      (nop)
      (set! rax r14)
      (jump r15)))
  "L.main.1:\n  mov r14, 13\n  mov r13, 3\n  sub r14, r13\n  mov rax, r14\n  jmp r15\n")

  (check-equal? 
    (generate-x64
    '(begin
      (define L.main.3 (set! (rbp + 0) r15))
      (set! rbp (+ rbp 8))
      (set! rsi 2)
      (set! rdi 1)
      (set! r15 L.rp.4)
      (jump L.L.f1.1.2)
      (define L.L.f1.1.2 (nop))
      (set! r14 rdi)
      (set! r13 rsi)
      (set! r14 (+ r14 r13))
      (set! rax r14)
      (jump r15)
      (define L.rp.4 (set! rbp (- rbp 8)))
      (set! r15 rax)
      (set! rsi r15)
      (set! rdi r15)
      (set! r15 (rbp + 0))
      (jump L.L.f1.1.2)))
    "L.main.3:\n  mov QWORD [rbp + 0], r15\n  add rbp, 8\n  mov rsi, 2\n  mov rdi, 1\n  mov r15, L.rp.4\n  jmp L.L.f1.1.2\nL.L.f1.1.2:\n  mov r14, rdi\n  mov r13, rsi\n  add r14, r13\n  mov rax, r14\n  jmp r15\nL.rp.4:\n  sub rbp, 8\n  mov r15, rax\n  mov rsi, r15\n  mov rdi, r15\n  mov r15, QWORD [rbp + 0]\n  jmp L.L.f1.1.2\n"
  )

  (check-equal? (generate-x64
  '(begin
     (define L.main.1 (nop))
     (set! r14 1)
     (set! r13 3)
     (set! r14 (+ r14 r13))
     (set! rax r14)
     (jump r15)))
  "L.main.1:\n  mov r14, 1\n  mov r13, 3\n  add r14, r13\n  mov rax, r14\n  jmp r15\n")
)



; Exercise 2
;  Paren-asm v7 -> Paren-x64 v7
; redesign and extend patch-instructions, which translate Paren-asm v7 to Paren-x64 v7
; consider edge cases carefully, such as (set! (rbp + 0) (+ (rbp + 8) 2147483648)). use (current-patch-instructions-registers)
; new restriction: arithmetic-shift-right second operand must be number and can only support 63 bits
(define (patch-instructions p)

  (define tmp1 (first (current-patch-instructions-registers)))
  (define tmp2 (second (current-patch-instructions-registers)))

  (define (prloc? r)
    (or (valid-addr? r) (register? r)))


  
  (define (patch-jump trg)
    (cond 
      [(label? trg) (list `(jump ,trg))]
      [(register? trg) (list `(jump ,trg))]
      [(valid-addr? trg) (list `(set! ,tmp1 ,trg) `(jump ,tmp1))]))
  
  (define (patch-cmp s)
   (match s 
    [`(compare ,addr1 ,addr2) #:when (and (valid-addr? addr1) (valid-addr? addr2))
      (list `(set! ,tmp1 ,addr2)
            `(set! ,tmp1 (* ,tmp1 -1))
            `(set! ,tmp1 (+ ,tmp1 ,addr1))
            `(compare ,tmp1 0))]
    [`(compare ,addr1 ,v2) #:when (valid-addr? addr1)
      (list `(set! ,tmp1 ,addr1)
            `(compare ,tmp1 ,v2))]
    [`(compare ,v1 ,addr2) #:when (valid-addr? addr2)
      (list `(set! ,tmp1 ,addr2)
            `(compare ,v1 ,tmp1))]
    [`(compare ,v1 ,v2)
      (list s)]))
  

  (define (patch-binop s)
    (match s
      [`(set! ,reg (,binop ,reg ,num)) #:when (and (or (int32? num) (prloc? num)) (register? reg))
        (list s)] 
      [`(set! ,reg (,binop ,reg ,num)) #:when (and (number? num) (register? reg))
        (list `(set! ,tmp1 ,num) `(set! ,reg (,binop ,reg ,tmp1)))] 
      [`(set! ,addr1 (,binop ,addr2 ,num)) #:when (and (or (int32? num) (valid-addr? num) (register? num)) (valid-binop? binop) (prloc? addr1) (prloc? addr2))
        (list `(set! ,tmp1 ,addr2)
              `(set! ,tmp1 (,binop ,tmp1 ,num))
              `(set! ,addr1 ,tmp1))]
      [`(set! ,addr1 (,binop ,addr2 ,num)) #:when (and (int64? num) (valid-binop? binop) (prloc? addr1) (prloc? addr2))
        (list `(set! ,tmp1 ,addr2)
              `(set! ,tmp2 ,num)
              `(set! ,tmp1 (,binop ,tmp1 ,tmp2))
              `(set! ,addr1 ,tmp1))]
      ))

  (define (patch-s s) 
    (match s 
      [`(define ,label ,s) 
        (let ([res (patch-s s)])
          (if (> (length res) 1)
            (append `((define ,label ,(first res))) (rest res))
            (list `(define ,label ,(first res)))))]
      [`(jump ,trg) (patch-jump trg)]   
      [`(compare ,rloc ,v2) ; rloc can be addr or reg
        (patch-cmp s)]
      [`(jump-if ,cmp ,label) #:when (and (cmp? cmp) (label? label))
        (list `(jump-if ,cmp ,label))]
      [`(set! ,v1 (,binop ,v2 ,v3)) #:when (valid-binop? binop)
        (patch-binop s)]
      [`(set! ,v1 ,v2)
        (list s)]
      [`(nop) (list s)]))

  (match p 
    [`(begin ,s ...) `(begin ,@(append-map patch-s s))]))


;; used for tracking tests
#;(uniquify '(module (define f1 (lambda (x y) (+ x y)))
                (let ([x (apply f1 1 2)])
                  (apply f1 x x))))
#;(uniquify '(module 
                (+ 1 3)))
#;(uniquify '(module 
                (let ([x (- 13 3)])
                  x)))
#;(uniquify '(module 
                (let ([x (- 13 3)])
                  (if (> x 10)
                    (+ x x)
                    (- x x))))) 
#;(uniquify '(module (define f (lambda (x) (if (> x 10) (- x 1) (apply g x 1))))
                      (define g (lambda (x y) (let ([x (+ x y)]) (apply f x))))
                      (apply f 100)))                                    
#;(parameterize ([current-parameter-registers '(rdi)]) (uniquify '(module (define f (lambda (x) (if (> x 10) (- x 1) (apply g x 1))))
                      (define g (lambda (x y) (let ([x (+ x y)]) (apply f x))))
                      (apply f 100))))  
(module+ test
    (check-equal? (patch-instructions `(begin 
                                       (set! (rbp + 0) (bitwise-and (rbp + 8) 64))
                                       (set! (rbp + 0) (bitwise-ior (rbp + 8) r11))
                                       (set! (rbp + 0) (bitwise-and  (rbp + 8) (rbp + 16)))
                                       (set! (rbp + 0) (bitwise-xor r12 64))
                                       (set! (rbp + 0) (bitwise-ior r12 r13))
                                       (set! (rbp + 0) (bitwise-xor r12 (rbp + 8)))
                                       ))
                                    `(begin
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-and r10 64))
                                        (set! (rbp + 0) r10)
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-ior r10 r11))
                                        (set! (rbp + 0) r10)
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-and r10 (rbp + 16)))
                                        (set! (rbp + 0) r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-xor r10 64))
                                        (set! (rbp + 0) r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-ior r10 r13))
                                        (set! (rbp + 0) r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-xor r10 (rbp + 8)))
                                        (set! (rbp + 0) r10))
                                           "patch bitwise test 1" )
 
      (check-equal? (patch-instructions `(begin 
                                       (set! rcx (bitwise-and (rbp + 8) 64))
                                       (set! rcx (bitwise-ior (rbp + 8) r11))
                                       (set! rcx (bitwise-xor (rbp + 8) (rbp + 16)))
                                       (set! rcx (bitwise-and r12 64))
                                       (set! rcx (bitwise-ior r12 r13))
                                       (set! rcx (bitwise-xor r12 (rbp + 8)))
                                       ))
                                    `(begin
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-and r10 64))
                                        (set! rcx r10)
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-ior r10 r11))
                                        (set! rcx r10)
                                        (set! r10 (rbp + 8))
                                        (set! r10 (bitwise-xor r10 (rbp + 16)))
                                        (set! rcx r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-and r10 64))
                                        (set! rcx r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-ior r10 r13))
                                        (set! rcx r10)
                                        (set! r10 r12)
                                        (set! r10 (bitwise-xor r10 (rbp + 8)))
                                        (set! rcx r10))
                                           "patch bitwise test 2" )

 (check-equal? (patch-instructions `(begin 
                                      (set! (rbp + 0) (bitwise-and (rbp + 8) 2147483648))
                                      ))
                                    `(begin
                                        (set! r10 (rbp + 8))
                                        (set! r11 2147483648)
                                        (set! r10 (bitwise-and r10 r11))
                                        (set! (rbp + 0) r10))
                                           "patch bitwise test int64" )  
  (check-equal? (patch-instructions `(begin 
                                      (set! rax (bitwise-ior rax 2147483648))
                                      ))
                                    `(begin (set! r10 2147483648) (set! rax (bitwise-ior rax r10)))
                                           "patch test int64 2" )  

  (check-equal? (patch-instructions `(begin 
                                      (set! rax (arithmetic-shift-right rax 2147483648))
                                      (set! rax (arithmetic-shift-right (rbp + 16) 0))
                                      (set! rax (arithmetic-shift-right r11 9223372036854775807))
                                      ))
                                    `(begin
                                        (set! r10 2147483648)
                                        (set! rax (arithmetic-shift-right rax r10))
                                        (set! r10 (rbp + 16))
                                        (set! r10 (arithmetic-shift-right r10 0))
                                        (set! rax r10)
                                        (set! r10 r11)
                                        (set! r11 9223372036854775807)
                                        (set! r10 (arithmetic-shift-right r10 r11))
                                        (set! rax r10))
                                           "patch test shift right test" )  

  (check-equal? (patch-instructions `(begin (define L.start.1 (jump rax))))
    '(begin (define L.start.1 (jump rax))))
  
  (check-equal? (patch-instructions `(begin (define L.start.1 (jump L.start.1))))
    '(begin (define L.start.1 (jump L.start.1))))
  
  (check-equal? (patch-instructions `(begin (define L.start.1 (jump (rbp + 800)))))
    `(begin (define L.start.1 (set! r10 (rbp + 800))) (jump r10)))

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! rax 10)) (compare (rbp + 16) (rbp - 16)) (jump-if < L.start.1)
        (jump L.start.2)))
    `(begin
        (define L.start.1 (set! rax 10))
        (set! r10 (rbp - 16))
        (set! r10 (* r10 -1))
        (set! r10 (+ r10 (rbp + 16)))
        (compare r10 0)
        (jump-if < L.start.1)
        (jump L.start.2)))

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! rax 10)) (compare (rbp + 16) r13) (jump-if < L.start.1)
        (jump L.start.2)))
    `(begin
      (define L.start.1 (set! rax 10))
      (set! r10 (rbp + 16))
      (compare r10 r13)
      (jump-if < L.start.1)
      (jump L.start.2)))

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! rax 10)) (compare (rbp + 16) r10) (jump-if < L.start.1)
        (jump L.start.2)))
    `(begin
      (define L.start.1 (set! rax 10))
      (set! r10 (rbp + 16))
      (compare r10 r10)
      (jump-if < L.start.1)
      (jump L.start.2)))

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! r8 1))
                                      (compare r8 0)
                                      (jump-if >= L.start.1)))
                                    `(begin (define L.start.1 (set! r8 1)) (compare r8 0) (jump-if >= L.start.1))
                                           "patch test 1" )

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! r8 1))
                                      (jump (rbp - 8))
                                      (compare r8 0)
                                      (jump-if >= L.start.1)))
                                    `(begin
                                      (define L.start.1 (set! r8 1))
                                      (set! r10 (rbp - 8))
                                      (jump r10)
                                      (compare r8 0)
                                      (jump-if >= L.start.1))
                                           "patch test 2" )

  (check-equal? (patch-instructions `(begin (define L.start.1 (set! r8 1))
                                      (compare r8 (rbp - 8))
                                      (compare (rbp - 16) r10)
                                      (compare (rbp + 8) 66)
                                      (compare (rbp + 16) (rbp + 16))
                                      (compare (rbp + 16) (rbp + 24))
                                      (jump-if >= L.start.1)))
                                    `(begin
                                        (define L.start.1 (set! r8 1))
                                        (set! r10 (rbp - 8))
                                        (compare r8 r10)
                                        (set! r10 (rbp - 16))
                                        (compare r10 r10)
                                        (set! r10 (rbp + 8))
                                        (compare r10 66)
                                        (set! r10 (rbp + 16))
                                        (set! r10 (* r10 -1))
                                        (set! r10 (+ r10 (rbp + 16)))
                                        (compare r10 0)
                                        (set! r10 (rbp + 24))
                                        (set! r10 (* r10 -1))
                                        (set! r10 (+ r10 (rbp + 16)))
                                        (compare r10 0)
                                        (jump-if >= L.start.1))
                                           "patch test 3" )

  (check-equal? (patch-instructions `(begin 
                                       (set! (rbp + 0) (+ (rbp + 8) 64))
                                       (set! (rbp + 0) (+ (rbp + 8) r11))
                                       (set! (rbp + 0) (+ (rbp + 8) (rbp + 16)))
                                       (set! (rbp + 0) (* r12 64))
                                       (set! (rbp + 0) (* r12 r13))
                                       (set! (rbp + 0) (* r12 (rbp + 8)))
                                       ))
                                    `(begin
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 64))
                                      (set! (rbp + 0) r10)
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 r11))
                                      (set! (rbp + 0) r10)
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 (rbp + 16)))
                                      (set! (rbp + 0) r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 64))
                                      (set! (rbp + 0) r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 r13))
                                      (set! (rbp + 0) r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 (rbp + 8)))
                                      (set! (rbp + 0) r10))
                                           "patch test 4" )

  (check-equal? (patch-instructions `(begin 
                                       (set! rcx (+ (rbp + 8) 64))
                                       (set! rcx (+ (rbp + 8) r11))
                                       (set! rcx (+ (rbp + 8) (rbp + 16)))
                                       (set! rcx (* r12 64))
                                       (set! rcx (* r12 r13))
                                       (set! rcx (* r12 (rbp + 8)))
                                       ))
                                    `(begin
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 64))
                                      (set! rcx r10)
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 r11))
                                      (set! rcx r10)
                                      (set! r10 (rbp + 8))
                                      (set! r10 (+ r10 (rbp + 16)))
                                      (set! rcx r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 64))
                                      (set! rcx r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 r13))
                                      (set! rcx r10)
                                      (set! r10 r12)
                                      (set! r10 (* r10 (rbp + 8)))
                                      (set! rcx r10))
                                           "patch test 5" )

  (check-equal? (patch-instructions `(begin 
                                      (set! (rbp + 0) (+ (rbp + 8) 2147483648))
                                      ))
                                    `(begin
                                        (set! r10 (rbp + 8))
                                        (set! r11 2147483648)
                                        (set! r10 (+ r10 r11))
                                        (set! (rbp + 0) r10))
                                           "patch test int64" )  

  (check-equal? (patch-instructions `(begin 
                                      (set! rax (+ rax 2147483648))
                                      ))
                                    `(begin (set! r10 2147483648) (set! rax (+ rax r10)))
                                           "patch test int64 2" )  
  
  (check-equal? (patch-instructions `(begin 
                                      (set! rax (+ rax 7))
                                      ))
                                    `(begin (set! rax (+ rax 7)))
                                           "patch test int64 2" ) 

  (check-equal? (patch-instructions `(begin 
                                      (define L.z.1 (set! rbx rcx))
                                      (define L.z.2 (set! r11 (+ (rbp + 0) rcx)))
                                      ))
                                    `(begin
                                      (define L.z.1 (set! rbx rcx))
                                      (define L.z.2 (set! r10 (rbp + 0)))
                                      (set! r10 (+ r10 rcx))
                                      (set! r11 r10))
                                           "patch test 7" )   
  (check-equal? (patch-instructions
  '(begin
     (define L.main.3 (set! (rbp + 0) r15))
     (set! rbp (+ rbp 8))
     (set! rsi 2)
     (set! rdi 1)
     (set! r15 L.rp.4)
     (jump L.L.f1.1.2)
     (define L.L.f1.1.2 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.rp.4 (set! rbp (- rbp 8)))
     (set! r15 rax)
     (set! rsi r15)
     (set! rdi r15)
     (set! r15 (rbp + 0))
     (jump L.L.f1.1.2)))
  '(begin
    (define L.main.3 (set! (rbp + 0) r15))
    (set! rbp (+ rbp 8))
    (set! rsi 2)
    (set! rdi 1)
    (set! r15 L.rp.4)
    (jump L.L.f1.1.2)
    (define L.L.f1.1.2 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r14 (+ r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.rp.4 (set! rbp (- rbp 8)))
    (set! r15 rax)
    (set! rsi r15)
    (set! rdi r15)
    (set! r15 (rbp + 0))
    (jump L.L.f1.1.2)))

  (check-equal? (patch-instructions
  '(begin
     (define L.main.1 (nop))
     (set! r14 1)
     (set! r13 3)
     (set! r14 (+ r14 r13))
     (set! rax r14)
     (jump r15)))
 '(begin
    (define L.main.1 (nop))
    (set! r14 1)
    (set! r13 3)
    (set! r14 (+ r14 r13))
    (set! rax r14)
    (jump r15)))

  (check-equal? (patch-instructions
  '(begin
     (define L.main.1 (nop))
     (set! r14 13)
     (set! r13 3)
     (set! r14 (- r14 r13))
     (nop)
     (set! rax r14)
     (jump r15)))
 '(begin
    (define L.main.1 (nop))
    (set! r14 13)
    (set! r13 3)
    (set! r14 (- r14 r13))
    (nop)
    (set! rax r14)
    (jump r15)))
  
  (check-equal? (patch-instructions
  '(begin
     (define L.main.1 (nop))
     (set! r14 13)
     (set! r13 3)
     (set! r14 (- r14 r13))
     (nop)
     (compare r14 10)
     (jump-if > L.nest_t.2)
     (jump L.nest_f.3)
     (define L.nest_t.2 (set! r14 (+ r14 r14)))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.3 (set! r14 (- r14 r14)))
     (set! rax r14)
     (jump r15)))
 '(begin
    (define L.main.1 (nop))
    (set! r14 13)
    (set! r13 3)
    (set! r14 (- r14 r13))
    (nop)
    (compare r14 10)
    (jump-if > L.nest_t.2)
    (jump L.nest_f.3)
    (define L.nest_t.2 (set! r14 (+ r14 r14)))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.3 (set! r14 (- r14 r14)))
    (set! rax r14)
    (jump r15)))

  (check-equal? (patch-instructions
  '(begin
     (define L.main.5 (nop))
     (set! rdi 100)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.g.2.4 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (nop)
     (set! rdi r14)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.f.1.3 (nop))
     (set! r14 rdi)
     (compare r14 10)
     (jump-if > L.nest_t.6)
     (jump L.nest_f.7)
     (define L.nest_t.6 (set! r13 1))
     (set! r14 (- r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.7 (set! rsi 1))
     (set! rdi r14)
     (nop)
     (jump L.L.g.2.4)))
 '(begin
    (define L.main.5 (nop))
    (set! rdi 100)
    (nop)
    (jump L.L.f.1.3)
    (define L.L.g.2.4 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r14 (+ r14 r13))
    (nop)
    (set! rdi r14)
    (nop)
    (jump L.L.f.1.3)
    (define L.L.f.1.3 (nop))
    (set! r14 rdi)
    (compare r14 10)
    (jump-if > L.nest_t.6)
    (jump L.nest_f.7)
    (define L.nest_t.6 (set! r13 1))
    (set! r14 (- r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.7 (set! rsi 1))
    (set! rdi r14)
    (nop)
    (jump L.L.g.2.4)))

    (check-equal? (patch-instructions
  '(begin
     (define L.main.5 (nop))
     (set! rdi 100)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.g.2.4 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (nop)
     (set! rdi r14)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.f.1.3 (nop))
     (set! r14 rdi)
     (compare r14 10)
     (jump-if > L.nest_t.6)
     (jump L.nest_f.7)
     (define L.nest_t.6 (set! r13 1))
     (set! r14 (- r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.7 (set! rsi 1))
     (set! rdi r14)
     (nop)
     (jump L.L.g.2.4)))
 '(begin
    (define L.main.5 (nop))
    (set! rdi 100)
    (nop)
    (jump L.L.f.1.3)
    (define L.L.g.2.4 (nop))
    (set! r14 rdi)
    (set! r13 rsi)
    (set! r14 (+ r14 r13))
    (nop)
    (set! rdi r14)
    (nop)
    (jump L.L.f.1.3)
    (define L.L.f.1.3 (nop))
    (set! r14 rdi)
    (compare r14 10)
    (jump-if > L.nest_t.6)
    (jump L.nest_f.7)
    (define L.nest_t.6 (set! r13 1))
    (set! r14 (- r14 r13))
    (set! rax r14)
    (jump r15)
    (define L.nest_f.7 (set! rsi 1))
    (set! rdi r14)
    (nop)
    (jump L.L.g.2.4)))

  (check-equal? (parameterize ([current-patch-instructions-registers '(rdi rsi)]) (patch-instructions
  '(begin
     (define L.main.5 (nop))
     (set! rdi 100)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.g.2.4 (nop))
     (set! r14 rdi)
     (set! r13 rsi)
     (set! r14 (+ r14 r13))
     (nop)
     (set! rdi r14)
     (nop)
     (jump L.L.f.1.3)
     (define L.L.f.1.3 (nop))
     (set! r14 rdi)
     (compare r14 10)
     (jump-if > L.nest_t.6)
     (jump L.nest_f.7)
     (define L.nest_t.6 (set! r13 1))
     (set! r14 (- r14 r13))
     (set! rax r14)
     (jump r15)
     (define L.nest_f.7 (set! rsi 1))
     (set! rdi r14)
     (nop)
     (jump L.L.g.2.4))) )
    `(begin
      (define L.main.5 (nop))
      (set! rdi 100)
      (nop)
      (jump L.L.f.1.3)
      (define L.L.g.2.4 (nop))
      (set! r14 rdi)
      (set! r13 rsi)
      (set! r14 (+ r14 r13))
      (nop)
      (set! rdi r14)
      (nop)
      (jump L.L.f.1.3)
      (define L.L.f.1.3 (nop))
      (set! r14 rdi)
      (compare r14 10)
      (jump-if > L.nest_t.6)
      (jump L.nest_f.7)
      (define L.nest_t.6 (set! r13 1))
      (set! r14 (- r14 r13))
      (set! rax r14)
      (jump r15)
      (define L.nest_f.7 (set! rsi 1))
      (set! rdi r14)
      (nop)
      (jump L.L.g.2.4)))
)

; Exercise 4
;  Values-bits-lang v7 -> Block-lang v7
; extend the implementation of select-instructions.
; handle apply by using calling conventions
; assume input is syntactically correct
(define (select-instructions p)
 ;To implement fvars later, we requires that current-frame-base-pointer-register is assigned only by incrementing
 ; or decrementing it by an integer literal. Other uses current-frame-base-pointer-register are invalid programs.
 ; Later passes will assume this in order to compute frame variable locations.
    (define return-loc (fresh 'ra))
    ;  fv_0 ... fv_k-1 are the first k frame variables, i.e., locations on this function’s frame. 
    (define frames empty)
    
    ; The info field records all the new frames created in the block

    (define (select-n n res-loc)
      (match n 
        [`,num #:when (int64? num) (list `(set! ,res-loc ,num))]
        [`,v #:when (aloc? v) (list `(set! ,res-loc ,v))]
        [`(,binop ,v1 ,v2) #:when (valid-binop? binop)
          (let* ([res1 (fresh)])
              (append (select-n v1 res1) (list `(set! ,res-loc (,binop ,res1 ,v2)))))]
        [`(apply ,f ,vs ...) 
          (let* ([rp (fresh-label 'rp)]
                 [reglist (current-parameter-registers)]
                 [assigned-list (assign-n vs reglist)])
            (list `(return-point ,rp
                      (begin 
                        ,@(map (lambda (x y) `(set! ,x ,y)) assigned-list vs)
                         (set! ,(current-return-address-register) ,rp)
                         (jump ,f ,(current-frame-base-pointer-register) ,(current-return-address-register) ,@assigned-list))
                         )
                  `(set! ,res-loc ,(current-return-value-register))))]
      ))

    (define (assign-n vs regs)
      (define (apply-assign-loc vs res)
        (if (empty? vs)
            res
            (apply-assign-loc (rest vs) (cons (fresh 'nfv) res)))
      )

      (if (<= (length vs) (length regs))
          (apply-assign-reg vs regs)
          (let ([ass-reg (apply-assign-reg (take vs (length regs)) regs)]
                [ass-loc (apply-assign-loc (take-right vs (- (length vs) (length regs))) empty)])
              (set! frames (cons ass-loc frames))
              (append ass-reg (reverse ass-loc))))
          )
    
    (define (select-b b)
      (local [
        (define return-loc (fresh 'ra))

        (define counter -1)

        (define (make-args-impl args regs res)
          (if (empty? args)
              res
              (if (empty? regs)
                  (begin
                    (set! counter (add1 counter))
                    (make-args-impl (rest args) regs (cons `(set! ,(first args) ,(make-fvar counter)) res)))
                  (make-args-impl (rest args) (rest regs) (cons `(set! ,(first args) ,(first regs)) res)))))
      ]
      (set! frames empty)
      (match b
        [`(define ,func (lambda (,args ...) ,e)) #:when (label? func)
          (let ([cont (select-e-impl e return-loc)]
                [reglist (current-parameter-registers)])
          `(define ,func ((new-frames ,(reverse frames))) (begin (set! ,return-loc ,(current-return-address-register)) ,@(make-args-impl args reglist empty) ,@cont) ))])
      ))


    (define (select-e-impl e tmp-rp)
      (match e 
       [`,num #:when (int64? num) 
            `((set! ,(current-return-value-register) ,num)
              (jump ,tmp-rp,(current-frame-base-pointer-register) ,(current-return-value-register)))]
       [`,v #:when (aloc? v) 
            `((set! ,(current-return-value-register) ,v)
              (jump ,tmp-rp ,(current-frame-base-pointer-register) ,(current-return-value-register)))]
       [`(,binop ,v1 ,v2) #:when (valid-binop? binop)
          (let ([res-loc (fresh)])
               `(,@(select-n e res-loc)
                (set! ,(current-return-value-register) ,res-loc)
                (jump ,tmp-rp ,(current-frame-base-pointer-register) ,(current-return-value-register)))
          )]
       [`(let ([,x ,n]) ,e) #:when (aloc? x)
          `(,@(select-n n x)
            ,@(select-e-impl e tmp-rp))]
       [`(if (,cmp ,v1 ,v2) ,e1 ,e2) #:when (cmp? cmp)
            (let ([tmp (fresh)])
              `((set! ,tmp ,v1)
                (if (,cmp ,tmp ,v2)
                  (begin ,@(select-e-impl e1 tmp-rp))
                  (begin ,@(select-e-impl e2 tmp-rp)))))]
    ;  We want limit the live ranges of registers to help the register allocator makes better use of registers, 
    ; we should generate accesses to registers last to limit their live ranges. Loading the return address register 
    ; last can also help limit its live range for simple functions.
        [`(apply ,f ,vs ...)
          (let* ([reglist (current-parameter-registers)]
                 [assigned-reg (reverse (apply-assign-reg vs reglist))]
                 [assigned-frame (reverse (apply-assign-frame vs reglist))])
                ;  (displayln (format "assigned: ~a" assigned))
            `(,@(map (lambda (x y) `(set! ,x ,y)) assigned-frame (take-right vs (length assigned-frame)))
              ,@(map (lambda (x y) `(set! ,x ,y)) assigned-reg (take vs (length assigned-reg)))
                (set! ,(current-return-address-register) ,tmp-rp)
                (jump ,f ,(current-frame-base-pointer-register) ,(current-return-address-register) ,@assigned-reg ,@assigned-frame)))]
       ))
    
    (define (apply-assign-reg vs regs)
      (local [(define (apply-impl vs regs res)
                (if (empty? regs)
                    res
                    (apply-impl (rest vs) (rest regs) (cons (first regs) res))))]
        (if (> (length vs) (length regs))
          (apply-impl (take-right vs (length regs)) regs empty)
          (apply-impl vs (take regs (length vs)) empty))
        )
    )


    (define (apply-assign-frame vs regs)
      (local [(define counter -1)
        (define (assign-impl vs res)
           (if (empty? vs)
              res
              (begin (set! counter (add1 counter))
                (assign-impl (rest vs) (cons (make-fvar counter) res)))
                  ))
      ]
      (if (> (length vs) (length regs))
          (assign-impl (take vs (- (length vs) (length regs))) empty)
          empty))
     )

    (define (select-e e)
      (set! frames empty)
      (match e 
        [`,num #:when (int64? num) 
            `(begin
                (set! ,return-loc ,(current-return-address-register))
                (set! ,(current-return-value-register) ,num)
                (jump ,return-loc ,(current-frame-base-pointer-register) ,(current-return-value-register)))]
        [`,v #:when (symbol? v)
            `(begin
                (set! ,return-loc ,(current-return-address-register))
                (set! ,(current-return-value-register) ,v)
                (jump ,return-loc ,(current-frame-base-pointer-register) ,(current-return-value-register)))]
        [`(,binop ,v1 ,v2) #:when (valid-binop? binop)
          (let* ([res-loc (fresh)])
            `(begin
                (set! ,return-loc ,(current-return-address-register))
                ,@(select-n e res-loc)
                (set! ,(current-return-value-register) ,res-loc)
                (jump ,return-loc ,(current-frame-base-pointer-register) ,(current-return-value-register)))
          )]
        [`(let ([,x ,n]) ,e) #:when (aloc? x)
          `(begin
                (set! ,return-loc ,(current-return-address-register))
                ,@(select-n n x)
                ,@(select-e-impl e return-loc))
        ]
        [`(if (,cmp ,v1 ,v2) ,e1 ,e2) #:when (cmp? cmp)
          (let ([tmp (fresh)])
           `(begin
                (set! ,return-loc ,(current-return-address-register))
                (set! ,tmp ,v1)
                (if (,cmp ,tmp ,v2)
                  (begin ,@(select-e-impl e1 return-loc))
                  (begin ,@(select-e-impl e2 return-loc)))))]
        [`(apply ,f ,vs ...)
          `(begin (set! ,return-loc ,(current-return-address-register))
                  ,@(select-e-impl e return-loc))]                             
      ))


    ; (displayln (format "select intr: ~a" p))
    (match p 
      [`(module ,bs ... ,e)
        (let ([e-res (select-e e)])
          `(module (define ,(fresh-label 'main) ((new-frames ,(reverse frames))) ,e-res) ,@(map select-b bs)))]
    )
)

(module+ test 
    (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1 a.2) (bitwise-and a.1 a.2))) 
                          (arithmetic-shift-right L.fun.1 13)))
                   '(module
                        (define L.main.1
                            ((new-frames ()))
                            (begin
                            (set! ra.1 r15)
                            (set! tmp.3 L.fun.1)
                            (set! tmp.2 (arithmetic-shift-right tmp.3 13))
                            (set! rax tmp.2)
                            (jump ra.1 rbp rax)))
                        (define L.fun.1
                            ((new-frames ()))
                            (begin
                            (set! ra.4 r15)
                            (set! a.2 rsi)
                            (set! a.1 rdi)
                            (set! tmp.6 a.1)
                            (set! tmp.5 (bitwise-and tmp.6 a.2))
                            (set! rax tmp.5)
                            (jump ra.4 rbp rax))))
                          "seelct test bitwise")

    (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1 a.2) (bitwise-and a.1 a.2))) 
                          (let ([b.1 (bitwise-ior 13 3)]) (bitwise-xor 3 b.1))))
                  '(module
                        (define L.main.2
                            ((new-frames ()))
                            (begin
                            (set! ra.7 r15)
                            (set! tmp.8 13)
                            (set! b.1 (bitwise-ior tmp.8 3))
                            (set! tmp.10 3)
                            (set! tmp.9 (bitwise-xor tmp.10 b.1))
                            (set! rax tmp.9)
                            (jump ra.7 rbp rax)))
                        (define L.fun.1
                            ((new-frames ()))
                            (begin
                            (set! ra.11 r15)
                            (set! a.2 rsi)
                            (set! a.1 rdi)
                            (set! tmp.13 a.1)
                            (set! tmp.12 (bitwise-and tmp.13 a.2))
                            (set! rax tmp.12)
                            (jump ra.11 rbp rax))))
                          "seelct test bitwise")


  (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1 a.2) a.2)) 
                          (apply L.fun.1 7 8)))
                  '(module
                        (define L.main.3
                            ((new-frames ()))
                            (begin
                            (set! ra.14 r15)
                            (set! rdi 7)
                            (set! rsi 8)
                            (set! r15 ra.14)
                            (jump L.fun.1 rbp r15 rdi rsi)))
                        (define L.fun.1
                            ((new-frames ()))
                            (begin
                            (set! ra.15 r15)
                            (set! a.2 rsi)
                            (set! a.1 rdi)
                            (set! rax a.2)
                            (jump ra.15 rbp rax))))
                          "seelct test 1")

  (check-equal? (select-instructions 
                  `(module 42))
                  '(module
                        (define L.main.4
                            ((new-frames ()))
                            (begin (set! ra.16 r15) (set! rax 42) (jump ra.16 rbp rax))))
                          "seelct test 2")
  
  (check-equal? (select-instructions 
                  `(module (+ 3 1)))
                 '(module
                    (define L.main.5
                        ((new-frames ()))
                        (begin
                        (set! ra.17 r15)
                        (set! tmp.19 3)
                        (set! tmp.18 (+ tmp.19 1))
                        (set! rax tmp.18)
                        (jump ra.17 rbp rax))))
                          "seelct test 3")

   (check-equal? (select-instructions 
                `(module (if (eq? 2 3) (+ 4 2) (* 2 3))))
                '(module
                    (define L.main.6
                        ((new-frames ()))
                        (begin
                        (set! ra.20 r15)
                        (set! tmp.21 2)
                        (if (eq? tmp.21 3)
                            (begin
                            (set! tmp.23 4)
                            (set! tmp.22 (+ tmp.23 2))
                            (set! rax tmp.22)
                            (jump ra.20 rbp rax))
                            (begin
                            (set! tmp.25 2)
                            (set! tmp.24 (* tmp.25 3))
                            (set! rax tmp.24)
                            (jump ra.20 rbp rax)))))))                        

  (check-equal? (select-instructions 
                `(module (let ((x.1 (apply f 1 2))) (- x.1 1))))
                  '(module
                    (define L.main.8
                        ((new-frames ()))
                        (begin
                        (set! ra.26 r15)
                        (return-point L.rp.7
                            (begin
                            (set! rsi 1)
                            (set! rdi 2)
                            (set! r15 L.rp.7)
                            (jump f rbp r15 rsi rdi)))
                        (set! x.1 rax)
                        (set! tmp.28 x.1)
                        (set! tmp.27 (- tmp.28 1))
                        (set! rax tmp.27)
                        (jump ra.26 rbp rax))))) 

  (check-equal? (parameterize ([current-parameter-registers '()])
                  (select-instructions
                    '(module
                      (define L.swap.1
                        (lambda (x.1 y.2)
                          (if (< y.2 x.1)
                              x.1
                              (apply L.swap.1 y.2 x.1))))
                      (apply L.swap.1 1 2))))
                       '(module
                            (define L.main.9
                                ((new-frames ()))
                                (begin
                                (set! ra.29 r15)
                                (set! fv0 1)
                                (set! fv1 2)
                                (set! r15 ra.29)
                                (jump L.swap.1 rbp r15 fv0 fv1)))
                            (define L.swap.1
                                ((new-frames ()))
                                (begin
                                (set! ra.30 r15)
                                (set! y.2 fv1)
                                (set! x.1 fv0)
                                (set! tmp.31 y.2)
                                (if (< tmp.31 x.1)
                                    (begin (set! rax x.1) (jump ra.30 rbp rax))
                                    (begin
                                    (set! fv0 y.2)
                                    (set! fv1 x.1)
                                    (set! r15 ra.30)
                                    (jump L.swap.1 rbp r15 fv0 fv1)))))))   

   (check-equal? (parameterize ([current-parameter-registers '(rdi)])
                  (select-instructions
                    '(module
                      (define L.swap.1
                        (lambda (x.1 y.2)
                          (if (< y.2 x.1)
                              x.1
                              (apply L.swap.1 y.2 x.1))))
                      (apply L.swap.1 1 2))))
                    '(module
   (define L.main.10
     ((new-frames ()))
     (begin
       (set! ra.32 r15)
       (set! fv0 2)
       (set! rdi 1)
       (set! r15 ra.32)
       (jump L.swap.1 rbp r15 rdi fv0)))
   (define L.swap.1
     ((new-frames ()))
     (begin
       (set! ra.33 r15)
       (set! y.2 fv0)
       (set! x.1 rdi)
       (set! tmp.34 y.2)
       (if (< tmp.34 x.1)
         (begin (set! rax x.1) (jump ra.33 rbp rax))
         (begin
           (set! fv0 x.1)
           (set! rdi y.2)
           (set! r15 ra.33)
           (jump L.swap.1 rbp r15 rdi fv0)))))))                                    


  (check-equal? (select-instructions 
                    `(module (let ((x.1 5)) 
                               (let ((x.2 (+ x.1 11)))
                                       x.2))) )
               '(module
   (define L.main.11
     ((new-frames ()))
     (begin
       (set! ra.35 r15)
       (set! x.1 5)
       (set! tmp.36 x.1)
       (set! x.2 (+ tmp.36 11))
       (set! rax x.2)
       (jump ra.35 rbp rax)))))

  (check-equal? (select-instructions `(module (define L.main.1 (lambda (x.1) (apply L.main.2 2 x.1 3))) (define L.main.2 (lambda (x.2 x.3 x.4) x.3)) 5))
                      '(module
   (define L.main.12
     ((new-frames ()))
     (begin (set! ra.37 r15) (set! rax 5) (jump ra.37 rbp rax)))
   (define L.main.1
     ((new-frames ()))
     (begin
       (set! ra.38 r15)
       (set! x.1 rdi)
       (set! rdi 2)
       (set! rsi x.1)
       (set! rdx 3)
       (set! r15 ra.38)
       (jump L.main.2 rbp r15 rdi rsi rdx)))
   (define L.main.2
     ((new-frames ()))
     (begin
       (set! ra.39 r15)
       (set! x.4 rdx)
       (set! x.3 rsi)
       (set! x.2 rdi)
       (set! rax x.3)
       (jump ra.39 rbp rax)))))                             

  (check-equal? (select-instructions '(module (define L.swap.1 
                                                    (lambda (x.1 y.2) (if (< y.2 x.1) x.1 (apply L.swap.1 y.2 x.1)))) 
                                              (apply L.swap.1 1 2)))
                     '(module
   (define L.main.13
     ((new-frames ()))
     (begin
       (set! ra.40 r15)
       (set! rdi 1)
       (set! rsi 2)
       (set! r15 ra.40)
       (jump L.swap.1 rbp r15 rdi rsi)))
   (define L.swap.1
     ((new-frames ()))
     (begin
       (set! ra.41 r15)
       (set! y.2 rsi)
       (set! x.1 rdi)
       (set! tmp.42 y.2)
       (if (< tmp.42 x.1)
         (begin (set! rax x.1) (jump ra.41 rbp rax))
         (begin
           (set! rdi y.2)
           (set! rsi x.1)
           (set! r15 ra.41)
           (jump L.swap.1 rbp r15 rdi rsi)))))))

  (check-equal? (select-instructions  '(module (let ([v 1])
                                          (let ([w 46])
                                            (let ([x v])
                                              (let ([x (+ x 7)])
                                                (let ([y x])
                                                  (let ([y (+ y 4)])
                                                    (let ([z x])
                                                      (let ([z (+ z w)])
                                                        (let ([t.1 y])
                                                          (let ([t.1 (* t.1 -1)])
                                                            (let ([z (+ z t.1)])
                                                              z)))))))))))))
                                        '(module
   (define L.main.14
     ((new-frames ()))
     (begin
       (set! ra.43 r15)
       (set! v 1)
       (set! w 46)
       (set! x v)
       (set! tmp.44 x)
       (set! x (+ tmp.44 7))
       (set! y x)
       (set! tmp.45 y)
       (set! y (+ tmp.45 4))
       (set! z x)
       (set! tmp.46 z)
       (set! z (+ tmp.46 w))
       (set! t.1 y)
       (set! tmp.47 t.1)
       (set! t.1 (* tmp.47 -1))
       (set! tmp.48 z)
       (set! z (+ tmp.48 t.1))
       (set! rax z)
       (jump ra.43 rbp rax)))))
 
  (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (x.2) 12)) (+ 3 1)))
                 '(module
   (define L.main.15
     ((new-frames ()))
     (begin
       (set! ra.49 r15)
       (set! tmp.51 3)
       (set! tmp.50 (+ tmp.51 1))
       (set! rax tmp.50)
       (jump ra.49 rbp rax)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.52 r15)
       (set! x.2 rdi)
       (set! rax 12)
       (jump ra.52 rbp rax))))
                          "seelct test 4")
  
  (check-equal? (select-instructions 
                  `(module (define L.fun.2 (lambda (b.1 b.2) b.1)) 
                          (define L.fun.1 (lambda (a.1 a.2) (apply L.fun.1 a.1 a.2))) 
                          (apply L.fun.1 7 8)))
                  '(module
   (define L.main.16
     ((new-frames ()))
     (begin
       (set! ra.53 r15)
       (set! rdi 7)
       (set! rsi 8)
       (set! r15 ra.53)
       (jump L.fun.1 rbp r15 rdi rsi)))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.54 r15)
       (set! b.2 rsi)
       (set! b.1 rdi)
       (set! rax b.1)
       (jump ra.54 rbp rax)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.55 r15)
       (set! a.2 rsi)
       (set! a.1 rdi)
       (set! rdi a.1)
       (set! rsi a.2)
       (set! r15 ra.55)
       (jump L.fun.1 rbp r15 rdi rsi))))
                          "seelct test 5")  
    
  (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1) 
                                              (let ([b.1 (+ a.1 1)])
                                                b.1)))
                            (let ([b.1 10])
                              (apply L.fun.1 b.1))))
                  '(module
   (define L.main.17
     ((new-frames ()))
     (begin
       (set! ra.56 r15)
       (set! b.1 10)
       (set! rdi b.1)
       (set! r15 ra.56)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.57 r15)
       (set! a.1 rdi)
       (set! tmp.58 a.1)
       (set! b.1 (+ tmp.58 1))
       (set! rax b.1)
       (jump ra.57 rbp rax))))
                              "select test 6")                                                      
    
    
    (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1) 
                                              (if (< a.1 100)
                                                  (let ([t.1 a.1]) (* t.1 a.1))
                                                  (apply L.fun.2 a.1))))
                            (define L.fun.2 (lambda (x.1) 
                                              (let ([x.2 (+ x.1 1)])
                                                (apply L.fun.1 x.2))))
                            (apply L.fun.1 0)))
                '(module
   (define L.main.18
     ((new-frames ()))
     (begin
       (set! ra.59 r15)
       (set! rdi 0)
       (set! r15 ra.59)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.60 r15)
       (set! a.1 rdi)
       (set! tmp.61 a.1)
       (if (< tmp.61 100)
         (begin
           (set! t.1 a.1)
           (set! tmp.63 t.1)
           (set! tmp.62 (* tmp.63 a.1))
           (set! rax tmp.62)
           (jump ra.60 rbp rax))
         (begin (set! rdi a.1) (set! r15 ra.60) (jump L.fun.2 rbp r15 rdi)))))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.64 r15)
       (set! x.1 rdi)
       (set! tmp.65 x.1)
       (set! x.2 (+ tmp.65 1))
       (set! rdi x.2)
       (set! r15 ra.64)
       (jump L.fun.1 rbp r15 rdi))))
                                           "select test 7")
    (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1 a.2) a.2)) 
                          (let ([a.1 1])
                            (let ([a.2 2])
                              (apply L.fun.1 a.2 a.1)))))
                  '(module
   (define L.main.19
     ((new-frames ()))
     (begin
       (set! ra.66 r15)
       (set! a.1 1)
       (set! a.2 2)
       (set! rdi a.2)
       (set! rsi a.1)
       (set! r15 ra.66)
       (jump L.fun.1 rbp r15 rdi rsi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.67 r15)
       (set! a.2 rsi)
       (set! a.1 rdi)
       (set! rax a.2)
       (jump ra.67 rbp rax))))
                          "seelct test 8")
    
    (check-equal? (select-instructions
                  `(module (define L.fun.1 (lambda () 12))
                            (let ([a.1 L.fun.1])
                              (apply a.1))))
                  '(module
   (define L.main.20
     ((new-frames ()))
     (begin
       (set! ra.68 r15)
       (set! a.1 L.fun.1)
       (set! r15 ra.68)
       (jump a.1 rbp r15)))
   (define L.fun.1
     ((new-frames ()))
     (begin (set! ra.69 r15) (set! rax 12) (jump ra.69 rbp rax))))
                    "select test 9")

  (check-equal? (select-instructions 
                  `(module (define L.fun.1 (lambda (a.1) 12))
                            (let ([a.1 L.fun.1])
                              (apply a.1 L.fun.1))))
                 '(module
   (define L.main.21
     ((new-frames ()))
     (begin
       (set! ra.70 r15)
       (set! a.1 L.fun.1)
       (set! rdi L.fun.1)
       (set! r15 ra.70)
       (jump a.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.71 r15)
       (set! a.1 rdi)
       (set! rax 12)
       (jump ra.71 rbp rax))))
                    "select test 10")


  (check-equal? (parameterize ([current-parameter-registers '(rdi)]) 
                  (select-instructions
                  '(module (define L.fun.1 (lambda (a.1) (apply L.fun.2 a.1 7 8)))
                           (define L.fun.2 (lambda (x.1 x.2 x.3) (+ x.1 x.3)))
                           (let ([x (apply L.fun.1 L.fun.1)])
                                (let ([y (apply L.fun.2 1 2 3)])
                                  (apply L.fun.1 L.fun.2))))))
                                   '(module
   (define L.main.24
     ((new-frames ((nfv.74 nfv.73))))
     (begin
       (set! ra.72 r15)
       (return-point L.rp.22
         (begin
           (set! rdi L.fun.1)
           (set! r15 L.rp.22)
           (jump L.fun.1 rbp r15 rdi)))
       (set! x rax)
       (return-point L.rp.23
         (begin
           (set! rdi 1)
           (set! nfv.73 2)
           (set! nfv.74 3)
           (set! r15 L.rp.23)
           (jump L.fun.2 rbp r15 rdi nfv.73 nfv.74)))
       (set! y rax)
       (set! rdi L.fun.2)
       (set! r15 ra.72)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.75 r15)
       (set! a.1 rdi)
       (set! fv0 7)
       (set! fv1 8)
       (set! rdi a.1)
       (set! r15 ra.75)
       (jump L.fun.2 rbp r15 rdi fv0 fv1)))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.76 r15)
       (set! x.3 fv1)
       (set! x.2 fv0)
       (set! x.1 rdi)
       (set! tmp.78 x.1)
       (set! tmp.77 (+ tmp.78 x.3))
       (set! rax tmp.77)
       (jump ra.76 rbp rax)))))

   (check-equal? (select-instructions
                  '(module (define L.fun.1 (lambda (a.1) (apply L.fun.2 a.1 7 8)))
                           (define L.fun.2 (lambda (x.1 x.2 x.3) (+ x.1 x.3)))
                           (let ([x (apply L.fun.1 L.fun.1)])
                                (let ([y (apply L.fun.2 1 2 3)])
                                  (apply L.fun.1 L.fun.2)))))
                                    '(module
   (define L.main.27
     ((new-frames ()))
     (begin
       (set! ra.79 r15)
       (return-point L.rp.25
         (begin
           (set! rdi L.fun.1)
           (set! r15 L.rp.25)
           (jump L.fun.1 rbp r15 rdi)))
       (set! x rax)
       (return-point L.rp.26
         (begin
           (set! rdx 1)
           (set! rsi 2)
           (set! rdi 3)
           (set! r15 L.rp.26)
           (jump L.fun.2 rbp r15 rdx rsi rdi)))
       (set! y rax)
       (set! rdi L.fun.2)
       (set! r15 ra.79)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.80 r15)
       (set! a.1 rdi)
       (set! rdi a.1)
       (set! rsi 7)
       (set! rdx 8)
       (set! r15 ra.80)
       (jump L.fun.2 rbp r15 rdi rsi rdx)))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.81 r15)
       (set! x.3 rdx)
       (set! x.2 rsi)
       (set! x.1 rdi)
       (set! tmp.83 x.1)
       (set! tmp.82 (+ tmp.83 x.3))
       (set! rax tmp.82)
       (jump ra.81 rbp rax)))))                                 

 (check-equal? (parameterize ([current-parameter-registers '(rdi)]) 
                  (select-instructions
                  '(module (define L.fun.1 (lambda (a.1) (apply L.fun.2 a.1 7 8)))
                           (define L.fun.2 (lambda (x.1 x.2 x.3) (+ x.1 x.3)))
                           (let ([x (apply L.fun.2 L.fun.1 2 3)])
                            (let ([y (apply L.fun.2 x L.fun.1 3)])
                                (apply L.fun.1 L.fun.2))))))
                                '(module
   (define L.main.30
     ((new-frames ((nfv.86 nfv.85) (nfv.88 nfv.87))))
     (begin
       (set! ra.84 r15)
       (return-point L.rp.28
         (begin
           (set! rdi L.fun.1)
           (set! nfv.85 2)
           (set! nfv.86 3)
           (set! r15 L.rp.28)
           (jump L.fun.2 rbp r15 rdi nfv.85 nfv.86)))
       (set! x rax)
       (return-point L.rp.29
         (begin
           (set! rdi x)
           (set! nfv.87 L.fun.1)
           (set! nfv.88 3)
           (set! r15 L.rp.29)
           (jump L.fun.2 rbp r15 rdi nfv.87 nfv.88)))
       (set! y rax)
       (set! rdi L.fun.2)
       (set! r15 ra.84)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ()))
     (begin
       (set! ra.89 r15)
       (set! a.1 rdi)
       (set! fv0 7)
       (set! fv1 8)
       (set! rdi a.1)
       (set! r15 ra.89)
       (jump L.fun.2 rbp r15 rdi fv0 fv1)))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.90 r15)
       (set! x.3 fv1)
       (set! x.2 fv0)
       (set! x.1 rdi)
       (set! tmp.92 x.1)
       (set! tmp.91 (+ tmp.92 x.3))
       (set! rax tmp.91)
       (jump ra.90 rbp rax)))))

 (check-equal? (parameterize ([current-parameter-registers '(rdi)]) 
                  (select-instructions
                  '(module (define L.fun.1 (lambda (a.1) 
                              (let ([x (apply L.fun.2 a.1 22 33)])
                                (let ([y (apply L.fun.2 x a.1 y)])
                                  (apply L.fun.1 y)))))
                           (define L.fun.2 (lambda (x.1 x.2 x.3) (+ x.1 x.3)))
                           (let ([x (apply L.fun.2 L.fun.1 2 3)])
                            (let ([y (apply L.fun.2 x L.fun.1 3)])
                                (apply L.fun.1 L.fun.2))))))
                                '(module
   (define L.main.33
     ((new-frames ((nfv.95 nfv.94) (nfv.97 nfv.96))))
     (begin
       (set! ra.93 r15)
       (return-point L.rp.31
         (begin
           (set! rdi L.fun.1)
           (set! nfv.94 2)
           (set! nfv.95 3)
           (set! r15 L.rp.31)
           (jump L.fun.2 rbp r15 rdi nfv.94 nfv.95)))
       (set! x rax)
       (return-point L.rp.32
         (begin
           (set! rdi x)
           (set! nfv.96 L.fun.1)
           (set! nfv.97 3)
           (set! r15 L.rp.32)
           (jump L.fun.2 rbp r15 rdi nfv.96 nfv.97)))
       (set! y rax)
       (set! rdi L.fun.2)
       (set! r15 ra.93)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.1
     ((new-frames ((nfv.100 nfv.99) (nfv.102 nfv.101))))
     (begin
       (set! ra.98 r15)
       (set! a.1 rdi)
       (return-point L.rp.34
         (begin
           (set! rdi a.1)
           (set! nfv.99 22)
           (set! nfv.100 33)
           (set! r15 L.rp.34)
           (jump L.fun.2 rbp r15 rdi nfv.99 nfv.100)))
       (set! x rax)
       (return-point L.rp.35
         (begin
           (set! rdi x)
           (set! nfv.101 a.1)
           (set! nfv.102 y)
           (set! r15 L.rp.35)
           (jump L.fun.2 rbp r15 rdi nfv.101 nfv.102)))
       (set! y rax)
       (set! rdi y)
       (set! r15 ra.98)
       (jump L.fun.1 rbp r15 rdi)))
   (define L.fun.2
     ((new-frames ()))
     (begin
       (set! ra.103 r15)
       (set! x.3 fv1)
       (set! x.2 fv0)
       (set! x.1 rdi)
       (set! tmp.105 x.1)
       (set! tmp.104 (+ tmp.105 x.3))
       (set! rax tmp.104)
       (jump ra.103 rbp rax)))))
)

; Exercise 3
(define (flatten-program p)

  (define (flatten-tail t)
    (match t 
      [`(begin ,s ... ,tail)
        `(,@s ,@(flatten-tail tail))]
      [`(begin ,tail)
        `(,@(flatten-tail tail))]
      [`(jump ,trg)
        `((jump ,trg))]
      [`(if (,cmp ,v1 ,v2) (jump ,l1) (jump ,l2))
        `((compare ,v1 ,v2)
          (jump-if ,cmp ,l1)
          (jump ,l2))]))

  (define (find-tail label t)
    (match t
      [`(begin ,s ... ,tail)
        (if (empty? s)
            (find-tail label tail)
            (cons `(define ,label ,(first s)) `(,@(rest s) ,@(flatten-tail tail))))
        ]
      [`(begin ,tail)
        (find-tail label tail)]
      [`(jump ,trg)
        `((define ,label ,t))]
      [`(if (,cmp ,v1 ,v2) (jump ,l1) (jump ,l2)) #:when (cmp? cmp)
        `((define ,label (compare ,v1 ,v2))
          (jump-if ,cmp ,l1)
          (jump ,l2))])
  )

  (define (flatten-b b)
    (match b 
      [`(define ,label ,info ,tail)
        (find-tail label tail)]))

(displayln (format "flatten ~a" p))
  (match p
    [`(module ,bs ...) 
      `(begin ,@(append (append-map flatten-b bs)))]
    ))

#;(flatten-program '(module 
(define L.main.1 () (begin (set! rsp r15) (set! rdi 56) (set! rsi 22) (set! r15 rsp) (jump cons))) 
(define L.nest_f.17 () (begin (set! rax 14) (jump rsp))) 
(define L.nest_t.16 () (begin (set! rax 6) (jump rsp))) 
(define L.not.15 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (if (neq? rsp 6) (jump L.nest_t.16) (jump L.nest_f.17)))) 
(define L.nest_f.19 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.18 () (begin (set! rax 14) (jump rsp))) 
(define L.error?.14 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 62) (jump L.nest_t.18) (jump L.nest_f.19)))) 
(define L.nest_f.21 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.20 () (begin (set! rax 14) (jump rsp))) 
(define L.ascii-char?.13 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 46) (jump L.nest_t.20) (jump L.nest_f.21)))) 
(define L.nest_f.23 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.22 () (begin (set! rax 14) (jump rsp))) 
(define L.void?.12 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 30) (jump L.nest_t.22) (jump L.nest_f.23)))) 
(define L.nest_f.25 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.24 () (begin (set! rax 14) (jump rsp))) 
(define L.empty?.11 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 22) (jump L.nest_t.24) (jump L.nest_f.25)))) 
(define L.nest_f.27 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.26 () (begin (set! rax 14) (jump rsp))) 
(define L.boolean?.10 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 247)) (set! rsp rsp) (if (eq? rsp 6) (jump L.nest_t.26) (jump L.nest_f.27)))) 
(define L.nest_f.29 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.28 () (begin (set! rax 14) (jump rsp))) 
(define L.fixnum?.9 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.28) (jump L.nest_f.29)))) 
(define L.nest_f.45 () (begin (set! rax 3134) (jump rcx))) 
(define L.nest_f.53 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.55 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.54 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.52 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.54) (jump L.nest_f.55)))) 
(define L.nest_f.47 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.52) (jump L.nest_f.53)))) 
(define L.nest_f.49 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.51 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.50 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.48 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.50) (jump L.nest_f.51)))) 
(define L.nest_t.46 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.48) (jump L.nest_f.49)))) 
(define L.nest_t.44 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.46) (jump L.nest_f.47)))) 
(define L.nest_f.31 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.44) (jump L.nest_f.45)))) 
(define L.nest_f.33 () (begin (set! rax 3134) (jump rcx))) 
(define L.nest_f.41 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.43 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.42 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.40 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.42) (jump L.nest_f.43)))) 
(define L.nest_f.35 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.40) (jump L.nest_f.41)))) 
(define L.nest_f.37 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.39 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.38 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.36 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.38) (jump L.nest_f.39)))) 
(define L.nest_t.34 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.36) (jump L.nest_f.37)))) 
(define L.nest_t.32 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.34) (jump L.nest_f.35)))) 
(define L.nest_t.30 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.32) (jump L.nest_f.33)))) 
(define L.>=.8 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.30) (jump L.nest_f.31)))) 
(define L.nest_f.71 () (begin (set! rax 2622) (jump rcx))) 
(define L.nest_f.79 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.81 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.80 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.78 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.80) (jump L.nest_f.81)))) 
(define L.nest_f.73 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.78) (jump L.nest_f.79)))) 
(define L.nest_f.75 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.77 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.76 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.74 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.76) (jump L.nest_f.77)))) 
(define L.nest_t.72 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.74) (jump L.nest_f.75)))) 
(define L.nest_t.70 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.72) (jump L.nest_f.73)))) 
(define L.nest_f.57 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.70) (jump L.nest_f.71)))) 
(define L.nest_f.59 () (begin (set! rax 2622) (jump rcx))) 
(define L.nest_f.67 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.69 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.68 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.66 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.68) (jump L.nest_f.69)))) 
(define L.nest_f.61 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.66) (jump L.nest_f.67)))) 
(define L.nest_f.63 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.65 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.64 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.62 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.64) (jump L.nest_f.65)))) 
(define L.nest_t.60 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.62) (jump L.nest_f.63)))) 
(define L.nest_t.58 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.60) (jump L.nest_f.61)))) 
(define L.nest_t.56 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.58) (jump L.nest_f.59)))) 
(define L.>.7 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.56) (jump L.nest_f.57)))) 
(define L.nest_f.97 () (begin (set! rax 2110) (jump rcx))) 
(define L.nest_f.105 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.107 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.106 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.104 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.106) (jump L.nest_f.107)))) 
(define L.nest_f.99 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.104) (jump L.nest_f.105)))) 
(define L.nest_f.101 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.103 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.102 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.100 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.102) (jump L.nest_f.103)))) 
(define L.nest_t.98 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.100) (jump L.nest_f.101)))) 
(define L.nest_t.96 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.98) (jump L.nest_f.99)))) 
(define L.nest_f.83 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.96) (jump L.nest_f.97)))) 
(define L.nest_f.85 () (begin (set! rax 2110) (jump rcx))) 
(define L.nest_f.93 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.95 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.94 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.92 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.94) (jump L.nest_f.95)))) 
(define L.nest_f.87 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.92) (jump L.nest_f.93)))) 
(define L.nest_f.89 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.91 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.90 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.88 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.90) (jump L.nest_f.91)))) 
(define L.nest_t.86 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.88) (jump L.nest_f.89)))) 
(define L.nest_t.84 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.86) (jump L.nest_f.87)))) 
(define L.nest_t.82 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.84) (jump L.nest_f.85)))) 
(define L.<=.6 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.82) (jump L.nest_f.83)))) 
(define L.nest_f.123 () (begin (set! rax 1598) (jump rcx))) 
(define L.nest_f.131 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.133 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.132 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.130 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.132) (jump L.nest_f.133)))) 
(define L.nest_f.125 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.130) (jump L.nest_f.131)))) 
(define L.nest_f.127 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.129 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.128 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.126 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.128) (jump L.nest_f.129)))) 
(define L.nest_t.124 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.126) (jump L.nest_f.127)))) 
(define L.nest_t.122 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.124) (jump L.nest_f.125)))) 
(define L.nest_f.109 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.122) (jump L.nest_f.123)))) 
(define L.nest_f.111 () (begin (set! rax 1598) (jump rcx))) 
(define L.nest_f.119 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.121 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.120 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.118 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.120) (jump L.nest_f.121)))) 
(define L.nest_f.113 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.118) (jump L.nest_f.119)))) 
(define L.nest_f.115 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.117 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.116 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.114 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.116) (jump L.nest_f.117)))) 
(define L.nest_t.112 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.114) (jump L.nest_f.115)))) 
(define L.nest_t.110 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.112) (jump L.nest_f.113)))) 
(define L.nest_t.108 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.110) (jump L.nest_f.111)))) 
(define L.<.5 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.108) (jump L.nest_f.109)))) 
(define L.nest_f.145 () (begin (set! rax 1086) (jump rdx))) 
(define L.nest_f.151 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.150 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.147 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.150) (jump L.nest_f.151)))) 
(define L.nest_f.149 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.148 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.146 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.148) (jump L.nest_f.149)))) 
(define L.nest_t.144 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.146) (jump L.nest_f.147)))) 
(define L.nest_f.135 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.144) (jump L.nest_f.145)))) 
(define L.nest_f.137 () (begin (set! rax 1086) (jump rdx))) 
(define L.nest_f.143 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.142 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.139 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.142) (jump L.nest_f.143)))) 
(define L.nest_f.141 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.140 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.138 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.140) (jump L.nest_f.141)))) 
(define L.nest_t.136 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.138) (jump L.nest_f.139)))) 
(define L.nest_t.134 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.136) (jump L.nest_f.137)))) 
(define L.-.4 () (begin (set! rdx r15) (set! rcx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.134) (jump L.nest_f.135)))) 
(define L.nest_f.163 () (begin (set! rax 574) (jump rdx))) 
(define L.nest_f.169 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.168 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.165 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.168) (jump L.nest_f.169)))) 
(define L.nest_f.167 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.166 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.164 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.166) (jump L.nest_f.167)))) 
(define L.nest_t.162 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.164) (jump L.nest_f.165)))) 
(define L.nest_f.153 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.162) (jump L.nest_f.163)))) 
(define L.nest_f.155 () (begin (set! rax 574) (jump rdx))) 
(define L.nest_f.161 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.160 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.157 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.160) (jump L.nest_f.161)))) 
(define L.nest_f.159 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.158 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.156 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.158) (jump L.nest_f.159)))) 
(define L.nest_t.154 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.156) (jump L.nest_f.157)))) 
(define L.nest_t.152 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.154) (jump L.nest_f.155)))) 
(define L.+.3 () (begin (set! rdx r15) (set! rcx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.152) (jump L.nest_f.153)))) 
(define L.nest_f.181 () (begin (set! rax 62) (jump rdx))) 
(define L.nest_f.187 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.186 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.183 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.186) (jump L.nest_f.187)))) 
(define L.nest_f.185 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.184 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.182 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.184) (jump L.nest_f.185)))) 
(define L.nest_t.180 () (begin (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.182) (jump L.nest_f.183)))) 
(define L.nest_f.171 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.180) (jump L.nest_f.181)))) 
(define L.nest_f.173 () (begin (set! rax 62) (jump rdx))) 
(define L.nest_f.179 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.178 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.175 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.178) (jump L.nest_f.179)))) 
(define L.nest_f.177 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.176 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.174 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.176) (jump L.nest_f.177)))) 
(define L.nest_t.172 () (begin (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.174) (jump L.nest_f.175)))) 
(define L.nest_t.170 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.172) (jump L.nest_f.173)))) 
(define L.*.2 () (begin (set! rdx r15) (set! rbx rsi) (set! rcx rdi) (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.170) (jump L.nest_f.171)))) 
(define L.nest_f.189 () (begin (set! rax 6) (jump r8))) 
(define L.nest_t.188 () (begin (set! rax 14) (jump r8))) 
(define L.eq?.1 () (begin (set! r8 r15) (set! rbx rsi) (set! rsp rdi) (set! rsp rsp) (if (eq? rsp rbx) (jump L.nest_t.188) (jump L.nest_f.189))))))

(module+ test
  (check-equal? (flatten-program '(module (define L.main.1 () (begin (set! rsp r15) (set! rdi 56) (set! rsi 22) (set! r15 rsp) (jump cons))) 
  ))
  '(begin
  (define L.main.1 (set! rsp r15))
  (set! rdi 56)
  (set! rsi 22)
  (set! r15 rsp)
  (jump cons))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.17 () (begin (set! rax 14) (jump rsp))) 
  ))
  '(begin (define L.nest_f.17 (set! rax 14)) (jump rsp))
  )

    (check-equal? (flatten-program '(module (define L.nest_t.16 () (begin (set! rax 6) (jump rsp))) 
  ))
  '(begin (define L.nest_t.16 (set! rax 6)) (jump rsp))
  )

    (check-equal? (flatten-program '(module (define L.not.15 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (if (neq? rsp 6) (jump L.nest_t.16) (jump L.nest_f.17)))) 
  ))
  '(begin
  (define L.not.15 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (compare rsp 6)
  (jump-if neq? L.nest_t.16)
  (jump L.nest_f.17))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.19 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.18 () (begin (set! rax 14) (jump rsp))) 
(define L.error?.14 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 62) (jump L.nest_t.18) (jump L.nest_f.19)))) 
  ))
  '(begin
  (define L.nest_f.19 (set! rax 6))
  (jump rsp)
  (define L.nest_t.18 (set! rax 14))
  (jump rsp)
  (define L.error?.14 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (set! rsp (bitwise-and rsp 255))
  (set! rsp rsp)
  (compare rsp 62)
  (jump-if eq? L.nest_t.18)
  (jump L.nest_f.19))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.21 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.20 () (begin (set! rax 14) (jump rsp))) 
(define L.ascii-char?.13 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 46) (jump L.nest_t.20) (jump L.nest_f.21)))) 
  ))
  '(begin
  (define L.nest_f.21 (set! rax 6))
  (jump rsp)
  (define L.nest_t.20 (set! rax 14))
  (jump rsp)
  (define L.ascii-char?.13 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (set! rsp (bitwise-and rsp 255))
  (set! rsp rsp)
  (compare rsp 46)
  (jump-if eq? L.nest_t.20)
  (jump L.nest_f.21))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.23 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.22 () (begin (set! rax 14) (jump rsp))) 
(define L.void?.12 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 30) (jump L.nest_t.22) (jump L.nest_f.23)))) 
  ))
  '(begin
  (define L.nest_f.23 (set! rax 6))
  (jump rsp)
  (define L.nest_t.22 (set! rax 14))
  (jump rsp)
  (define L.void?.12 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (set! rsp (bitwise-and rsp 255))
  (set! rsp rsp)
  (compare rsp 30)
  (jump-if eq? L.nest_t.22)
  (jump L.nest_f.23))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.25 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.24 () (begin (set! rax 14) (jump rsp))) 
(define L.empty?.11 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 255)) (set! rsp rsp) (if (eq? rsp 22) (jump L.nest_t.24) (jump L.nest_f.25)))) 
  ))
  '(begin
  (define L.nest_f.25 (set! rax 6))
  (jump rsp)
  (define L.nest_t.24 (set! rax 14))
  (jump rsp)
  (define L.empty?.11 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (set! rsp (bitwise-and rsp 255))
  (set! rsp rsp)
  (compare rsp 22)
  (jump-if eq? L.nest_t.24)
  (jump L.nest_f.25))
  )

    (check-equal? (flatten-program '(module (define L.nest_f.27 () (begin (set! rax 6) (jump rsp))) 
(define L.nest_t.26 () (begin (set! rax 14) (jump rsp))) 
(define L.boolean?.10 () (begin (set! rsp r15) (set! rsp rdi) (set! rsp rsp) (set! rsp (bitwise-and rsp 247)) (set! rsp rsp) (if (eq? rsp 6) (jump L.nest_t.26) (jump L.nest_f.27)))) 
  ))
  '(begin
  (define L.nest_f.27 (set! rax 6))
  (jump rsp)
  (define L.nest_t.26 (set! rax 14))
  (jump rsp)
  (define L.boolean?.10 (set! rsp r15))
  (set! rsp rdi)
  (set! rsp rsp)
  (set! rsp (bitwise-and rsp 247))
  (set! rsp rsp)
  (compare rsp 6)
  (jump-if eq? L.nest_t.26)
  (jump L.nest_f.27))
  )

  (check-equal? (flatten-program '(module (define L.nest_f.45 () (begin (set! rax 3134) (jump rcx))) 
(define L.nest_f.53 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.55 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.54 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.52 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.54) (jump L.nest_f.55)))) 
(define L.nest_f.47 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.52) (jump L.nest_f.53)))) 
 ))
 '(begin
  (define L.nest_f.45 (set! rax 3134))
  (jump rcx)
  (define L.nest_f.53 (set! rax 3390))
  (jump rcx)
  (define L.nest_f.55 (set! rax 6))
  (jump rcx)
  (define L.nest_t.54 (set! rax 14))
  (jump rcx)
  (define L.nest_t.52 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if >= L.nest_t.54)
  (jump L.nest_f.55)
  (define L.nest_f.47 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.52)
  (jump L.nest_f.53))
  )


(check-equal? (flatten-program '(module (define L.nest_f.49 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.51 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.50 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.48 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.50) (jump L.nest_f.51)))) 
(define L.nest_t.46 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.48) (jump L.nest_f.49)))) 
(define L.nest_t.44 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.46) (jump L.nest_f.47)))) 
))
'(begin
  (define L.nest_f.49 (set! rax 3390))
  (jump rcx)
  (define L.nest_f.51 (set! rax 6))
  (jump rcx)
  (define L.nest_t.50 (set! rax 14))
  (jump rcx)
  (define L.nest_t.48 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if >= L.nest_t.50)
  (jump L.nest_f.51)
  (define L.nest_t.46 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.48)
  (jump L.nest_f.49)
  (define L.nest_t.44 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.46)
  (jump L.nest_f.47))
)

(check-equal? (flatten-program '(module (define L.nest_f.31 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.44) (jump L.nest_f.45)))) 
(define L.nest_f.33 () (begin (set! rax 3134) (jump rcx))) 
(define L.nest_f.41 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.43 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.42 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.40 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.42) (jump L.nest_f.43)))) 
))
'(begin
  (define L.nest_f.31 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.44)
  (jump L.nest_f.45)
  (define L.nest_f.33 (set! rax 3134))
  (jump rcx)
  (define L.nest_f.41 (set! rax 3390))
  (jump rcx)
  (define L.nest_f.43 (set! rax 6))
  (jump rcx)
  (define L.nest_t.42 (set! rax 14))
  (jump rcx)
  (define L.nest_t.40 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if >= L.nest_t.42)
  (jump L.nest_f.43))
)

(check-equal? (flatten-program '(module (define L.nest_f.35 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.40) (jump L.nest_f.41)))) 
(define L.nest_f.37 () (begin (set! rax 3390) (jump rcx))) 
(define L.nest_f.39 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.38 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.36 () (begin (set! rsp rbx) (if (>= rsp rdx) (jump L.nest_t.38) (jump L.nest_f.39)))) 
(define L.nest_t.34 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.36) (jump L.nest_f.37)))) 
))
'(begin
  (define L.nest_f.35 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.40)
  (jump L.nest_f.41)
  (define L.nest_f.37 (set! rax 3390))
  (jump rcx)
  (define L.nest_f.39 (set! rax 6))
  (jump rcx)
  (define L.nest_t.38 (set! rax 14))
  (jump rcx)
  (define L.nest_t.36 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if >= L.nest_t.38)
  (jump L.nest_f.39)
  (define L.nest_t.34 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.36)
  (jump L.nest_f.37))
)

(check-equal? (flatten-program '(module (define L.nest_t.32 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.34) (jump L.nest_f.35)))) 
(define L.nest_t.30 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.32) (jump L.nest_f.33)))) 
(define L.>=.8 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.30) (jump L.nest_f.31)))) 
))
'(begin
  (define L.nest_t.32 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.34)
  (jump L.nest_f.35)
  (define L.nest_t.30 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.32)
  (jump L.nest_f.33)
  (define L.>=.8 (set! rcx r15))
  (set! rdx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.30)
  (jump L.nest_f.31))
)

(check-equal? (flatten-program '(module (define L.nest_f.71 () (begin (set! rax 2622) (jump rcx))) 
(define L.nest_f.79 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.81 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.80 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.78 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.80) (jump L.nest_f.81)))) 
(define L.nest_f.73 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.78) (jump L.nest_f.79)))) 
))
'(begin
  (define L.nest_f.71 (set! rax 2622))
  (jump rcx)
  (define L.nest_f.79 (set! rax 2878))
  (jump rcx)
  (define L.nest_f.81 (set! rax 6))
  (jump rcx)
  (define L.nest_t.80 (set! rax 14))
  (jump rcx)
  (define L.nest_t.78 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if > L.nest_t.80)
  (jump L.nest_f.81)
  (define L.nest_f.73 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.78)
  (jump L.nest_f.79))
)

(check-equal? (flatten-program '(module (define L.nest_f.75 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.77 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.76 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.74 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.76) (jump L.nest_f.77)))) 
(define L.nest_t.72 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.74) (jump L.nest_f.75)))) 
))
'(begin
  (define L.nest_f.75 (set! rax 2878))
  (jump rcx)
  (define L.nest_f.77 (set! rax 6))
  (jump rcx)
  (define L.nest_t.76 (set! rax 14))
  (jump rcx)
  (define L.nest_t.74 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if > L.nest_t.76)
  (jump L.nest_f.77)
  (define L.nest_t.72 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.74)
  (jump L.nest_f.75))
)

(check-equal? (flatten-program '(module (define L.nest_t.70 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.72) (jump L.nest_f.73)))) 
(define L.nest_f.57 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.70) (jump L.nest_f.71)))) 
(define L.nest_f.59 () (begin (set! rax 2622) (jump rcx))) 
(define L.nest_f.67 () (begin (set! rax 2878) (jump rcx))) 
))
'(begin
  (define L.nest_t.70 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.72)
  (jump L.nest_f.73)
  (define L.nest_f.57 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.70)
  (jump L.nest_f.71)
  (define L.nest_f.59 (set! rax 2622))
  (jump rcx)
  (define L.nest_f.67 (set! rax 2878))
  (jump rcx))
)

(check-equal? (flatten-program '(module (define L.nest_f.69 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.68 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.66 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.68) (jump L.nest_f.69)))) 
(define L.nest_f.61 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.66) (jump L.nest_f.67)))) 
))
'(begin
  (define L.nest_f.69 (set! rax 6))
  (jump rcx)
  (define L.nest_t.68 (set! rax 14))
  (jump rcx)
  (define L.nest_t.66 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if > L.nest_t.68)
  (jump L.nest_f.69)
  (define L.nest_f.61 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.66)
  (jump L.nest_f.67))
)

(check-equal? (flatten-program '(module (define L.nest_f.63 () (begin (set! rax 2878) (jump rcx))) 
(define L.nest_f.65 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.64 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.62 () (begin (set! rsp rbx) (if (> rsp rdx) (jump L.nest_t.64) (jump L.nest_f.65)))) 
(define L.nest_t.60 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.62) (jump L.nest_f.63)))) 
(define L.nest_t.58 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.60) (jump L.nest_f.61)))) 
))
'(begin
  (define L.nest_f.63 (set! rax 2878))
  (jump rcx)
  (define L.nest_f.65 (set! rax 6))
  (jump rcx)
  (define L.nest_t.64 (set! rax 14))
  (jump rcx)
  (define L.nest_t.62 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if > L.nest_t.64)
  (jump L.nest_f.65)
  (define L.nest_t.60 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.62)
  (jump L.nest_f.63)
  (define L.nest_t.58 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.60)
  (jump L.nest_f.61))
)

(check-equal? (flatten-program '(module (define L.nest_t.56 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.58) (jump L.nest_f.59)))) 
(define L.>.7 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.56) (jump L.nest_f.57)))) 
(define L.nest_f.97 () (begin (set! rax 2110) (jump rcx))) 
(define L.nest_f.105 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.107 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.106 () (begin (set! rax 14) (jump rcx))) 
))
'(begin
  (define L.nest_t.56 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.58)
  (jump L.nest_f.59)
  (define L.>.7 (set! rcx r15))
  (set! rdx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.56)
  (jump L.nest_f.57)
  (define L.nest_f.97 (set! rax 2110))
  (jump rcx)
  (define L.nest_f.105 (set! rax 2366))
  (jump rcx)
  (define L.nest_f.107 (set! rax 6))
  (jump rcx)
  (define L.nest_t.106 (set! rax 14))
  (jump rcx))
)

(check-equal? (flatten-program '(module (define L.nest_t.104 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.106) (jump L.nest_f.107)))) 
(define L.nest_f.99 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.104) (jump L.nest_f.105)))) 
(define L.nest_f.101 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.103 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.102 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.100 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.102) (jump L.nest_f.103)))) 
(define L.nest_t.98 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.100) (jump L.nest_f.101)))) 
(define L.nest_t.96 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.98) (jump L.nest_f.99)))) 
))
'(begin
  (define L.nest_t.104 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if <= L.nest_t.106)
  (jump L.nest_f.107)
  (define L.nest_f.99 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.104)
  (jump L.nest_f.105)
  (define L.nest_f.101 (set! rax 2366))
  (jump rcx)
  (define L.nest_f.103 (set! rax 6))
  (jump rcx)
  (define L.nest_t.102 (set! rax 14))
  (jump rcx)
  (define L.nest_t.100 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if <= L.nest_t.102)
  (jump L.nest_f.103)
  (define L.nest_t.98 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.100)
  (jump L.nest_f.101)
  (define L.nest_t.96 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.98)
  (jump L.nest_f.99))
)

(check-equal? (flatten-program '(module (define L.nest_f.83 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.96) (jump L.nest_f.97)))) 
(define L.nest_f.85 () (begin (set! rax 2110) (jump rcx))) 
(define L.nest_f.93 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.95 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.94 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.92 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.94) (jump L.nest_f.95)))) 
(define L.nest_f.87 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.92) (jump L.nest_f.93)))) 
))
'(begin
  (define L.nest_f.83 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.96)
  (jump L.nest_f.97)
  (define L.nest_f.85 (set! rax 2110))
  (jump rcx)
  (define L.nest_f.93 (set! rax 2366))
  (jump rcx)
  (define L.nest_f.95 (set! rax 6))
  (jump rcx)
  (define L.nest_t.94 (set! rax 14))
  (jump rcx)
  (define L.nest_t.92 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if <= L.nest_t.94)
  (jump L.nest_f.95)
  (define L.nest_f.87 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.92)
  (jump L.nest_f.93))
)

(check-equal? (flatten-program '(module (define L.nest_f.89 () (begin (set! rax 2366) (jump rcx))) 
(define L.nest_f.91 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.90 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.88 () (begin (set! rsp rbx) (if (<= rsp rdx) (jump L.nest_t.90) (jump L.nest_f.91)))) 
(define L.nest_t.86 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.88) (jump L.nest_f.89)))) 
(define L.nest_t.84 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.86) (jump L.nest_f.87)))) 
(define L.nest_t.82 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.84) (jump L.nest_f.85)))) 
(define L.<=.6 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.82) (jump L.nest_f.83)))) 
))
'(begin
  (define L.nest_f.89 (set! rax 2366))
  (jump rcx)
  (define L.nest_f.91 (set! rax 6))
  (jump rcx)
  (define L.nest_t.90 (set! rax 14))
  (jump rcx)
  (define L.nest_t.88 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if <= L.nest_t.90)
  (jump L.nest_f.91)
  (define L.nest_t.86 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.88)
  (jump L.nest_f.89)
  (define L.nest_t.84 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.86)
  (jump L.nest_f.87)
  (define L.nest_t.82 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.84)
  (jump L.nest_f.85)
  (define L.<=.6 (set! rcx r15))
  (set! rdx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.82)
  (jump L.nest_f.83))
)

(check-equal? (flatten-program '(module (define L.nest_f.123 () (begin (set! rax 1598) (jump rcx))) 
(define L.nest_f.131 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.133 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.132 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.130 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.132) (jump L.nest_f.133)))) 
(define L.nest_f.125 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.130) (jump L.nest_f.131)))) 
(define L.nest_f.127 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.129 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.128 () (begin (set! rax 14) (jump rcx))) 
))
'(begin
  (define L.nest_f.123 (set! rax 1598))
  (jump rcx)
  (define L.nest_f.131 (set! rax 1854))
  (jump rcx)
  (define L.nest_f.133 (set! rax 6))
  (jump rcx)
  (define L.nest_t.132 (set! rax 14))
  (jump rcx)
  (define L.nest_t.130 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if < L.nest_t.132)
  (jump L.nest_f.133)
  (define L.nest_f.125 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.130)
  (jump L.nest_f.131)
  (define L.nest_f.127 (set! rax 1854))
  (jump rcx)
  (define L.nest_f.129 (set! rax 6))
  (jump rcx)
  (define L.nest_t.128 (set! rax 14))
  (jump rcx))
)

(check-equal? (flatten-program '(module (define L.nest_t.126 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.128) (jump L.nest_f.129)))) 
(define L.nest_t.124 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.126) (jump L.nest_f.127)))) 
(define L.nest_t.122 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.124) (jump L.nest_f.125)))) 
(define L.nest_f.109 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.122) (jump L.nest_f.123)))) 
(define L.nest_f.111 () (begin (set! rax 1598) (jump rcx))) 
(define L.nest_f.119 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.121 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.120 () (begin (set! rax 14) (jump rcx))) 
))
'(begin
  (define L.nest_t.126 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if < L.nest_t.128)
  (jump L.nest_f.129)
  (define L.nest_t.124 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.126)
  (jump L.nest_f.127)
  (define L.nest_t.122 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.124)
  (jump L.nest_f.125)
  (define L.nest_f.109 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.122)
  (jump L.nest_f.123)
  (define L.nest_f.111 (set! rax 1598))
  (jump rcx)
  (define L.nest_f.119 (set! rax 1854))
  (jump rcx)
  (define L.nest_f.121 (set! rax 6))
  (jump rcx)
  (define L.nest_t.120 (set! rax 14))
  (jump rcx))
)

(check-equal? (flatten-program '(module (define L.nest_t.118 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.120) (jump L.nest_f.121)))) 
(define L.nest_f.113 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.118) (jump L.nest_f.119)))) 
(define L.nest_f.115 () (begin (set! rax 1854) (jump rcx))) 
(define L.nest_f.117 () (begin (set! rax 6) (jump rcx))) 
(define L.nest_t.116 () (begin (set! rax 14) (jump rcx))) 
(define L.nest_t.114 () (begin (set! rsp rbx) (if (< rsp rdx) (jump L.nest_t.116) (jump L.nest_f.117)))) 
(define L.nest_t.112 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.114) (jump L.nest_f.115)))) 
))
'(begin
  (define L.nest_t.118 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if < L.nest_t.120)
  (jump L.nest_f.121)
  (define L.nest_f.113 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.118)
  (jump L.nest_f.119)
  (define L.nest_f.115 (set! rax 1854))
  (jump rcx)
  (define L.nest_f.117 (set! rax 6))
  (jump rcx)
  (define L.nest_t.116 (set! rax 14))
  (jump rcx)
  (define L.nest_t.114 (set! rsp rbx))
  (compare rsp rdx)
  (jump-if < L.nest_t.116)
  (jump L.nest_f.117)
  (define L.nest_t.112 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.114)
  (jump L.nest_f.115))
)

(check-equal? (flatten-program '(module (define L.nest_t.110 () (begin (set! rsp rdx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.112) (jump L.nest_f.113)))) 
(define L.nest_t.108 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.110) (jump L.nest_f.111)))) 
(define L.<.5 () (begin (set! rcx r15) (set! rdx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.108) (jump L.nest_f.109)))) 
(define L.nest_f.145 () (begin (set! rax 1086) (jump rdx))) 
(define L.nest_f.151 () (begin (set! rax 1342) (jump rdx))) 
))
'(begin
  (define L.nest_t.110 (set! rsp rdx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.112)
  (jump L.nest_f.113)
  (define L.nest_t.108 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.110)
  (jump L.nest_f.111)
  (define L.<.5 (set! rcx r15))
  (set! rdx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.108)
  (jump L.nest_f.109)
  (define L.nest_f.145 (set! rax 1086))
  (jump rdx)
  (define L.nest_f.151 (set! rax 1342))
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_t.150 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.147 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.150) (jump L.nest_f.151)))) 
(define L.nest_f.149 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.148 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.146 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.148) (jump L.nest_f.149)))) 
(define L.nest_t.144 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.146) (jump L.nest_f.147)))) 
))
'(begin
  (define L.nest_t.150 (set! rsp rbx))
  (set! rsp (- rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_f.147 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.150)
  (jump L.nest_f.151)
  (define L.nest_f.149 (set! rax 1342))
  (jump rdx)
  (define L.nest_t.148 (set! rsp rbx))
  (set! rsp (- rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_t.146 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.148)
  (jump L.nest_f.149)
  (define L.nest_t.144 (set! rsp rcx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.146)
  (jump L.nest_f.147))
)

(check-equal? (flatten-program '(module (define L.nest_f.135 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.144) (jump L.nest_f.145)))) 
(define L.nest_f.137 () (begin (set! rax 1086) (jump rdx))) 
(define L.nest_f.143 () (begin (set! rax 1342) (jump rdx))) 
(define L.nest_t.142 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.139 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.142) (jump L.nest_f.143)))) 
(define L.nest_f.141 () (begin (set! rax 1342) (jump rdx))) 
))
'(begin
  (define L.nest_f.135 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.144)
  (jump L.nest_f.145)
  (define L.nest_f.137 (set! rax 1086))
  (jump rdx)
  (define L.nest_f.143 (set! rax 1342))
  (jump rdx)
  (define L.nest_t.142 (set! rsp rbx))
  (set! rsp (- rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_f.139 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.142)
  (jump L.nest_f.143)
  (define L.nest_f.141 (set! rax 1342))
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_t.140 () (begin (set! rsp rbx) (set! rsp (- rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.138 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.140) (jump L.nest_f.141)))) 
(define L.nest_t.136 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.138) (jump L.nest_f.139)))) 
(define L.nest_t.134 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.136) (jump L.nest_f.137)))) 
(define L.-.4 () (begin (set! rdx r15) (set! rcx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.134) (jump L.nest_f.135)))) 
))
'(begin
  (define L.nest_t.140 (set! rsp rbx))
  (set! rsp (- rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_t.138 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.140)
  (jump L.nest_f.141)
  (define L.nest_t.136 (set! rsp rcx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.138)
  (jump L.nest_f.139)
  (define L.nest_t.134 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.136)
  (jump L.nest_f.137)
  (define L.-.4 (set! rdx r15))
  (set! rcx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.134)
  (jump L.nest_f.135))
)

(check-equal? (flatten-program '(module (define L.nest_f.163 () (begin (set! rax 574) (jump rdx))) 
(define L.nest_f.169 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.168 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.165 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.168) (jump L.nest_f.169)))) 
(define L.nest_f.167 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.166 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.164 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.166) (jump L.nest_f.167)))) 
(define L.nest_t.162 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.164) (jump L.nest_f.165)))) 
))
'(begin
  (define L.nest_f.163 (set! rax 574))
  (jump rdx)
  (define L.nest_f.169 (set! rax 830))
  (jump rdx)
  (define L.nest_t.168 (set! rsp rbx))
  (set! rsp (+ rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_f.165 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.168)
  (jump L.nest_f.169)
  (define L.nest_f.167 (set! rax 830))
  (jump rdx)
  (define L.nest_t.166 (set! rsp rbx))
  (set! rsp (+ rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_t.164 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.166)
  (jump L.nest_f.167)
  (define L.nest_t.162 (set! rsp rcx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.164)
  (jump L.nest_f.165))
)

(check-equal? (flatten-program '(module (define L.nest_f.153 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.162) (jump L.nest_f.163)))) 
(define L.nest_f.155 () (begin (set! rax 574) (jump rdx))) 
(define L.nest_f.161 () (begin (set! rax 830) (jump rdx))) 
(define L.nest_t.160 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_f.157 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.160) (jump L.nest_f.161)))) 
(define L.nest_f.159 () (begin (set! rax 830) (jump rdx))) 
))
'(begin
  (define L.nest_f.153 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.162)
  (jump L.nest_f.163)
  (define L.nest_f.155 (set! rax 574))
  (jump rdx)
  (define L.nest_f.161 (set! rax 830))
  (jump rdx)
  (define L.nest_t.160 (set! rsp rbx))
  (set! rsp (+ rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_f.157 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.160)
  (jump L.nest_f.161)
  (define L.nest_f.159 (set! rax 830))
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_t.158 () (begin (set! rsp rbx) (set! rsp (+ rsp rcx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.156 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.158) (jump L.nest_f.159)))) 
(define L.nest_t.154 () (begin (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.156) (jump L.nest_f.157)))) 
(define L.nest_t.152 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.154) (jump L.nest_f.155)))) 
))
'(begin
  (define L.nest_t.158 (set! rsp rbx))
  (set! rsp (+ rsp rcx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_t.156 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.158)
  (jump L.nest_f.159)
  (define L.nest_t.154 (set! rsp rcx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.156)
  (jump L.nest_f.157)
  (define L.nest_t.152 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.154)
  (jump L.nest_f.155))
)

(check-equal? (flatten-program '(module (define L.+.3 () (begin (set! rdx r15) (set! rcx rsi) (set! rbx rdi) (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.152) (jump L.nest_f.153)))) 
(define L.nest_f.181 () (begin (set! rax 62) (jump rdx))) 
(define L.nest_f.187 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.186 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
))
'(begin
  (define L.+.3 (set! rdx r15))
  (set! rcx rsi)
  (set! rbx rdi)
  (set! rsp rbx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.152)
  (jump L.nest_f.153)
  (define L.nest_f.181 (set! rax 62))
  (jump rdx)
  (define L.nest_f.187 (set! rax 318))
  (jump rdx)
  (define L.nest_t.186 (set! rsp rbx))
  (set! rbx (arithmetic-shift-right rsp 3))
  (set! rsp rcx)
  (set! rsp (* rsp rbx))
  (set! rax rsp)
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_f.183 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.186) (jump L.nest_f.187)))) 
(define L.nest_f.185 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.184 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
(define L.nest_t.182 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.184) (jump L.nest_f.185)))) 
(define L.nest_t.180 () (begin (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.182) (jump L.nest_f.183)))) 
))
'(begin
  (define L.nest_f.183 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.186)
  (jump L.nest_f.187)
  (define L.nest_f.185 (set! rax 318))
  (jump rdx)
  (define L.nest_t.184 (set! rsp rbx))
  (set! rbx (arithmetic-shift-right rsp 3))
  (set! rsp rcx)
  (set! rsp (* rsp rbx))
  (set! rax rsp)
  (jump rdx)
  (define L.nest_t.182 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.184)
  (jump L.nest_f.185)
  (define L.nest_t.180 (set! rsp rbx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.182)
  (jump L.nest_f.183))
)

(check-equal? (flatten-program '(module (define L.nest_f.171 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.180) (jump L.nest_f.181)))) 
(define L.nest_f.173 () (begin (set! rax 62) (jump rdx))) 
(define L.nest_f.179 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.178 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
))
'(begin
  (define L.nest_f.171 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.180)
  (jump L.nest_f.181)
  (define L.nest_f.173 (set! rax 62))
  (jump rdx)
  (define L.nest_f.179 (set! rax 318))
  (jump rdx)
  (define L.nest_t.178 (set! rsp rbx))
  (set! rbx (arithmetic-shift-right rsp 3))
  (set! rsp rcx)
  (set! rsp (* rsp rbx))
  (set! rax rsp)
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_f.175 () (begin (set! rsp 6) (if (neq? rsp 6) (jump L.nest_t.178) (jump L.nest_f.179)))) 
(define L.nest_f.177 () (begin (set! rax 318) (jump rdx))) 
(define L.nest_t.176 () (begin (set! rsp rbx) (set! rbx (arithmetic-shift-right rsp 3)) (set! rsp rcx) (set! rsp (* rsp rbx)) (set! rax rsp) (jump rdx))) 
))
'(begin
  (define L.nest_f.175 (set! rsp 6))
  (compare rsp 6)
  (jump-if neq? L.nest_t.178)
  (jump L.nest_f.179)
  (define L.nest_f.177 (set! rax 318))
  (jump rdx)
  (define L.nest_t.176 (set! rsp rbx))
  (set! rbx (arithmetic-shift-right rsp 3))
  (set! rsp rcx)
  (set! rsp (* rsp rbx))
  (set! rax rsp)
  (jump rdx))
)

(check-equal? (flatten-program '(module (define L.nest_t.174 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.176) (jump L.nest_f.177)))) 
(define L.nest_t.172 () (begin (set! rsp rbx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.174) (jump L.nest_f.175)))) 
))
'(begin
  (define L.nest_t.174 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.176)
  (jump L.nest_f.177)
  (define L.nest_t.172 (set! rsp rbx))
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.174)
  (jump L.nest_f.175))
)

(check-equal? (flatten-program '(module (define L.nest_t.170 () (begin (set! rsp 14) (if (neq? rsp 6) (jump L.nest_t.172) (jump L.nest_f.173)))) 
(define L.*.2 () (begin (set! rdx r15) (set! rbx rsi) (set! rcx rdi) (set! rsp rcx) (set! rsp (bitwise-and rsp 7)) (set! rsp rsp) (if (eq? rsp 0) (jump L.nest_t.170) (jump L.nest_f.171)))) 
))
'(begin
  (define L.nest_t.170 (set! rsp 14))
  (compare rsp 6)
  (jump-if neq? L.nest_t.172)
  (jump L.nest_f.173)
  (define L.*.2 (set! rdx r15))
  (set! rbx rsi)
  (set! rcx rdi)
  (set! rsp rcx)
  (set! rsp (bitwise-and rsp 7))
  (set! rsp rsp)
  (compare rsp 0)
  (jump-if eq? L.nest_t.170)
  (jump L.nest_f.171))
)

(check-equal? (flatten-program '(module (define L.nest_f.189 () (begin (set! rax 6) (jump r8))) 
(define L.nest_t.188 () (begin (set! rax 14) (jump r8))) 
(define L.eq?.1 () (begin (set! r8 r15) (set! rbx rsi) (set! rsp rdi) (set! rsp rsp) (if (eq? rsp rbx) (jump L.nest_t.188) (jump L.nest_f.189))))
))
'(begin
  (define L.nest_f.189 (set! rax 6))
  (jump r8)
  (define L.nest_t.188 (set! rax 14))
  (jump r8)
  (define L.eq?.1 (set! r8 r15))
  (set! rbx rsi)
  (set! rsp rdi)
  (set! rsp rsp)
  (compare rsp rbx)
  (jump-if eq? L.nest_t.188)
  (jump L.nest_f.189))
)

)

